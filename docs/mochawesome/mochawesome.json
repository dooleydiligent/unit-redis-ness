{
  "stats": {
    "suites": 88,
    "tests": 281,
    "passes": 280,
    "pending": 1,
    "failures": 0,
<<<<<<< HEAD
    "start": "2020-01-14T23:22:44.310Z",
    "end": "2020-01-14T23:22:55.197Z",
    "duration": 10887,
=======
    "start": "2020-01-14T23:20:04.624Z",
    "end": "2020-01-14T23:20:14.807Z",
    "duration": 10183,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
    "testsRegistered": 281,
    "passPercent": 100,
    "pendingPercent": 0.3558718861209964,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
<<<<<<< HEAD
      "uuid": "446f7183-3598-4288-8835-764cd738567b",
=======
      "uuid": "ea181462-51fb-427b-a7c1-a8650a7e7ba2",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook",
          "fullTitle": "\"before all\" hook",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "done();",
          "err": {},
<<<<<<< HEAD
          "uuid": "8421050e-32aa-4d30-859a-94ff9d0ec263",
          "parentUUID": "446f7183-3598-4288-8835-764cd738567b",
=======
          "uuid": "806ee8e8-9cdc-4bc8-b72c-fc7f3efbac69",
          "parentUUID": "ea181462-51fb-427b-a7c1-a8650a7e7ba2",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook",
          "fullTitle": "\"after all\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "__awaiter(void 0, void 0, void 0, function* () {\n})",
          "err": {},
<<<<<<< HEAD
          "uuid": "bfc99336-8c91-4c59-aeda-ee84bab2ba27",
          "parentUUID": "446f7183-3598-4288-8835-764cd738567b",
=======
          "uuid": "513c5e7d-20a7-4a31-b58b-c9c56ddf0cb4",
          "parentUUID": "ea181462-51fb-427b-a7c1-a8650a7e7ba2",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
<<<<<<< HEAD
          "uuid": "694b2c5f-089f-40c5-aaea-1384be387a45",
=======
          "uuid": "455ea694-9d0b-4fb3-86dd-59cb2067a4e7",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "dictionary test",
          "fullFile": "/home/lane/git/redis/test/dictionary.test.ts",
          "file": "/test/dictionary.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "dictionary test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dictionary = new dictionary_1.Dictionary();\nsinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "3b1c4c61-16cd-41bf-9537-7af2efc56faf",
              "parentUUID": "694b2c5f-089f-40c5-aaea-1384be387a45",
=======
              "uuid": "edc3720f-34f2-4dcb-a8ed-c62f3436788d",
              "parentUUID": "455ea694-9d0b-4fb3-86dd-59cb2067a4e7",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "dictionary test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "612ec8e5-4909-4d4c-8cf9-bd5427d34cd6",
              "parentUUID": "694b2c5f-089f-40c5-aaea-1384be387a45",
=======
              "uuid": "a54d9994-8751-4604-9add-5b7af2a7f837",
              "parentUUID": "455ea694-9d0b-4fb3-86dd-59cb2067a4e7",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "dictionary test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "160d5720-6fe0-444d-957e-89d9cc567347",
              "parentUUID": "694b2c5f-089f-40c5-aaea-1384be387a45",
=======
              "uuid": "be62c04a-d85e-421e-b991-3aa896723536",
              "parentUUID": "455ea694-9d0b-4fb3-86dd-59cb2067a4e7",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should construct",
              "fullTitle": "dictionary test should construct",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        chai_1.expect(dictionary.constructor.name).to.equal('Dictionary');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "675104a7-5522-4e55-9730-d66fef179b4e",
              "parentUUID": "694b2c5f-089f-40c5-aaea-1384be387a45",
=======
              "uuid": "c19e9ba0-9dc1-416a-8250-7a6df7a347f4",
              "parentUUID": "455ea694-9d0b-4fb3-86dd-59cb2067a4e7",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should implement basic put/get/remove/size/clear/contains/exists/keys/values functionality",
              "fullTitle": "dictionary test should implement basic put/get/remove/size/clear/contains/exists/keys/values functionality",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 2,
=======
              "duration": 1,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dictionary.put('item', 'one');\nchai_1.expect(dictionary.exists('item')).to.equal(true);\nchai_1.expect(dictionary.exists('one')).to.equal(false);\nchai_1.expect(dictionary.get('item')).to.equal('one');\nchai_1.expect(dictionary.size()).to.equal(1);\nchai_1.expect(dictionary.contains('one')).to.equal(true);\nchai_1.expect(dictionary.keys().length).to.equal(1);\nchai_1.expect(dictionary.values().length).to.equal(1);\ndictionary.put('item', 'two');\nchai_1.expect(dictionary.get('item')).to.equal('two');\ndictionary.put('one', { embedded: true });\ndictionary.remove('three');\nchai_1.expect(dictionary.size()).to.equal(2);\nlet foundTwo = false;\nfor (const each of dictionary) {\n    if (!foundTwo) {\n        chai_1.expect(each).to.equal('two');\n        foundTwo = true;\n    }\n    else {\n        chai_1.expect(each).to.eql({ embedded: true });\n    }\n}\ndictionary.remove('item');\nchai_1.expect(dictionary.size()).to.equal(1);\ndictionary.clear();\nchai_1.expect(dictionary.size()).to.equal(0);",
              "err": {},
<<<<<<< HEAD
              "uuid": "f8064af7-2d7c-4d8a-8b3d-e1849a082434",
              "parentUUID": "694b2c5f-089f-40c5-aaea-1384be387a45",
=======
              "uuid": "5dc220e6-6419-4595-9806-fbafb5bcb53b",
              "parentUUID": "455ea694-9d0b-4fb3-86dd-59cb2067a4e7",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "675104a7-5522-4e55-9730-d66fef179b4e",
            "f8064af7-2d7c-4d8a-8b3d-e1849a082434"
=======
            "c19e9ba0-9dc1-416a-8250-7a6df7a347f4",
            "5dc220e6-6419-4595-9806-fbafb5bcb53b"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 6,
=======
          "duration": 3,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "51695780-d9f8-4c0d-b736-7be44467b0dd",
=======
          "uuid": "a1f8c564-2bcd-402b-83e0-80dddb84d7d8",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "logger test",
          "fullFile": "/home/lane/git/redis/test/logger.test.ts",
          "file": "/test/logger.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "logger test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "62aa5167-3d39-4b20-9dcf-947d20140190",
              "parentUUID": "51695780-d9f8-4c0d-b736-7be44467b0dd",
=======
              "uuid": "db6ddff2-49f2-45db-b904-007afeadae6e",
              "parentUUID": "a1f8c564-2bcd-402b-83e0-80dddb84d7d8",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "logger test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "780e4ec7-c78e-464b-b60d-b15f4fc15552",
              "parentUUID": "51695780-d9f8-4c0d-b736-7be44467b0dd",
=======
              "uuid": "388c4972-2020-4639-bfd1-9cc62d2c7e85",
              "parentUUID": "a1f8c564-2bcd-402b-83e0-80dddb84d7d8",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "logger test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "030143b6-aa20-4924-9535-f3a28c7a6db5",
              "parentUUID": "51695780-d9f8-4c0d-b736-7be44467b0dd",
=======
              "uuid": "b54f6572-1a02-422e-856d-a06655662d8b",
              "parentUUID": "a1f8c564-2bcd-402b-83e0-80dddb84d7d8",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should construct",
              "fullTitle": "logger test should construct",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        logger = new logger_1.Logger(module.id);\n        chai_1.expect(logger.constructor.name).to.equal('Logger');\n        logger.info(`This is an info message`);\n        logger.warn('This is a warning message');\n        logger.debug(`This is an invisible debug message`);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "39a58bea-ed3a-4b1e-8aff-90168053b606",
              "parentUUID": "51695780-d9f8-4c0d-b736-7be44467b0dd",
=======
              "uuid": "3d6ca546-609b-4c2b-8ccb-4a0fcc02e4bb",
              "parentUUID": "a1f8c564-2bcd-402b-83e0-80dddb84d7d8",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not construct when initialized with an empty string",
              "fullTitle": "logger test should not construct when initialized with an empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(() => {\n    logger = new logger_1.Logger('');\n}).to.throw();",
              "err": {},
<<<<<<< HEAD
              "uuid": "4cc9a3c9-5697-40ea-b00e-9eb13ddf577a",
              "parentUUID": "51695780-d9f8-4c0d-b736-7be44467b0dd",
=======
              "uuid": "9bd4d7b1-8fd0-474a-945b-f1f68be6eae7",
              "parentUUID": "a1f8c564-2bcd-402b-83e0-80dddb84d7d8",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "39a58bea-ed3a-4b1e-8aff-90168053b606",
            "4cc9a3c9-5697-40ea-b00e-9eb13ddf577a"
=======
            "3d6ca546-609b-4c2b-8ccb-4a0fcc02e4bb",
            "9bd4d7b1-8fd0-474a-945b-f1f68be6eae7"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 2,
=======
          "duration": 1,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "3515a7a0-4314-4dc4-84cd-66a08cee3d4b",
=======
          "uuid": "3cc3bbcb-30b6-4451-b184-7ac01e5e5e6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "client command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/client-command.test.ts",
          "file": "/test/resp/command/client-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "client command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 27,
=======
              "duration": 24,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "842f9ec8-82fc-49e0-a32a-0ddbd38b5273",
              "parentUUID": "3515a7a0-4314-4dc4-84cd-66a08cee3d4b",
=======
              "uuid": "c9d34967-6fdc-4a6d-a1b2-2da2f7bbf64f",
              "parentUUID": "3cc3bbcb-30b6-4451-b184-7ac01e5e5e6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "client command test \"before each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "a7ef9b05-4664-48e9-b19f-bc02dc6a15e9",
              "parentUUID": "3515a7a0-4314-4dc4-84cd-66a08cee3d4b",
=======
              "uuid": "5cc2f1f2-0f09-4af9-a423-b8e804d679c1",
              "parentUUID": "3cc3bbcb-30b6-4451-b184-7ac01e5e5e6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "client command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "744d1442-75b5-4dc6-9531-7a9a04eb313a",
              "parentUUID": "3515a7a0-4314-4dc4-84cd-66a08cee3d4b",
=======
              "uuid": "97fb4a31-3554-4ddb-943d-1ead5ed01992",
              "parentUUID": "3cc3bbcb-30b6-4451-b184-7ac01e5e5e6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "client command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "a1f2672f-5a74-4e0f-b180-fa2835126aa2",
              "parentUUID": "3515a7a0-4314-4dc4-84cd-66a08cee3d4b",
=======
              "uuid": "650b2409-37c2-4b67-84d3-c423efcafcd2",
              "parentUUID": "3cc3bbcb-30b6-4451-b184-7ac01e5e5e6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow more than 3 parameters",
              "fullTitle": "client command test should not allow more than 3 parameters",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 27,
=======
              "duration": 14,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'one', 'two', 'three', 'four']);\n        chai_1.expect(response).to.equal('ReplyError: ERR Unknown subcommand or wrong number of arguments for \\'one\\'. Try CLIENT HELP');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "94285f68-9a69-4770-a0b5-0b68bbb5542d",
              "parentUUID": "3515a7a0-4314-4dc4-84cd-66a08cee3d4b",
=======
              "uuid": "49b69c8e-c8be-4a45-83ea-25a7e89ed6f4",
              "parentUUID": "3cc3bbcb-30b6-4451-b184-7ac01e5e5e6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail predictably when an unknown subcommand is passed",
              "fullTitle": "client command test should fail predictably when an unknown subcommand is passed",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 2,
=======
              "duration": 4,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'whatever']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'whatever'));\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "267498e9-c9e7-47bd-9102-2760d6eaf4b4",
              "parentUUID": "3515a7a0-4314-4dc4-84cd-66a08cee3d4b",
=======
              "uuid": "a202f514-42df-4bad-b187-bebda70cfbd0",
              "parentUUID": "3cc3bbcb-30b6-4451-b184-7ac01e5e5e6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a NIL name when called with \"GETNAME\" subcommand",
              "fullTitle": "client command test should return a NIL name when called with \"GETNAME\" subcommand",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'getname']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "93bd8be8-a31e-435e-9450-cada66cc6f82",
              "parentUUID": "3515a7a0-4314-4dc4-84cd-66a08cee3d4b",
=======
              "uuid": "f291a3e2-f8fa-4615-873b-776871583fea",
              "parentUUID": "3cc3bbcb-30b6-4451-b184-7ac01e5e5e6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail predictably when \"GETNAME\" is called with too many parameters",
              "fullTitle": "client command test should fail predictably when \"GETNAME\" is called with too many parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'getname', 'extra']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'getname'));\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "7e91de28-4fc2-4f23-8a8a-fb06353d54c8",
              "parentUUID": "3515a7a0-4314-4dc4-84cd-66a08cee3d4b",
=======
              "uuid": "446bfc47-a909-4854-9514-a7d07dbd0c09",
              "parentUUID": "3cc3bbcb-30b6-4451-b184-7ac01e5e5e6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with \"OK\" when \"setname\" is called with a valid name",
              "fullTitle": "client command test should respond with \"OK\" when \"setname\" is called with a valid name",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['client', 'setname', 'whatever']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['client', 'getname']);\n        chai_1.expect(response).to.equal('whatever');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "e6c82e99-19cd-44af-9217-8973665d9d43",
              "parentUUID": "3515a7a0-4314-4dc4-84cd-66a08cee3d4b",
=======
              "uuid": "4854a1ba-7afe-4020-927e-74bbbe1ab515",
              "parentUUID": "3cc3bbcb-30b6-4451-b184-7ac01e5e5e6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should persist the value for \"setname\" across tests",
              "fullTitle": "client command test should persist the value for \"setname\" across tests",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'getname']);\n        chai_1.expect(response).to.equal('whatever');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "16e13fe2-4239-4682-8b8a-fb1e0c9fa5c4",
              "parentUUID": "3515a7a0-4314-4dc4-84cd-66a08cee3d4b",
=======
              "uuid": "f87541cf-c8ee-4bc0-b15a-c7fba8a6582c",
              "parentUUID": "3cc3bbcb-30b6-4451-b184-7ac01e5e5e6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"setname\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"setname\" called with too many parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'setname', 'test', 'two']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'setname'));\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "2dce8b95-7a55-46ff-b733-f3b986c32870",
              "parentUUID": "3515a7a0-4314-4dc4-84cd-66a08cee3d4b",
=======
              "uuid": "6aebbed3-d983-4040-9d00-92957b2e6c07",
              "parentUUID": "3cc3bbcb-30b6-4451-b184-7ac01e5e5e6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow whitespace in \"setname\" subcommand",
              "fullTitle": "client command test should not allow whitespace in \"setname\" subcommand",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'setname', 'te\\nst']);\n        chai_1.expect(response).to.equal(`ReplyError: ERR Client names cannot contain spaces, newlines or special characters.`);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "5ad9a6ab-b65e-4413-95dd-52aac4797258",
              "parentUUID": "3515a7a0-4314-4dc4-84cd-66a08cee3d4b",
=======
              "uuid": "99b9fc60-57dd-492b-8d5a-bac73b6966a7",
              "parentUUID": "3cc3bbcb-30b6-4451-b184-7ac01e5e5e6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the server-assigned client id",
              "fullTitle": "client command test should return the server-assigned client id",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'id']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(String(response).length).to.be.greaterThan(0);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "a7b349f3-4518-4bd1-ac4b-9e79e9b7344f",
              "parentUUID": "3515a7a0-4314-4dc4-84cd-66a08cee3d4b",
=======
              "uuid": "2ba96c9e-8663-497f-b997-3edc604b6e08",
              "parentUUID": "3cc3bbcb-30b6-4451-b184-7ac01e5e5e6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"id\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"id\" called with too many parameters",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'id', 'test', 'two']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'id'));\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "a8ab4a90-e714-4dc5-b263-3a79714ac78a",
              "parentUUID": "3515a7a0-4314-4dc4-84cd-66a08cee3d4b",
=======
              "uuid": "54371ba7-a811-41b1-b097-ba72d0057fa3",
              "parentUUID": "3cc3bbcb-30b6-4451-b184-7ac01e5e5e6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a bunch of information when client \"list\" subcommand is invoked",
              "fullTitle": "client command test should return a bunch of information when client \"list\" subcommand is invoked",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'list']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response.length).to.be.greaterThan(0);\n        chai_1.expect(response).to.match(/ name=whatever /);\n        chai_1.expect(response).to.match(/\\bdb=0\\b/);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "c8dc2d29-71e8-4e1b-9136-17b35d2ecfb6",
              "parentUUID": "3515a7a0-4314-4dc4-84cd-66a08cee3d4b",
=======
              "uuid": "4c5c2be5-059b-429e-bb1b-a9a1207db84c",
              "parentUUID": "3cc3bbcb-30b6-4451-b184-7ac01e5e5e6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"list\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"list\" called with too many parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'list', 'test', 'two']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "132c8cdf-6138-4843-81a0-eb880f5259ab",
              "parentUUID": "3515a7a0-4314-4dc4-84cd-66a08cee3d4b",
=======
              "uuid": "12a4fcc7-30f4-4b3e-9197-b8b8b9e8a048",
              "parentUUID": "3cc3bbcb-30b6-4451-b184-7ac01e5e5e6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "94285f68-9a69-4770-a0b5-0b68bbb5542d",
            "267498e9-c9e7-47bd-9102-2760d6eaf4b4",
            "93bd8be8-a31e-435e-9450-cada66cc6f82",
            "7e91de28-4fc2-4f23-8a8a-fb06353d54c8",
            "e6c82e99-19cd-44af-9217-8973665d9d43",
            "16e13fe2-4239-4682-8b8a-fb1e0c9fa5c4",
            "2dce8b95-7a55-46ff-b733-f3b986c32870",
            "5ad9a6ab-b65e-4413-95dd-52aac4797258",
            "a7b349f3-4518-4bd1-ac4b-9e79e9b7344f",
            "a8ab4a90-e714-4dc5-b263-3a79714ac78a",
            "c8dc2d29-71e8-4e1b-9136-17b35d2ecfb6",
            "132c8cdf-6138-4843-81a0-eb880f5259ab"
=======
            "49b69c8e-c8be-4a45-83ea-25a7e89ed6f4",
            "a202f514-42df-4bad-b187-bebda70cfbd0",
            "f291a3e2-f8fa-4615-873b-776871583fea",
            "446bfc47-a909-4854-9514-a7d07dbd0c09",
            "4854a1ba-7afe-4020-927e-74bbbe1ab515",
            "f87541cf-c8ee-4bc0-b15a-c7fba8a6582c",
            "6aebbed3-d983-4040-9d00-92957b2e6c07",
            "99b9fc60-57dd-492b-8d5a-bac73b6966a7",
            "2ba96c9e-8663-497f-b997-3edc604b6e08",
            "54371ba7-a811-41b1-b097-ba72d0057fa3",
            "4c5c2be5-059b-429e-bb1b-a9a1207db84c",
            "12a4fcc7-30f4-4b3e-9197-b8b8b9e8a048"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 55,
=======
          "duration": 42,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "2b4ed793-30c8-485d-a703-3802b6a73f17",
=======
          "uuid": "fb067485-9d3a-4b73-a09c-f7956cd2b494",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "flushall-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/db/flushall-command.test.ts",
          "file": "/test/resp/command/db/flushall-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "flushall-command test \"before all\" hook",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    done();\n}));\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "c4b5654c-3197-4889-a5bc-065fdbdbfc7b",
              "parentUUID": "2b4ed793-30c8-485d-a703-3802b6a73f17",
=======
              "uuid": "c47556a2-ccda-4882-84e7-0ea10e598a7f",
              "parentUUID": "fb067485-9d3a-4b73-a09c-f7956cd2b494",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "flushall-command test \"before each\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "6da7373d-5dab-4e95-b0dc-fe2353d09d13",
              "parentUUID": "2b4ed793-30c8-485d-a703-3802b6a73f17",
=======
              "uuid": "656c4152-c07c-42fc-835a-9cea201a5682",
              "parentUUID": "fb067485-9d3a-4b73-a09c-f7956cd2b494",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "flushall-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "6fe63999-f5a1-4194-bb17-6ab359a0d354",
              "parentUUID": "2b4ed793-30c8-485d-a703-3802b6a73f17",
=======
              "uuid": "91da109a-5c33-44dd-a194-11453d4eb79f",
              "parentUUID": "fb067485-9d3a-4b73-a09c-f7956cd2b494",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "flushall-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "3779a323-b00c-4641-b9c2-5eb24fbf3cd3",
              "parentUUID": "2b4ed793-30c8-485d-a703-3802b6a73f17",
=======
              "uuid": "c3829a8d-c862-4129-b361-c8bd25e7561c",
              "parentUUID": "fb067485-9d3a-4b73-a09c-f7956cd2b494",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should remove all keys from all databases",
              "fullTitle": "flushall-command test should remove all keys from all databases",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 174,
=======
              "duration": 177,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let db = 0; db < 16; db++) {\n            response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['set', 'dbid', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            console.log(`DB: ${db}: dbsize: ${response}`);\n            chai_1.expect(response).to.equal(1);\n        }\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        for (let db = 0; db < 16; db++) {\n            response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.equal(0);\n        }\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "4dbcb90c-ba4f-47be-8ed7-42e0a9434385",
              "parentUUID": "2b4ed793-30c8-485d-a703-3802b6a73f17",
=======
              "uuid": "6e13d14b-4872-4f81-8698-e5184b685233",
              "parentUUID": "fb067485-9d3a-4b73-a09c-f7956cd2b494",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "4dbcb90c-ba4f-47be-8ed7-42e0a9434385"
=======
            "6e13d14b-4872-4f81-8698-e5184b685233"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 174,
=======
          "duration": 177,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "99a9d454-3164-436d-945a-3929462ee586",
=======
          "uuid": "8e1f4a03-c3d7-407c-98ff-f404005b3ffb",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "flushdb-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/db/flushdb-command.test.ts",
          "file": "/test/resp/command/db/flushdb-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "flushdb-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 43,
=======
              "duration": 11,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "2f71f95e-6d66-4171-b7ac-494fa027acc6",
              "parentUUID": "99a9d454-3164-436d-945a-3929462ee586",
=======
              "uuid": "d02e8dc4-76b5-4154-aa45-9e5669248bc1",
              "parentUUID": "8e1f4a03-c3d7-407c-98ff-f404005b3ffb",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "flushdb-command test \"before each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "7df3f772-e2ca-46cb-b479-06235d0af344",
              "parentUUID": "99a9d454-3164-436d-945a-3929462ee586",
=======
              "uuid": "cf9cea85-6803-4b5e-a5e9-2a86c43399b8",
              "parentUUID": "8e1f4a03-c3d7-407c-98ff-f404005b3ffb",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "flushdb-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "73ad0e25-71ab-4000-8293-9604b636f1f6",
              "parentUUID": "99a9d454-3164-436d-945a-3929462ee586",
=======
              "uuid": "734a4fed-350d-4ce9-85e3-1b6bee508a73",
              "parentUUID": "8e1f4a03-c3d7-407c-98ff-f404005b3ffb",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "flushdb-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "f566e73d-6ee3-473a-ba32-ad0f5cfb909b",
              "parentUUID": "99a9d454-3164-436d-945a-3929462ee586",
=======
              "uuid": "6dd4312e-347b-4d97-8b88-5bc726f64b9f",
              "parentUUID": "8e1f4a03-c3d7-407c-98ff-f404005b3ffb",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should remove all keys from only the currently selected databases",
              "fullTitle": "flushdb-command test should remove all keys from only the currently selected databases",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 261,
=======
              "duration": 243,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let db = 0; db < 16; db++) {\n            response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['set', 'dbid', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.equal(1);\n        }\n        for (let db = 0; db < 16; db++) {\n            if (db !== 14) {\n                response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n                chai_1.expect(response).to.equal('OK');\n                response = yield common_test_1.sendCommand(client, ['flushdb']);\n                chai_1.expect(response).to.equal('OK');\n                response = yield common_test_1.sendCommand(client, ['exists', 'dbid']);\n                chai_1.expect(response).to.equal(0);\n                response = yield common_test_1.sendCommand(client, ['dbsize']);\n                chai_1.expect(response).to.equal(0);\n            }\n        }\n        response = yield common_test_1.sendCommand(client, ['select', '14']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'dbid']);\n        chai_1.expect(response).to.equal('14');\n        response = yield common_test_1.sendCommand(client, ['dbsize']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "d3e7d292-3353-41bf-a0ad-16d33c08214d",
              "parentUUID": "99a9d454-3164-436d-945a-3929462ee586",
=======
              "uuid": "41e87509-8f97-4104-838c-9d8ec66a78e2",
              "parentUUID": "8e1f4a03-c3d7-407c-98ff-f404005b3ffb",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "d3e7d292-3353-41bf-a0ad-16d33c08214d"
=======
            "41e87509-8f97-4104-838c-9d8ec66a78e2"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 261,
=======
          "duration": 243,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "b08e2a9f-67b8-4c8c-ad83-58b7a3f9abcb",
=======
          "uuid": "6246ec8c-3970-448e-b28b-60989efab7ce",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "hget command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/hash/hget-command.test.ts",
          "file": "/test/resp/command/hash/hget-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "hget command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 44,
=======
              "duration": 25,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "380fb049-f571-4fc6-8658-aeebd44e45d8",
              "parentUUID": "b08e2a9f-67b8-4c8c-ad83-58b7a3f9abcb",
=======
              "uuid": "6f70fb05-3583-40d9-acc6-1b05002f9cda",
              "parentUUID": "6246ec8c-3970-448e-b28b-60989efab7ce",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "hget command test \"before each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "3585fef1-96af-497a-9064-ca2dd8104481",
              "parentUUID": "b08e2a9f-67b8-4c8c-ad83-58b7a3f9abcb",
=======
              "uuid": "0571ac14-241a-44ee-9e0c-2fbabebc625c",
              "parentUUID": "6246ec8c-3970-448e-b28b-60989efab7ce",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "hget command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "6924a6f1-73eb-40fa-9696-a53b671ecb3b",
              "parentUUID": "b08e2a9f-67b8-4c8c-ad83-58b7a3f9abcb",
=======
              "uuid": "de8ce3d9-55fb-437b-a6b9-c90ffedcd7c6",
              "parentUUID": "6246ec8c-3970-448e-b28b-60989efab7ce",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "hget command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "9fefe878-0219-4739-b3ec-eccb8d16b726",
              "parentUUID": "b08e2a9f-67b8-4c8c-ad83-58b7a3f9abcb",
=======
              "uuid": "fc518c31-0e64-4dd2-8ce0-b95ab948b2f8",
              "parentUUID": "6246ec8c-3970-448e-b28b-60989efab7ce",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require exactly 2 parameters",
              "fullTitle": "hget command test should require exactly 2 parameters",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 6,
=======
              "duration": 8,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['hget', 'test'])\n    .then((response1) => {\n    chai_1.expect(response1).to.equal('ReplyError: ERR wrong number of arguments for \\'hget\\' command');\n    common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'one', 'two'])\n        .then((response2) => {\n        chai_1.expect(response2).to.equal('ReplyError: ERR wrong number of arguments for \\'hget\\' command');\n        common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'one'])\n            .then((response3) => {\n            chai_1.expect(response3).to.equal(null);\n            done();\n        });\n    });\n});",
              "err": {},
<<<<<<< HEAD
              "uuid": "c754f213-d3b3-43ae-be91-f09891d769bb",
              "parentUUID": "b08e2a9f-67b8-4c8c-ad83-58b7a3f9abcb",
=======
              "uuid": "58e6c7c6-8412-41dc-a610-e5d006bc9334",
              "parentUUID": "6246ec8c-3970-448e-b28b-60989efab7ce",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a value after it has be set",
              "fullTitle": "hget command test should get a value after it has be set",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['hset', 'test', 'one', 'two'])\n    .then(() => {\n    common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'one'])\n        .then((response) => {\n        chai_1.expect(response).to.equal('two');\n        done();\n    });\n});",
              "err": {},
<<<<<<< HEAD
              "uuid": "92306d48-0053-475e-8ffd-06a581ed87e5",
              "parentUUID": "b08e2a9f-67b8-4c8c-ad83-58b7a3f9abcb",
=======
              "uuid": "fa4283b7-8695-4eb5-921b-c629a952ef6f",
              "parentUUID": "6246ec8c-3970-448e-b28b-60989efab7ce",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return nil string when the key exists but the field does not",
              "fullTitle": "hget command test should return nil string when the key exists but the field does not",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 2,
=======
              "duration": 3,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'two'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(null);\n    done();\n});",
              "err": {},
<<<<<<< HEAD
              "uuid": "f6cefb16-4a74-4f3e-a383-0cf33f21e672",
              "parentUUID": "b08e2a9f-67b8-4c8c-ad83-58b7a3f9abcb",
=======
              "uuid": "9ff14873-40c5-4b63-9f7e-06bd42d0d788",
              "parentUUID": "6246ec8c-3970-448e-b28b-60989efab7ce",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "c754f213-d3b3-43ae-be91-f09891d769bb",
            "92306d48-0053-475e-8ffd-06a581ed87e5",
            "f6cefb16-4a74-4f3e-a383-0cf33f21e672"
=======
            "58e6c7c6-8412-41dc-a610-e5d006bc9334",
            "fa4283b7-8695-4eb5-921b-c629a952ef6f",
            "9ff14873-40c5-4b63-9f7e-06bd42d0d788"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 13,
=======
          "duration": 16,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "46473d45-7455-4926-a527-32bf7e5c358f",
=======
          "uuid": "9d082182-1921-4fbd-b14d-726e076f1417",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "hset command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/hash/hset-command.test.ts",
          "file": "/test/resp/command/hash/hset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "hset command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 24,
=======
              "duration": 16,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(new net.Socket(), ['flushall']);\n    done();\n}));\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "b754b2b1-f206-4143-a1f5-c82596477b3f",
              "parentUUID": "46473d45-7455-4926-a527-32bf7e5c358f",
=======
              "uuid": "f79315e5-6629-4a00-ae89-718c034b0165",
              "parentUUID": "9d082182-1921-4fbd-b14d-726e076f1417",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "hset command test \"before each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "d1f7cdfc-99c1-4e27-a3f7-0a600437ced7",
              "parentUUID": "46473d45-7455-4926-a527-32bf7e5c358f",
=======
              "uuid": "449517d1-8191-4a02-b9a1-e1a2c5e75da6",
              "parentUUID": "9d082182-1921-4fbd-b14d-726e076f1417",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "hset command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "011d12c0-9899-425a-b272-c6fb14a5e834",
              "parentUUID": "46473d45-7455-4926-a527-32bf7e5c358f",
=======
              "uuid": "05814273-a04f-4ffa-8985-cc88671283d2",
              "parentUUID": "9d082182-1921-4fbd-b14d-726e076f1417",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "hset command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "c7ad7066-b3b1-4022-bd91-8d5aefeccb3d",
              "parentUUID": "46473d45-7455-4926-a527-32bf7e5c358f",
=======
              "uuid": "a60cd83a-5964-4cb9-984f-d6bb8acc05e1",
              "parentUUID": "9d082182-1921-4fbd-b14d-726e076f1417",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require a minimum of 3 parameters",
              "fullTitle": "hset command test should require a minimum of 3 parameters",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 24,
=======
              "duration": 43,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = safeId();\n        chai_1.expect(uniqueKey).not.to.equal(lastId);\n        lastId = uniqueKey;\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey]);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for \\'hset\\' command/i);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one']);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for \\'hm?set\\' command/i);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'two']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "134ed9d0-57e1-417a-bc68-137c1266bcc5",
              "parentUUID": "46473d45-7455-4926-a527-32bf7e5c358f",
=======
              "uuid": "3ed59853-1648-43d5-93bf-1dad2a2ee4e5",
              "parentUUID": "9d082182-1921-4fbd-b14d-726e076f1417",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only accept an odd number of parameters",
              "fullTitle": "hset command test should only accept an odd number of parameters",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = safeId();\n        chai_1.expect(uniqueKey).not.to.equal(lastId);\n        lastId = uniqueKey;\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one2', 'two', 'fail']);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for hm?set/i);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "0ad807aa-8500-48d7-9eb4-643e80d2c815",
              "parentUUID": "46473d45-7455-4926-a527-32bf7e5c358f",
=======
              "uuid": "ccd62b0c-1453-41fa-a9ba-3433454cf1ec",
              "parentUUID": "9d082182-1921-4fbd-b14d-726e076f1417",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only report added fields",
              "fullTitle": "hset command test should only report added fields",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = safeId();\n        chai_1.expect(uniqueKey).not.to.equal(lastId);\n        lastId = uniqueKey;\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'six']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'anothervalue']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hget', uniqueKey, 'one']);\n        chai_1.expect(response).to.equal('anothervalue');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "deda6c33-a044-41ef-85d6-127c15a98b7f",
              "parentUUID": "46473d45-7455-4926-a527-32bf7e5c358f",
=======
              "uuid": "06c741b7-516e-4ef4-9a00-8243ab02cef0",
              "parentUUID": "9d082182-1921-4fbd-b14d-726e076f1417",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "134ed9d0-57e1-417a-bc68-137c1266bcc5",
            "0ad807aa-8500-48d7-9eb4-643e80d2c815",
            "deda6c33-a044-41ef-85d6-127c15a98b7f"
=======
            "3ed59853-1648-43d5-93bf-1dad2a2ee4e5",
            "ccd62b0c-1453-41fa-a9ba-3433454cf1ec",
            "06c741b7-516e-4ef4-9a00-8243ab02cef0"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 36,
=======
          "duration": 51,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "4d6c32c9-4a14-4f5c-83b8-60ba8882ac5d",
=======
          "uuid": "a639b2d7-3745-4ddb-94ba-b348f0705307",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "del-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/del-command.test.ts",
          "file": "/test/resp/command/key/del-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "del-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 21,
=======
              "duration": 23,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "4b0b6f1a-87f9-4719-affc-49ad74f906d5",
              "parentUUID": "4d6c32c9-4a14-4f5c-83b8-60ba8882ac5d",
=======
              "uuid": "eb1fd6ba-8eb5-4b8d-80ab-b4e4c1de9405",
              "parentUUID": "a639b2d7-3745-4ddb-94ba-b348f0705307",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "del-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "e75117b1-2d51-448a-b86d-8dce035e68fd",
              "parentUUID": "4d6c32c9-4a14-4f5c-83b8-60ba8882ac5d",
=======
              "uuid": "232bf656-d3d6-4135-92b5-a3cee90e5eb7",
              "parentUUID": "a639b2d7-3745-4ddb-94ba-b348f0705307",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "del-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "c396f0f1-2449-41b7-8ae5-64bb094ee50a",
              "parentUUID": "4d6c32c9-4a14-4f5c-83b8-60ba8882ac5d",
=======
              "uuid": "853e5e3e-8c3b-4bec-9376-2d0d646497cd",
              "parentUUID": "a639b2d7-3745-4ddb-94ba-b348f0705307",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "del-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "85f55e24-954c-4c71-ba93-ff4ca0746175",
              "parentUUID": "4d6c32c9-4a14-4f5c-83b8-60ba8882ac5d",
=======
              "uuid": "9e47616e-d4d7-4582-926e-484b1d973083",
              "parentUUID": "a639b2d7-3745-4ddb-94ba-b348f0705307",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when called with no keys present",
              "fullTitle": "del-command test should report ZERO when called with no keys present",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 4,
=======
              "duration": 3,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['del', 'key1', 'key2', 'key3'])\n    .then((response) => {\n    chai_1.expect(response).to.be.a('number');\n    chai_1.expect(response).to.equal(0);\n    done();\n});",
              "err": {},
<<<<<<< HEAD
              "uuid": "10548d92-f1a3-4a07-8875-e7bde2e40a41",
              "parentUUID": "4d6c32c9-4a14-4f5c-83b8-60ba8882ac5d",
=======
              "uuid": "9c42cb89-5db4-47ed-b62b-c34163ad3583",
              "parentUUID": "a639b2d7-3745-4ddb-94ba-b348f0705307",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report the number of keys actually removed",
              "fullTitle": "del-command test should report the number of keys actually removed",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 7,
=======
              "duration": 8,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const client = new net.Socket();\ncommon_test_1.sendCommand(client, ['set', 'key1', 'data'])\n    .then(() => {\n    common_test_1.sendCommand(client, ['set', 'key2', 'data'])\n        .then(() => {\n        common_test_1.sendCommand(client, ['set', 'key3', 'data'])\n            .then(() => {\n            common_test_1.sendCommand(client, ['del', 'key1', 'key3'])\n                .then((response) => {\n                chai_1.expect(response).to.equal(2);\n                done();\n            });\n        });\n    });\n});",
              "err": {},
<<<<<<< HEAD
              "uuid": "77a91860-100b-4fcf-a1a4-73551681164a",
              "parentUUID": "4d6c32c9-4a14-4f5c-83b8-60ba8882ac5d",
=======
              "uuid": "27359d8e-8c39-456c-ba1e-515820722a63",
              "parentUUID": "a639b2d7-3745-4ddb-94ba-b348f0705307",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have retained key2 from the previous test",
              "fullTitle": "del-command test should have retained key2 from the previous test",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['del', 'key2'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n    done();\n});",
              "err": {},
<<<<<<< HEAD
              "uuid": "f674e461-7ef2-48bf-b58e-a41146b16b08",
              "parentUUID": "4d6c32c9-4a14-4f5c-83b8-60ba8882ac5d",
=======
              "uuid": "5f378713-b13f-49d3-a500-af112b8769bb",
              "parentUUID": "a639b2d7-3745-4ddb-94ba-b348f0705307",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "10548d92-f1a3-4a07-8875-e7bde2e40a41",
            "77a91860-100b-4fcf-a1a4-73551681164a",
            "f674e461-7ef2-48bf-b58e-a41146b16b08"
=======
            "9c42cb89-5db4-47ed-b62b-c34163ad3583",
            "27359d8e-8c39-456c-ba1e-515820722a63",
            "5f378713-b13f-49d3-a500-af112b8769bb"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "423139bb-c858-41c3-91c6-25050e771611",
=======
          "uuid": "c99ee4d7-daa6-40ed-966f-f4a88b8e622b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "exists-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/exists-command.test.ts",
          "file": "/test/resp/command/key/exists-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "exists-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 15,
=======
              "duration": 6,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a millisecond TTL to validate exists respects TTL\n    common_test_1.sendCommand(new net.Socket(), ['set', 'ttlkey', 'value', 'PX', '3'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "74278796-9ba1-43fc-9f0f-d430b1072313",
              "parentUUID": "423139bb-c858-41c3-91c6-25050e771611",
=======
              "uuid": "e8baf6bf-e1f1-42da-9325-2a02e859c361",
              "parentUUID": "c99ee4d7-daa6-40ed-966f-f4a88b8e622b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "exists-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "9b1da1bf-e2ae-461d-9a9a-d7060c5f5cde",
              "parentUUID": "423139bb-c858-41c3-91c6-25050e771611",
=======
              "uuid": "cb665e65-9b6a-482a-a450-1197aba87567",
              "parentUUID": "c99ee4d7-daa6-40ed-966f-f4a88b8e622b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "exists-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "0d9d37f9-3c3e-4d13-aa9d-eda80c4ffd4b",
              "parentUUID": "423139bb-c858-41c3-91c6-25050e771611",
=======
              "uuid": "75dee0f7-554b-45e1-816d-c0d0be5ee7f8",
              "parentUUID": "c99ee4d7-daa6-40ed-966f-f4a88b8e622b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "exists-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "d7b23208-53bf-487d-9c13-11ae78ffa468",
              "parentUUID": "423139bb-c858-41c3-91c6-25050e771611",
=======
              "uuid": "e696c5e8-9bb8-4de3-852d-f76ecffa4975",
              "parentUUID": "c99ee4d7-daa6-40ed-966f-f4a88b8e622b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when none of the specified keys exist",
              "fullTitle": "exists-command test should report ZERO when none of the specified keys exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 5,
=======
              "duration": 3,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['exists', 'key1', 'key2', 'key3'])\n    .then((response) => {\n    chai_1.expect(response).to.be.a('number');\n    chai_1.expect(response).to.equal(0);\n    done();\n});",
              "err": {},
<<<<<<< HEAD
              "uuid": "49f309a4-e536-4354-bceb-4140a08b5766",
              "parentUUID": "423139bb-c858-41c3-91c6-25050e771611",
=======
              "uuid": "de797ae1-37aa-4cbb-81b5-c2f87593f019",
              "parentUUID": "c99ee4d7-daa6-40ed-966f-f4a88b8e622b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require at least ONE parameter",
              "fullTitle": "exists-command test should require at least ONE parameter",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['exists'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'exists\\' command');\n    done();\n});",
              "err": {},
<<<<<<< HEAD
              "uuid": "f00250b3-bcfe-4c29-8456-4d9439e29875",
              "parentUUID": "423139bb-c858-41c3-91c6-25050e771611",
=======
              "uuid": "4a5349ea-7050-4209-88e3-1c4b4a041382",
              "parentUUID": "c99ee4d7-daa6-40ed-966f-f4a88b8e622b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report GREATER THAN ZERO when checking for the same existing key multiple times",
              "fullTitle": "exists-command test should report GREATER THAN ZERO when checking for the same existing key multiple times",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 6,
=======
              "duration": 3,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['set', 'key', 'value'])\n    .then(() => {\n    common_test_1.sendCommand(new net.Socket(), ['exists', 'key', 'key', 'unknownkey', 'another', 'another'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(2);\n        done();\n    });\n});",
              "err": {},
<<<<<<< HEAD
              "uuid": "35a57467-6783-4127-b461-dc675f64469c",
              "parentUUID": "423139bb-c858-41c3-91c6-25050e771611",
=======
              "uuid": "ec4771c3-ffcb-4620-b236-bc22599ac786",
              "parentUUID": "c99ee4d7-daa6-40ed-966f-f4a88b8e622b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect the TTL value on a key",
              "fullTitle": "exists-command test should respect the TTL value on a key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['exists', 'ttlkey'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(0);\n    done();\n});",
              "err": {},
<<<<<<< HEAD
              "uuid": "5ab8b113-f3da-44d9-b4f7-2ac591e95bc1",
              "parentUUID": "423139bb-c858-41c3-91c6-25050e771611",
=======
              "uuid": "3513ca72-cc31-45d1-9003-01e101d19380",
              "parentUUID": "c99ee4d7-daa6-40ed-966f-f4a88b8e622b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "49f309a4-e536-4354-bceb-4140a08b5766",
            "f00250b3-bcfe-4c29-8456-4d9439e29875",
            "35a57467-6783-4127-b461-dc675f64469c",
            "5ab8b113-f3da-44d9-b4f7-2ac591e95bc1"
=======
            "de797ae1-37aa-4cbb-81b5-c2f87593f019",
            "4a5349ea-7050-4209-88e3-1c4b4a041382",
            "ec4771c3-ffcb-4620-b236-bc22599ac786",
            "3513ca72-cc31-45d1-9003-01e101d19380"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 14,
=======
          "duration": 9,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "a0332df7-5c66-4919-8d6d-dfa34d8d9ed6",
=======
          "uuid": "effc4860-4945-4c23-8ada-5e834badf293",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "expire-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/expire-command.test.ts",
          "file": "/test/resp/command/key/expire-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "expire-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 33,
=======
              "duration": 3,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "f7ce6d73-4428-4a74-93f6-f6aff71969da",
              "parentUUID": "a0332df7-5c66-4919-8d6d-dfa34d8d9ed6",
=======
              "uuid": "6f7cb1b6-6133-40e5-a7f6-63b885b0aee7",
              "parentUUID": "effc4860-4945-4c23-8ada-5e834badf293",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "expire-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "d4b9d2c1-83f5-4d5b-b16b-77e431114eec",
              "parentUUID": "a0332df7-5c66-4919-8d6d-dfa34d8d9ed6",
=======
              "uuid": "b1d9aca8-984e-461f-a7ae-75ce15931124",
              "parentUUID": "effc4860-4945-4c23-8ada-5e834badf293",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "expire-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "3b266b60-4c76-459b-b68d-b7a9cbd480cc",
              "parentUUID": "a0332df7-5c66-4919-8d6d-dfa34d8d9ed6",
=======
              "uuid": "43e777d2-caee-447a-a7ab-0f32c5b5c893",
              "parentUUID": "effc4860-4945-4c23-8ada-5e834badf293",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "expire-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "a608f617-404a-40c5-bb8d-8bff0414eabb",
              "parentUUID": "a0332df7-5c66-4919-8d6d-dfa34d8d9ed6",
=======
              "uuid": "8e44db11-d009-42ec-93c9-2d87acd4b470",
              "parentUUID": "effc4860-4945-4c23-8ada-5e834badf293",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when expire called on non-existent key",
              "fullTitle": "expire-command test should report ZERO when expire called on non-existent key",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 4,
=======
              "duration": 2,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['expire', 'no-key', '1000']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "18e4f812-a7e9-40d3-9da7-5fcd87bc7ce6",
              "parentUUID": "a0332df7-5c66-4919-8d6d-dfa34d8d9ed6",
=======
              "uuid": "1d1e8766-06ac-4249-8baa-e8f2ed4dbaf0",
              "parentUUID": "effc4860-4945-4c23-8ada-5e834badf293",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require an integer value for the ttl parameter",
              "fullTitle": "expire-command test should require an integer value for the ttl parameter",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'mykey', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', '10.2']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', 'ten']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "8c4213ba-2028-4e3d-9440-3efdd33a22f6",
              "parentUUID": "a0332df7-5c66-4919-8d6d-dfa34d8d9ed6",
=======
              "uuid": "6bfed0ce-9edd-4af3-a1df-c443186f0b8e",
              "parentUUID": "effc4860-4945-4c23-8ada-5e834badf293",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set the requested ttl on a key",
              "fullTitle": "expire-command test should set the requested ttl on a key",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 5,
=======
              "duration": 3,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', '10000']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "15593911-54b8-41f0-8722-63e306a6bd7b",
              "parentUUID": "a0332df7-5c66-4919-8d6d-dfa34d8d9ed6",
=======
              "uuid": "e1a66991-c830-481c-8295-def18ffeccee",
              "parentUUID": "effc4860-4945-4c23-8ada-5e834badf293",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should expire a key when we set a negative ttl",
              "fullTitle": "expire-command test should expire a key when we set a negative ttl",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Note that this is not consistent with documentation\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', '-1']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "f612351f-ef4a-4096-9968-e52443971834",
              "parentUUID": "a0332df7-5c66-4919-8d6d-dfa34d8d9ed6",
=======
              "uuid": "92a78fd3-fb85-414a-b2cf-fb060c29c43d",
              "parentUUID": "effc4860-4945-4c23-8ada-5e834badf293",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should work with ZKEYs (and other key types - as yet untested)",
              "fullTitle": "expire-command test should work with ZKEYs (and other key types - as yet untested)",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 2015,
=======
              "duration": 2013,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['zadd', 'zkey', '1', 'member'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n    common_test_1.sendCommand(client, ['exists', 'zkey'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(1);\n        common_test_1.sendCommand(client, ['expire', 'zkey', '1'])\n            .then((response) => {\n            chai_1.expect(response).to.equal(1);\n            setTimeout(() => {\n                common_test_1.sendCommand(client, ['exists', 'zkey'])\n                    .then((response) => {\n                    chai_1.expect(response).to.equal(0, `Unexpected response ${response} should be ZERO`);\n                    done();\n                });\n            }, 2000);\n        });\n    });\n});",
              "err": {},
<<<<<<< HEAD
              "uuid": "eb98a360-a1f0-440f-a52c-72cecc024dbf",
              "parentUUID": "a0332df7-5c66-4919-8d6d-dfa34d8d9ed6",
=======
              "uuid": "d1901987-a4ac-4a4b-a460-03c34bcffcd4",
              "parentUUID": "effc4860-4945-4c23-8ada-5e834badf293",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should survive the RENAME operation",
              "fullTitle": "expire-command test should survive the RENAME operation",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'rename-test', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['expire', 'rename-test', '1']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rename', 'rename-test', 'new-name']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'new-name']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'rename-test']);\n        chai_1.expect(response).to.equal(0);\n        yield setTimeout(() => __awaiter(void 0, void 0, void 0, function* () {\n            response = yield common_test_1.sendCommand(client, ['exists', 'new-name']);\n            chai_1.expect(response).to.equal(0);\n        }), 2000);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "4407979a-3158-4572-83da-f1d9e872838b",
              "parentUUID": "a0332df7-5c66-4919-8d6d-dfa34d8d9ed6",
=======
              "uuid": "2d6dad71-9443-4940-8620-4927bc367984",
              "parentUUID": "effc4860-4945-4c23-8ada-5e834badf293",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "18e4f812-a7e9-40d3-9da7-5fcd87bc7ce6",
            "8c4213ba-2028-4e3d-9440-3efdd33a22f6",
            "15593911-54b8-41f0-8722-63e306a6bd7b",
            "f612351f-ef4a-4096-9968-e52443971834",
            "eb98a360-a1f0-440f-a52c-72cecc024dbf",
            "4407979a-3158-4572-83da-f1d9e872838b"
=======
            "1d1e8766-06ac-4249-8baa-e8f2ed4dbaf0",
            "6bfed0ce-9edd-4af3-a1df-c443186f0b8e",
            "e1a66991-c830-481c-8295-def18ffeccee",
            "92a78fd3-fb85-414a-b2cf-fb060c29c43d",
            "d1901987-a4ac-4a4b-a460-03c34bcffcd4",
            "2d6dad71-9443-4940-8620-4927bc367984"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 2048,
=======
          "duration": 2030,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "b120b0bd-e96f-435d-a17e-ef4fc8fe8021",
=======
          "uuid": "b1ae4384-2af1-452c-ad6e-39304db82141",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "keys-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/keys-command.test.ts",
          "file": "/test/resp/command/key/keys-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "keys-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 19,
=======
              "duration": 6,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    done();\n}));\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "e11db2fa-4afa-40cc-9f6e-a087bc1195cd",
              "parentUUID": "b120b0bd-e96f-435d-a17e-ef4fc8fe8021",
=======
              "uuid": "851d442d-cdf0-4433-a743-0d94756ce12b",
              "parentUUID": "b1ae4384-2af1-452c-ad6e-39304db82141",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "keys-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "54aa46c1-1822-409b-a468-63b6a6ed592f",
              "parentUUID": "b120b0bd-e96f-435d-a17e-ef4fc8fe8021",
=======
              "uuid": "7cfbea02-3898-40bc-b32c-c6b882951ab4",
              "parentUUID": "b1ae4384-2af1-452c-ad6e-39304db82141",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "keys-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "6a38c904-0f0a-4eb2-b9d7-72b2bed1dfaa",
              "parentUUID": "b120b0bd-e96f-435d-a17e-ef4fc8fe8021",
=======
              "uuid": "73c79b89-c826-4896-b039-6df227990920",
              "parentUUID": "b1ae4384-2af1-452c-ad6e-39304db82141",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "keys-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "b07f4ce9-2c34-4b48-b6be-04ac2f420034",
              "parentUUID": "b120b0bd-e96f-435d-a17e-ef4fc8fe8021",
=======
              "uuid": "e50575a4-cbd2-4c20-a560-dab76ba3045e",
              "parentUUID": "b1ae4384-2af1-452c-ad6e-39304db82141",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should retrieve keys by glob patterns",
              "fullTitle": "keys-command test should retrieve keys by glob patterns",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 20,
=======
              "duration": 7,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mset', 'firstname', 'Jack', 'lastname', 'Stuntman', 'age', '35']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['keys', '*name*']);\n        chai_1.expect(response.sort()).to.eql(['firstname', 'lastname']);\n        response = yield common_test_1.sendCommand(client, ['keys', 'a??']);\n        chai_1.expect(response).to.eql(['age']);\n        response = yield common_test_1.sendCommand(client, ['keys', '*']);\n        // NOTE: There does not appear to be a guarantee of order\n        chai_1.expect(response.sort()).to.eql(['age', 'firstname', 'lastname']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "c9b0f36c-8b36-4479-8552-049cddcf966b",
              "parentUUID": "b120b0bd-e96f-435d-a17e-ef4fc8fe8021",
=======
              "uuid": "180b5431-3ec6-431a-a197-a032a308f9be",
              "parentUUID": "b1ae4384-2af1-452c-ad6e-39304db82141",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "c9b0f36c-8b36-4479-8552-049cddcf966b"
=======
            "180b5431-3ec6-431a-a197-a032a308f9be"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 20,
=======
          "duration": 7,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "4fcd79b3-bf4e-4b10-913f-50b796d0e7b0",
=======
          "uuid": "259f47c5-4490-4bf0-9a6d-6e37b5d6fe04",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "move-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/move-command.test.ts",
          "file": "/test/resp/command/key/move-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "move-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 30,
=======
              "duration": 22,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "5f3ac6e5-0b5a-43d8-89aa-bb0ced7afae4",
              "parentUUID": "4fcd79b3-bf4e-4b10-913f-50b796d0e7b0",
=======
              "uuid": "434ebcb0-a211-44e8-8d26-63bc5b50e156",
              "parentUUID": "259f47c5-4490-4bf0-9a6d-6e37b5d6fe04",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "move-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "65a34b7f-43a1-4860-8f25-85c0293ffe1c",
              "parentUUID": "4fcd79b3-bf4e-4b10-913f-50b796d0e7b0",
=======
              "uuid": "35d2eaec-9ddb-4ff8-aa60-cf78a630b968",
              "parentUUID": "259f47c5-4490-4bf0-9a6d-6e37b5d6fe04",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "move-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "6cba7c09-429d-4c0a-a96d-8b005caf8dd8",
              "parentUUID": "4fcd79b3-bf4e-4b10-913f-50b796d0e7b0",
=======
              "uuid": "63e0edff-8ba4-4440-bb8d-1fc5868e73b6",
              "parentUUID": "259f47c5-4490-4bf0-9a6d-6e37b5d6fe04",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "move-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "fa36fe2c-e897-4c7a-a9af-8d54d13946fe",
              "parentUUID": "4fcd79b3-bf4e-4b10-913f-50b796d0e7b0",
=======
              "uuid": "bf44c97f-bbea-4580-bcef-261c7c93024f",
              "parentUUID": "259f47c5-4490-4bf0-9a6d-6e37b5d6fe04",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow target and source db to be the same",
              "fullTitle": "move-command test should not allow target and source db to be the same",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Even if source key does not exist\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, '0']);\n        chai_1.expect(response).to.equal('ReplyError: ERR source and destination objects are the same');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "b9b4d2c7-9bdf-493a-9020-437a9975845e",
              "parentUUID": "4fcd79b3-bf4e-4b10-913f-50b796d0e7b0",
=======
              "uuid": "aaaca37f-f254-4a3f-aaae-ce6bc8813e09",
              "parentUUID": "259f47c5-4490-4bf0-9a6d-6e37b5d6fe04",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should also report ZERO when the target key already exists",
              "fullTitle": "move-command test should also report ZERO when the target key already exists",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'database ZERO']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, '0']);\n        chai_1.expect(response).to.equal('ReplyError: ERR source and destination objects are the same');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "bf3daa47-6620-40ec-a971-8fa551dd57c2",
              "parentUUID": "4fcd79b3-bf4e-4b10-913f-50b796d0e7b0",
=======
              "uuid": "5f76f151-d77c-4194-a5b0-21abaa4500db",
              "parentUUID": "259f47c5-4490-4bf0-9a6d-6e37b5d6fe04",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should move a key from one database to another otherwise",
              "fullTitle": "move-command test should move a key from one database to another otherwise",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 8,
=======
              "duration": 5,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, '14']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['select', '14']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "ae40a8f0-0fba-4ddc-9083-6734071ebecb",
              "parentUUID": "4fcd79b3-bf4e-4b10-913f-50b796d0e7b0",
=======
              "uuid": "fc861640-cfcb-4c25-81d1-530bb0ae4e6f",
              "parentUUID": "259f47c5-4490-4bf0-9a6d-6e37b5d6fe04",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report error when target database is invalid and key exists",
              "fullTitle": "move-command test should report error when target database is invalid and key exists",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Database 14 is already selected\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, 'InvalidDb']);\n        chai_1.expect(response).to.equal('ReplyError: ERR index out of range');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "9b85cbc2-08b4-468c-896f-f8629ab7da0f",
              "parentUUID": "4fcd79b3-bf4e-4b10-913f-50b796d0e7b0",
=======
              "uuid": "f2bcd5c3-1cd3-4405-ad67-f188f852ae2d",
              "parentUUID": "259f47c5-4490-4bf0-9a6d-6e37b5d6fe04",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the key does not exist in the current db",
              "fullTitle": "move-command test should return 0 when the key does not exist in the current db",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushdb']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['dbsize']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['move', 'nokey', '3']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "f45154fb-4b0e-4f23-b411-a0684452c6d4",
              "parentUUID": "4fcd79b3-bf4e-4b10-913f-50b796d0e7b0",
=======
              "uuid": "ba9353aa-aa78-4289-85af-02e3f5c8e2aa",
              "parentUUID": "259f47c5-4490-4bf0-9a6d-6e37b5d6fe04",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the key exists in both source and target db",
              "fullTitle": "move-command test should return 0 when the key exists in both source and target db",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 34,
=======
              "duration": 13,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['select', '0']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['set', 'nokey', 'db0']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'nokey']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['select', '1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'nokey']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['set', 'nokey', 'db1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['move', 'nokey', '0']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['get', 'nokey']);\n        chai_1.expect(response).to.equal('db1');\n        response = yield common_test_1.sendCommand(client, ['select', '0']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'nokey']);\n        chai_1.expect(response).to.equal('db0');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "ad87f376-9856-4a42-9826-dcf3faf62e3d",
              "parentUUID": "4fcd79b3-bf4e-4b10-913f-50b796d0e7b0",
=======
              "uuid": "a27c0f04-c66a-4d54-9bc0-3f5bf23dc66d",
              "parentUUID": "259f47c5-4490-4bf0-9a6d-6e37b5d6fe04",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "b9b4d2c7-9bdf-493a-9020-437a9975845e",
            "bf3daa47-6620-40ec-a971-8fa551dd57c2",
            "ae40a8f0-0fba-4ddc-9083-6734071ebecb",
            "9b85cbc2-08b4-468c-896f-f8629ab7da0f",
            "f45154fb-4b0e-4f23-b411-a0684452c6d4",
            "ad87f376-9856-4a42-9826-dcf3faf62e3d"
=======
            "aaaca37f-f254-4a3f-aaae-ce6bc8813e09",
            "5f76f151-d77c-4194-a5b0-21abaa4500db",
            "fc861640-cfcb-4c25-81d1-530bb0ae4e6f",
            "f2bcd5c3-1cd3-4405-ad67-f188f852ae2d",
            "ba9353aa-aa78-4289-85af-02e3f5c8e2aa",
            "a27c0f04-c66a-4d54-9bc0-3f5bf23dc66d"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 65,
=======
          "duration": 31,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "d078e789-0358-4723-9051-54e20df2c45c",
=======
          "uuid": "37334799-9734-47c7-b086-056ff29cc91c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "randomkey-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/randomkey-command.test.ts",
          "file": "/test/resp/command/key/randomkey-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "randomkey-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 20,
=======
              "duration": 51,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "85400798-5a20-4efa-b48b-9b2c0b9009a4",
              "parentUUID": "d078e789-0358-4723-9051-54e20df2c45c",
=======
              "uuid": "a3c9baa0-6f62-4684-b604-2d13dab32f4d",
              "parentUUID": "37334799-9734-47c7-b086-056ff29cc91c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "randomkey-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "92f1344a-f756-4340-8109-e081c9d974a0",
              "parentUUID": "d078e789-0358-4723-9051-54e20df2c45c",
=======
              "uuid": "f9c66ba7-cd5d-47d5-b5ae-2e29244d5af6",
              "parentUUID": "37334799-9734-47c7-b086-056ff29cc91c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "randomkey-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "e4436330-3387-48ce-89a0-b0ef540a6681",
              "parentUUID": "d078e789-0358-4723-9051-54e20df2c45c",
=======
              "uuid": "bd3bdaec-95ca-4643-a79d-fb83b80c1606",
              "parentUUID": "37334799-9734-47c7-b086-056ff29cc91c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "randomkey-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "7fa3a55a-0797-47f0-bdac-2e5c00e289c3",
              "parentUUID": "d078e789-0358-4723-9051-54e20df2c45c",
=======
              "uuid": "0477c5aa-e9fb-4827-8cac-1afa7f384b7e",
              "parentUUID": "37334799-9734-47c7-b086-056ff29cc91c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when the database is empty",
              "fullTitle": "randomkey-command test should return NIL when the database is empty",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 3,
=======
              "duration": 4,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushdb']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['randomkey']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "268d70aa-b24a-41ef-a448-36e98c978dea",
              "parentUUID": "d078e789-0358-4723-9051-54e20df2c45c",
=======
              "uuid": "2f2eda05-f12a-4e02-a767-d05179489fe2",
              "parentUUID": "37334799-9734-47c7-b086-056ff29cc91c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return list, zkey, hash, and string keys without preference",
              "fullTitle": "randomkey-command test should return list, zkey, hash, and string keys without preference",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 41,
              "state": "passed",
              "speed": "medium",
=======
              "duration": 79,
              "state": "passed",
              "speed": "slow",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const results = [];\n        response = yield common_test_1.sendCommand(client, ['hset', 'hash', 'field', 'value']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lpush', 'list', 'element']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'member']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['set', 'string', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        for (let i = 0; i < 15; i++) {\n            response = yield common_test_1.sendCommand(client, ['randomkey']);\n            chai_1.expect(response).to.be.a('string');\n            response = yield common_test_1.sendCommand(client, ['type', response]);\n            chai_1.expect(response).to.be.a('string');\n            if (results.indexOf(response) === -1) {\n                results.push(response);\n            }\n            if (results.length === 4) {\n                break;\n            }\n        }\n        chai_1.expect(results.length).to.be.greaterThan(1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "7647dba1-a502-42f8-bb6b-b40de4efa5e6",
              "parentUUID": "d078e789-0358-4723-9051-54e20df2c45c",
=======
              "uuid": "13494d57-0700-48ba-90ee-3214062a1454",
              "parentUUID": "37334799-9734-47c7-b086-056ff29cc91c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "268d70aa-b24a-41ef-a448-36e98c978dea",
            "7647dba1-a502-42f8-bb6b-b40de4efa5e6"
=======
            "2f2eda05-f12a-4e02-a767-d05179489fe2",
            "13494d57-0700-48ba-90ee-3214062a1454"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 44,
=======
          "duration": 83,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "594b3de7-eaf4-4c66-9a54-bf9e698985fe",
=======
          "uuid": "e535808d-5b66-4038-a8f6-ea03f8746f0a",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "rename-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/rename-command.test.ts",
          "file": "/test/resp/command/key/rename-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rename-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 19,
=======
              "duration": 21,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "3934816c-e1ce-4c0e-811b-5896ac442eca",
              "parentUUID": "594b3de7-eaf4-4c66-9a54-bf9e698985fe",
=======
              "uuid": "27fb0e9f-17d0-4a6d-9b95-4fbeb8eeca9e",
              "parentUUID": "e535808d-5b66-4038-a8f6-ea03f8746f0a",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rename-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "285a1541-cbad-4caf-8d6e-fe542b6213c1",
              "parentUUID": "594b3de7-eaf4-4c66-9a54-bf9e698985fe",
=======
              "uuid": "5eb21328-efe5-4564-b347-1d739a3e18e5",
              "parentUUID": "e535808d-5b66-4038-a8f6-ea03f8746f0a",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rename-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "f0754c1b-ad30-4f82-b77a-77a8d155190e",
              "parentUUID": "594b3de7-eaf4-4c66-9a54-bf9e698985fe",
=======
              "uuid": "b8da6583-d86f-47ee-affa-1881b261a20e",
              "parentUUID": "e535808d-5b66-4038-a8f6-ea03f8746f0a",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rename-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "706e3e8b-5a73-459a-8641-eb44dfda2f20",
              "parentUUID": "594b3de7-eaf4-4c66-9a54-bf9e698985fe",
=======
              "uuid": "55f1ce01-f353-4d46-a1d9-cc53e0f93e2f",
              "parentUUID": "e535808d-5b66-4038-a8f6-ea03f8746f0a",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report an error when the key does not exist",
              "fullTitle": "rename-command test should report an error when the key does not exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 4,
=======
              "duration": 3,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rename', 'mykey', 'my-otherkey']);\n        chai_1.expect(response).to.equal('ReplyError: ERR no such key');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "b50a1276-334d-4707-b5cc-daad5a6ef6e2",
              "parentUUID": "594b3de7-eaf4-4c66-9a54-bf9e698985fe",
=======
              "uuid": "17b8ac9b-ac36-4f40-b805-a4936f061abf",
              "parentUUID": "e535808d-5b66-4038-a8f6-ea03f8746f0a",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should rename a key",
              "fullTitle": "rename-command test should rename a key",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'mykey', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['rename', 'mykey', 'my-otherkey']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'my-otherkey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "036ce6a8-85c2-4d2f-aa9d-0e5823ea0417",
              "parentUUID": "594b3de7-eaf4-4c66-9a54-bf9e698985fe",
=======
              "uuid": "940be939-68b8-491f-9864-9f6187033192",
              "parentUUID": "e535808d-5b66-4038-a8f6-ea03f8746f0a",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overwrite an existing key without notice",
              "fullTitle": "rename-command test should overwrite an existing key without notice",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 20,
=======
              "duration": 39,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'myoriginalkey', 'something']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['rename', 'my-otherkey', 'myoriginalkey']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'myoriginalkey']);\n        chai_1.expect(response).to.equal('value');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "ada0d97c-e00f-4819-9bc0-e74cd2d80a46",
              "parentUUID": "594b3de7-eaf4-4c66-9a54-bf9e698985fe",
=======
              "uuid": "5ddc4753-4765-4e33-8735-6af70e8a8d3e",
              "parentUUID": "e535808d-5b66-4038-a8f6-ea03f8746f0a",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "b50a1276-334d-4707-b5cc-daad5a6ef6e2",
            "036ce6a8-85c2-4d2f-aa9d-0e5823ea0417",
            "ada0d97c-e00f-4819-9bc0-e74cd2d80a46"
=======
            "17b8ac9b-ac36-4f40-b805-a4936f061abf",
            "940be939-68b8-491f-9864-9f6187033192",
            "5ddc4753-4765-4e33-8735-6af70e8a8d3e"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 29,
=======
          "duration": 47,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "2865bba2-6530-4741-b44b-8e7521085ceb",
=======
          "uuid": "8e6acdbf-fb4a-4666-a55b-6123a0d2d86d",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "renamenx-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/renamenx-command.test.ts",
          "file": "/test/resp/command/key/renamenx-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "renamenx-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 29,
=======
              "duration": 7,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "4619bb94-2993-4680-a35f-1b9185cbd633",
              "parentUUID": "2865bba2-6530-4741-b44b-8e7521085ceb",
=======
              "uuid": "b3e41b33-0320-4e1a-a503-1825880cbefd",
              "parentUUID": "8e6acdbf-fb4a-4666-a55b-6123a0d2d86d",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "renamenx-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "12fd480f-e9ca-4885-a1a8-583fd9da5958",
              "parentUUID": "2865bba2-6530-4741-b44b-8e7521085ceb",
=======
              "uuid": "56abd928-df46-4482-8c60-3ec9eb664be7",
              "parentUUID": "8e6acdbf-fb4a-4666-a55b-6123a0d2d86d",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "renamenx-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "9bf0d7ee-d53b-492d-9345-2491b6ad0971",
              "parentUUID": "2865bba2-6530-4741-b44b-8e7521085ceb",
=======
              "uuid": "89757c84-80bc-4ba6-b9af-c3b1274d1e63",
              "parentUUID": "8e6acdbf-fb4a-4666-a55b-6123a0d2d86d",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "renamenx-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "5940799c-3fe4-4dbe-ae57-5648c671fb27",
              "parentUUID": "2865bba2-6530-4741-b44b-8e7521085ceb",
=======
              "uuid": "06564871-8894-4c66-9f3d-bc39c92a2de8",
              "parentUUID": "8e6acdbf-fb4a-4666-a55b-6123a0d2d86d",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report an error when the key does not exist",
              "fullTitle": "renamenx-command test should report an error when the key does not exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 4,
=======
              "duration": 2,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['renamenx', 'mykey', 'my-otherkey']);\n        chai_1.expect(response).to.equal('ReplyError: ERR no such key');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "675deae5-1a81-42d5-9a03-a3cdb62f9d7a",
              "parentUUID": "2865bba2-6530-4741-b44b-8e7521085ceb",
=======
              "uuid": "e02185fe-e7da-4577-92a4-68b1bdb5b096",
              "parentUUID": "8e6acdbf-fb4a-4666-a55b-6123a0d2d86d",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when attempting renamenx with source = destination",
              "fullTitle": "renamenx-command test should return 0 when attempting renamenx with source = destination",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 5,
=======
              "duration": 4,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'key', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['renamenx', 'key', 'key']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'key']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "1eaf96d3-b75f-4256-807b-82c3c926d28e",
              "parentUUID": "2865bba2-6530-4741-b44b-8e7521085ceb",
=======
              "uuid": "14c7b612-b1cc-4f11-ae01-3187dcde2c6a",
              "parentUUID": "8e6acdbf-fb4a-4666-a55b-6123a0d2d86d",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should rename a key when requested",
              "fullTitle": "renamenx-command test should rename a key when requested",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 40,
=======
              "duration": 3,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['renamenx', 'key', 'newkey']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'key']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'newkey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "4526ef0e-4c50-4445-bc2c-003fadb0fcbb",
              "parentUUID": "2865bba2-6530-4741-b44b-8e7521085ceb",
=======
              "uuid": "f8136b05-eb69-419c-be2f-ac79cdf4f046",
              "parentUUID": "8e6acdbf-fb4a-4666-a55b-6123a0d2d86d",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "675deae5-1a81-42d5-9a03-a3cdb62f9d7a",
            "1eaf96d3-b75f-4256-807b-82c3c926d28e",
            "4526ef0e-4c50-4445-bc2c-003fadb0fcbb"
=======
            "e02185fe-e7da-4577-92a4-68b1bdb5b096",
            "14c7b612-b1cc-4f11-ae01-3187dcde2c6a",
            "f8136b05-eb69-419c-be2f-ac79cdf4f046"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 49,
=======
          "duration": 9,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "5a35ba88-533d-4f77-8a20-402938dea0c8",
=======
          "uuid": "4172a027-c440-4061-aa11-b24494168c5f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "ttl-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/ttl-command.test.ts",
          "file": "/test/resp/command/key/ttl-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "ttl-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 16,
=======
              "duration": 21,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a couple - second TTL to validate exists respects TTL\n    common_test_1.sendCommand(new net.Socket(), ['set', 'ttlkey', 'value', 'EX', '30'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "a1cf1a06-3d4d-42a4-889d-b2d129f5db60",
              "parentUUID": "5a35ba88-533d-4f77-8a20-402938dea0c8",
=======
              "uuid": "67935ac4-baf1-4483-9bf5-a3841a5af905",
              "parentUUID": "4172a027-c440-4061-aa11-b24494168c5f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "ttl-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "a995e0fa-2f5c-406a-aeea-3effe6c8c3e3",
              "parentUUID": "5a35ba88-533d-4f77-8a20-402938dea0c8",
=======
              "uuid": "4386756e-3b3a-45b2-8082-c6592384eaf1",
              "parentUUID": "4172a027-c440-4061-aa11-b24494168c5f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "ttl-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "dc7c7915-7093-49a8-96fc-0434d37a2c9d",
              "parentUUID": "5a35ba88-533d-4f77-8a20-402938dea0c8",
=======
              "uuid": "45177596-f880-4f7a-9ea5-08dcd16ba1f9",
              "parentUUID": "4172a027-c440-4061-aa11-b24494168c5f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "ttl-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "a4cbe8df-c461-4cdd-b4b5-4325168ad681",
              "parentUUID": "5a35ba88-533d-4f77-8a20-402938dea0c8",
=======
              "uuid": "92d74011-b82d-445b-9c8f-a34a0b924fca",
              "parentUUID": "4172a027-c440-4061-aa11-b24494168c5f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report -2 when the key does not exist",
              "fullTitle": "ttl-command test should report -2 when the key does not exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ttl', 'nokey']);\n        chai_1.expect(response).to.equal(-2);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "0fecffec-b2f9-40a2-9217-f5135b929489",
              "parentUUID": "5a35ba88-533d-4f77-8a20-402938dea0c8",
=======
              "uuid": "10a69f50-41fc-4614-9e55-52b484ef852e",
              "parentUUID": "4172a027-c440-4061-aa11-b24494168c5f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return -1 when the key exists but does not have a ttl",
              "fullTitle": "ttl-command test should return -1 when the key exists but does not have a ttl",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'newkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['ttl', 'newkey']);\n        chai_1.expect(response).to.equal(-1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "2f11461c-aa11-4fa7-896a-8595aba3202a",
              "parentUUID": "5a35ba88-533d-4f77-8a20-402938dea0c8",
=======
              "uuid": "6c742e86-7a9f-4b96-9e45-1a6d70cd8c30",
              "parentUUID": "4172a027-c440-4061-aa11-b24494168c5f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the current ttl in seconds when available",
              "fullTitle": "ttl-command test should return the current ttl in seconds when available",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ttl', 'ttlkey']);\n        chai_1.expect(response).to.be.greaterThan(0);\n        chai_1.expect(response).to.be.lessThan(31);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "2602bc5b-7eb2-4339-8dc2-d357ac006eea",
              "parentUUID": "5a35ba88-533d-4f77-8a20-402938dea0c8",
=======
              "uuid": "63cec5d5-b315-4cae-ac14-9e27401652f1",
              "parentUUID": "4172a027-c440-4061-aa11-b24494168c5f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "0fecffec-b2f9-40a2-9217-f5135b929489",
            "2f11461c-aa11-4fa7-896a-8595aba3202a",
            "2602bc5b-7eb2-4339-8dc2-d357ac006eea"
=======
            "10a69f50-41fc-4614-9e55-52b484ef852e",
            "6c742e86-7a9f-4b96-9e45-1a6d70cd8c30",
            "63cec5d5-b315-4cae-ac14-9e27401652f1"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "09d1761c-0041-4212-bc19-e65bea876e8c",
=======
          "uuid": "597bfec4-0a3c-4997-a0c0-301a51557a1e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "type-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/type-command.test.ts",
          "file": "/test/resp/command/key/type-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "type-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 25,
=======
              "duration": 17,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "7016a377-dcb6-40c1-901a-857c6b7c699f",
              "parentUUID": "09d1761c-0041-4212-bc19-e65bea876e8c",
=======
              "uuid": "58a74c0f-1617-4a3d-b0da-4cd601de64fd",
              "parentUUID": "597bfec4-0a3c-4997-a0c0-301a51557a1e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "type-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "c01b375b-ddb8-42c1-a16d-063f3c50864e",
              "parentUUID": "09d1761c-0041-4212-bc19-e65bea876e8c",
=======
              "uuid": "4b154f9c-f13a-47b2-b4d3-dd4e0f823d39",
              "parentUUID": "597bfec4-0a3c-4997-a0c0-301a51557a1e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "type-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "95c75ef7-78b2-4d95-ac66-17f501e4ab30",
              "parentUUID": "09d1761c-0041-4212-bc19-e65bea876e8c",
=======
              "uuid": "42e4a173-99cc-490c-b35b-2f7e33ba2580",
              "parentUUID": "597bfec4-0a3c-4997-a0c0-301a51557a1e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "type-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "d4042c18-0318-40c0-9553-538f2ecce3a4",
              "parentUUID": "09d1761c-0041-4212-bc19-e65bea876e8c",
=======
              "uuid": "5802918b-1055-46be-ac6c-59b201544fdc",
              "parentUUID": "597bfec4-0a3c-4997-a0c0-301a51557a1e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report the type of key",
              "fullTitle": "type-command test should report the type of key",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 25,
=======
              "duration": 26,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['set', 'string-key', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['type', 'string-key']);\n        chai_1.expect(response).to.equal('string');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'list-key', 'test']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['type', 'list-key']);\n        chai_1.expect(response).to.equal('list');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'set-key', 'test']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['type', 'set-key']);\n        chai_1.expect(response).to.equal('set');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['type', 'zkey']);\n        chai_1.expect(response).to.equal('zset');\n        response = yield common_test_1.sendCommand(client, ['type', 'never']);\n        chai_1.expect(response).to.equal('none');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "4bdb4ea8-8a32-4375-abe9-7bf24d88cfbc",
              "parentUUID": "09d1761c-0041-4212-bc19-e65bea876e8c",
=======
              "uuid": "8d65903e-d38e-4c67-84ba-07d7db9fc3ed",
              "parentUUID": "597bfec4-0a3c-4997-a0c0-301a51557a1e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "4bdb4ea8-8a32-4375-abe9-7bf24d88cfbc"
=======
            "8d65903e-d38e-4c67-84ba-07d7db9fc3ed"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 25,
=======
          "duration": 26,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "594beff5-7057-45e5-aada-e9f228b11a15",
=======
          "uuid": "b911477f-e87d-4846-82df-c10bf83e3d33",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "blpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/blpop-command.test.ts",
          "file": "/test/resp/command/list/blpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "blpop-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 4,
=======
              "duration": 26,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "a22670f5-bdba-4274-893c-c4e6f2e501cb",
              "parentUUID": "594beff5-7057-45e5-aada-e9f228b11a15",
=======
              "uuid": "213b7107-2897-48d2-b77d-4480f0466163",
              "parentUUID": "b911477f-e87d-4846-82df-c10bf83e3d33",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "blpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "db99e079-3977-4635-af9e-242c1f364656",
              "parentUUID": "594beff5-7057-45e5-aada-e9f228b11a15",
=======
              "uuid": "743ed797-1f14-4740-8865-fc942cfb4866",
              "parentUUID": "b911477f-e87d-4846-82df-c10bf83e3d33",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "blpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "8f894652-6fe0-47dd-8460-504bacbbebca",
              "parentUUID": "594beff5-7057-45e5-aada-e9f228b11a15",
=======
              "uuid": "96d894df-b985-4f62-b5f5-6aef93d4876a",
              "parentUUID": "b911477f-e87d-4846-82df-c10bf83e3d33",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "blpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "e6706da5-a71b-4eb3-a659-adf6048f5b2d",
              "parentUUID": "594beff5-7057-45e5-aada-e9f228b11a15",
=======
              "uuid": "16e190f5-92b9-4878-9b16-0b35e965cc83",
              "parentUUID": "b911477f-e87d-4846-82df-c10bf83e3d33",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when timeout > 0 and list does not exist",
              "fullTitle": "blpop-command test should return NIL when timeout > 0 and list does not exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 1029,
=======
              "duration": 1005,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['blpop', 'no-key', '1']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "5795ca51-ba05-49be-a0c7-2664b25fe96d",
              "parentUUID": "594beff5-7057-45e5-aada-e9f228b11a15",
=======
              "uuid": "0d940ab0-4202-41a5-a14b-1ee59a542d2d",
              "parentUUID": "b911477f-e87d-4846-82df-c10bf83e3d33",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should wait for a list to exist and return the list name and value",
              "fullTitle": "blpop-command test should wait for a list to exist and return the list name and value",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 9,
=======
              "duration": 10,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['blpop', 'no-key', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['no-key', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'no-key', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
<<<<<<< HEAD
              "uuid": "04a128bf-2de7-4874-9d06-b1a9908550c7",
              "parentUUID": "594beff5-7057-45e5-aada-e9f228b11a15",
=======
              "uuid": "7fd1ae84-072f-4a17-9a5c-48839d7d0021",
              "parentUUID": "b911477f-e87d-4846-82df-c10bf83e3d33",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the list name and HEAD value",
              "fullTitle": "blpop-command test should return the list name and HEAD value",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['blpop', 'no-key2', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['no-key2', 'first']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'no-key2', 'third', 'second', 'first'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n});",
              "err": {},
<<<<<<< HEAD
              "uuid": "5882f877-7208-41af-b909-73dce6847fcd",
              "parentUUID": "594beff5-7057-45e5-aada-e9f228b11a15",
=======
              "uuid": "71ddeb4b-e9d6-4c04-a655-7eb1b8c90c97",
              "parentUUID": "b911477f-e87d-4846-82df-c10bf83e3d33",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support blocking lpop against multiple lists in one call",
              "fullTitle": "blpop-command test should support blocking lpop against multiple lists in one call",
<<<<<<< HEAD
=======
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['blpop', 'list1', 'list2', 'list3', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['list2', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'list2', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "5877028b-0353-4f09-bab4-28302f9ffeb9",
              "parentUUID": "b911477f-e87d-4846-82df-c10bf83e3d33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the pushd value when it already exists even if a timeout is set",
              "fullTitle": "blpop-command test should return the pushd value when it already exists even if a timeout is set",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
<<<<<<< HEAD
              "code": "common_test_1.sendCommand(client, ['blpop', 'list1', 'list2', 'list3', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['list2', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'list2', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "78781075-9d1b-478f-9d0e-3022e9551524",
              "parentUUID": "594beff5-7057-45e5-aada-e9f228b11a15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the pushd value when it already exists even if a timeout is set",
              "fullTitle": "blpop-command test should return the pushd value when it already exists even if a timeout is set",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueKey = `poplpush${new Date().getTime()}`;\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', uniqueKey, 'third', 'second', 'first'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n    common_test_1.sendCommand(client, ['blpop', uniqueKey, '0'])\n        .then((response) => {\n        chai_1.expect(response).to.eql([uniqueKey, 'first']);\n        done();\n    });\n});",
              "err": {},
              "uuid": "aca6911f-7d07-48e1-abfc-9a1d3e9962d9",
              "parentUUID": "594beff5-7057-45e5-aada-e9f228b11a15",
=======
              "code": "const uniqueKey = `poplpush${new Date().getTime()}`;\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', uniqueKey, 'third', 'second', 'first'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n    common_test_1.sendCommand(client, ['blpop', uniqueKey, '0'])\n        .then((response) => {\n        chai_1.expect(response).to.eql([uniqueKey, 'first']);\n        done();\n    });\n});",
              "err": {},
              "uuid": "79f47f48-39b0-4d2e-ae21-979cb3c9e6ce",
              "parentUUID": "b911477f-e87d-4846-82df-c10bf83e3d33",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "5795ca51-ba05-49be-a0c7-2664b25fe96d",
            "04a128bf-2de7-4874-9d06-b1a9908550c7",
            "5882f877-7208-41af-b909-73dce6847fcd",
            "78781075-9d1b-478f-9d0e-3022e9551524",
            "aca6911f-7d07-48e1-abfc-9a1d3e9962d9"
=======
            "0d940ab0-4202-41a5-a14b-1ee59a542d2d",
            "7fd1ae84-072f-4a17-9a5c-48839d7d0021",
            "71ddeb4b-e9d6-4c04-a655-7eb1b8c90c97",
            "5877028b-0353-4f09-bab4-28302f9ffeb9",
            "79f47f48-39b0-4d2e-ae21-979cb3c9e6ce"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 1056,
=======
          "duration": 1043,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "fa022eff-6703-4e1a-a894-4f1f5e279b97",
=======
          "uuid": "41bff568-80f8-4d23-9622-f0a591b91163",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "brpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/brpop-command.test.ts",
          "file": "/test/resp/command/list/brpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "brpop-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 3,
=======
              "duration": 11,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "28799989-4cf4-40e9-8ae9-e2d705968dbf",
              "parentUUID": "fa022eff-6703-4e1a-a894-4f1f5e279b97",
=======
              "uuid": "95febc31-c608-44c6-a27c-db0b3d2df671",
              "parentUUID": "41bff568-80f8-4d23-9622-f0a591b91163",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "brpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "9ef57b40-d112-4648-9192-b6a0fcae0bef",
              "parentUUID": "fa022eff-6703-4e1a-a894-4f1f5e279b97",
=======
              "uuid": "83e23e6b-8a2f-4bea-a723-e42aad61d8f9",
              "parentUUID": "41bff568-80f8-4d23-9622-f0a591b91163",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "brpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "7e869910-a234-4d15-a803-e5a263a83a7f",
              "parentUUID": "fa022eff-6703-4e1a-a894-4f1f5e279b97",
=======
              "uuid": "8cfbb0af-aef0-4e72-a1fe-10d072115e3d",
              "parentUUID": "41bff568-80f8-4d23-9622-f0a591b91163",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "brpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "352a3551-61f7-4d7e-a3ba-7b091a43420c",
              "parentUUID": "fa022eff-6703-4e1a-a894-4f1f5e279b97",
=======
              "uuid": "71709e0f-9783-4642-9160-c8758daab5d9",
              "parentUUID": "41bff568-80f8-4d23-9622-f0a591b91163",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when timeout > 0 and list does not exist",
              "fullTitle": "brpop-command test should return NIL when timeout > 0 and list does not exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 1005,
=======
              "duration": 1009,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['brpop', 'no-key', '1']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "e7c2bbc9-696a-457c-a6fa-b319b74fb722",
              "parentUUID": "fa022eff-6703-4e1a-a894-4f1f5e279b97",
=======
              "uuid": "7f14c6dd-c25b-4b74-a236-087c343ca5ba",
              "parentUUID": "41bff568-80f8-4d23-9622-f0a591b91163",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should wait for a list to exist and return the list name and value",
              "fullTitle": "brpop-command test should wait for a list to exist and return the list name and value",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 9,
=======
              "duration": 10,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['brpop', 'no-key', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['no-key', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'no-key', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
<<<<<<< HEAD
              "uuid": "4500a524-8772-4a23-92aa-6e8b213e5dd2",
              "parentUUID": "fa022eff-6703-4e1a-a894-4f1f5e279b97",
=======
              "uuid": "c4799bdb-3f33-4031-8edb-2f8d58164efc",
              "parentUUID": "41bff568-80f8-4d23-9622-f0a591b91163",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the list name and TAIL value",
              "fullTitle": "brpop-command test should return the list name and TAIL value",
<<<<<<< HEAD
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['flushall'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    common_test_1.sendCommand(client, ['brpop', 'no-key2', '0'])\n        .then((response) => {\n        chai_1.expect(response).to.eql(['no-key2', 'first']);\n        done();\n    });\n    common_test_1.sendCommand(new net.Socket(), ['rpush', 'no-key2', 'third', 'second', 'first'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(3);\n    });\n});",
              "err": {},
              "uuid": "65c7163e-f7f3-46f6-a469-afd0c6999b6a",
              "parentUUID": "fa022eff-6703-4e1a-a894-4f1f5e279b97",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support blocking rpop against multiple lists in one call",
              "fullTitle": "brpop-command test should support blocking rpop against multiple lists in one call",
=======
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
<<<<<<< HEAD
              "code": "common_test_1.sendCommand(client, ['brpop', 'list1', 'list2', 'list3', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['list3', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'list3', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "681f381b-7fcb-46bd-9d07-714d9cdc2432",
              "parentUUID": "fa022eff-6703-4e1a-a894-4f1f5e279b97",
=======
              "code": "common_test_1.sendCommand(client, ['flushall'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    common_test_1.sendCommand(client, ['brpop', 'no-key2', '0'])\n        .then((response) => {\n        chai_1.expect(response).to.eql(['no-key2', 'first']);\n        done();\n    });\n    common_test_1.sendCommand(new net.Socket(), ['rpush', 'no-key2', 'third', 'second', 'first'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(3);\n    });\n});",
              "err": {},
              "uuid": "99ec7ebf-9bef-4c80-a2bf-02982820cc97",
              "parentUUID": "41bff568-80f8-4d23-9622-f0a591b91163",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
<<<<<<< HEAD
              "title": "should return the pushd value when it already exists even if a timeout is set",
              "fullTitle": "brpop-command test should return the pushd value when it already exists even if a timeout is set",
              "timedOut": false,
              "duration": 5,
=======
              "title": "should support blocking rpop against multiple lists in one call",
              "fullTitle": "brpop-command test should support blocking rpop against multiple lists in one call",
              "timedOut": false,
              "duration": 7,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
<<<<<<< HEAD
              "code": "const uniqueKey = `poprpush${new Date().getTime()}`;\ncommon_test_1.sendCommand(new net.Socket(), ['rpush', uniqueKey, 'third', 'second', 'first'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n    common_test_1.sendCommand(client, ['brpop', uniqueKey, '0'])\n        .then((response) => {\n        chai_1.expect(response).to.eql([uniqueKey, 'first']);\n        done();\n    });\n});",
              "err": {},
              "uuid": "bc30cc63-7e14-46d6-9f9d-e497aa22e3e6",
              "parentUUID": "fa022eff-6703-4e1a-a894-4f1f5e279b97",
=======
              "code": "common_test_1.sendCommand(client, ['brpop', 'list1', 'list2', 'list3', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['list3', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'list3', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "1e8a71c0-0bc4-442d-bfad-b3420b11172d",
              "parentUUID": "41bff568-80f8-4d23-9622-f0a591b91163",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the pushd value when it already exists even if a timeout is set",
              "fullTitle": "brpop-command test should return the pushd value when it already exists even if a timeout is set",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueKey = `poprpush${new Date().getTime()}`;\ncommon_test_1.sendCommand(new net.Socket(), ['rpush', uniqueKey, 'third', 'second', 'first'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n    common_test_1.sendCommand(client, ['brpop', uniqueKey, '0'])\n        .then((response) => {\n        chai_1.expect(response).to.eql([uniqueKey, 'first']);\n        done();\n    });\n});",
              "err": {},
              "uuid": "5f7d2e72-c56d-454f-af7f-c5be2068dae0",
              "parentUUID": "41bff568-80f8-4d23-9622-f0a591b91163",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "e7c2bbc9-696a-457c-a6fa-b319b74fb722",
            "4500a524-8772-4a23-92aa-6e8b213e5dd2",
            "65c7163e-f7f3-46f6-a469-afd0c6999b6a",
            "681f381b-7fcb-46bd-9d07-714d9cdc2432",
            "bc30cc63-7e14-46d6-9f9d-e497aa22e3e6"
=======
            "7f14c6dd-c25b-4b74-a236-087c343ca5ba",
            "c4799bdb-3f33-4031-8edb-2f8d58164efc",
            "99ec7ebf-9bef-4c80-a2bf-02982820cc97",
            "1e8a71c0-0bc4-442d-bfad-b3420b11172d",
            "5f7d2e72-c56d-454f-af7f-c5be2068dae0"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 1040,
=======
          "duration": 1047,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "1924e5c5-bc7b-492e-b07f-24fae89a74b5",
=======
          "uuid": "f0bb4a05-3bf0-4156-b3ea-5af9f91bd9c3",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "brpoplpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/brpoplpush-command.test.ts",
          "file": "/test/resp/command/list/brpoplpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "brpoplpush-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 4,
=======
              "duration": 9,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    done();\n}));\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "b6154aea-3cc1-4540-9b6e-cbc4637842ec",
              "parentUUID": "1924e5c5-bc7b-492e-b07f-24fae89a74b5",
=======
              "uuid": "6d94dcfd-4598-445e-935a-b66a3c973602",
              "parentUUID": "f0bb4a05-3bf0-4156-b3ea-5af9f91bd9c3",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "brpoplpush-command test \"before each\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 5,
=======
              "duration": 2,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        sinon.createSandbox();\n        yield common_test_1.sendCommand(client, ['flushall']);\n        yield common_test_1.sendCommand(client, ['select', '0']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "cdfd9b03-99b0-4d05-a28a-4a50969da897",
              "parentUUID": "1924e5c5-bc7b-492e-b07f-24fae89a74b5",
=======
              "uuid": "1a409e86-df89-442b-812b-12f80a1a8a3c",
              "parentUUID": "f0bb4a05-3bf0-4156-b3ea-5af9f91bd9c3",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "brpoplpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "c4a194f1-1042-41e6-9604-335af93d476a",
              "parentUUID": "1924e5c5-bc7b-492e-b07f-24fae89a74b5",
=======
              "uuid": "c9e2ca1b-b805-46b9-987c-6fab799e3090",
              "parentUUID": "f0bb4a05-3bf0-4156-b3ea-5af9f91bd9c3",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "brpoplpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "603d716b-31c4-4985-8219-32ffa94836f2",
              "parentUUID": "1924e5c5-bc7b-492e-b07f-24fae89a74b5",
=======
              "uuid": "b6c6aba3-262d-4406-8dac-740c8e31af23",
              "parentUUID": "f0bb4a05-3bf0-4156-b3ea-5af9f91bd9c3",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when destination does not exist and timeout expires",
              "fullTitle": "brpoplpush-command test should return NIL when destination does not exist and timeout expires",
<<<<<<< HEAD
=======
              "timedOut": false,
              "duration": 2008,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['brpoplpush', 'src', 'dst', '2']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "55efdd7d-a2dd-4bad-b25f-366524c7fe90",
              "parentUUID": "f0bb4a05-3bf0-4156-b3ea-5af9f91bd9c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the poplpushed value when lpush is called",
              "fullTitle": "brpoplpush-command test should return the poplpushed value when lpush is called",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "timedOut": false,
              "duration": 2004,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['brpoplpush', 'src', 'dst', '2']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "2c676fd7-c16e-4d97-b7a9-6d1202c6993a",
              "parentUUID": "1924e5c5-bc7b-492e-b07f-24fae89a74b5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the poplpushed value when lpush is called",
              "fullTitle": "brpoplpush-command test should return the poplpushed value when lpush is called",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['brpoplpush', 'poplpushkey', 'poplpopkey', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('value1');\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'poplpushkey', 'value1', 'value2', 'value3'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n});",
              "err": {},
<<<<<<< HEAD
              "uuid": "e33c4aa5-4600-4883-97d1-a4ee941af965",
              "parentUUID": "1924e5c5-bc7b-492e-b07f-24fae89a74b5",
=======
              "uuid": "ddbb9d86-5ef3-4c93-b174-2edc0401b6e2",
              "parentUUID": "f0bb4a05-3bf0-4156-b3ea-5af9f91bd9c3",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the pushd value when it already exists even if a timeout is set",
              "fullTitle": "brpoplpush-command test should return the pushd value when it already exists even if a timeout is set",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueKey = `poplpush${new Date().getTime()}`;\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', uniqueKey, 'value1', 'value2', 'value3'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n    common_test_1.sendCommand(client, ['brpoplpush', uniqueKey, 'poplpopkey', '0'])\n        .then((response) => {\n        chai_1.expect(response).to.equal('value1');\n        done();\n    });\n});",
              "err": {},
<<<<<<< HEAD
              "uuid": "2a848222-eef4-496c-869f-662fadaee1be",
              "parentUUID": "1924e5c5-bc7b-492e-b07f-24fae89a74b5",
=======
              "uuid": "c8c53a00-acaa-4889-84de-d96fd958e183",
              "parentUUID": "f0bb4a05-3bf0-4156-b3ea-5af9f91bd9c3",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "2c676fd7-c16e-4d97-b7a9-6d1202c6993a",
            "e33c4aa5-4600-4883-97d1-a4ee941af965",
            "2a848222-eef4-496c-869f-662fadaee1be"
=======
            "55efdd7d-a2dd-4bad-b25f-366524c7fe90",
            "ddbb9d86-5ef3-4c93-b174-2edc0401b6e2",
            "c8c53a00-acaa-4889-84de-d96fd958e183"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 2019,
=======
          "duration": 2013,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "5cf9c4ec-ee06-4275-870c-553d12487609",
=======
          "uuid": "def8d993-88b4-4b9f-b701-a88cc17c6ef3",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "lindex-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lindex-command.test.ts",
          "file": "/test/resp/command/list/lindex-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lindex-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 9,
=======
              "duration": 4,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "fdb1869b-e4ac-43a1-8771-79ec60e50a42",
              "parentUUID": "5cf9c4ec-ee06-4275-870c-553d12487609",
=======
              "uuid": "bd43a8c9-f6f1-40de-8065-4ccb3a81d4d9",
              "parentUUID": "def8d993-88b4-4b9f-b701-a88cc17c6ef3",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lindex-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "6e21bbff-23a9-4cb4-8593-37059c14eec0",
              "parentUUID": "5cf9c4ec-ee06-4275-870c-553d12487609",
=======
              "uuid": "91c3dc89-e5e6-4bea-8668-8ab0594de172",
              "parentUUID": "def8d993-88b4-4b9f-b701-a88cc17c6ef3",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lindex-command test \"after all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 0,
=======
              "duration": 1,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "e312ed80-7a40-4e7b-9489-a819172f3745",
              "parentUUID": "5cf9c4ec-ee06-4275-870c-553d12487609",
=======
              "uuid": "14690cb8-a69d-403b-8cc5-951367fee5b0",
              "parentUUID": "def8d993-88b4-4b9f-b701-a88cc17c6ef3",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lindex-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "48f41a2d-73e3-4346-9380-5326109ee8d1",
              "parentUUID": "5cf9c4ec-ee06-4275-870c-553d12487609",
=======
              "uuid": "2ff19e8d-6102-4da7-86a9-012e857cf0c6",
              "parentUUID": "def8d993-88b4-4b9f-b701-a88cc17c6ef3",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when lindex called with invalid index on non-existent key",
              "fullTitle": "lindex-command test should report NIL when lindex called with invalid index on non-existent key",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 6,
=======
              "duration": 2,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lindex', 'no-key', 'negative one thousand']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "1d3abd8d-aa0a-4dda-82b8-dc29563b1ae5",
              "parentUUID": "5cf9c4ec-ee06-4275-870c-553d12487609",
=======
              "uuid": "35685340-4129-44b4-b279-a026c042442c",
              "parentUUID": "def8d993-88b4-4b9f-b701-a88cc17c6ef3",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report ERR when attempting to get lindex of non-list key",
              "fullTitle": "lindex-command test should report ERR when attempting to get lindex of non-list key",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 5,
=======
              "duration": 2,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lindex', 'lkey', '0']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "80c20268-6521-4209-ba55-c7dc86f1c287",
              "parentUUID": "5cf9c4ec-ee06-4275-870c-553d12487609",
=======
              "uuid": "ffd01540-5186-4b17-bf20-a043eef0fffe",
              "parentUUID": "def8d993-88b4-4b9f-b701-a88cc17c6ef3",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the correct key at an index",
              "fullTitle": "lindex-command test should return the correct key at an index",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 25,
=======
              "duration": 15,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `lkey-${new Date().getTime()}`;\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '0']);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '1']);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-1']);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-100']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, 'two']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, 'a1', 'b2', 'c3']);\n        chai_1.expect(response).to.equal(6);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-6']);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-7']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '100']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "65ec7599-dde0-494b-9832-2c40cfbe6f0c",
              "parentUUID": "5cf9c4ec-ee06-4275-870c-553d12487609",
=======
              "uuid": "303a7502-af1e-49a8-8920-d43ccb040f60",
              "parentUUID": "def8d993-88b4-4b9f-b701-a88cc17c6ef3",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "1d3abd8d-aa0a-4dda-82b8-dc29563b1ae5",
            "80c20268-6521-4209-ba55-c7dc86f1c287",
            "65ec7599-dde0-494b-9832-2c40cfbe6f0c"
=======
            "35685340-4129-44b4-b279-a026c042442c",
            "ffd01540-5186-4b17-bf20-a043eef0fffe",
            "303a7502-af1e-49a8-8920-d43ccb040f60"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 36,
=======
          "duration": 19,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "a13acf9d-a8d3-4bf1-9532-10d24da68940",
=======
          "uuid": "e0c911ad-4acf-4ccf-9bae-757b39458831",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "llen-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/llen-command.test.ts",
          "file": "/test/resp/command/list/llen-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "llen-command test \"before all\" hook",
              "timedOut": false,
              "duration": 37,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "b7361e01-a465-430f-ad42-f62e0e4da0b9",
              "parentUUID": "a13acf9d-a8d3-4bf1-9532-10d24da68940",
=======
              "uuid": "7abd225c-d076-4f08-a844-e89ed1dbafdd",
              "parentUUID": "e0c911ad-4acf-4ccf-9bae-757b39458831",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "llen-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "ef68df73-121f-4e21-a248-3fa8f69bbec8",
              "parentUUID": "a13acf9d-a8d3-4bf1-9532-10d24da68940",
=======
              "uuid": "c935465e-3c2f-4fde-aed7-f512cab4fdcd",
              "parentUUID": "e0c911ad-4acf-4ccf-9bae-757b39458831",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "llen-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "2dd3d690-dcc0-40e7-9dd0-1daacd959003",
              "parentUUID": "a13acf9d-a8d3-4bf1-9532-10d24da68940",
=======
              "uuid": "6c5d713b-3fa4-4fa5-8ce7-c3e8a04c3d04",
              "parentUUID": "e0c911ad-4acf-4ccf-9bae-757b39458831",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "llen-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "7d5121ac-1621-4732-8300-ca00971bebf6",
              "parentUUID": "a13acf9d-a8d3-4bf1-9532-10d24da68940",
=======
              "uuid": "0ce20ce4-290f-42b8-a1b1-f87832d665a6",
              "parentUUID": "e0c911ad-4acf-4ccf-9bae-757b39458831",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report 0 when llen called on non-existent key",
              "fullTitle": "llen-command test should report 0 when llen called on non-existent key",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 3,
=======
              "duration": 2,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['llen', 'no-key']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "eccd45f2-a852-4f81-a919-460c0f840878",
              "parentUUID": "a13acf9d-a8d3-4bf1-9532-10d24da68940",
=======
              "uuid": "aaa8ae35-b4a8-4255-8d08-cac2cf10ee4f",
              "parentUUID": "e0c911ad-4acf-4ccf-9bae-757b39458831",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report WRONGTYPE when attempting to get llen of non-list key",
              "fullTitle": "llen-command test should report WRONGTYPE when attempting to get llen of non-list key",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'lkey']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "1131c40a-6442-4cd0-a1a0-f9c1c7ecc1d5",
              "parentUUID": "a13acf9d-a8d3-4bf1-9532-10d24da68940",
=======
              "uuid": "f3b64062-b94c-4f68-8010-b48f0480460e",
              "parentUUID": "e0c911ad-4acf-4ccf-9bae-757b39458831",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the correct list length",
              "fullTitle": "llen-command test should return the correct list length",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 16,
=======
              "duration": 9,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `lkey-${new Date().getTime()}`;\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal(null);\n        // The list goes away when the last element is popped\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, '-6']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "c6db6934-9db1-4c1b-b434-fbae26cfc13b",
              "parentUUID": "a13acf9d-a8d3-4bf1-9532-10d24da68940",
=======
              "uuid": "d9088ff0-1b7f-4d2b-9790-ce1a7b1dde5a",
              "parentUUID": "e0c911ad-4acf-4ccf-9bae-757b39458831",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "eccd45f2-a852-4f81-a919-460c0f840878",
            "1131c40a-6442-4cd0-a1a0-f9c1c7ecc1d5",
            "c6db6934-9db1-4c1b-b434-fbae26cfc13b"
=======
            "aaa8ae35-b4a8-4255-8d08-cac2cf10ee4f",
            "f3b64062-b94c-4f68-8010-b48f0480460e",
            "d9088ff0-1b7f-4d2b-9790-ce1a7b1dde5a"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 22,
=======
          "duration": 16,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "dad71a75-ca5f-4e31-b846-45e6de95d670",
=======
          "uuid": "7ecdc7b7-218b-4962-a43a-ba36d249bbd0",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "lpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lpop-command.test.ts",
          "file": "/test/resp/command/list/lpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lpop-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 20,
=======
              "duration": 14,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "e9284d84-32c4-4b46-93d0-928f6ded3dcf",
              "parentUUID": "dad71a75-ca5f-4e31-b846-45e6de95d670",
=======
              "uuid": "6f43713d-5d9a-44be-8ab2-bdb306218ece",
              "parentUUID": "7ecdc7b7-218b-4962-a43a-ba36d249bbd0",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "cfd881ad-c1f1-427e-b401-1a8bd5ab9143",
              "parentUUID": "dad71a75-ca5f-4e31-b846-45e6de95d670",
=======
              "uuid": "04fc821e-217b-47f1-8987-55fc7a889b20",
              "parentUUID": "7ecdc7b7-218b-4962-a43a-ba36d249bbd0",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "414907c4-41ff-4399-b4df-ca6e57f8cb33",
              "parentUUID": "dad71a75-ca5f-4e31-b846-45e6de95d670",
=======
              "uuid": "6ff229af-14cd-4b41-918e-4fc6b9f1e5db",
              "parentUUID": "7ecdc7b7-218b-4962-a43a-ba36d249bbd0",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "6371cbd3-9a0b-41da-94c6-83bfa809a2f3",
              "parentUUID": "dad71a75-ca5f-4e31-b846-45e6de95d670",
=======
              "uuid": "3b321e96-2640-4809-ba50-40d9f5444a81",
              "parentUUID": "7ecdc7b7-218b-4962-a43a-ba36d249bbd0",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when lpop called on non-existent key",
              "fullTitle": "lpop-command test should report NIL when lpop called on non-existent key",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lpop', 'no-key']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['exists', 'no-key']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "f5d2adc3-f965-443c-80fe-a775a72cc129",
              "parentUUID": "dad71a75-ca5f-4e31-b846-45e6de95d670",
=======
              "uuid": "e652a6c5-4a13-47c6-b1a9-0d2ab09fdeb5",
              "parentUUID": "7ecdc7b7-218b-4962-a43a-ba36d249bbd0",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return values from the left side of a list",
              "fullTitle": "lpop-command test should return values from the left side of a list",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 19,
=======
              "duration": 26,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', testKey, 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('d');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal(null);\n        // The list goes away when the last element is removed\n        response = yield common_test_1.sendCommand(client, ['exists', testKey]);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "053c86ee-6f6c-46b6-baeb-39971791e89c",
              "parentUUID": "dad71a75-ca5f-4e31-b846-45e6de95d670",
=======
              "uuid": "3c692585-2a4a-44f5-907e-9c06d2fabec0",
              "parentUUID": "7ecdc7b7-218b-4962-a43a-ba36d249bbd0",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "f5d2adc3-f965-443c-80fe-a775a72cc129",
            "053c86ee-6f6c-46b6-baeb-39971791e89c"
=======
            "e652a6c5-4a13-47c6-b1a9-0d2ab09fdeb5",
            "3c692585-2a4a-44f5-907e-9c06d2fabec0"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 23,
=======
          "duration": 32,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "9b93be57-16ca-4a90-b85e-3b619bfb7298",
=======
          "uuid": "8be7eedc-426a-46f4-883e-f10e57b32f51",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "lpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lpush-command.test.ts",
          "file": "/test/resp/command/list/lpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lpush-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 27,
=======
              "duration": 5,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "29233eb7-ddae-454a-ac36-51e1a5f088a2",
              "parentUUID": "9b93be57-16ca-4a90-b85e-3b619bfb7298",
=======
              "uuid": "2952ca46-0af4-4a01-adb2-a427679d97b6",
              "parentUUID": "8be7eedc-426a-46f4-883e-f10e57b32f51",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "4d862ac8-95e0-4f09-8133-1ff1d8b42acb",
              "parentUUID": "9b93be57-16ca-4a90-b85e-3b619bfb7298",
=======
              "uuid": "88ca2b68-e5fd-4f65-b3c2-dabb911c162d",
              "parentUUID": "8be7eedc-426a-46f4-883e-f10e57b32f51",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lpush-command test \"after all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 1,
=======
              "duration": 0,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "f413384c-85b1-4648-8b43-e6210ac89b4a",
              "parentUUID": "9b93be57-16ca-4a90-b85e-3b619bfb7298",
=======
              "uuid": "18a9b98e-731b-41b7-a2c7-14190b08cc7a",
              "parentUUID": "8be7eedc-426a-46f4-883e-f10e57b32f51",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "00f07385-a504-4be6-b293-f8573d3c9b66",
              "parentUUID": "9b93be57-16ca-4a90-b85e-3b619bfb7298",
=======
              "uuid": "c60bebc1-701e-4981-b248-c700fb5f72b8",
              "parentUUID": "8be7eedc-426a-46f4-883e-f10e57b32f51",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ERR when attempting to lpush to a non-list key",
              "fullTitle": "lpush-command test should report ERR when attempting to lpush to a non-list key",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 20,
=======
              "duration": 21,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'lkey', '0']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "7ab4c5a7-6a72-4b14-a2b8-005149c57cee",
              "parentUUID": "9b93be57-16ca-4a90-b85e-3b619bfb7298",
=======
              "uuid": "99b10758-0c40-48b8-9741-23b94b169c57",
              "parentUUID": "8be7eedc-426a-46f4-883e-f10e57b32f51",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a list if it doesn't already exist",
              "fullTitle": "lpush-command test should create a list if it doesn't already exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 3,
=======
              "duration": 5,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exists', testKey]);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['lpush', testKey, 'a', 'b', 'c']);\n        // The list is now 'c', 'b', 'a'\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['exists', testKey]);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "bf1e4875-bcca-4222-aa56-4f92ad5d2532",
              "parentUUID": "9b93be57-16ca-4a90-b85e-3b619bfb7298",
=======
              "uuid": "a5ba25ca-e587-410e-848c-71d75ddff54c",
              "parentUUID": "8be7eedc-426a-46f4-883e-f10e57b32f51",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the list in a predicatble order",
              "fullTitle": "lpush-command test should have created the list in a predicatble order",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 7,
=======
              "duration": 6,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lindex', testKey, '1']);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['llen', testKey]);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpop', testKey]);\n        chai_1.expect(response).to.equal('a');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "e6228f60-e624-49ec-81ad-ca159e1c937f",
              "parentUUID": "9b93be57-16ca-4a90-b85e-3b619bfb7298",
=======
              "uuid": "d3884ea2-cef4-4ffd-bca5-d1def9ae0320",
              "parentUUID": "8be7eedc-426a-46f4-883e-f10e57b32f51",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "7ab4c5a7-6a72-4b14-a2b8-005149c57cee",
            "bf1e4875-bcca-4222-aa56-4f92ad5d2532",
            "e6228f60-e624-49ec-81ad-ca159e1c937f"
=======
            "99b10758-0c40-48b8-9741-23b94b169c57",
            "a5ba25ca-e587-410e-848c-71d75ddff54c",
            "d3884ea2-cef4-4ffd-bca5-d1def9ae0320"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 30,
=======
          "duration": 32,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "519b545f-6b16-4934-9ac4-d5cfb720fd7b",
=======
          "uuid": "e074a98b-129f-459f-8fb7-63244b626d2e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "lrange-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lrange-command.test.ts",
          "file": "/test/resp/command/list/lrange-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lrange-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 22,
=======
              "duration": 20,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "aa9b6d9d-1bfb-48ee-9e76-65c32a7cc4c0",
              "parentUUID": "519b545f-6b16-4934-9ac4-d5cfb720fd7b",
=======
              "uuid": "f2638382-562a-411d-8df0-f6f42e9d3c11",
              "parentUUID": "e074a98b-129f-459f-8fb7-63244b626d2e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lrange-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "8f80c72c-0b8b-40e6-8ff8-b3f7cd13714a",
              "parentUUID": "519b545f-6b16-4934-9ac4-d5cfb720fd7b",
=======
              "uuid": "0b4ca3f3-9cd9-417a-a20e-29f2ac050b23",
              "parentUUID": "e074a98b-129f-459f-8fb7-63244b626d2e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lrange-command test \"after all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 0,
=======
              "duration": 1,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "c9f7f1a1-5d10-4dd4-9c11-8d64fc6ea359",
              "parentUUID": "519b545f-6b16-4934-9ac4-d5cfb720fd7b",
=======
              "uuid": "302bd3ae-186d-4a6d-85c0-56ad204a0b5e",
              "parentUUID": "e074a98b-129f-459f-8fb7-63244b626d2e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lrange-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "f7d183d6-227d-45d9-9158-e8076be17598",
              "parentUUID": "519b545f-6b16-4934-9ac4-d5cfb720fd7b",
=======
              "uuid": "2c21e9ea-3333-44ea-9910-dfd44abd158f",
              "parentUUID": "e074a98b-129f-459f-8fb7-63244b626d2e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "return an empty list when the key does not exist",
              "fullTitle": "lrange-command test return an empty list when the key does not exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 9,
=======
              "duration": 4,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', '0', '100']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "a1322058-b55c-46bc-bc96-3e438bd3fdb0",
              "parentUUID": "519b545f-6b16-4934-9ac4-d5cfb720fd7b",
=======
              "uuid": "db981d6b-429f-44ce-bceb-848e05c7ed68",
              "parentUUID": "e074a98b-129f-459f-8fb7-63244b626d2e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report an error when start or stop index are invalid",
              "fullTitle": "lrange-command test should report an error when start or stop index are invalid",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', 'negative one', '-2']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', '0', 'negative two']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', '-1', '-100']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "d978d98b-998a-4186-bdda-a2a6d4d1ea4b",
              "parentUUID": "519b545f-6b16-4934-9ac4-d5cfb720fd7b",
=======
              "uuid": "fa307a51-ff31-4367-a5c5-38721fee5e0d",
              "parentUUID": "e074a98b-129f-459f-8fb7-63244b626d2e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return predictable results",
              "fullTitle": "lrange-command test should return predictable results",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 4,
=======
              "duration": 3,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', 'newlist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'newlist', 'world']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'newlist', '0', '-1']);\n        chai_1.expect(response).to.eql(['hello', 'world']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "b0882d9c-05db-4fc8-9981-cc829806696f",
              "parentUUID": "519b545f-6b16-4934-9ac4-d5cfb720fd7b",
=======
              "uuid": "48a2a6dd-1ccd-4e38-b2df-3431507ba395",
              "parentUUID": "e074a98b-129f-459f-8fb7-63244b626d2e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reproduce the results from the redis documentation",
              "fullTitle": "lrange-command test should reproduce the results from the redis documentation",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 23,
=======
              "duration": 22,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', 'doclist', 'one']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'doclist', 'two']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'doclist', 'three']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '0', '0']);\n        chai_1.expect(response).to.eql(['one']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '-3', '2']);\n        chai_1.expect(response).to.eql(['one', 'two', 'three']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '-100', '100']);\n        chai_1.expect(response).to.eql(['one', 'two', 'three']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '5', '10']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "00d3222e-a210-4190-9597-338cc9035b41",
              "parentUUID": "519b545f-6b16-4934-9ac4-d5cfb720fd7b",
=======
              "uuid": "52e4d202-fd5f-4f81-87fc-3faa541860c1",
              "parentUUID": "e074a98b-129f-459f-8fb7-63244b626d2e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "a1322058-b55c-46bc-bc96-3e438bd3fdb0",
            "d978d98b-998a-4186-bdda-a2a6d4d1ea4b",
            "b0882d9c-05db-4fc8-9981-cc829806696f",
            "00d3222e-a210-4190-9597-338cc9035b41"
=======
            "db981d6b-429f-44ce-bceb-848e05c7ed68",
            "fa307a51-ff31-4367-a5c5-38721fee5e0d",
            "48a2a6dd-1ccd-4e38-b2df-3431507ba395",
            "52e4d202-fd5f-4f81-87fc-3faa541860c1"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 41,
=======
          "duration": 34,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "6c1acc04-08d3-4d57-83a2-843a32f3589e",
=======
          "uuid": "c94d5512-3096-4057-9f04-120d80026658",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "lrem-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lrem-command.test.ts",
          "file": "/test/resp/command/list/lrem-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lrem-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 25,
=======
              "duration": 26,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "26e1de54-cf9a-40cf-989c-0eb0a3765b20",
              "parentUUID": "6c1acc04-08d3-4d57-83a2-843a32f3589e",
=======
              "uuid": "4a83cda4-3004-44d8-a76f-2eafe23b33ef",
              "parentUUID": "c94d5512-3096-4057-9f04-120d80026658",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lrem-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "d8e41f7d-e5f1-44d8-a4bd-2bb14b846a84",
              "parentUUID": "6c1acc04-08d3-4d57-83a2-843a32f3589e",
=======
              "uuid": "5b152fd2-6525-4d9a-9d53-9eb24da7be1b",
              "parentUUID": "c94d5512-3096-4057-9f04-120d80026658",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lrem-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "7dc2a20a-57e7-458b-a196-faeb95f4b5b8",
              "parentUUID": "6c1acc04-08d3-4d57-83a2-843a32f3589e",
=======
              "uuid": "4db592cc-3852-4ae0-b7ce-6e4e22ef557b",
              "parentUUID": "c94d5512-3096-4057-9f04-120d80026658",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lrem-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "6edfe8cc-e372-4359-b9e3-b4340738725b",
              "parentUUID": "6c1acc04-08d3-4d57-83a2-843a32f3589e",
=======
              "uuid": "ab8bcf41-1155-411e-96b9-758573615b99",
              "parentUUID": "c94d5512-3096-4057-9f04-120d80026658",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should NOT report 0 when lrem called with invalid non-existent key",
              "fullTitle": "lrem-command test should NOT report 0 when lrem called with invalid non-existent key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'no-key', 'negative one thousand', 'test']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "7e682031-1833-4702-a7ee-1846a102c9ec",
              "parentUUID": "6c1acc04-08d3-4d57-83a2-843a32f3589e",
=======
              "uuid": "26740e92-6c45-4a58-b858-db1f89a64a51",
              "parentUUID": "c94d5512-3096-4057-9f04-120d80026658",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report ERR when lrem called against existing key with invalid count argument",
              "fullTitle": "lrem-command test should report ERR when lrem called against existing key with invalid count argument",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 7,
=======
              "duration": 3,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lpush', 'lrem', 'akey']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'lrem', 'negative one thousand', 'test']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "650dbcc1-2c9a-429e-bb4d-5abbc25c968a",
              "parentUUID": "6c1acc04-08d3-4d57-83a2-843a32f3589e",
=======
              "uuid": "0bd88589-0a85-4b4f-80a2-d4c95cd51085",
              "parentUUID": "c94d5512-3096-4057-9f04-120d80026658",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report 0 when lrem called with valid arguments and non-existing element",
              "fullTitle": "lrem-command test should report 0 when lrem called with valid arguments and non-existing element",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 3,
=======
              "duration": 2,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'lrem', '0', 'does not exist']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "fb47134c-4908-403c-85c4-d3ab52639521",
              "parentUUID": "6c1acc04-08d3-4d57-83a2-843a32f3589e",
=======
              "uuid": "041cd126-5d6e-4e6b-98b4-b72882389710",
              "parentUUID": "c94d5512-3096-4057-9f04-120d80026658",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should use negative index counters",
              "fullTitle": "lrem-command test should use negative index counters",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 44,
              "state": "passed",
              "speed": "medium",
=======
              "duration": 19,
              "state": "passed",
              "speed": "fast",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'foo']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '-2', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '-1']);\n        chai_1.expect(response).to.eql(['hello', 'foo']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "49f5fd65-b095-4a14-b0b0-647cd7a1ea11",
              "parentUUID": "6c1acc04-08d3-4d57-83a2-843a32f3589e",
=======
              "uuid": "63373c6a-374d-442f-bbd2-e5ea87996615",
              "parentUUID": "c94d5512-3096-4057-9f04-120d80026658",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a ZERO result when the key does not exist",
              "fullTitle": "lrem-command test should return a ZERO result when the key does not exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 1,
=======
              "duration": 2,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'otherlist', '1', 'test']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "477a4fcd-7007-4fce-9b15-5e48945476aa",
              "parentUUID": "6c1acc04-08d3-4d57-83a2-843a32f3589e",
=======
              "uuid": "04df75d1-7f06-4ea4-868d-3e23a6a59546",
              "parentUUID": "c94d5512-3096-4057-9f04-120d80026658",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove every matchin element when count is 0",
              "fullTitle": "lrem-command test should remove every matchin element when count is 0",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 5,
=======
              "duration": 9,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushdb']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'foo']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '0', 'hello']);\n        chai_1.expect(response).to.equal(3);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "d4d173c2-cf03-4d4b-8cb2-70e8b582dec4",
              "parentUUID": "6c1acc04-08d3-4d57-83a2-843a32f3589e",
=======
              "uuid": "9022687b-925d-4819-a3cd-57290a392180",
              "parentUUID": "c94d5512-3096-4057-9f04-120d80026658",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove the list when all elements are gone",
              "fullTitle": "lrem-command test should remove the list when all elements are gone",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '0', 'foo']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mylist']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "e3971475-2cea-4e1d-ad4e-5e3f31e48434",
              "parentUUID": "6c1acc04-08d3-4d57-83a2-843a32f3589e",
=======
              "uuid": "971bb4dd-6e42-4390-bd2f-7a25d4d3a986",
              "parentUUID": "c94d5512-3096-4057-9f04-120d80026658",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove only the number of requested elements when count > 0",
              "fullTitle": "lrem-command test should remove only the number of requested elements when count > 0",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 13,
=======
              "duration": 19,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'calibrate']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '1', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '2']);\n        chai_1.expect(response).to.eql(['hello', 'calibrate', 'hello']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "9ff3870d-1831-45db-8408-73824677e77e",
              "parentUUID": "6c1acc04-08d3-4d57-83a2-843a32f3589e",
=======
              "uuid": "1b521ffa-dc90-43c1-aa1e-cdbfbc034993",
              "parentUUID": "c94d5512-3096-4057-9f04-120d80026658",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should default to startIndex ZERO when it is less than ZERO",
              "fullTitle": "lrem-command test should default to startIndex ZERO when it is less than ZERO",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 35,
=======
              "duration": 31,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let i = 0; i < 10; i++) {\n            response = yield common_test_1.sendCommand(client, ['RPUSH', 'newlist', `${i}`]);\n            chai_1.expect(response).to.equal(i + 1);\n        }\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'newlist', '-100', '2']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'newlist']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'newlist', '0', '3']);\n        chai_1.expect(response).to.eql(['0', '1', '2']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "5c567cea-c945-45af-bdb0-d7ad12b0a4c8",
              "parentUUID": "6c1acc04-08d3-4d57-83a2-843a32f3589e",
=======
              "uuid": "fc35eeed-e86e-4ca1-8e73-e5c99ec5f7ed",
              "parentUUID": "c94d5512-3096-4057-9f04-120d80026658",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove the list when start > end or start > llen",
              "fullTitle": "lrem-command test should remove the list when start > end or start > llen",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 4,
=======
              "duration": 10,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exists', 'newlist']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'newlist', '10', '2']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'newlist']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "afa978f5-30be-4d13-b891-0d79247a8ffa",
              "parentUUID": "6c1acc04-08d3-4d57-83a2-843a32f3589e",
=======
              "uuid": "f34b7aef-d371-40d8-8f39-7b03275fdd98",
              "parentUUID": "c94d5512-3096-4057-9f04-120d80026658",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should properly handle a negative endIndex",
              "fullTitle": "lrem-command test should properly handle a negative endIndex",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 29,
=======
              "duration": 10,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let i = 0; i < 7; i++) {\n            response = yield common_test_1.sendCommand(client, ['RPUSH', 'neglist', `${i}`]);\n            chai_1.expect(response).to.equal(i + 1);\n        }\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'neglist', '-100', '-3']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'neglist', '0', '100']);\n        chai_1.expect(response).to.eql(['0', '1', '2', '3', '4']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "250b517c-dc04-4bcd-a1be-e75203d939de",
              "parentUUID": "6c1acc04-08d3-4d57-83a2-843a32f3589e",
=======
              "uuid": "ff760a9e-9d70-4802-b200-b863a782c755",
              "parentUUID": "c94d5512-3096-4057-9f04-120d80026658",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove the key when abs(endIndex) is > llen",
              "fullTitle": "lrem-command test should remove the key when abs(endIndex) is > llen",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 20,
=======
              "duration": 11,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'neglist', '-100', '-6']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'neglist']);\n        chai_1.expect(response).to.eql(0);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "ce62dc2b-841b-4868-9706-3f394330223a",
              "parentUUID": "6c1acc04-08d3-4d57-83a2-843a32f3589e",
=======
              "uuid": "6dde293f-bdab-49d0-91f2-90aca9778062",
              "parentUUID": "c94d5512-3096-4057-9f04-120d80026658",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "7e682031-1833-4702-a7ee-1846a102c9ec",
            "650dbcc1-2c9a-429e-bb4d-5abbc25c968a",
            "fb47134c-4908-403c-85c4-d3ab52639521",
            "49f5fd65-b095-4a14-b0b0-647cd7a1ea11",
            "477a4fcd-7007-4fce-9b15-5e48945476aa",
            "d4d173c2-cf03-4d4b-8cb2-70e8b582dec4",
            "e3971475-2cea-4e1d-ad4e-5e3f31e48434",
            "9ff3870d-1831-45db-8408-73824677e77e",
            "5c567cea-c945-45af-bdb0-d7ad12b0a4c8",
            "afa978f5-30be-4d13-b891-0d79247a8ffa",
            "250b517c-dc04-4bcd-a1be-e75203d939de",
            "ce62dc2b-841b-4868-9706-3f394330223a"
=======
            "26740e92-6c45-4a58-b858-db1f89a64a51",
            "0bd88589-0a85-4b4f-80a2-d4c95cd51085",
            "041cd126-5d6e-4e6b-98b4-b72882389710",
            "63373c6a-374d-442f-bbd2-e5ea87996615",
            "04df75d1-7f06-4ea4-868d-3e23a6a59546",
            "9022687b-925d-4819-a3cd-57290a392180",
            "971bb4dd-6e42-4390-bd2f-7a25d4d3a986",
            "1b521ffa-dc90-43c1-aa1e-cdbfbc034993",
            "fc35eeed-e86e-4ca1-8e73-e5c99ec5f7ed",
            "f34b7aef-d371-40d8-8f39-7b03275fdd98",
            "ff760a9e-9d70-4802-b200-b863a782c755",
            "6dde293f-bdab-49d0-91f2-90aca9778062"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 166,
=======
          "duration": 121,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "adef50f0-7e89-4ef4-b8f8-39ea03745136",
=======
          "uuid": "ad53e4d0-a68a-465a-a35b-e4cfaafa810f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "lset-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lset-command.test.ts",
          "file": "/test/resp/command/list/lset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lset-command test \"before all\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "9b4b8e78-401f-4351-bbde-547f6392a68b",
              "parentUUID": "adef50f0-7e89-4ef4-b8f8-39ea03745136",
=======
              "uuid": "c8b7e32a-3142-4f2a-9efa-d85039f12eb5",
              "parentUUID": "ad53e4d0-a68a-465a-a35b-e4cfaafa810f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lset-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "8f791332-fe24-4796-9703-d2fe629ae0d4",
              "parentUUID": "adef50f0-7e89-4ef4-b8f8-39ea03745136",
=======
              "uuid": "2f7925d0-5067-4655-9495-91c429c215e0",
              "parentUUID": "ad53e4d0-a68a-465a-a35b-e4cfaafa810f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lset-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "3425d02b-6793-47dd-878c-3131943bee82",
              "parentUUID": "adef50f0-7e89-4ef4-b8f8-39ea03745136",
=======
              "uuid": "32bfaffb-d58a-49be-98e5-894b39ae22d4",
              "parentUUID": "ad53e4d0-a68a-465a-a35b-e4cfaafa810f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lset-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "f55df6cc-bd08-43c6-bf87-29ed13f9738d",
              "parentUUID": "adef50f0-7e89-4ef4-b8f8-39ea03745136",
=======
              "uuid": "8f8a9a9d-a13f-4297-ac75-c52fef0cf34c",
              "parentUUID": "ad53e4d0-a68a-465a-a35b-e4cfaafa810f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should fail when a key does not exist",
              "fullTitle": "lset-command test should fail when a key does not exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 3,
=======
              "duration": 24,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lset', 'no-key', 'negative one thousand', 'test']);\n        chai_1.expect(response).to.equal('ReplyError: ERR no such key');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "5ad7192e-7e7e-4515-85c8-7b0350db952c",
              "parentUUID": "adef50f0-7e89-4ef4-b8f8-39ea03745136",
=======
              "uuid": "82424aac-1396-445d-9a9f-c1105ca14910",
              "parentUUID": "ad53e4d0-a68a-465a-a35b-e4cfaafa810f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should replace a valid index",
              "fullTitle": "lset-command test should replace a valid index",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', testkey, 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lset', testkey, '-1', 'z']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lrange', testkey, '0', '3']);\n        chai_1.expect(response).to.eql(['a', 'b', 'z']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "caabfa25-b148-4e6f-b871-1258dc6b2907",
              "parentUUID": "adef50f0-7e89-4ef4-b8f8-39ea03745136",
=======
              "uuid": "5dd3e5ec-1dbd-4b98-a3a1-4c8352326e00",
              "parentUUID": "ad53e4d0-a68a-465a-a35b-e4cfaafa810f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should recognize invalid indexes",
              "fullTitle": "lset-command test should recognize invalid indexes",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lset', testkey, 'invalid', '3']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "fc2a0a08-8908-481f-a7d1-b396fa3f46df",
              "parentUUID": "adef50f0-7e89-4ef4-b8f8-39ea03745136",
=======
              "uuid": "63e9fcf0-dbc8-4845-9a9c-72a46785ee0b",
              "parentUUID": "ad53e4d0-a68a-465a-a35b-e4cfaafa810f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "5ad7192e-7e7e-4515-85c8-7b0350db952c",
            "caabfa25-b148-4e6f-b871-1258dc6b2907",
            "fc2a0a08-8908-481f-a7d1-b396fa3f46df"
=======
            "82424aac-1396-445d-9a9f-c1105ca14910",
            "5dd3e5ec-1dbd-4b98-a3a1-4c8352326e00",
            "63e9fcf0-dbc8-4845-9a9c-72a46785ee0b"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 9,
=======
          "duration": 30,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "be6edc07-cd62-4c8d-8be0-9f7587660d17",
=======
          "uuid": "fd9654be-2399-4f48-881f-0cef66f44d4f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "ltrim-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/ltrim-command.test.ts",
          "file": "/test/resp/command/list/ltrim-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "ltrim-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 6,
=======
              "duration": 20,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "9b60b15c-6981-44d5-83d3-d603101d534c",
              "parentUUID": "be6edc07-cd62-4c8d-8be0-9f7587660d17",
=======
              "uuid": "86572baa-33e9-4f38-a886-21dbab5369ae",
              "parentUUID": "fd9654be-2399-4f48-881f-0cef66f44d4f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "ltrim-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "0e0bc25f-b740-446a-999a-56b8e07a6541",
              "parentUUID": "be6edc07-cd62-4c8d-8be0-9f7587660d17",
=======
              "uuid": "7efb6769-29a4-4123-acc7-1e4ee428b379",
              "parentUUID": "fd9654be-2399-4f48-881f-0cef66f44d4f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "ltrim-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "e09c5058-175c-455e-9c72-7375c45e6f58",
              "parentUUID": "be6edc07-cd62-4c8d-8be0-9f7587660d17",
=======
              "uuid": "e0aba82e-dab6-4e64-afcb-4d1aa808888e",
              "parentUUID": "fd9654be-2399-4f48-881f-0cef66f44d4f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "ltrim-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "afffcd7c-0a1c-49e8-bb00-d0a96f7415c8",
              "parentUUID": "be6edc07-cd62-4c8d-8be0-9f7587660d17",
=======
              "uuid": "e4e544db-1169-4a02-bdd4-68d4b71b89c7",
              "parentUUID": "fd9654be-2399-4f48-881f-0cef66f44d4f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report OK when the key does not exist",
              "fullTitle": "ltrim-command test should report OK when the key does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'no-key', '0', '100']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "4782c838-792c-4a08-ae0c-0bd30e9fb390",
              "parentUUID": "be6edc07-cd62-4c8d-8be0-9f7587660d17",
=======
              "uuid": "c37dd16e-ebd7-4787-bd89-a34faf3dfef2",
              "parentUUID": "fd9654be-2399-4f48-881f-0cef66f44d4f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should trim a list to the requested size or less",
              "fullTitle": "ltrim-command test should trim a list to the requested size or less",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'calibrate']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '3']);\n        chai_1.expect(response).to.eql(['hello', 'hello', 'calibrate', 'hello']);\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'mylist', '0', '100']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '3']);\n        chai_1.expect(response).to.eql(['hello', 'hello', 'calibrate', 'hello']);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'mylist', '1', '4']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '3']);\n        chai_1.expect(response).to.eql(['hello', 'calibrate', 'hello']);\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'mylist', '-2', '1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '1']);\n        chai_1.expect(response).to.eql(['calibrate']);\n    })",
              "err": {},
              "uuid": "96268e7f-9646-4f03-b5cd-6d0c89bb67b5",
              "parentUUID": "fd9654be-2399-4f48-881f-0cef66f44d4f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject an invalid start index",
              "fullTitle": "ltrim-command test should reject an invalid start index",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'testlist', 'wrong', '10']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "212d6d5e-b6b9-45fe-9258-c43da7894e25",
              "parentUUID": "fd9654be-2399-4f48-881f-0cef66f44d4f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c37dd16e-ebd7-4787-bd89-a34faf3dfef2",
            "96268e7f-9646-4f03-b5cd-6d0c89bb67b5",
            "212d6d5e-b6b9-45fe-9258-c43da7894e25"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 41,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1a9ff170-6f39-4dae-927e-3ee9ff5a9743",
          "title": "rpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/rpop-command.test.ts",
          "file": "/test/resp/command/list/rpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rpop-command test \"before all\" hook",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "0ebb9d39-8368-4ab6-bcb7-71406abc809b",
              "parentUUID": "1a9ff170-6f39-4dae-927e-3ee9ff5a9743",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "c5a3b623-096c-4ab6-b937-8d05fc0168fd",
              "parentUUID": "1a9ff170-6f39-4dae-927e-3ee9ff5a9743",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "47ff4ab9-831d-4625-ac7c-901eab58b78a",
              "parentUUID": "1a9ff170-6f39-4dae-927e-3ee9ff5a9743",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "882e2d07-aa36-4260-8fb4-e0420d06f1d9",
              "parentUUID": "1a9ff170-6f39-4dae-927e-3ee9ff5a9743",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when rpop called on non-existent key",
              "fullTitle": "rpop-command test should report NIL when rpop called on non-existent key",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpop', 'no-key']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['exists', 'no-key']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "5dbc1a74-6225-495c-b47e-a1f914c4a9dd",
              "parentUUID": "1a9ff170-6f39-4dae-927e-3ee9ff5a9743",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5dbc1a74-6225-495c-b47e-a1f914c4a9dd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "09628779-9445-4ca7-bc8f-0af70cee4aa8",
          "title": "rpoplpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/rpoplpush-command.test.ts",
          "file": "/test/resp/command/list/rpoplpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rpoplpush-command test \"before all\" hook",
              "timedOut": false,
              "duration": 29,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "66d0232b-abad-487d-af67-269d0f899159",
              "parentUUID": "09628779-9445-4ca7-bc8f-0af70cee4aa8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rpoplpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "09000c27-d4a3-435b-981c-2f772f55a27c",
              "parentUUID": "09628779-9445-4ca7-bc8f-0af70cee4aa8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rpoplpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "62e6c3a0-b6af-4d11-8fbb-59931fc8bddf",
              "parentUUID": "09628779-9445-4ca7-bc8f-0af70cee4aa8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rpoplpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "17b268cb-9e20-41ed-acc7-a5d00fce336c",
              "parentUUID": "09628779-9445-4ca7-bc8f-0af70cee4aa8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when destination does not exist",
              "fullTitle": "rpoplpush-command test should return NIL when destination does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpoplpush', 'src', 'dst']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "270b8bb2-d607-4eb7-ac84-8b4c0cae3eca",
              "parentUUID": "09628779-9445-4ca7-bc8f-0af70cee4aa8",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should rotate a list when src and dst are the same",
              "fullTitle": "rpoplpush-command test should rotate a list when src and dst are the same",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 19,
=======
              "duration": 7,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
<<<<<<< HEAD
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'calibrate']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '3']);\n        chai_1.expect(response).to.eql(['hello', 'hello', 'calibrate', 'hello']);\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'mylist', '0', '100']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '3']);\n        chai_1.expect(response).to.eql(['hello', 'hello', 'calibrate', 'hello']);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'mylist', '1', '4']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '3']);\n        chai_1.expect(response).to.eql(['hello', 'calibrate', 'hello']);\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'mylist', '-2', '1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '1']);\n        chai_1.expect(response).to.eql(['calibrate']);\n    })",
              "err": {},
              "uuid": "2b59d54b-98e8-406a-bf5d-8c50452dd0d0",
              "parentUUID": "be6edc07-cd62-4c8d-8be0-9f7587660d17",
=======
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', 'src', 'a']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'src', 'b']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'src', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'src', '0', '3']);\n        chai_1.expect(response).to.eql(['a', 'b', 'c']);\n        response = yield common_test_1.sendCommand(client, ['rpoplpush', 'src', 'src']);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'src', '0', '3']);\n        chai_1.expect(response).to.eql(['c', 'a', 'b']);\n    })",
              "err": {},
              "uuid": "02f0929a-94e3-4ed4-a606-921cc80f027e",
              "parentUUID": "09628779-9445-4ca7-bc8f-0af70cee4aa8",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create the target list if it does not exist",
              "fullTitle": "rpoplpush-command test should create the target list if it does not exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'testlist', 'wrong', '10']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "be8fc29d-edf9-464f-900f-f3b0e569e540",
              "parentUUID": "be6edc07-cd62-4c8d-8be0-9f7587660d17",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4782c838-792c-4a08-ae0c-0bd30e9fb390",
            "2b59d54b-98e8-406a-bf5d-8c50452dd0d0",
            "be8fc29d-edf9-464f-900f-f3b0e569e540"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "89a73a76-2006-4437-a985-0fbe6fd779f5",
          "title": "rpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/rpop-command.test.ts",
          "file": "/test/resp/command/list/rpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rpop-command test \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "299ff2a0-da21-4d71-8e38-a2b361399989",
              "parentUUID": "89a73a76-2006-4437-a985-0fbe6fd779f5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "8a027c19-78d3-43c2-ba90-4eef1304826b",
              "parentUUID": "89a73a76-2006-4437-a985-0fbe6fd779f5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "c3880c9d-112c-4190-bbfe-c2aaa1ed7e3f",
              "parentUUID": "89a73a76-2006-4437-a985-0fbe6fd779f5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "797e1d6d-9e16-4cee-9bf0-229428237a9e",
              "parentUUID": "89a73a76-2006-4437-a985-0fbe6fd779f5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when rpop called on non-existent key",
              "fullTitle": "rpop-command test should report NIL when rpop called on non-existent key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpop', 'no-key']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['exists', 'no-key']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "cbe50877-fc1d-4b67-b66d-4b1f8e1e4dca",
              "parentUUID": "89a73a76-2006-4437-a985-0fbe6fd779f5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cbe50877-fc1d-4b67-b66d-4b1f8e1e4dca"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "554a655e-8c1c-46ee-b288-6e4f01032340",
          "title": "rpoplpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/rpoplpush-command.test.ts",
          "file": "/test/resp/command/list/rpoplpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rpoplpush-command test \"before all\" hook",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "62ab368f-c1b9-4fb1-978b-8b17e78aaf5f",
              "parentUUID": "554a655e-8c1c-46ee-b288-6e4f01032340",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rpoplpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "fe18e4bb-1315-4862-a8d1-3bf35a1ee0cd",
              "parentUUID": "554a655e-8c1c-46ee-b288-6e4f01032340",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rpoplpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "d8546834-28f2-48db-9643-0c4ae6efc62f",
              "parentUUID": "554a655e-8c1c-46ee-b288-6e4f01032340",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rpoplpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "46676bee-0526-49c6-9428-16f7c00612c2",
              "parentUUID": "554a655e-8c1c-46ee-b288-6e4f01032340",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when destination does not exist",
              "fullTitle": "rpoplpush-command test should return NIL when destination does not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpoplpush', 'src', 'dst']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "87b2845b-1486-4477-aab5-dfd54129badc",
              "parentUUID": "554a655e-8c1c-46ee-b288-6e4f01032340",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should rotate a list when src and dst are the same",
              "fullTitle": "rpoplpush-command test should rotate a list when src and dst are the same",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', 'src', 'a']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'src', 'b']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'src', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'src', '0', '3']);\n        chai_1.expect(response).to.eql(['a', 'b', 'c']);\n        response = yield common_test_1.sendCommand(client, ['rpoplpush', 'src', 'src']);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'src', '0', '3']);\n        chai_1.expect(response).to.eql(['c', 'a', 'b']);\n    })",
              "err": {},
              "uuid": "1e22ff8d-e05e-495f-98b9-bdc3319ab823",
              "parentUUID": "554a655e-8c1c-46ee-b288-6e4f01032340",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create the target list if it does not exist",
              "fullTitle": "rpoplpush-command test should create the target list if it does not exist",
              "timedOut": false,
              "duration": 8,
=======
              "duration": 20,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exists', 'dst']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['rpoplpush', 'src', 'dst']);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['exists', 'dst']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'src', '0', '3']);\n        chai_1.expect(response).to.eql(['c', 'a']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'dst', '0', '3']);\n        chai_1.expect(response).to.eql(['b']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "98482f6a-5958-46c7-b6d1-f304c80d86a6",
              "parentUUID": "554a655e-8c1c-46ee-b288-6e4f01032340",
=======
              "uuid": "4904901b-d9a9-4fbd-90d8-73af147c418f",
              "parentUUID": "09628779-9445-4ca7-bc8f-0af70cee4aa8",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "87b2845b-1486-4477-aab5-dfd54129badc",
            "1e22ff8d-e05e-495f-98b9-bdc3319ab823",
            "98482f6a-5958-46c7-b6d1-f304c80d86a6"
=======
            "270b8bb2-d607-4eb7-ac84-8b4c0cae3eca",
            "02f0929a-94e3-4ed4-a606-921cc80f027e",
            "4904901b-d9a9-4fbd-90d8-73af147c418f"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 32,
=======
          "duration": 29,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "85f0ce86-0f21-4946-a295-141a0860abf7",
=======
          "uuid": "a507effd-455e-4c56-bc53-3dbdeac98e2e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "rpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/rpush-command.test.ts",
          "file": "/test/resp/command/list/rpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rpush-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 20,
=======
              "duration": 23,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "55e9dd8e-9bc2-4784-b526-60dbb546ebb0",
              "parentUUID": "85f0ce86-0f21-4946-a295-141a0860abf7",
=======
              "uuid": "6664b8bc-fffc-47f0-9250-a83a5174d4a6",
              "parentUUID": "a507effd-455e-4c56-bc53-3dbdeac98e2e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "74e0c523-825f-4b8a-a5a5-7a157824be9b",
              "parentUUID": "85f0ce86-0f21-4946-a295-141a0860abf7",
=======
              "uuid": "3abe9f12-0ddb-4988-ba7f-7f18f1a51ed0",
              "parentUUID": "a507effd-455e-4c56-bc53-3dbdeac98e2e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "2b3af674-51cb-46b5-9e48-9e4f0a24fcac",
              "parentUUID": "85f0ce86-0f21-4946-a295-141a0860abf7",
=======
              "uuid": "a814af93-6884-47f0-a6b8-7ed25e7700d5",
              "parentUUID": "a507effd-455e-4c56-bc53-3dbdeac98e2e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "82efbabc-4d8b-4f23-9f0b-1082faa48dfa",
              "parentUUID": "85f0ce86-0f21-4946-a295-141a0860abf7",
=======
              "uuid": "6da369fc-9b55-4197-b9a8-135b6e4a33f1",
              "parentUUID": "a507effd-455e-4c56-bc53-3dbdeac98e2e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ERR when attempting to rpush to a non-list key",
              "fullTitle": "rpush-command test should report ERR when attempting to rpush to a non-list key",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 5,
=======
              "duration": 4,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['rpush', 'lkey', '0']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "56a564ba-db3d-4861-ae3a-bbacb1c71173",
              "parentUUID": "85f0ce86-0f21-4946-a295-141a0860abf7",
=======
              "uuid": "ce7a0d11-56ad-405f-9a54-cd2396bfeb13",
              "parentUUID": "a507effd-455e-4c56-bc53-3dbdeac98e2e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "56a564ba-db3d-4861-ae3a-bbacb1c71173"
=======
            "ce7a0d11-56ad-405f-9a54-cd2396bfeb13"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 5,
=======
          "duration": 4,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "840293ee-9604-4931-8c27-2e75a4593cb5",
=======
          "uuid": "d5ae2cd9-55ac-4769-8ba1-f68f70dc599e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "multi command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/multi-command.test.ts",
          "file": "/test/resp/command/multi-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "multi command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 42,
=======
              "duration": 22,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "c4fd23f5-e249-4493-8243-acc4d6d806ba",
              "parentUUID": "840293ee-9604-4931-8c27-2e75a4593cb5",
=======
              "uuid": "0b761a11-4e93-4f96-8bf9-23635027b826",
              "parentUUID": "d5ae2cd9-55ac-4769-8ba1-f68f70dc599e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "multi command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "b3e1f0ff-b819-48f8-83d9-149b4abd27ff",
              "parentUUID": "840293ee-9604-4931-8c27-2e75a4593cb5",
=======
              "uuid": "e0852973-e20f-4dca-a8cf-b56dd1ff5d21",
              "parentUUID": "d5ae2cd9-55ac-4769-8ba1-f68f70dc599e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "multi command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "ad09be87-ae09-4da2-9655-d643e472c775",
              "parentUUID": "840293ee-9604-4931-8c27-2e75a4593cb5",
=======
              "uuid": "a26154ee-d166-4b17-b590-13a8700c52b3",
              "parentUUID": "d5ae2cd9-55ac-4769-8ba1-f68f70dc599e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "multi command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "e8c3ce6a-436d-4fe7-b3fe-71e6d6e8d8c1",
              "parentUUID": "840293ee-9604-4931-8c27-2e75a4593cb5",
=======
              "uuid": "7fe95c6b-a3fd-4452-8e38-16c8c93b0d48",
              "parentUUID": "d5ae2cd9-55ac-4769-8ba1-f68f70dc599e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow nested MULTI invocations",
              "fullTitle": "multi command test should not allow nested MULTI invocations",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('ReplyError: ERR MULTI calls can not be nested');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "de82e575-1ace-41b2-a10f-23564c347c90",
              "parentUUID": "840293ee-9604-4931-8c27-2e75a4593cb5",
=======
              "uuid": "faca5ad0-5c56-4572-a92b-5be88548ea75",
              "parentUUID": "d5ae2cd9-55ac-4769-8ba1-f68f70dc599e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect the DISCARD command",
              "fullTitle": "multi command test should respect the DISCARD command",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['discard']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "09a3fe8a-5a5e-4726-9a2b-db31a01e9c4b",
              "parentUUID": "840293ee-9604-4931-8c27-2e75a4593cb5",
=======
              "uuid": "4b572105-e0a9-4fef-8019-7f5826df1a5a",
              "parentUUID": "d5ae2cd9-55ac-4769-8ba1-f68f70dc599e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow DISCARD without MULTI",
              "fullTitle": "multi command test should not allow DISCARD without MULTI",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 1,
=======
              "duration": 2,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['discard']);\n        chai_1.expect(response).to.equal('ReplyError: ERR DISCARD without MULTI');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "cd51a2fa-232c-4d47-864e-772e4f5a604f",
              "parentUUID": "840293ee-9604-4931-8c27-2e75a4593cb5",
=======
              "uuid": "f09c1114-1775-4fef-9b6f-543299ea2742",
              "parentUUID": "d5ae2cd9-55ac-4769-8ba1-f68f70dc599e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should continue to validate commands after MULTI",
              "fullTitle": "multi command test should continue to validate commands after MULTI",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 3,
=======
              "duration": 6,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['unknown', 'command']);\n        chai_1.expect(response).to.equal('ReplyError: ERR unknown command `unknown`, with args beginning with: `command`, ', `${response}`);\n        response = yield common_test_1.sendCommand(client, ['lpush', 'test', 'one', 'two', 'three']);\n        chai_1.expect(response).to.equal('QUEUED');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "8dd16ddd-4b16-43fe-bf4c-a68fc35c3ee8",
              "parentUUID": "840293ee-9604-4931-8c27-2e75a4593cb5",
=======
              "uuid": "7cb909ec-9812-4c54-b2db-4c4f8b23ce0e",
              "parentUUID": "d5ae2cd9-55ac-4769-8ba1-f68f70dc599e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should EXECABORT from a previous error",
              "fullTitle": "multi command test should EXECABORT from a previous error",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exec']);\n        chai_1.expect(response).to.equal('ReplyError: EXECABORT Transaction discarded because of previous errors.');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "05e86e2f-04a7-47d4-a5c4-cf4a9a08a5a1",
              "parentUUID": "840293ee-9604-4931-8c27-2e75a4593cb5",
=======
              "uuid": "87811209-53e9-4bd4-80e9-f56c2590e291",
              "parentUUID": "d5ae2cd9-55ac-4769-8ba1-f68f70dc599e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should queue a set of commands when there is no intervening error",
              "fullTitle": "multi command test should queue a set of commands when there is no intervening error",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 4,
=======
              "duration": 5,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'test', 'one', 'two', 'three']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['exec']);\n        chai_1.expect(response).to.eql([3]);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "f87f4e20-4a73-4438-9163-77578577c3c2",
              "parentUUID": "840293ee-9604-4931-8c27-2e75a4593cb5",
=======
              "uuid": "40184abe-aeb0-4dbf-b2e6-2c8b6de96bc1",
              "parentUUID": "d5ae2cd9-55ac-4769-8ba1-f68f70dc599e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reset transaction state after executing commands",
              "fullTitle": "multi command test should reset transaction state after executing commands",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 13,
=======
              "duration": 2,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['discard']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "05f0873d-5bbd-478b-8bf7-d634032a8110",
              "parentUUID": "840293ee-9604-4931-8c27-2e75a4593cb5",
=======
              "uuid": "6f2a41da-bc32-44ca-8c46-ffae4b298dc8",
              "parentUUID": "d5ae2cd9-55ac-4769-8ba1-f68f70dc599e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the results of multiple commands in the order provided",
              "fullTitle": "multi command test should return the results of multiple commands in the order provided",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 9,
=======
              "duration": 17,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['brpoplpush', 'test', 'dest', '0']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['exec']);\n        chai_1.expect(response).to.eql(['three', 'two', 'one']);\n        response = yield common_test_1.sendCommand(client, ['exists', 'test']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'dest']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "15740998-7d6c-4dd0-a83b-4b7ea59b4db3",
              "parentUUID": "840293ee-9604-4931-8c27-2e75a4593cb5",
=======
              "uuid": "3b367a3d-714d-4094-b2c6-d1fce9523134",
              "parentUUID": "d5ae2cd9-55ac-4769-8ba1-f68f70dc599e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate the behavior of brpoplpush",
              "fullTitle": "multi command test should validate the behavior of brpoplpush",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 10,
=======
              "duration": 15,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'test', 'one', 'two', 'three']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('three');\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('two');\n        response = yield common_test_1.sendCommand(client, ['brpoplpush', 'test', 'dest', '0']);\n        chai_1.expect(response).to.equal('one');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "07622753-7d09-4d1c-8495-b48b14cfbc5d",
              "parentUUID": "840293ee-9604-4931-8c27-2e75a4593cb5",
=======
              "uuid": "fa8251b2-e86c-43ea-ae11-4768d7d7068d",
              "parentUUID": "d5ae2cd9-55ac-4769-8ba1-f68f70dc599e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "de82e575-1ace-41b2-a10f-23564c347c90",
            "09a3fe8a-5a5e-4726-9a2b-db31a01e9c4b",
            "cd51a2fa-232c-4d47-864e-772e4f5a604f",
            "8dd16ddd-4b16-43fe-bf4c-a68fc35c3ee8",
            "05e86e2f-04a7-47d4-a5c4-cf4a9a08a5a1",
            "f87f4e20-4a73-4438-9163-77578577c3c2",
            "05f0873d-5bbd-478b-8bf7-d634032a8110",
            "15740998-7d6c-4dd0-a83b-4b7ea59b4db3",
            "07622753-7d09-4d1c-8495-b48b14cfbc5d"
=======
            "faca5ad0-5c56-4572-a92b-5be88548ea75",
            "4b572105-e0a9-4fef-8019-7f5826df1a5a",
            "f09c1114-1775-4fef-9b6f-543299ea2742",
            "7cb909ec-9812-4c54-b2db-4c4f8b23ce0e",
            "87811209-53e9-4bd4-80e9-f56c2590e291",
            "40184abe-aeb0-4dbf-b2e6-2c8b6de96bc1",
            "6f2a41da-bc32-44ca-8c46-ffae4b298dc8",
            "3b367a3d-714d-4094-b2c6-d1fce9523134",
            "fa8251b2-e86c-43ea-ae11-4768d7d7068d"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 48,
=======
          "duration": 55,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "9f58be89-9ff3-4708-8f90-bc17827e35a6",
=======
          "uuid": "07054741-268c-4009-9d30-2e8550d969bc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "script-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/script-command.test.ts",
          "file": "/test/resp/command/script-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "script-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 28,
=======
              "duration": 26,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "1b2ac30e-7b13-437b-a6c1-5566127743fb",
              "parentUUID": "9f58be89-9ff3-4708-8f90-bc17827e35a6",
=======
              "uuid": "4da2301b-f1e2-42a3-b25e-cfb0a242adde",
              "parentUUID": "07054741-268c-4009-9d30-2e8550d969bc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "script-command test \"before each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "6d704530-3df6-4429-8a83-01dd4fe1ddca",
              "parentUUID": "9f58be89-9ff3-4708-8f90-bc17827e35a6",
=======
              "uuid": "c76a8599-b228-4e6d-8fb8-ef79e2465d49",
              "parentUUID": "07054741-268c-4009-9d30-2e8550d969bc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "script-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "dc7faccf-5aea-4f52-a079-31e65cf146bb",
              "parentUUID": "9f58be89-9ff3-4708-8f90-bc17827e35a6",
=======
              "uuid": "c6b0eaa2-7124-41b0-aefc-aade91fd3116",
              "parentUUID": "07054741-268c-4009-9d30-2e8550d969bc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "script-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "054ef39f-f01e-4456-b9ea-86f707de3b7a",
              "parentUUID": "9f58be89-9ff3-4708-8f90-bc17827e35a6",
=======
              "uuid": "efbc6d71-e3de-438c-a693-f20e8a3edb25",
              "parentUUID": "07054741-268c-4009-9d30-2e8550d969bc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should calcuclate the correct sha1 of a script and store the script",
              "fullTitle": "script-command test should calcuclate the correct sha1 of a script and store the script",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 72,
=======
              "duration": 40,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['script', 'exists', sha1]);\n        chai_1.expect(response).to.eql([0]);\n        // validate failure on unparseable script\n        response = yield common_test_1.sendCommand(client, ['script', 'load', code]);\n        chai_1.expect(response).to.match(/ReplyError: ERR .*/);\n        // validate success on parseable script\n        response = yield common_test_1.sendCommand(client, ['script', 'load', `${code}}`]);\n        chai_1.expect(response).to.equal(sha1);\n        // validate a script is persisted\n        response = yield common_test_1.sendCommand(client, ['script', 'exists', sha1]);\n        chai_1.expect(response).to.eql([1]);\n        // validate response to unknown sub command\n        response = yield common_test_1.sendCommand(client, ['script', 'test', sha1]);\n        chai_1.expect(response).to.equal('ReplyError: ERR Unknown subcommand or wrong number of arguments for \\'test\\'. Try SCRIPT HELP.');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "cb1b6917-8d25-46ff-af5d-33bc52c5549d",
              "parentUUID": "9f58be89-9ff3-4708-8f90-bc17827e35a6",
=======
              "uuid": "ac2830ea-f8b2-4d94-940a-15a8e3c1dd56",
              "parentUUID": "07054741-268c-4009-9d30-2e8550d969bc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should evaluate a loaded lua script using evalsha",
              "fullTitle": "script-command test should evaluate a loaded lua script using evalsha",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Validate that NOSCRIPT is triggered\n        response = yield common_test_1.sendCommand(client, ['evalsha', `${sha1}xx`, '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('ReplyError: NOSCRIPT No matching script. Please use EVAL.');\n        // Validate that param 1 cannot be negative\n        response = yield common_test_1.sendCommand(client, ['evalsha', sha1, '-2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('ReplyError: ERR Number of keys can\\'t be negative');\n        // Validate that param 1 cannot be text\n        response = yield common_test_1.sendCommand(client, ['evalsha', sha1, 'two', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "001ed570-71a2-428a-817f-df380677da7e",
              "parentUUID": "9f58be89-9ff3-4708-8f90-bc17827e35a6",
=======
              "uuid": "5dcbbcae-22fa-4e59-869d-068b20c24f56",
              "parentUUID": "07054741-268c-4009-9d30-2e8550d969bc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should execute a simple script",
              "fullTitle": "script-command test should execute a simple script",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Validate that a simple script can be processed\n        response = yield common_test_1.sendCommand(client, ['EVAL', 'local val=\"Hello Compose\" return val', '0']);\n        chai_1.expect(response).to.equal('Hello Compose');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "412f94b7-8046-4962-848b-b7ca3179b083",
              "parentUUID": "9f58be89-9ff3-4708-8f90-bc17827e35a6",
=======
              "uuid": "26794552-ac5b-423c-a66a-6482081b3a52",
              "parentUUID": "07054741-268c-4009-9d30-2e8550d969bc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create and process the ARGV table",
              "fullTitle": "script-command test should create and process the ARGV table",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 10,
=======
              "duration": 12,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return ARGV[2]', '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.eql('second');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "13cd742c-e8f7-4884-a78b-b5518f9de8a7",
              "parentUUID": "9f58be89-9ff3-4708-8f90-bc17827e35a6",
=======
              "uuid": "f95691f0-91d1-4e2c-a85e-f4c3d682eb17",
              "parentUUID": "07054741-268c-4009-9d30-2e8550d969bc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create and process the KEYS table",
              "fullTitle": "script-command test should create and process the KEYS table",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 7,
=======
              "duration": 14,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return KEYS[1]', '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('key1');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "6bf1f6f5-fbef-4371-a021-0cc8343c9f13",
              "parentUUID": "9f58be89-9ff3-4708-8f90-bc17827e35a6",
=======
              "uuid": "5ef1ec05-3182-4a0d-9ff4-bbefced16204",
              "parentUUID": "07054741-268c-4009-9d30-2e8550d969bc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a NUMBER when required",
              "fullTitle": "script-command test should return a NUMBER when required",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 13,
=======
              "duration": 17,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return 123', '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal(123);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "4819b52a-abd4-499a-a995-2a3ee11d061a",
              "parentUUID": "9f58be89-9ff3-4708-8f90-bc17827e35a6",
=======
              "uuid": "f0891deb-cbff-4f70-b7f8-cc2ac6e7506c",
              "parentUUID": "07054741-268c-4009-9d30-2e8550d969bc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NIL when there is no return value",
              "fullTitle": "script-command test should return NIL when there is no return value",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'print \"Hello World\"', '0']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "9814d404-b2ef-402b-9883-899eed726aa9",
              "parentUUID": "9f58be89-9ff3-4708-8f90-bc17827e35a6",
=======
              "uuid": "bcb47f34-a0bd-47e5-9f02-0ff80570c04f",
              "parentUUID": "07054741-268c-4009-9d30-2e8550d969bc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a TABLE when required",
              "fullTitle": "script-command test should return a TABLE when required",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 12,
=======
              "duration": 16,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, [`eval`, `return ARGV`, '2', 'key1', 'key2', 'first', 'second', 'third']);\n        chai_1.expect(response).to.eql(['first', 'second', 'third']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "0f092f54-c59d-4103-a216-fcbb52676d6e",
              "parentUUID": "9f58be89-9ff3-4708-8f90-bc17827e35a6",
=======
              "uuid": "9cdd9d17-d7b3-4eab-890c-20e46965a058",
              "parentUUID": "07054741-268c-4009-9d30-2e8550d969bc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return items in order",
              "fullTitle": "script-command test should return items in order",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 14,
=======
              "duration": 13,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return {true, \"test\", false, 10, 10.2}', '0']);\n        chai_1.expect(response).to.eql([1, 'test', null, 10, 10]);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "18211f2a-5ed9-4cea-bf41-ee00f60e87b1",
              "parentUUID": "9f58be89-9ff3-4708-8f90-bc17827e35a6",
=======
              "uuid": "ddb7596d-3dc7-4f68-ac58-71a11706b102",
              "parentUUID": "07054741-268c-4009-9d30-2e8550d969bc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return integer and nil for true and false, respectively",
              "fullTitle": "script-command test should return integer and nil for true and false, respectively",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 12,
=======
              "duration": 8,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return { true, false, false}', '0']);\n        chai_1.expect(response).to.eql([1, null, null]);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "72e0a08f-227c-465d-93cc-c5833a9dfedb",
              "parentUUID": "9f58be89-9ff3-4708-8f90-bc17827e35a6",
=======
              "uuid": "ef6098db-be53-4312-aaf7-dd575886b3a2",
              "parentUUID": "07054741-268c-4009-9d30-2e8550d969bc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "cb1b6917-8d25-46ff-af5d-33bc52c5549d",
            "001ed570-71a2-428a-817f-df380677da7e",
            "412f94b7-8046-4962-848b-b7ca3179b083",
            "13cd742c-e8f7-4884-a78b-b5518f9de8a7",
            "6bf1f6f5-fbef-4371-a021-0cc8343c9f13",
            "4819b52a-abd4-499a-a995-2a3ee11d061a",
            "9814d404-b2ef-402b-9883-899eed726aa9",
            "0f092f54-c59d-4103-a216-fcbb52676d6e",
            "18211f2a-5ed9-4cea-bf41-ee00f60e87b1",
            "72e0a08f-227c-465d-93cc-c5833a9dfedb"
=======
            "ac2830ea-f8b2-4d94-940a-15a8e3c1dd56",
            "5dcbbcae-22fa-4e59-869d-068b20c24f56",
            "26794552-ac5b-423c-a66a-6482081b3a52",
            "f95691f0-91d1-4e2c-a85e-f4c3d682eb17",
            "5ef1ec05-3182-4a0d-9ff4-bbefced16204",
            "f0891deb-cbff-4f70-b7f8-cc2ac6e7506c",
            "bcb47f34-a0bd-47e5-9f02-0ff80570c04f",
            "9cdd9d17-d7b3-4eab-890c-20e46965a058",
            "ddb7596d-3dc7-4f68-ac58-71a11706b102",
            "ef6098db-be53-4312-aaf7-dd575886b3a2"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 170,
=======
          "duration": 151,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "c1e3620f-0e82-448d-b2f2-838b7a4dd083",
=======
          "uuid": "efb83186-119e-41d5-a127-dc7b59f480de",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "resp-server test",
          "fullFile": "/home/lane/git/redis/test/resp/command/server/resp-server.test.ts",
          "file": "/test/resp/command/server/resp-server.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "resp-server test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "48d158d3-8707-4ef8-b88c-8e75133a06bb",
              "parentUUID": "c1e3620f-0e82-448d-b2f2-838b7a4dd083",
=======
              "uuid": "0ca2d499-88d8-4ed3-ad9b-a9679d5e9023",
              "parentUUID": "efb83186-119e-41d5-a127-dc7b59f480de",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "resp-server test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "f251deec-f57e-442f-8521-1822acac1e47",
              "parentUUID": "c1e3620f-0e82-448d-b2f2-838b7a4dd083",
=======
              "uuid": "18ffd382-580d-48dc-8b65-16fc23def305",
              "parentUUID": "efb83186-119e-41d5-a127-dc7b59f480de",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "d58a7a79-aa67-4ec2-85a2-d88f706c771a",
=======
              "uuid": "d7f62dc6-98ef-4d88-8bca-524ddb9e1e77",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "title": "server start and stop tests",
              "fullFile": "/home/lane/git/redis/test/resp/command/server/resp-server.test.ts",
              "file": "/test/resp/command/server/resp-server.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should instantiate",
                  "fullTitle": "resp-server test server start and stop tests should instantiate",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            respServer = new resp_server_1.RespServer();\n            chai_1.expect(respServer.constructor.name).to.equal('RespServer');\n        })",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "e5f9fbb1-78f1-4b6e-acdc-9b5ca53fe84f",
                  "parentUUID": "d58a7a79-aa67-4ec2-85a2-d88f706c771a",
=======
                  "uuid": "5b6128f0-cebe-44d4-b855-35c53027ec1c",
                  "parentUUID": "d7f62dc6-98ef-4d88-8bca-524ddb9e1e77",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit \"ready\" on startup",
                  "fullTitle": "resp-server test server start and stop tests should emit \"ready\" on startup",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "480a6577-408d-448b-8b08-99986c0acb48",
                  "parentUUID": "d58a7a79-aa67-4ec2-85a2-d88f706c771a",
=======
                  "uuid": "afbd9dfd-09c0-4cbb-b46e-ea5f04dfbcd1",
                  "parentUUID": "d7f62dc6-98ef-4d88-8bca-524ddb9e1e77",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit \"closed\" on shutdown",
                  "fullTitle": "resp-server test server start and stop tests should emit \"closed\" on shutdown",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer.on('closed', () => {\n    done();\n});\nrespServer.stop();",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "a69d68b9-aa58-4e58-9a72-a6c601d8b4ed",
                  "parentUUID": "d58a7a79-aa67-4ec2-85a2-d88f706c771a",
=======
                  "uuid": "ac18c28c-c7f2-4a08-a82f-134f6da0d66c",
                  "parentUUID": "d7f62dc6-98ef-4d88-8bca-524ddb9e1e77",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept connections on default ${env.REDIS_HOST}:${env.REDIS_PORT}",
                  "fullTitle": "resp-server test server start and stop tests should accept connections on default ${env.REDIS_HOST}:${env.REDIS_PORT}",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    const client = new net.Socket();\n    client.on('ready', (data) => {\n        respServer.on('closed', () => {\n            done();\n        });\n        respServer.stop();\n    });\n    client.on('connect', (data) => {\n    });\n    client.on('error', (err) => {\n        assert_1.fail(`Unexpected error during connection`, err.stack);\n    });\n    client.connect(Number(process.env.REDIS_PORT || 6379), process.env.REDIS_HOST || 'localhost', () => {\n    });\n});\nrespServer.start();",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "2313160e-0a16-4a59-a77e-c8147334f445",
                  "parentUUID": "d58a7a79-aa67-4ec2-85a2-d88f706c771a",
=======
                  "uuid": "6f2f3abb-f4fd-48f4-b1e6-594f65461712",
                  "parentUUID": "d7f62dc6-98ef-4d88-8bca-524ddb9e1e77",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
<<<<<<< HEAD
                "e5f9fbb1-78f1-4b6e-acdc-9b5ca53fe84f",
                "480a6577-408d-448b-8b08-99986c0acb48",
                "a69d68b9-aa58-4e58-9a72-a6c601d8b4ed",
                "2313160e-0a16-4a59-a77e-c8147334f445"
=======
                "5b6128f0-cebe-44d4-b855-35c53027ec1c",
                "afbd9dfd-09c0-4cbb-b46e-ea5f04dfbcd1",
                "ac18c28c-c7f2-4a08-a82f-134f6da0d66c",
                "6f2f3abb-f4fd-48f4-b1e6-594f65461712"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
<<<<<<< HEAD
              "duration": 11,
=======
              "duration": 12,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
<<<<<<< HEAD
              "uuid": "0049de86-74a5-470e-9325-8f8d22e1cd8a",
=======
              "uuid": "01b81858-97d0-48cb-8b9f-70be0c267294",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "title": "other server tests",
              "fullFile": "/home/lane/git/redis/test/resp/command/server/resp-server.test.ts",
              "file": "/test/resp/command/server/resp-server.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "resp-server test other server tests \"before all\" hook",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 5,
=======
                  "duration": 3,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    client = new net.Socket();\n    done();\n});\nrespServer.start();",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "b8395749-7d14-4271-adb1-1df75c348f8f",
                  "parentUUID": "0049de86-74a5-470e-9325-8f8d22e1cd8a",
=======
                  "uuid": "04a35044-c35a-40bb-81a1-1a7641c39d57",
                  "parentUUID": "01b81858-97d0-48cb-8b9f-70be0c267294",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "resp-server test other server tests \"after all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            yield respServer.stop();\n        })",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "ff175d48-6a91-481f-8451-76d9c4207645",
                  "parentUUID": "0049de86-74a5-470e-9325-8f8d22e1cd8a",
=======
                  "uuid": "6d4c0791-cadd-4efe-8037-7e8972c1da69",
                  "parentUUID": "01b81858-97d0-48cb-8b9f-70be0c267294",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should respond properly to the \"ping\" command",
                  "fullTitle": "resp-server test other server tests should respond properly to the \"ping\" command",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['ping'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('PONG');\n    done();\n});",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "f19a6e4e-876b-4b48-b3b2-79120b7a375f",
                  "parentUUID": "0049de86-74a5-470e-9325-8f8d22e1cd8a",
=======
                  "uuid": "ac225309-febf-4cc4-8e79-1a7e783e5d9b",
                  "parentUUID": "01b81858-97d0-48cb-8b9f-70be0c267294",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond properly to the \"echo\" command",
                  "fullTitle": "resp-server test other server tests should respond properly to the \"echo\" command",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['echo', 'test'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('test');\n    done();\n});",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "6f67d252-6049-40ad-8418-d9e394a860a1",
                  "parentUUID": "0049de86-74a5-470e-9325-8f8d22e1cd8a",
=======
                  "uuid": "3f1ea440-40ea-4d07-bef1-56597b7b8e79",
                  "parentUUID": "01b81858-97d0-48cb-8b9f-70be0c267294",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond with \"ERR\" when echo command has no parameters",
                  "fullTitle": "resp-server test other server tests should respond with \"ERR\" when echo command has no parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            // Note that 'ReplyError:' is supplied by the redis parser, NOT by the code under test\n            const response = yield common_test_1.sendCommand(client, ['echo']);\n            chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'echo\\' command');\n        })",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "1df5b6a4-0fec-44d6-8ce4-1e82eb48578b",
                  "parentUUID": "0049de86-74a5-470e-9325-8f8d22e1cd8a",
=======
                  "uuid": "a3b88ece-f716-4609-839d-9620586e7c47",
                  "parentUUID": "01b81858-97d0-48cb-8b9f-70be0c267294",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond with \"ERR\" when echo command has two or more parameters",
                  "fullTitle": "resp-server test other server tests should respond with \"ERR\" when echo command has two or more parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['echo', 'one', 'two'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'echo\\' command');\n    done();\n});",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "3e8d759d-0356-45ec-90df-cb898e4e693d",
                  "parentUUID": "0049de86-74a5-470e-9325-8f8d22e1cd8a",
=======
                  "uuid": "f9fe65d6-7a5c-4378-9697-56e85cd2ee5f",
                  "parentUUID": "01b81858-97d0-48cb-8b9f-70be0c267294",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond to the \"time\" command with an array of two strings",
                  "fullTitle": "resp-server test other server tests should respond to the \"time\" command with an array of two strings",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 1,
=======
                  "duration": 2,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Note: we use hrtime which should already do what we need so we don't validate\ncommon_test_1.sendCommand(client, ['time'])\n    .then((response) => {\n    chai_1.expect(response).to.be.an('array');\n    chai_1.expect(response.length).to.equal(2);\n    chai_1.expect(parseInt(response[0], 10)).to.be.greaterThan(0);\n    chai_1.expect(parseInt(response[1], 10)).to.be.greaterThan(0);\n    done();\n});",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "e08e04d7-4bef-4c0b-b6bb-4ca935261d8a",
                  "parentUUID": "0049de86-74a5-470e-9325-8f8d22e1cd8a",
=======
                  "uuid": "3634412d-dd7c-45c9-9c29-e13051a1308f",
                  "parentUUID": "01b81858-97d0-48cb-8b9f-70be0c267294",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond with nulCommand when the command is not known",
                  "fullTitle": "resp-server test other server tests should respond with nulCommand when the command is not known",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['felix', 'the', 'cat'])\n    .then((response) => {\n    chai_1.expect(response).to.match(/^ReplyError: ERR unknown command.*/);\n    done();\n});",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "db2f30fc-5807-43e6-968f-3ee3ce81a06b",
                  "parentUUID": "0049de86-74a5-470e-9325-8f8d22e1cd8a",
=======
                  "uuid": "953a5938-821d-4c6b-b3af-6a4d5f0f1a90",
                  "parentUUID": "01b81858-97d0-48cb-8b9f-70be0c267294",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should implement the info command",
                  "fullTitle": "resp-server test other server tests should implement the info command",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield common_test_1.sendCommand(client, ['info']);\n            chai_1.expect(response).to.match(/^# server\\r\\nredis_version:.*/im);\n        })",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "50be170a-9673-46bf-b2b5-396802b1e1e0",
                  "parentUUID": "0049de86-74a5-470e-9325-8f8d22e1cd8a",
=======
                  "uuid": "b27257e7-94a3-459c-b10b-de0e2ce7119b",
                  "parentUUID": "01b81858-97d0-48cb-8b9f-70be0c267294",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should implement the SET command",
                  "fullTitle": "resp-server test other server tests should implement the SET command",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['SET', 'this', 'that'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    common_test_1.sendCommand(client, ['GET', 'this'])\n        .then((getresponse) => {\n        chai_1.expect(getresponse).to.equal('that');\n        done();\n    });\n});",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "c8fb6ed7-94f3-4806-8444-d2c56809ce59",
                  "parentUUID": "0049de86-74a5-470e-9325-8f8d22e1cd8a",
=======
                  "uuid": "b7ef3d6a-e87f-4d75-8280-cab30d230228",
                  "parentUUID": "01b81858-97d0-48cb-8b9f-70be0c267294",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nil string when GET is invoked with unknown parameters",
                  "fullTitle": "resp-server test other server tests should return nil string when GET is invoked with unknown parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['GET', ' '])\n    .then((getresponse) => {\n    chai_1.expect(getresponse).to.equal(null);\n    done();\n});",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "f8649648-fb7a-476e-83ea-9873fc78be4f",
                  "parentUUID": "0049de86-74a5-470e-9325-8f8d22e1cd8a",
=======
                  "uuid": "72c9ca53-d0a2-4389-8481-e9047607c157",
                  "parentUUID": "01b81858-97d0-48cb-8b9f-70be0c267294",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should implement the info command with a known parameter",
                  "fullTitle": "resp-server test other server tests should implement the info command with a known parameter",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['info', 'memory'])\n    .then((response) => {\n    chai_1.expect(response).to.match(/^# memory.*/mi);\n    done();\n});",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "5f2fd281-7739-4a8c-83f7-a133b8ae60cd",
                  "parentUUID": "0049de86-74a5-470e-9325-8f8d22e1cd8a",
=======
                  "uuid": "2f7e8845-46c7-4b22-b334-55ac33c9e471",
                  "parentUUID": "01b81858-97d0-48cb-8b9f-70be0c267294",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not respond when info is called with an unknown paramter",
                  "fullTitle": "resp-server test other server tests should not respond when info is called with an unknown paramter",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 3,
=======
                  "duration": 2,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield common_test_1.sendCommand(client, ['info', 'juicy']);\n            // Don't know how to send an empty - non-null string response yet\n            chai_1.expect(String(response).trim()).to.equal('');\n        })",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "4a363936-6445-41d4-a635-8fec72a14164",
                  "parentUUID": "0049de86-74a5-470e-9325-8f8d22e1cd8a",
=======
                  "uuid": "009c4cac-2bb1-41e1-9ee7-a4c07c6a4729",
                  "parentUUID": "01b81858-97d0-48cb-8b9f-70be0c267294",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should report the number of keys in the current database",
                  "fullTitle": "resp-server test other server tests should report the number of keys in the current database",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.be.a('number');\n            chai_1.expect(response).to.be.greaterThan(0);\n        })",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "4bd327ad-596b-4325-8996-b6c25316aa8e",
                  "parentUUID": "0049de86-74a5-470e-9325-8f8d22e1cd8a",
=======
                  "uuid": "1a75ae2f-cad7-42cf-a8ee-f7431e86d23f",
                  "parentUUID": "01b81858-97d0-48cb-8b9f-70be0c267294",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support the \"select\" command",
                  "fullTitle": "resp-server test other server tests should support the \"select\" command",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['select', '12']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "324beed5-a952-4e85-8cb3-17891131e7df",
                  "parentUUID": "0049de86-74a5-470e-9325-8f8d22e1cd8a",
=======
                  "uuid": "71d4e896-1a29-4cb4-b6fd-6622accb8b44",
                  "parentUUID": "01b81858-97d0-48cb-8b9f-70be0c267294",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow us to select an invalid database",
                  "fullTitle": "resp-server test other server tests should not allow us to select an invalid database",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['select', 'one']);\n            chai_1.expect(response).to.equal('ReplyError: ERR invalid DB index');\n            response = yield common_test_1.sendCommand(client, ['select', '-12']);\n            chai_1.expect(response).to.equal('ReplyError: ERR DB index is out of range');\n            response = yield common_test_1.sendCommand(client, ['select', '22']);\n            chai_1.expect(response).to.equal('ReplyError: ERR DB index is out of range');\n        })",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "ed760d93-dbfc-4856-8aad-2167da8129de",
                  "parentUUID": "0049de86-74a5-470e-9325-8f8d22e1cd8a",
=======
                  "uuid": "39b9493c-c936-4712-a46b-52262270c37e",
                  "parentUUID": "01b81858-97d0-48cb-8b9f-70be0c267294",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond properly to the \"quit\" command",
                  "fullTitle": "resp-server test other server tests should respond properly to the \"quit\" command",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Note however that the server does not disconnect us.  That is the client's job\ncommon_test_1.sendCommand(client, ['quit'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    done();\n});",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "0083810a-7f2a-4e98-9dc8-91e96acd66b7",
                  "parentUUID": "0049de86-74a5-470e-9325-8f8d22e1cd8a",
=======
                  "uuid": "5780e937-e891-4733-930e-872e2efd27c6",
                  "parentUUID": "01b81858-97d0-48cb-8b9f-70be0c267294",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
<<<<<<< HEAD
                "f19a6e4e-876b-4b48-b3b2-79120b7a375f",
                "6f67d252-6049-40ad-8418-d9e394a860a1",
                "1df5b6a4-0fec-44d6-8ce4-1e82eb48578b",
                "3e8d759d-0356-45ec-90df-cb898e4e693d",
                "e08e04d7-4bef-4c0b-b6bb-4ca935261d8a",
                "db2f30fc-5807-43e6-968f-3ee3ce81a06b",
                "50be170a-9673-46bf-b2b5-396802b1e1e0",
                "c8fb6ed7-94f3-4806-8444-d2c56809ce59",
                "f8649648-fb7a-476e-83ea-9873fc78be4f",
                "5f2fd281-7739-4a8c-83f7-a133b8ae60cd",
                "4a363936-6445-41d4-a635-8fec72a14164",
                "4bd327ad-596b-4325-8996-b6c25316aa8e",
                "324beed5-a952-4e85-8cb3-17891131e7df",
                "ed760d93-dbfc-4856-8aad-2167da8129de",
                "0083810a-7f2a-4e98-9dc8-91e96acd66b7"
=======
                "ac225309-febf-4cc4-8e79-1a7e783e5d9b",
                "3f1ea440-40ea-4d07-bef1-56597b7b8e79",
                "a3b88ece-f716-4609-839d-9620586e7c47",
                "f9fe65d6-7a5c-4378-9697-56e85cd2ee5f",
                "3634412d-dd7c-45c9-9c29-e13051a1308f",
                "953a5938-821d-4c6b-b3af-6a4d5f0f1a90",
                "b27257e7-94a3-459c-b10b-de0e2ce7119b",
                "b7ef3d6a-e87f-4d75-8280-cab30d230228",
                "72c9ca53-d0a2-4389-8481-e9047607c157",
                "2f7e8845-46c7-4b22-b334-55ac33c9e471",
                "009c4cac-2bb1-41e1-9ee7-a4c07c6a4729",
                "1a75ae2f-cad7-42cf-a8ee-f7431e86d23f",
                "71d4e896-1a29-4cb4-b6fd-6622accb8b44",
                "39b9493c-c936-4712-a46b-52262270c37e",
                "5780e937-e891-4733-930e-872e2efd27c6"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
<<<<<<< HEAD
              "duration": 32,
=======
              "duration": 34,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "06bcfa22-04a6-4a65-9d03-b0f4d9d5055d",
=======
          "uuid": "96665790-825b-4a5c-b356-f1e0b227b1e8",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "sdiff-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sdiff-command.test.ts",
          "file": "/test/resp/command/set/sdiff-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sdiff-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 38,
=======
              "duration": 29,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "29af73bc-7bb3-48c9-a3a3-55b722e1be9a",
              "parentUUID": "06bcfa22-04a6-4a65-9d03-b0f4d9d5055d",
=======
              "uuid": "d4768b74-fa02-49a0-aadf-84d3f9312ecb",
              "parentUUID": "96665790-825b-4a5c-b356-f1e0b227b1e8",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sdiff-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "3152ffd8-0716-4aae-9d9b-9bb37da7b5bf",
              "parentUUID": "06bcfa22-04a6-4a65-9d03-b0f4d9d5055d",
=======
              "uuid": "9a7349b0-1b65-439a-871c-6ef227e5402e",
              "parentUUID": "96665790-825b-4a5c-b356-f1e0b227b1e8",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sdiff-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "0cf4fc87-64f4-441a-91f7-472dbde6f912",
              "parentUUID": "06bcfa22-04a6-4a65-9d03-b0f4d9d5055d",
=======
              "uuid": "a1577f9f-10b8-46bf-80ac-b3d820d6334b",
              "parentUUID": "96665790-825b-4a5c-b356-f1e0b227b1e8",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sdiff-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "272aa046-098d-45ba-b886-2f4d4b3bdd10",
              "parentUUID": "06bcfa22-04a6-4a65-9d03-b0f4d9d5055d",
=======
              "uuid": "f36196bf-abc4-428c-a921-c222560eef39",
              "parentUUID": "96665790-825b-4a5c-b356-f1e0b227b1e8",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return EMPTY ARRAY when the source set does not exist",
              "fullTitle": "sdiff-command test should return EMPTY ARRAY when the source set does not exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 2,
=======
              "duration": 7,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'ary']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "bae3ae4b-3d00-439e-8175-2fbf7c511a12",
              "parentUUID": "06bcfa22-04a6-4a65-9d03-b0f4d9d5055d",
=======
              "uuid": "30ca2717-4c1a-40ee-a7dc-d5eeb327304a",
              "parentUUID": "96665790-825b-4a5c-b356-f1e0b227b1e8",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return all members of source set when the destination set does not exist",
              "fullTitle": "sdiff-command test should return all members of source set when the destination set does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'key1', 'empty']);\n        // REDIS does not guarantee order of the set\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "c2aae3c9-194e-4c0b-84fd-e883dd839ec4",
              "parentUUID": "06bcfa22-04a6-4a65-9d03-b0f4d9d5055d",
=======
              "uuid": "c085068c-ee09-45f1-b02c-0f4862a4e6bd",
              "parentUUID": "96665790-825b-4a5c-b356-f1e0b227b1e8",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a proper DIFF of one or more sets",
              "fullTitle": "sdiff-command test should return a proper DIFF of one or more sets",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 24,
=======
              "duration": 4,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key3', 'a', 'c', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'key1', 'key2', 'key3']);\n        chai_1.expect(response).to.eql(['b', 'd']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "3c9d3b85-0f10-4ca8-9be8-8178c706b0d7",
              "parentUUID": "06bcfa22-04a6-4a65-9d03-b0f4d9d5055d",
=======
              "uuid": "8a2e5f8e-e228-4ff1-9ac5-8de3c7ea34fb",
              "parentUUID": "96665790-825b-4a5c-b356-f1e0b227b1e8",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should ignore non-list keys",
              "fullTitle": "sdiff-command test should ignore non-list keys",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'list', '1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '2', 'three']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'key1', 'key2', 'key3']);\n        chai_1.expect(response).to.eql(['b', 'd']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "34b1c383-44bb-41ec-a8ac-a65ad86bf56a",
              "parentUUID": "06bcfa22-04a6-4a65-9d03-b0f4d9d5055d",
=======
              "uuid": "93afa69b-c31b-43d2-ac7c-e42eb9e38522",
              "parentUUID": "96665790-825b-4a5c-b356-f1e0b227b1e8",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "bae3ae4b-3d00-439e-8175-2fbf7c511a12",
            "c2aae3c9-194e-4c0b-84fd-e883dd839ec4",
            "3c9d3b85-0f10-4ca8-9be8-8178c706b0d7",
            "34b1c383-44bb-41ec-a8ac-a65ad86bf56a"
=======
            "30ca2717-4c1a-40ee-a7dc-d5eeb327304a",
            "c085068c-ee09-45f1-b02c-0f4862a4e6bd",
            "8a2e5f8e-e228-4ff1-9ac5-8de3c7ea34fb",
            "93afa69b-c31b-43d2-ac7c-e42eb9e38522"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 35,
=======
          "duration": 19,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "ae92bae2-a357-45b1-9fc6-9a494603d9c1",
=======
          "uuid": "1fb28549-95e2-4083-b0bd-97cb26f3f1d0",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "set commands test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/set-commands.test.ts",
          "file": "/test/resp/command/set/set-commands.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "set commands test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 31,
=======
              "duration": 18,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "0319075b-a861-48ee-8061-41534a7e91e5",
              "parentUUID": "ae92bae2-a357-45b1-9fc6-9a494603d9c1",
=======
              "uuid": "c4c973c8-eefc-44fd-bde2-50b1e4ea09e5",
              "parentUUID": "1fb28549-95e2-4083-b0bd-97cb26f3f1d0",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "set commands test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "7365ea2e-862a-463e-a809-d05a383b1ea2",
              "parentUUID": "ae92bae2-a357-45b1-9fc6-9a494603d9c1",
=======
              "uuid": "f3fc6cd9-40d8-4e13-aa85-c1bc6add9094",
              "parentUUID": "1fb28549-95e2-4083-b0bd-97cb26f3f1d0",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "set commands test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "19a67118-8fa1-4c2c-b879-3f3593a04d21",
              "parentUUID": "ae92bae2-a357-45b1-9fc6-9a494603d9c1",
=======
              "uuid": "512050c9-8989-45dc-9bf7-882d46ffea53",
              "parentUUID": "1fb28549-95e2-4083-b0bd-97cb26f3f1d0",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "set commands test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "6bd76f3a-38ae-41d6-91a5-f056ec1efc78",
              "parentUUID": "ae92bae2-a357-45b1-9fc6-9a494603d9c1",
=======
              "uuid": "d4edc237-4c8d-49a0-9509-4b7be4e5944e",
              "parentUUID": "1fb28549-95e2-4083-b0bd-97cb26f3f1d0",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return ZERO when certain commands are applied against key that doesn't exist",
              "fullTitle": "set commands test should return ZERO when certain commands are applied against key that doesn't exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 13,
=======
              "duration": 4,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['scard', 'doesnotexist']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['sismember', 'doesnotexist', 'test']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "f8e1e514-237b-43a9-98de-029f6a2375e8",
              "parentUUID": "ae92bae2-a357-45b1-9fc6-9a494603d9c1",
=======
              "uuid": "a9b04c42-51c6-4c01-9b0e-5728656ddbfa",
              "parentUUID": "1fb28549-95e2-4083-b0bd-97cb26f3f1d0",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an appropriate error when a \"set\" command is applied to a non-set key",
              "fullTitle": "set commands test should throw an appropriate error when a \"set\" command is applied to a non-set key",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 3,
=======
              "duration": 1,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['set', 'wrongtype', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sismember', 'wrongtype', 'set']);\n        chai_1.expect(response).to.equal(WRONG_TYPE);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "9cefd25a-1126-4247-bc28-65c1def4bdf2",
              "parentUUID": "ae92bae2-a357-45b1-9fc6-9a494603d9c1",
=======
              "uuid": "3462ae13-9275-48e5-aec2-04c52aa076a0",
              "parentUUID": "1fb28549-95e2-4083-b0bd-97cb26f3f1d0",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new key when sadd is called correctly",
              "fullTitle": "set commands test should create a new key when sadd is called correctly",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 3,
=======
              "duration": 16,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['sadd', 'skey', 'untest']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'skey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "4168f8ad-de6f-431c-bfa2-b09392fb3ac1",
              "parentUUID": "ae92bae2-a357-45b1-9fc6-9a494603d9c1",
=======
              "uuid": "7a7b5a97-36da-4b61-894c-c5db16110415",
              "parentUUID": "1fb28549-95e2-4083-b0bd-97cb26f3f1d0",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only report the number of added keys",
              "fullTitle": "set commands test should only report the number of added keys",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['sadd', 'skey', 'untest', 'test2']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'skey']);\n        chai_1.expect(response).to.be.an('array');\n        // Keys are returned in reverse order? - No.\n        // smembers can return a list in any order\n        chai_1.expect(response.length).to.equal(2);\n        chai_1.expect(response.indexOf('test2')).to.be.greaterThan(-1);\n        chai_1.expect(response.indexOf('untest')).to.be.greaterThan(-1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "b6695a28-d7a9-4019-b5f1-ac9300360355",
              "parentUUID": "ae92bae2-a357-45b1-9fc6-9a494603d9c1",
=======
              "uuid": "570bcd1c-56af-4b51-8b30-ac560bc03530",
              "parentUUID": "1fb28549-95e2-4083-b0bd-97cb26f3f1d0",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "0b1b3b60-f4ac-413b-ab61-6a503cca11a3",
=======
              "uuid": "deeaa51a-49b6-4dd8-987a-8994982a3e23",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "title": "smove, sismember, and scard tests",
              "fullFile": "/home/lane/git/redis/test/resp/command/set/set-commands.test.ts",
              "file": "/test/resp/command/set/set-commands.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should do nothing when smove is called with a source key that does not exist",
                  "fullTitle": "set commands test smove, sismember, and scard tests should do nothing when smove is called with a source key that does not exist",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['smove', 'fromskey', 'toskey', 'nothing']);\n            chai_1.expect(response).to.equal(0);\n            response = yield common_test_1.sendCommand(client, ['exists', 'fromskey', 'toskey']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "98cc1421-c086-49b0-98e1-87f04f7cbb51",
                  "parentUUID": "0b1b3b60-f4ac-413b-ab61-6a503cca11a3",
=======
                  "uuid": "90d9b477-4846-4948-94d3-b251ef9fadb3",
                  "parentUUID": "deeaa51a-49b6-4dd8-987a-8994982a3e23",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should move a key from one set to another (and create the target if necessary)",
                  "fullTitle": "set commands test smove, sismember, and scard tests should move a key from one set to another (and create the target if necessary)",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 10,
=======
                  "duration": 18,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['exists', 'tonewskey']);\n            chai_1.expect(response).to.equal(0);\n            response = yield common_test_1.sendCommand(client, ['smembers', 'tonewskey']);\n            chai_1.expect(response).to.eql([]);\n            response = yield common_test_1.sendCommand(client, ['sadd', uniqueKey, 'key1', 'key2', 'key3']);\n            chai_1.expect(response).to.equal(3);\n            response = yield common_test_1.sendCommand(client, ['smembers', uniqueKey]);\n            // key order is undefined in redis\n            chai_1.expect(response.length).to.equal(3);\n            chai_1.expect(response.indexOf('key3')).to.be.greaterThan(-1);\n            chai_1.expect(response.indexOf('key2')).to.be.greaterThan(-1);\n            chai_1.expect(response.indexOf('key1')).to.be.greaterThan(-1);\n            response = yield common_test_1.sendCommand(client, ['smove', uniqueKey, 'tonewskey', 'key2']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', 'tonewskey', 'key2']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['smembers', uniqueKey]);\n            // key order, again\n            chai_1.expect(response.length).to.equal(2);\n            chai_1.expect(response.indexOf('key3')).to.be.greaterThan(-1);\n            chai_1.expect(response.indexOf('key1')).to.be.greaterThan(-1);\n            response = yield common_test_1.sendCommand(client, ['smembers', 'tonewskey']);\n            chai_1.expect(response).to.eql(['key2']);\n        })",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "ea3cc100-cfef-4318-b50e-bc4e61897336",
                  "parentUUID": "0b1b3b60-f4ac-413b-ab61-6a503cca11a3",
=======
                  "uuid": "a2f93c42-6d65-48de-8290-19ac208926d2",
                  "parentUUID": "deeaa51a-49b6-4dd8-987a-8994982a3e23",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should report cardinality of a set",
                  "fullTitle": "set commands test smove, sismember, and scard tests should report cardinality of a set",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['scard', uniqueKey]);\n            chai_1.expect(response).to.equal(2);\n            response = yield common_test_1.sendCommand(client, ['scard', 'tonewskey']);\n            chai_1.expect(response).to.equal(1);\n        })",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "39ce17cc-8d23-498d-8ddb-135f0886cb30",
                  "parentUUID": "0b1b3b60-f4ac-413b-ab61-6a503cca11a3",
=======
                  "uuid": "54213f6c-7d48-4b6c-ace2-3af9af750a9f",
                  "parentUUID": "deeaa51a-49b6-4dd8-987a-8994982a3e23",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should report ismember true/false",
                  "fullTitle": "set commands test smove, sismember, and scard tests should report ismember true/false",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 9,
=======
                  "duration": 6,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['sismember', 'tonewskey', 'key2']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', 'tonewskey', 'key1']);\n            chai_1.expect(response).to.equal(0);\n            response = yield common_test_1.sendCommand(client, ['sismember', uniqueKey, 'key1']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', uniqueKey, 'key3']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', uniqueKey, 'key2']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "03904a8b-a2ef-4930-b1e9-0de016469051",
                  "parentUUID": "0b1b3b60-f4ac-413b-ab61-6a503cca11a3",
=======
                  "uuid": "d0dbf348-9bd7-443b-a216-f8076c1d5eb0",
                  "parentUUID": "deeaa51a-49b6-4dd8-987a-8994982a3e23",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only remove the source element if the destination element already exists",
                  "fullTitle": "set commands test smove, sismember, and scard tests should only remove the source element if the destination element already exists",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const newkey = `move-unique-${new Date().getTime()}`;\n            const newToKey = `move-new-to-key`;\n            let response = yield common_test_1.sendCommand(client, ['sadd', newkey, 'key1', 'key2', 'key3']);\n            chai_1.expect(response).to.equal(3);\n            response = yield common_test_1.sendCommand(client, ['sadd', newToKey, 'key1', 'key2', 'key3']);\n            chai_1.expect(response).to.equal(3);\n            response = yield common_test_1.sendCommand(client, ['smove', newkey, newToKey, 'key2']);\n            // Inconsistent with redis documentation?\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', newkey, 'key2']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "4359b379-066a-43e6-a149-c5f0b57c2134",
                  "parentUUID": "0b1b3b60-f4ac-413b-ab61-6a503cca11a3",
=======
                  "uuid": "3954a612-3d7b-44c4-8fdd-819e33442b91",
                  "parentUUID": "deeaa51a-49b6-4dd8-987a-8994982a3e23",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
<<<<<<< HEAD
                "98cc1421-c086-49b0-98e1-87f04f7cbb51",
                "ea3cc100-cfef-4318-b50e-bc4e61897336",
                "39ce17cc-8d23-498d-8ddb-135f0886cb30",
                "03904a8b-a2ef-4930-b1e9-0de016469051",
                "4359b379-066a-43e6-a149-c5f0b57c2134"
=======
                "90d9b477-4846-4948-94d3-b251ef9fadb3",
                "a2f93c42-6d65-48de-8290-19ac208926d2",
                "54213f6c-7d48-4b6c-ace2-3af9af750a9f",
                "d0dbf348-9bd7-443b-a216-f8076c1d5eb0",
                "3954a612-3d7b-44c4-8fdd-819e33442b91"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
<<<<<<< HEAD
              "duration": 50,
=======
              "duration": 35,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
<<<<<<< HEAD
            "f8e1e514-237b-43a9-98de-029f6a2375e8",
            "9cefd25a-1126-4247-bc28-65c1def4bdf2",
            "4168f8ad-de6f-431c-bfa2-b09392fb3ac1",
            "b6695a28-d7a9-4019-b5f1-ac9300360355"
=======
            "a9b04c42-51c6-4c01-9b0e-5728656ddbfa",
            "3462ae13-9275-48e5-aec2-04c52aa076a0",
            "7a7b5a97-36da-4b61-894c-c5db16110415",
            "570bcd1c-56af-4b51-8b30-ac560bc03530"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 23,
=======
          "duration": 25,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "c96bcc54-33e6-46b1-a4e6-d3d94e2cb642",
=======
          "uuid": "642b9684-4b83-443b-aaa6-f6bcc980effc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "sinter-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sinter-command.test.ts",
          "file": "/test/resp/command/set/sinter-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sinter-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 41,
=======
              "duration": 20,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "913c1c42-4a3d-4692-b4a4-adcf2829b97c",
              "parentUUID": "c96bcc54-33e6-46b1-a4e6-d3d94e2cb642",
=======
              "uuid": "d33747db-cce3-403d-a680-918cd5c9368e",
              "parentUUID": "642b9684-4b83-443b-aaa6-f6bcc980effc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sinter-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "6e74ee7f-004b-4d03-a174-0257f2efab15",
              "parentUUID": "c96bcc54-33e6-46b1-a4e6-d3d94e2cb642",
=======
              "uuid": "34df265d-04fb-429e-b073-b7d5916bc9e6",
              "parentUUID": "642b9684-4b83-443b-aaa6-f6bcc980effc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sinter-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "b7b4ceed-1845-4b9e-a827-b1e8209428b2",
              "parentUUID": "c96bcc54-33e6-46b1-a4e6-d3d94e2cb642",
=======
              "uuid": "d1dc6053-df4b-4911-a45e-991c68ee6bc2",
              "parentUUID": "642b9684-4b83-443b-aaa6-f6bcc980effc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sinter-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "a6180700-953d-434d-8f88-026db71cecdd",
              "parentUUID": "c96bcc54-33e6-46b1-a4e6-d3d94e2cb642",
=======
              "uuid": "b375e245-db1c-43c7-b44c-471bb6c7d37a",
              "parentUUID": "642b9684-4b83-443b-aaa6-f6bcc980effc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return EMPTY SET when the source set does not exist",
              "fullTitle": "sinter-command test should return EMPTY SET when the source set does not exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 7,
=======
              "duration": 4,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sinter', 'ary']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "69dce167-cf01-4137-a9fe-873e93e31cfb",
              "parentUUID": "c96bcc54-33e6-46b1-a4e6-d3d94e2cb642",
=======
              "uuid": "5a6ddc64-103f-4cd8-8160-824bb1e88610",
              "parentUUID": "642b9684-4b83-443b-aaa6-f6bcc980effc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return EMPTY SET when any other set does not exist",
              "fullTitle": "sinter-command test should return EMPTY SET when any other set does not exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 7,
=======
              "duration": 17,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'empty']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "5d79b5eb-4c12-448a-9df0-c0041f9e8cf7",
              "parentUUID": "c96bcc54-33e6-46b1-a4e6-d3d94e2cb642",
=======
              "uuid": "9c87c715-775a-42a0-89ff-9ddef476d79d",
              "parentUUID": "642b9684-4b83-443b-aaa6-f6bcc980effc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when one of the keys is not a set",
              "fullTitle": "sinter-command test should fail when one of the keys is not a set",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 16,
=======
              "duration": 5,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '1', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'zkey']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n        response = yield common_test_1.sendCommand(client, ['set', 'skey1', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'skey1']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "4ddc1d8a-4ab5-4701-813a-018b8cac8e06",
              "parentUUID": "c96bcc54-33e6-46b1-a4e6-d3d94e2cb642",
=======
              "uuid": "d70cfdee-771c-43e3-9409-4dbc952f6192",
              "parentUUID": "642b9684-4b83-443b-aaa6-f6bcc980effc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the intersection of one or more sets",
              "fullTitle": "sinter-command test should return the intersection of one or more sets",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 12,
=======
              "duration": 9,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key3', 'a', 'c', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'key2', 'key3']);\n        chai_1.expect(response).to.eql(['c']);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'a']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key2', 'key1', 'key3']);\n        chai_1.expect(response.length).to.equal(2);\n        // Redis does not guarantee the order of a set\n        chai_1.expect(response.sort()).to.eql(['a', 'c']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "190114b1-6c0a-4157-bbc1-049b06c26ec7",
              "parentUUID": "c96bcc54-33e6-46b1-a4e6-d3d94e2cb642",
=======
              "uuid": "7299de3f-58c3-4ba2-aca7-b1dea9bf51b7",
              "parentUUID": "642b9684-4b83-443b-aaa6-f6bcc980effc",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "69dce167-cf01-4137-a9fe-873e93e31cfb",
            "5d79b5eb-4c12-448a-9df0-c0041f9e8cf7",
            "4ddc1d8a-4ab5-4701-813a-018b8cac8e06",
            "190114b1-6c0a-4157-bbc1-049b06c26ec7"
=======
            "5a6ddc64-103f-4cd8-8160-824bb1e88610",
            "9c87c715-775a-42a0-89ff-9ddef476d79d",
            "d70cfdee-771c-43e3-9409-4dbc952f6192",
            "7299de3f-58c3-4ba2-aca7-b1dea9bf51b7"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 42,
=======
          "duration": 35,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "c22c7986-e117-4764-835f-12dd76508185",
=======
          "uuid": "2f3a2797-dcb9-4b81-9f99-b7aa194dca28",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "sinterstore-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sinterstore-command.test.ts",
          "file": "/test/resp/command/set/sinterstore-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sinterstore-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 21,
=======
              "duration": 18,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "15c44aca-15d5-4d20-a3db-15d5701d473f",
              "parentUUID": "c22c7986-e117-4764-835f-12dd76508185",
=======
              "uuid": "46360235-b2d2-443a-8081-7c6845147828",
              "parentUUID": "2f3a2797-dcb9-4b81-9f99-b7aa194dca28",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sinterstore-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "8690e29b-47ed-47e0-8f4d-1da78a7d2147",
              "parentUUID": "c22c7986-e117-4764-835f-12dd76508185",
=======
              "uuid": "794c7eec-296a-4c3a-912d-a95ab0128117",
              "parentUUID": "2f3a2797-dcb9-4b81-9f99-b7aa194dca28",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sinterstore-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "ba586857-c7b7-47c6-9fc7-dd56a00fe3ed",
              "parentUUID": "c22c7986-e117-4764-835f-12dd76508185",
=======
              "uuid": "3306274e-8912-434d-8ecb-010ac91becc3",
              "parentUUID": "2f3a2797-dcb9-4b81-9f99-b7aa194dca28",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sinterstore-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "49c310cd-b22d-4e56-b95e-79237f1636c5",
              "parentUUID": "c22c7986-e117-4764-835f-12dd76508185",
=======
              "uuid": "1a95ab32-c0e6-4e90-91ed-ff98b655b9ac",
              "parentUUID": "2f3a2797-dcb9-4b81-9f99-b7aa194dca28",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require a minimum of two parameters",
              "fullTitle": "sinterstore-command test should require a minimum of two parameters",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'ary']);\n        chai_1.expect(response).to.match(/ERR wrong number of arguments for \\'sinterstore\\' command/i);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "6ce2c338-f0b0-4134-9556-8b4d349225a9",
              "parentUUID": "c22c7986-e117-4764-835f-12dd76508185",
=======
              "uuid": "c90898a2-aeb5-4176-bdd8-841b6f3fe06e",
              "parentUUID": "2f3a2797-dcb9-4b81-9f99-b7aa194dca28",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return ZERO when the source set does not exist",
              "fullTitle": "sinterstore-command test should return ZERO when the source set does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'dest', 'src']);\n        chai_1.expect(response).to.eql(0);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "7264e808-ae60-4711-a56c-656a94ffb2b0",
              "parentUUID": "c22c7986-e117-4764-835f-12dd76508185",
=======
              "uuid": "154c548d-e056-4db9-87d3-c4a677d77dcb",
              "parentUUID": "2f3a2797-dcb9-4b81-9f99-b7aa194dca28",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overwrite the destination and return the number of keys copied",
              "fullTitle": "sinterstore-command test should overwrite the destination and return the number of keys copied",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 9,
=======
              "duration": 28,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c', 'd', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['set', 'key3', 'some text value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'key3', 'key1', 'key2']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'key3']);\n        chai_1.expect(response).to.eql(['c']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "54bb399b-d935-4785-b158-be1f9cba74d2",
              "parentUUID": "c22c7986-e117-4764-835f-12dd76508185",
=======
              "uuid": "de21695c-e4db-46ee-a881-ebdb76888b35",
              "parentUUID": "2f3a2797-dcb9-4b81-9f99-b7aa194dca28",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when one of the keys is not a set",
              "fullTitle": "sinterstore-command test should fail when one of the keys is not a set",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 4,
=======
              "duration": 5,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '1', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'key1', 'zkey']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n        response = yield common_test_1.sendCommand(client, ['set', 'skey1', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'key1', 'skey1']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "bca873fe-8e93-4c18-9381-9238283594d1",
              "parentUUID": "c22c7986-e117-4764-835f-12dd76508185",
=======
              "uuid": "85048d50-d48a-472c-8d22-a9296f14e3c7",
              "parentUUID": "2f3a2797-dcb9-4b81-9f99-b7aa194dca28",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "6ce2c338-f0b0-4134-9556-8b4d349225a9",
            "7264e808-ae60-4711-a56c-656a94ffb2b0",
            "54bb399b-d935-4785-b158-be1f9cba74d2",
            "bca873fe-8e93-4c18-9381-9238283594d1"
=======
            "c90898a2-aeb5-4176-bdd8-841b6f3fe06e",
            "154c548d-e056-4db9-87d3-c4a677d77dcb",
            "de21695c-e4db-46ee-a881-ebdb76888b35",
            "85048d50-d48a-472c-8d22-a9296f14e3c7"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 18,
=======
          "duration": 38,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "30c1d131-1ca8-4f89-b37b-99f2f4103df5",
=======
          "uuid": "3086a8fd-8c64-4665-8050-73704df87095",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "srem-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/srem-command.test.ts",
          "file": "/test/resp/command/set/srem-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "srem-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 77,
=======
              "duration": 17,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "51b8573c-90f6-42ff-8628-fde5604b185d",
              "parentUUID": "30c1d131-1ca8-4f89-b37b-99f2f4103df5",
=======
              "uuid": "d4278ab8-17eb-4d5b-92da-7887dd4434f6",
              "parentUUID": "3086a8fd-8c64-4665-8050-73704df87095",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "srem-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "7b6a3ef0-a077-45d0-b005-959e3a11ffa6",
              "parentUUID": "30c1d131-1ca8-4f89-b37b-99f2f4103df5",
=======
              "uuid": "c35eb939-f819-4359-8bc1-39cbeedb3f4a",
              "parentUUID": "3086a8fd-8c64-4665-8050-73704df87095",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "srem-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "17f865ed-942b-4cf6-85d3-ddfafe9cfed0",
              "parentUUID": "30c1d131-1ca8-4f89-b37b-99f2f4103df5",
=======
              "uuid": "0cc833bf-5a24-4a7a-80b4-359fc0ff9b97",
              "parentUUID": "3086a8fd-8c64-4665-8050-73704df87095",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "srem-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "f67d72b1-f71d-4144-a22e-74c42d69cc44",
              "parentUUID": "30c1d131-1ca8-4f89-b37b-99f2f4103df5",
=======
              "uuid": "d25567c3-17e5-400e-9417-2bc40d3b39ba",
              "parentUUID": "3086a8fd-8c64-4665-8050-73704df87095",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 0 when the set does not exist",
              "fullTitle": "srem-command test should return 0 when the set does not exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 7,
=======
              "duration": 4,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['srem', 'set', 'member']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "f6e33cba-ac5e-4fd6-8181-4b06e6cb7b67",
              "parentUUID": "30c1d131-1ca8-4f89-b37b-99f2f4103df5",
=======
              "uuid": "8327db62-ca76-4b59-9d1e-9d71f28ebf24",
              "parentUUID": "3086a8fd-8c64-4665-8050-73704df87095",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return only the number of existing keys that are removed",
              "fullTitle": "srem-command test should return only the number of existing keys that are removed",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 5,
=======
              "duration": 18,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'set', 'key1', 'key2', 'key3', 'key4']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['srem', 'set', 'key2', 'not', 'here', 'today', 'key4']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'set']);\n        chai_1.expect(response.sort()).to.eql(['key1', 'key3']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "b15431b6-f0fa-4631-9ce7-efb1b8c8740b",
              "parentUUID": "30c1d131-1ca8-4f89-b37b-99f2f4103df5",
=======
              "uuid": "e01c1c1e-05d0-4cc8-b603-ec70574e25b6",
              "parentUUID": "3086a8fd-8c64-4665-8050-73704df87095",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove an empty set when all members are removed",
              "fullTitle": "srem-command test should remove an empty set when all members are removed",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['srem', 'set', 'key1', 'key3']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['exists', 'set']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "3e4b501c-d2b7-47f8-9ccf-90cf83d076df",
              "parentUUID": "30c1d131-1ca8-4f89-b37b-99f2f4103df5",
=======
              "uuid": "26c29fba-e359-4eaf-a8bf-b9320e35a4db",
              "parentUUID": "3086a8fd-8c64-4665-8050-73704df87095",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "f6e33cba-ac5e-4fd6-8181-4b06e6cb7b67",
            "b15431b6-f0fa-4631-9ce7-efb1b8c8740b",
            "3e4b501c-d2b7-47f8-9ccf-90cf83d076df"
=======
            "8327db62-ca76-4b59-9d1e-9d71f28ebf24",
            "e01c1c1e-05d0-4cc8-b603-ec70574e25b6",
            "26c29fba-e359-4eaf-a8bf-b9320e35a4db"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 14,
=======
          "duration": 26,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "01291c84-5d93-4c32-a94a-936de806be80",
=======
          "uuid": "cf3a7e3c-b6ed-46d3-8053-0836a1773a4b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "sunion-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sunion-command.test.ts",
          "file": "/test/resp/command/set/sunion-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sunion-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 25,
=======
              "duration": 4,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "9a082008-2042-4d98-bb2c-a1f3feaf8024",
              "parentUUID": "01291c84-5d93-4c32-a94a-936de806be80",
=======
              "uuid": "a0224723-44e4-4deb-84f5-cff9808525ad",
              "parentUUID": "cf3a7e3c-b6ed-46d3-8053-0836a1773a4b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sunion-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "8adf1dcb-247c-4ebc-b2c7-a004dc410ac5",
              "parentUUID": "01291c84-5d93-4c32-a94a-936de806be80",
=======
              "uuid": "61e4f450-8407-4bdf-85ac-0c20ffbfc359",
              "parentUUID": "cf3a7e3c-b6ed-46d3-8053-0836a1773a4b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sunion-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "d84b8b1e-cca2-453e-97de-f76df60432e4",
              "parentUUID": "01291c84-5d93-4c32-a94a-936de806be80",
=======
              "uuid": "f2cbd3f3-354b-4cee-b8ba-d63c3f6aff60",
              "parentUUID": "cf3a7e3c-b6ed-46d3-8053-0836a1773a4b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sunion-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "826ac7fa-6b4d-45f3-824c-618c782f22fa",
              "parentUUID": "01291c84-5d93-4c32-a94a-936de806be80",
=======
              "uuid": "c9b11c75-6748-4a04-8ef5-015840f1725b",
              "parentUUID": "cf3a7e3c-b6ed-46d3-8053-0836a1773a4b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return EMPTY SET when the source set does not exist",
              "fullTitle": "sunion-command test should return EMPTY SET when the source set does not exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 3,
=======
              "duration": 18,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sunion', 'ary']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "07878cd9-9fa2-4b14-9a03-43987cfc90bc",
              "parentUUID": "01291c84-5d93-4c32-a94a-936de806be80",
=======
              "uuid": "5bf65581-51a1-4a90-a18f-fdec90b6c2ed",
              "parentUUID": "cf3a7e3c-b6ed-46d3-8053-0836a1773a4b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the union of a single set",
              "fullTitle": "sunion-command test should return the union of a single set",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 2,
=======
              "duration": 5,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['sunion', 'key1']);\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "b37297e6-1591-44a0-b066-019476314844",
              "parentUUID": "01291c84-5d93-4c32-a94a-936de806be80",
=======
              "uuid": "067781f1-4a7c-415d-8d94-0a2730f4636b",
              "parentUUID": "cf3a7e3c-b6ed-46d3-8053-0836a1773a4b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when sunion requested againt non-set keys",
              "fullTitle": "sunion-command test should fail when sunion requested againt non-set keys",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'string-key', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sunion', 'key1', 'string-key']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "dcfce086-09fb-4054-b6ad-8cdf4f42463e",
              "parentUUID": "01291c84-5d93-4c32-a94a-936de806be80",
=======
              "uuid": "2608f9b2-ca80-4567-bcf8-a9de1ac75eee",
              "parentUUID": "cf3a7e3c-b6ed-46d3-8053-0836a1773a4b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the union of multiple sets",
              "fullTitle": "sunion-command test should return the union of multiple sets",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key3', 'a', 'c', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sunion', 'key1', 'key2', 'key3']);\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd', 'e']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "e78b1b12-0f7a-49ed-94eb-379bf8c315ac",
              "parentUUID": "01291c84-5d93-4c32-a94a-936de806be80",
=======
              "uuid": "eab2e108-e882-432b-8a12-df4ce6ee017c",
              "parentUUID": "cf3a7e3c-b6ed-46d3-8053-0836a1773a4b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "07878cd9-9fa2-4b14-9a03-43987cfc90bc",
            "b37297e6-1591-44a0-b066-019476314844",
            "dcfce086-09fb-4054-b6ad-8cdf4f42463e",
            "e78b1b12-0f7a-49ed-94eb-379bf8c315ac"
=======
            "5bf65581-51a1-4a90-a18f-fdec90b6c2ed",
            "067781f1-4a7c-415d-8d94-0a2730f4636b",
            "2608f9b2-ca80-4567-bcf8-a9de1ac75eee",
            "eab2e108-e882-432b-8a12-df4ce6ee017c"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 21,
=======
          "duration": 30,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "76d0aebd-8640-41c5-a674-af66243ae6d9",
=======
          "uuid": "0954da4c-8789-481a-a855-ca711efa0061",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "sunionstore-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sunionstore-command.test.ts",
          "file": "/test/resp/command/set/sunionstore-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sunionstore-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 41,
=======
              "duration": 3,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "d550a257-c9c8-4cee-877e-347bd8f1087d",
              "parentUUID": "76d0aebd-8640-41c5-a674-af66243ae6d9",
=======
              "uuid": "3fcc91d5-359b-4726-a633-6eabf5c12676",
              "parentUUID": "0954da4c-8789-481a-a855-ca711efa0061",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sunionstore-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "242ccd95-0fe6-4787-a264-bc3de9c58842",
              "parentUUID": "76d0aebd-8640-41c5-a674-af66243ae6d9",
=======
              "uuid": "35796e5a-53d5-43b0-8b07-6d590b3824c7",
              "parentUUID": "0954da4c-8789-481a-a855-ca711efa0061",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sunionstore-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "76abb18f-b1b5-43fc-bbaa-8a83ec006024",
              "parentUUID": "76d0aebd-8640-41c5-a674-af66243ae6d9",
=======
              "uuid": "b1afadaa-8e89-4e7f-b7d9-0e9f41e922db",
              "parentUUID": "0954da4c-8789-481a-a855-ca711efa0061",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sunionstore-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "6bac074f-7783-45b4-82d2-a85f87d2b63b",
              "parentUUID": "76d0aebd-8640-41c5-a674-af66243ae6d9",
=======
              "uuid": "44e1057d-e0d5-4736-aa79-ed22837202ef",
              "parentUUID": "0954da4c-8789-481a-a855-ca711efa0061",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require a minimum of two parameters",
              "fullTitle": "sunionstore-command test should require a minimum of two parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sunionstore', 'ary']);\n        chai_1.expect(response).to.match(/ERR wrong number of arguments for \\'sunionstore\\' command/i);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "bf4a3f5a-56c8-4e39-969f-e24a79eee590",
              "parentUUID": "76d0aebd-8640-41c5-a674-af66243ae6d9",
=======
              "uuid": "a3018717-367b-456e-b397-2e86a98ab0fb",
              "parentUUID": "0954da4c-8789-481a-a855-ca711efa0061",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return ZERO when the source set does not exist",
              "fullTitle": "sunionstore-command test should return ZERO when the source set does not exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 4,
=======
              "duration": 1,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sunionstore', 'dest', 'src']);\n        chai_1.expect(response).to.eql(0);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "b2380fed-32a1-4f7d-902c-f0c94ef7eea6",
              "parentUUID": "76d0aebd-8640-41c5-a674-af66243ae6d9",
=======
              "uuid": "98b45282-251a-470b-895c-49ce0699d545",
              "parentUUID": "0954da4c-8789-481a-a855-ca711efa0061",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overwrite the destination and return the number of keys copied",
              "fullTitle": "sunionstore-command test should overwrite the destination and return the number of keys copied",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 18,
=======
              "duration": 8,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c', 'd', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['set', 'key3', 'some text value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sunionstore', 'key3', 'key1', 'key2']);\n        chai_1.expect(response).to.equal(5);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'key3']);\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd', 'e']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "e6cc5215-06b8-40f5-84b6-7b6b3c00b161",
              "parentUUID": "76d0aebd-8640-41c5-a674-af66243ae6d9",
=======
              "uuid": "6bd8f59d-9202-4aaf-9c1b-69c95806a449",
              "parentUUID": "0954da4c-8789-481a-a855-ca711efa0061",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "bf4a3f5a-56c8-4e39-969f-e24a79eee590",
            "b2380fed-32a1-4f7d-902c-f0c94ef7eea6",
            "e6cc5215-06b8-40f5-84b6-7b6b3c00b161"
=======
            "a3018717-367b-456e-b397-2e86a98ab0fb",
            "98b45282-251a-470b-895c-49ce0699d545",
            "6bd8f59d-9202-4aaf-9c1b-69c95806a449"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "b23d0839-a3d2-47b9-bcec-dad515f22ac8",
=======
          "uuid": "8d752691-bd1b-45ac-b93a-7aa21db81729",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "z-command tests",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/z-commands.test.ts",
          "file": "/test/resp/command/sset/z-commands.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "z-command tests \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 4,
=======
              "duration": 5,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "fa20c1bf-a361-4377-8a00-1ac9bfa3880c",
              "parentUUID": "b23d0839-a3d2-47b9-bcec-dad515f22ac8",
=======
              "uuid": "bf08167a-b76b-4b77-8883-1f07570fa586",
              "parentUUID": "8d752691-bd1b-45ac-b93a-7aa21db81729",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "z-command tests \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "b518a717-c53b-4ec9-9c42-71b7d9b0ff40",
              "parentUUID": "b23d0839-a3d2-47b9-bcec-dad515f22ac8",
=======
              "uuid": "7c43a522-f79d-4b75-8c7b-e3ee0d236f6d",
              "parentUUID": "8d752691-bd1b-45ac-b93a-7aa21db81729",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "z-command tests \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "6f6f4c7b-d898-4423-8ef5-ab748e65555f",
              "parentUUID": "b23d0839-a3d2-47b9-bcec-dad515f22ac8",
=======
              "uuid": "dac5918c-7042-47d4-9e74-4788d980c028",
              "parentUUID": "8d752691-bd1b-45ac-b93a-7aa21db81729",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "z-command tests \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "4f6caff2-2196-46e0-93b6-b9a4f5e75a68",
              "parentUUID": "b23d0839-a3d2-47b9-bcec-dad515f22ac8",
=======
              "uuid": "f251b37e-7831-401c-ae99-88b9f75f6652",
              "parentUUID": "8d752691-bd1b-45ac-b93a-7aa21db81729",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should support basic operations",
              "fullTitle": "z-command tests should support basic operations",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 78,
              "state": "passed",
              "speed": "slow",
=======
              "duration": 41,
              "state": "passed",
              "speed": "medium",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueZkey = `key${new Date().getTime()}`;\n        let response = yield common_test_1.sendCommand(client, ['zrange', 'testkey', String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER)]);\n        chai_1.expect(response).to.eql([]);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'testkey', '14', '__proto__']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '8', '5a600e16']);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '9', '5a600e17']);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '10', '5a600e18']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zcard', uniqueZkey]);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql(['5a600e16', '8',\n            '5a600e17', '9',\n            '5a600e18', '10']);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '12', '5a600e17']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['zcount', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER)]);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER)]);\n        chai_1.expect(response.length).to.equal(3);\n        chai_1.expect(response).to.eql(['5a600e16', '5a600e18', '5a600e17']);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql(['5a600e16', '8', '5a600e18', '10', '5a600e17', '12']);\n        response = yield common_test_1.sendCommand(client, ['type', uniqueZkey]);\n        chai_1.expect(response).to.equal('zset');\n        response = yield common_test_1.sendCommand(client, ['zcount', uniqueZkey, '-Infinity', '10']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['zcount', uniqueZkey, 'Negative One', '10']);\n        chai_1.expect(response).to.equal('ReplyError: ERR min or max is not a float');\n        // report syntax error\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'with Scores']);\n        chai_1.expect(response).to.eql('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String('Number.MIN_SAFE_INTEGER'), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql('ReplyError: ERR value is not an integer or out of range');\n        // Remove members without removing keys\n        response = yield common_test_1.sendCommand(client, ['zrem', uniqueZkey, 'does not exist', '5a600e16', '5a600e18', '5a600e17']);\n        chai_1.expect(response).to.equal(3);\n        // Unexpectedly, redis removes the key when the last element is removed\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueZkey]);\n        console.log(`searched for ${uniqueZkey}`);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "0ea78bb4-d18f-4ad0-a228-89783b00da2b",
              "parentUUID": "b23d0839-a3d2-47b9-bcec-dad515f22ac8",
=======
              "uuid": "f021e498-ec43-4ae4-b747-2be979d20c1c",
              "parentUUID": "8d752691-bd1b-45ac-b93a-7aa21db81729",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should increase rank",
              "fullTitle": "z-command tests should increase rank",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 36,
=======
              "duration": 30,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueZkey = `incrkey${new Date().getTime()}`;\n        let response;\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '1', 'first']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '2', 'second']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '3', 'third']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '4', 'fourth']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, '2', 'first']);\n        chai_1.expect(response).to.equal('3');\n        // Validate zscore\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'first']);\n        // expect(response).to.equal('3');\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'second']);\n        // expect(response).to.equal('2');\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'third']);\n        // expect(response).to.equal('3');\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'fourth']);\n        // expect(response).to.equal('4');\n        //\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'first']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'second']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'third']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'fourth']);\n        chai_1.expect(response).to.equal(3);\n        // expect(response).to.match(/^ReplyError: ERR unknown command.*/);\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, '-20', 'fourth']);\n        chai_1.expect(response).to.equal('-16');\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, `-${Number.MIN_SAFE_INTEGER + 1}.${Number.MAX_SAFE_INTEGER}`, 'fourth']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not a valid float');\n        // Should create a key if it doesn't exist\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, '-20', 'fifth']);\n        chai_1.expect(response).to.equal('-20');\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql(['fifth', '-20', 'fourth', '-16', 'second', '2', 'first', '3', 'third', '3']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "1af19b64-437c-45f0-9e3f-5ae6cc374f10",
              "parentUUID": "b23d0839-a3d2-47b9-bcec-dad515f22ac8",
=======
              "uuid": "066cd9da-4a27-46ce-b342-923c2c702b52",
              "parentUUID": "8d752691-bd1b-45ac-b93a-7aa21db81729",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "0ea78bb4-d18f-4ad0-a228-89783b00da2b",
            "1af19b64-437c-45f0-9e3f-5ae6cc374f10"
=======
            "f021e498-ec43-4ae4-b747-2be979d20c1c",
            "066cd9da-4a27-46ce-b342-923c2c702b52"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 114,
=======
          "duration": 71,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "adc90f29-6d7e-4d75-bac7-c895e964dfdd",
=======
          "uuid": "35ab8edf-b6d8-4d91-a504-19901370d64b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "zadd command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zadd-command.test.ts",
          "file": "/test/resp/command/sset/zadd-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zadd command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 19,
=======
              "duration": 16,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "d1826a32-1dec-4d62-a08d-de34ec0a7e2f",
              "parentUUID": "adc90f29-6d7e-4d75-bac7-c895e964dfdd",
=======
              "uuid": "e44ba2af-0865-4ae7-b731-599f0f4d65d9",
              "parentUUID": "35ab8edf-b6d8-4d91-a504-19901370d64b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zadd command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "650c28e0-c447-4577-8a6f-1cbe56e1de89",
              "parentUUID": "adc90f29-6d7e-4d75-bac7-c895e964dfdd",
=======
              "uuid": "e21ec1a3-9fa1-4275-9bcf-7d4412228fc2",
              "parentUUID": "35ab8edf-b6d8-4d91-a504-19901370d64b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zadd command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "eb188241-2491-4f8a-be6a-29a7814b069c",
              "parentUUID": "adc90f29-6d7e-4d75-bac7-c895e964dfdd",
=======
              "uuid": "ce663fe2-0170-4506-aec3-c8d293bdac74",
              "parentUUID": "35ab8edf-b6d8-4d91-a504-19901370d64b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zadd command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "8fc9a078-ab19-4e61-b422-feda84500345",
              "parentUUID": "adc90f29-6d7e-4d75-bac7-c895e964dfdd",
=======
              "uuid": "6a391dd6-a62e-4b85-86ae-6a250629906b",
              "parentUUID": "35ab8edf-b6d8-4d91-a504-19901370d64b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require at least 3 parameters",
              "fullTitle": "zadd command test should require at least 3 parameters",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 11,
=======
              "duration": 8,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['zadd']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "fc566982-6735-4d24-a9b0-4c1a42b404d3",
              "parentUUID": "adc90f29-6d7e-4d75-bac7-c895e964dfdd",
=======
              "uuid": "f05b4eaa-8441-474e-b5b6-5e0a1cc0adc2",
              "parentUUID": "35ab8edf-b6d8-4d91-a504-19901370d64b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject even parameter counts",
              "fullTitle": "zadd command test should reject even parameter counts",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 18,
=======
              "duration": 5,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something', '456']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something', '456', 'another', '765']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something', '456', 'another', '765', 'test']);\n        // The \"something\" key should already exist so we only count 2 new fields\n        chai_1.expect(response).to.equal(2);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "3d0daebe-8e1a-4ed0-a7c6-0f83c8a4ffbd",
              "parentUUID": "adc90f29-6d7e-4d75-bac7-c895e964dfdd",
=======
              "uuid": "cb21c9f1-0bb9-4b7f-a2a7-5b4adc23b312",
              "parentUUID": "35ab8edf-b6d8-4d91-a504-19901370d64b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject an attempt to store non-floatish rankings",
              "fullTitle": "zadd command test should reject an attempt to store non-floatish rankings",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '__data__', 'something']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not a valid float');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "cede518e-cf6b-4de6-9a92-248a02121a9d",
              "parentUUID": "adc90f29-6d7e-4d75-bac7-c895e964dfdd",
=======
              "uuid": "4c43b84b-3de3-4926-b17d-25e0e58c40ab",
              "parentUUID": "35ab8edf-b6d8-4d91-a504-19901370d64b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "fc566982-6735-4d24-a9b0-4c1a42b404d3",
            "3d0daebe-8e1a-4ed0-a7c6-0f83c8a4ffbd",
            "cede518e-cf6b-4de6-9a92-248a02121a9d"
=======
            "f05b4eaa-8441-474e-b5b6-5e0a1cc0adc2",
            "cb21c9f1-0bb9-4b7f-a2a7-5b4adc23b312",
            "4c43b84b-3de3-4926-b17d-25e0e58c40ab"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 30,
=======
          "duration": 15,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "16a77bd9-b693-4ca8-97af-a92ab8e3fb23",
=======
          "uuid": "b3d04d70-7070-46a0-9ff9-d75cc2399d6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "zrange-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zrange-command.test.ts",
          "file": "/test/resp/command/sset/zrange-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zrange-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 20,
=======
              "duration": 17,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "51687e47-9bc8-4937-9450-75783120f7c4",
              "parentUUID": "16a77bd9-b693-4ca8-97af-a92ab8e3fb23",
=======
              "uuid": "cc76b4fc-93d7-4320-972e-572eef6b9f5b",
              "parentUUID": "b3d04d70-7070-46a0-9ff9-d75cc2399d6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zrange-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "db0932ef-57ba-4f2d-81dd-7352cd6b71ad",
              "parentUUID": "16a77bd9-b693-4ca8-97af-a92ab8e3fb23",
=======
              "uuid": "d1ccc8f2-f562-4e42-ba1b-8b43e7a26597",
              "parentUUID": "b3d04d70-7070-46a0-9ff9-d75cc2399d6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zrange-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "136ad6b7-9105-4bb1-854e-ffc59c6ca1a4",
              "parentUUID": "16a77bd9-b693-4ca8-97af-a92ab8e3fb23",
=======
              "uuid": "ef56698b-c1d2-4d9b-960c-0520805aed13",
              "parentUUID": "b3d04d70-7070-46a0-9ff9-d75cc2399d6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zrange-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "b9cbd12b-f11a-4e19-a36a-83473529b5dc",
              "parentUUID": "16a77bd9-b693-4ca8-97af-a92ab8e3fb23",
=======
              "uuid": "320c03b0-70c9-4f4a-a603-61e018f2f78c",
              "parentUUID": "b3d04d70-7070-46a0-9ff9-d75cc2399d6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should reproduce the redis documentation examples",
              "fullTitle": "zrange-command test should reproduce the redis documentation examples",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'one']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '2', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '3', 'three']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '0', '-1']);\n        chai_1.expect(response).to.eql(['one', 'two', 'three']);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '2', '3']);\n        chai_1.expect(response).to.eql(['three']);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '-2', '-1']);\n        chai_1.expect(response).to.eql(['two', 'three']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "26e7296d-9091-409f-8d5e-d673b295296f",
              "parentUUID": "16a77bd9-b693-4ca8-97af-a92ab8e3fb23",
=======
              "uuid": "a7df665d-0b6e-4625-a8be-90d0c3c2e557",
              "parentUUID": "b3d04d70-7070-46a0-9ff9-d75cc2399d6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should also reproduce the second documented example",
              "fullTitle": "zrange-command test should also reproduce the second documented example",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '0', '1', 'withscores']);\n        chai_1.expect(response).to.eql(['one', '1', 'two', '2']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "21a8e12d-bc3c-49a0-9a10-9fe5f3c535a0",
              "parentUUID": "16a77bd9-b693-4ca8-97af-a92ab8e3fb23",
=======
              "uuid": "5e26b5f8-76fe-4334-9a03-ab9fc6d0d4e7",
              "parentUUID": "b3d04d70-7070-46a0-9ff9-d75cc2399d6c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "26e7296d-9091-409f-8d5e-d673b295296f",
            "21a8e12d-bc3c-49a0-9a10-9fe5f3c535a0"
=======
            "a7df665d-0b6e-4625-a8be-90d0c3c2e557",
            "5e26b5f8-76fe-4334-9a03-ab9fc6d0d4e7"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "f6562974-ffaa-45e7-a508-eefcda5c9abb",
=======
          "uuid": "940cd1ab-5e66-4036-93d2-61c56f5d7dfb",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "zrank-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zrank-command.test.ts",
          "file": "/test/resp/command/sset/zrank-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zrank-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 4,
=======
              "duration": 25,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "14f6371f-2ee4-409b-a04f-96ff2ef26774",
              "parentUUID": "f6562974-ffaa-45e7-a508-eefcda5c9abb",
=======
              "uuid": "aeedceca-e872-4a30-aa49-59965492fab5",
              "parentUUID": "940cd1ab-5e66-4036-93d2-61c56f5d7dfb",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zrank-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "93ecf7df-a38b-45b0-b135-9f322ac6fbb0",
              "parentUUID": "f6562974-ffaa-45e7-a508-eefcda5c9abb",
=======
              "uuid": "bb069490-8cd0-4941-aa49-0f1259e73b31",
              "parentUUID": "940cd1ab-5e66-4036-93d2-61c56f5d7dfb",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zrank-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "cff65b58-a362-4110-8733-b8d2dee13af4",
              "parentUUID": "f6562974-ffaa-45e7-a508-eefcda5c9abb",
=======
              "uuid": "87ebf7ce-8eac-42b2-8892-b13af2b101c0",
              "parentUUID": "940cd1ab-5e66-4036-93d2-61c56f5d7dfb",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zrank-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "bd6c0125-7000-427b-858b-4b7a85842b69",
              "parentUUID": "f6562974-ffaa-45e7-a508-eefcda5c9abb",
=======
              "uuid": "002e435d-61be-43be-b5ee-58324cd958e4",
              "parentUUID": "940cd1ab-5e66-4036-93d2-61c56f5d7dfb",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when the ZSET does not exist",
              "fullTitle": "zrank-command test should return NIL when the ZSET does not exist",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrank', 'zset', 'member']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "7264114e-1a88-4375-9ce1-f8bf019c8ef9",
              "parentUUID": "f6562974-ffaa-45e7-a508-eefcda5c9abb",
=======
              "uuid": "778f3403-1712-496c-b94e-4efe28e5d893",
              "parentUUID": "940cd1ab-5e66-4036-93d2-61c56f5d7dfb",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NIL when the ZSET exists but the key does not",
              "fullTitle": "zrank-command test should return NIL when the ZSET exists but the key does not",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 7,
=======
              "duration": 5,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '23.3', 'member']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrank', 'zset', 'membre']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['exists', 'zset']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "c12b50a8-170c-4902-a87b-10da9c8ee942",
              "parentUUID": "f6562974-ffaa-45e7-a508-eefcda5c9abb",
=======
              "uuid": "01130d9e-b312-4914-b681-bbf34f286a14",
              "parentUUID": "940cd1ab-5e66-4036-93d2-61c56f5d7dfb",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "7264114e-1a88-4375-9ce1-f8bf019c8ef9",
            "c12b50a8-170c-4902-a87b-10da9c8ee942"
=======
            "778f3403-1712-496c-b94e-4efe28e5d893",
            "01130d9e-b312-4914-b681-bbf34f286a14"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "1936a7d2-f8da-4133-b81d-a2d754374ea5",
=======
          "uuid": "a9b2e68e-9dd7-4d3c-ad98-98c45d1a1350",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "zrem-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zrem-command.test.ts",
          "file": "/test/resp/command/sset/zrem-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zrem-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 22,
=======
              "duration": 16,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "dedcdfa1-abdb-4df7-9ece-9c07d3016e44",
              "parentUUID": "1936a7d2-f8da-4133-b81d-a2d754374ea5",
=======
              "uuid": "ca1acd58-8906-4e93-b64b-45814a193abc",
              "parentUUID": "a9b2e68e-9dd7-4d3c-ad98-98c45d1a1350",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zrem-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "0c20c2b5-7c81-4f7c-a268-4ec644d4cd4d",
              "parentUUID": "1936a7d2-f8da-4133-b81d-a2d754374ea5",
=======
              "uuid": "29b4df21-6446-4e1c-aec4-821558b90872",
              "parentUUID": "a9b2e68e-9dd7-4d3c-ad98-98c45d1a1350",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zrem-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "ed44c10e-b301-42a6-82b6-c83cd8070306",
              "parentUUID": "1936a7d2-f8da-4133-b81d-a2d754374ea5",
=======
              "uuid": "4be67157-8c78-4848-97cf-49974251c883",
              "parentUUID": "a9b2e68e-9dd7-4d3c-ad98-98c45d1a1350",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zrem-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "d636b16d-6fe4-4d20-984c-84a4ec3cf246",
              "parentUUID": "1936a7d2-f8da-4133-b81d-a2d754374ea5",
=======
              "uuid": "2b294c6a-75ec-42f3-8ff1-8fe0b80c5eb3",
              "parentUUID": "a9b2e68e-9dd7-4d3c-ad98-98c45d1a1350",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should remove a key from a sorted set",
              "fullTitle": "zrem-command test should remove a key from a sorted set",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 15,
=======
              "duration": 17,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'one']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '2', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '3', 'three']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrem', 'zset', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '0', '-1', 'withscores']);\n        chai_1.expect(response).to.eql(['one', '1', 'three', '3']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "6e5d5914-b708-4c51-9ca5-216b79bb4a7d",
              "parentUUID": "1936a7d2-f8da-4133-b81d-a2d754374ea5",
=======
              "uuid": "7e6b2bcf-9f81-4ac4-ba40-9254cccfa4c4",
              "parentUUID": "a9b2e68e-9dd7-4d3c-ad98-98c45d1a1350",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "6e5d5914-b708-4c51-9ca5-216b79bb4a7d"
=======
            "7e6b2bcf-9f81-4ac4-ba40-9254cccfa4c4"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 15,
=======
          "duration": 17,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "1dabe6d3-e9e0-4823-867f-77750becdbab",
=======
          "uuid": "4593167e-7dd9-4eb9-9ad4-395677d26927",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "getset-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/getset-command.test.ts",
          "file": "/test/resp/command/string/getset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "getset-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 16,
=======
              "duration": 12,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "cca84f4d-c95b-4307-b5c9-0ce639f058ba",
              "parentUUID": "1dabe6d3-e9e0-4823-867f-77750becdbab",
=======
              "uuid": "cef535f1-c7f9-4921-bd04-529f6b166131",
              "parentUUID": "4593167e-7dd9-4eb9-9ad4-395677d26927",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "getset-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "ee137345-63e5-458d-af2a-fb26e47d3e3c",
              "parentUUID": "1dabe6d3-e9e0-4823-867f-77750becdbab",
=======
              "uuid": "42158863-1d2b-4d99-8a83-5cd34dcbf204",
              "parentUUID": "4593167e-7dd9-4eb9-9ad4-395677d26927",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "getset-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "0af1c10d-bbbd-4acc-a6b7-0f303dedae6d",
              "parentUUID": "1dabe6d3-e9e0-4823-867f-77750becdbab",
=======
              "uuid": "87406fcb-e9a5-43f6-90fe-abc6d8cc5d1e",
              "parentUUID": "4593167e-7dd9-4eb9-9ad4-395677d26927",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "getset-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "769b0d31-0416-4617-b296-913b1cc02fdc",
              "parentUUID": "1dabe6d3-e9e0-4823-867f-77750becdbab",
=======
              "uuid": "81ac0156-4797-4e55-976f-acd18eaf442f",
              "parentUUID": "4593167e-7dd9-4eb9-9ad4-395677d26927",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when the original key does not exist",
              "fullTitle": "getset-command test should report NIL when the original key does not exist",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['getset', uniqueKey, '0']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "4489d61c-b46b-431c-bfd9-07164ba276eb",
              "parentUUID": "1dabe6d3-e9e0-4823-867f-77750becdbab",
=======
              "uuid": "9a7e3c15-2c3b-407c-b043-9906e91bec5c",
              "parentUUID": "4593167e-7dd9-4eb9-9ad4-395677d26927",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report the previous value of the key",
              "fullTitle": "getset-command test should report the previous value of the key",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 7,
=======
              "duration": 5,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['getset', uniqueKey, 'ninety nine']);\n        chai_1.expect(response).to.equal('0');\n        response = yield common_test_1.sendCommand(client, ['getset', uniqueKey, 'nothing']);\n        chai_1.expect(response).to.equal('ninety nine');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "6adbeb26-c440-487d-9f90-650a94230549",
              "parentUUID": "1dabe6d3-e9e0-4823-867f-77750becdbab",
=======
              "uuid": "197b0ff4-aede-46bd-bdfd-ae3b7d2dfee7",
              "parentUUID": "4593167e-7dd9-4eb9-9ad4-395677d26927",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "4489d61c-b46b-431c-bfd9-07164ba276eb",
            "6adbeb26-c440-487d-9f90-650a94230549"
=======
            "9a7e3c15-2c3b-407c-b043-9906e91bec5c",
            "197b0ff4-aede-46bd-bdfd-ae3b7d2dfee7"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 11,
=======
          "duration": 9,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "a106e7d7-bfec-459b-94fc-9b3ac22ec98b",
=======
          "uuid": "cade9432-d6c5-4762-982d-a2e66b4e984b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "incr/decr command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/incr-command.test.ts",
          "file": "/test/resp/command/string/incr-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "incr/decr command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 39,
=======
              "duration": 23,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a millisecond TTL to validate incr respects TTL\n    common_test_1.sendCommand(new net.Socket(), ['set', 'ttlkey', '100', 'PX', '3'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "fbeb2320-f462-46b2-bdc4-f91054ecfdd7",
              "parentUUID": "a106e7d7-bfec-459b-94fc-9b3ac22ec98b",
=======
              "uuid": "f6ad3681-f876-42ed-be7a-47b19d98975e",
              "parentUUID": "cade9432-d6c5-4762-982d-a2e66b4e984b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "incr/decr command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "991e4094-dea8-4cc0-895a-59f261508db7",
              "parentUUID": "a106e7d7-bfec-459b-94fc-9b3ac22ec98b",
=======
              "uuid": "dd123856-67fe-49cd-b76e-79d4f4acbc0c",
              "parentUUID": "cade9432-d6c5-4762-982d-a2e66b4e984b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "incr/decr command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "ba81def6-7bb0-4396-9561-12f0a4c40564",
              "parentUUID": "a106e7d7-bfec-459b-94fc-9b3ac22ec98b",
=======
              "uuid": "553d285f-c1e1-4009-9eb6-a9cdbaebbb32",
              "parentUUID": "cade9432-d6c5-4762-982d-a2e66b4e984b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "incr/decr command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "f462e496-98c9-4e05-9c74-b8ea2c7a2c97",
              "parentUUID": "a106e7d7-bfec-459b-94fc-9b3ac22ec98b",
=======
              "uuid": "0cf13bca-174c-4ce2-b9d2-727089011520",
              "parentUUID": "cade9432-d6c5-4762-982d-a2e66b4e984b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ONE when incr called against unknown key",
              "fullTitle": "incr/decr command test should report ONE when incr called against unknown key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['incr', 'incr-key']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "97c57712-6312-413c-965a-bc723bff30c7",
              "parentUUID": "a106e7d7-bfec-459b-94fc-9b3ac22ec98b",
=======
              "uuid": "4f12e628-1f5f-4983-9122-0e63b5d56c76",
              "parentUUID": "cade9432-d6c5-4762-982d-a2e66b4e984b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incr/decr command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['get', 'incr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('1');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "a82973ad-70bb-4cd3-9e52-74dc486871ba",
              "parentUUID": "a106e7d7-bfec-459b-94fc-9b3ac22ec98b",
=======
              "uuid": "3c772842-f857-451b-9504-3dfc5b8c10d2",
              "parentUUID": "cade9432-d6c5-4762-982d-a2e66b4e984b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incr/decr command test should overflow after 53 bits",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 6,
=======
              "duration": 15,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            response = yield common_test_1.sendCommand(new net.Socket(), ['set', 'incr-key', '9007199254740990']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(new net.Socket(), ['incr', 'incr-key']);\n            chai_1.expect(response).to.equal(Number.MAX_SAFE_INTEGER);\n            response = yield common_test_1.sendCommand(new net.Socket(), ['incr', 'incr-key']);\n            chai_1.expect(response).to.equal('ReplyError: ERR increment or decrement would overflow');\n        }\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "cb3f2c00-4788-432e-9230-dc3f9098259e",
              "parentUUID": "a106e7d7-bfec-459b-94fc-9b3ac22ec98b",
=======
              "uuid": "73258495-786b-4e77-9ec3-3a076bb09bfa",
              "parentUUID": "cade9432-d6c5-4762-982d-a2e66b4e984b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report -1 when decr called against unknown key",
              "fullTitle": "incr/decr command test should report -1 when decr called against unknown key",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 1,
=======
              "duration": 3,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['decr', 'decr-key']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(-1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "fb54f7d8-278b-4afd-8372-8b3d04c3359b",
              "parentUUID": "a106e7d7-bfec-459b-94fc-9b3ac22ec98b",
=======
              "uuid": "1dd4b972-65c9-410f-ae07-cc25ce6f2ca6",
              "parentUUID": "cade9432-d6c5-4762-982d-a2e66b4e984b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incr/decr command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['get', 'decr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('-1');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "a859ba96-df47-49bf-b4d5-80d89a3b1539",
              "parentUUID": "a106e7d7-bfec-459b-94fc-9b3ac22ec98b",
=======
              "uuid": "897975ea-63bb-4a5d-a567-c2b68e50b8eb",
              "parentUUID": "cade9432-d6c5-4762-982d-a2e66b4e984b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incr/decr command test should overflow after 53 bits",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 13,
=======
              "duration": 8,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            let response = yield common_test_1.sendCommand(new net.Socket(), ['set', 'decr-key', '-9007199254740990']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(new net.Socket(), ['decr', 'decr-key']);\n            chai_1.expect(response).to.equal(Number.MIN_SAFE_INTEGER);\n            response = yield common_test_1.sendCommand(new net.Socket(), ['decr', 'decr-key']);\n            chai_1.expect(response).to.equal('ReplyError: ERR increment or decrement would overflow');\n        }\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "51397ff5-b054-4f87-ba69-488315a3d1b7",
              "parentUUID": "a106e7d7-bfec-459b-94fc-9b3ac22ec98b",
=======
              "uuid": "d3f8c71e-040b-46ec-84cf-3e1a8f7f00be",
              "parentUUID": "cade9432-d6c5-4762-982d-a2e66b4e984b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect TTL",
              "fullTitle": "incr/decr command test should respect TTL",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 3,
=======
              "duration": 1,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['get', 'ttlkey']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "1cc428ce-e522-4aba-9af4-2601374a7182",
              "parentUUID": "a106e7d7-bfec-459b-94fc-9b3ac22ec98b",
=======
              "uuid": "516a72f9-5b5a-43dd-ab3d-8a59ad140118",
              "parentUUID": "cade9432-d6c5-4762-982d-a2e66b4e984b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to increment a HASH value",
              "fullTitle": "incr/decr command test should fail to increment a HASH value",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `test-incr-${new Date().getTime()}`;\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['incr', uniqueKey]);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "ce4566e4-814f-43d6-942e-a0c62b3b6c01",
              "parentUUID": "a106e7d7-bfec-459b-94fc-9b3ac22ec98b",
=======
              "uuid": "27517f81-80c7-464e-a43f-a4c38cffc6d9",
              "parentUUID": "cade9432-d6c5-4762-982d-a2e66b4e984b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "97c57712-6312-413c-965a-bc723bff30c7",
            "a82973ad-70bb-4cd3-9e52-74dc486871ba",
            "cb3f2c00-4788-432e-9230-dc3f9098259e",
            "fb54f7d8-278b-4afd-8372-8b3d04c3359b",
            "a859ba96-df47-49bf-b4d5-80d89a3b1539",
            "51397ff5-b054-4f87-ba69-488315a3d1b7",
            "1cc428ce-e522-4aba-9af4-2601374a7182",
            "ce4566e4-814f-43d6-942e-a0c62b3b6c01"
=======
            "4f12e628-1f5f-4983-9122-0e63b5d56c76",
            "3c772842-f857-451b-9504-3dfc5b8c10d2",
            "73258495-786b-4e77-9ec3-3a076bb09bfa",
            "1dd4b972-65c9-410f-ae07-cc25ce6f2ca6",
            "897975ea-63bb-4a5d-a567-c2b68e50b8eb",
            "d3f8c71e-040b-46ec-84cf-3e1a8f7f00be",
            "516a72f9-5b5a-43dd-ab3d-8a59ad140118",
            "27517f81-80c7-464e-a43f-a4c38cffc6d9"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 40,
=======
          "duration": 36,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "646aad65-f0dc-4092-bb94-735ccbb1e3ab",
=======
          "uuid": "8d616d0b-27fa-4401-a25a-c24707ae6855",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "incrby/decrby command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/incrby-command.test.ts",
          "file": "/test/resp/command/string/incrby-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "incrby/decrby command test \"before all\" hook",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a millisecond TTL to validate incrby respects TTL\n    common_test_1.sendCommand(client, ['set', 'ttlkey', '100', 'PX', '3'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "bce37204-112b-4cab-ab78-04eee131a5f1",
              "parentUUID": "646aad65-f0dc-4092-bb94-735ccbb1e3ab",
=======
              "uuid": "b3ad33a2-12d6-4c9f-823a-a518c60559ac",
              "parentUUID": "8d616d0b-27fa-4401-a25a-c24707ae6855",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "incrby/decrby command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "13ce469a-d9d0-4c60-917f-ffc35946198d",
              "parentUUID": "646aad65-f0dc-4092-bb94-735ccbb1e3ab",
=======
              "uuid": "b9ba1ca1-c755-40c1-ac59-8da518ed0b32",
              "parentUUID": "8d616d0b-27fa-4401-a25a-c24707ae6855",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "incrby/decrby command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "33a6ff98-2d8e-4935-932b-17867596293d",
              "parentUUID": "646aad65-f0dc-4092-bb94-735ccbb1e3ab",
=======
              "uuid": "3bc01f1d-abbc-48de-9c0c-8d73121467b4",
              "parentUUID": "8d616d0b-27fa-4401-a25a-c24707ae6855",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "incrby/decrby command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "9306c542-61da-4616-b6f0-f98c1ca81d1a",
              "parentUUID": "646aad65-f0dc-4092-bb94-735ccbb1e3ab",
=======
              "uuid": "0573c411-7dae-4dfe-91a4-fc4d9a4a4632",
              "parentUUID": "8d616d0b-27fa-4401-a25a-c24707ae6855",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report the INCREMENT when incrby called against non-existing key",
              "fullTitle": "incrby/decrby command test should report the INCREMENT when incrby called against non-existing key",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 4,
=======
              "duration": 3,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['incrby', 'incr-key', '10']);\n        chai_1.expect(response).to.be.a('number');\n        // This is how redis behaves\n        chai_1.expect(response).to.equal(10);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "96191246-4f6f-4eec-8b1e-22933813689b",
              "parentUUID": "646aad65-f0dc-4092-bb94-735ccbb1e3ab",
=======
              "uuid": "a658f246-5b58-4783-a0bb-f63456792c4a",
              "parentUUID": "8d616d0b-27fa-4401-a25a-c24707ae6855",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incrby/decrby command test should have created the key from the previous test",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 2,
=======
              "duration": 12,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['get', 'incr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('10');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "282a3866-37d2-477d-97d3-466f17f214c5",
              "parentUUID": "646aad65-f0dc-4092-bb94-735ccbb1e3ab",
=======
              "uuid": "9d045ed5-1ff6-4ce8-8a2e-79b61b750c68",
              "parentUUID": "8d616d0b-27fa-4401-a25a-c24707ae6855",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incrby/decrby command test should overflow after 53 bits",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 90,
=======
              "duration": 9,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            response = yield common_test_1.sendCommand(client, ['set', 'incr-key', '9007199254740981']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['incrby', 'incr-key', '10']);\n            chai_1.expect(response).to.equal(Number.MAX_SAFE_INTEGER);\n            response = yield common_test_1.sendCommand(client, ['incrby', 'incr-key', '110']);\n            chai_1.expect(response).to.equal('ReplyError: ERR increment or decrement would overflow');\n        }\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "d67aa3ab-d00b-4b57-b5c4-288360dd0243",
              "parentUUID": "646aad65-f0dc-4092-bb94-735ccbb1e3ab",
=======
              "uuid": "858e26e7-73ac-4929-8c90-a18feb2a668d",
              "parentUUID": "8d616d0b-27fa-4401-a25a-c24707ae6855",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report the NEGATIVE increment when decrby called against unknown key",
              "fullTitle": "incrby/decrby command test should report the NEGATIVE increment when decrby called against unknown key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['decrby', 'decr-key', '12']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(-12);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "d0c949c6-4f0b-4245-855c-4bd3a591cbe7",
              "parentUUID": "646aad65-f0dc-4092-bb94-735ccbb1e3ab",
=======
              "uuid": "c59ff341-fc8e-4e0c-842d-8a0459def03b",
              "parentUUID": "8d616d0b-27fa-4401-a25a-c24707ae6855",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support negative increment and positive decrement",
              "fullTitle": "incrby/decrby command test should support negative increment and positive decrement",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 3,
=======
              "duration": 12,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['incrby', 'negincr', '-12']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(-12);\n        response = yield common_test_1.sendCommand(client, ['decrby', 'negincr', '-24']);\n        chai_1.expect(response).to.equal(12);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "8b6199e0-4e4a-46d7-8d07-4ead610e9702",
              "parentUUID": "646aad65-f0dc-4092-bb94-735ccbb1e3ab",
=======
              "uuid": "f0f4296e-7c27-482d-8153-98b3ba522e59",
              "parentUUID": "8d616d0b-27fa-4401-a25a-c24707ae6855",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incrby/decrby command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['get', 'decr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('-12');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "d7eb83c7-44ae-47e5-9bd7-453161cae5af",
              "parentUUID": "646aad65-f0dc-4092-bb94-735ccbb1e3ab",
=======
              "uuid": "cb76de81-c330-4e79-a571-0e4cf838dea1",
              "parentUUID": "8d616d0b-27fa-4401-a25a-c24707ae6855",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incrby/decrby command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            response = yield common_test_1.sendCommand(client, ['set', 'decr-key', '-9007199254740981']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['decrby', 'decr-key', '10']);\n            chai_1.expect(response).to.equal(Number.MIN_SAFE_INTEGER);\n            // This does not seem to be exact\n            // response = await sendCommand(client, ['decrby', 'decr-key', String(Number.MAX_SAFE_INTEGER)]);\n            // expect(response).to.equal('ReplyError: Error: increment or decrement would overflow');\n        }\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "50a64b2a-5366-45db-b29f-c64d50d85f98",
              "parentUUID": "646aad65-f0dc-4092-bb94-735ccbb1e3ab",
=======
              "uuid": "71061f2a-4e95-4e9d-bcda-32ef53637a40",
              "parentUUID": "8d616d0b-27fa-4401-a25a-c24707ae6855",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect TTL",
              "fullTitle": "incrby/decrby command test should respect TTL",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 2,
=======
              "duration": 1,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['get', 'ttlkey']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "c5865c18-9077-4b40-a2a9-0c5d015279e6",
              "parentUUID": "646aad65-f0dc-4092-bb94-735ccbb1e3ab",
=======
              "uuid": "6252d53d-27a7-4c85-a3c9-bab2c097ef04",
              "parentUUID": "8d616d0b-27fa-4401-a25a-c24707ae6855",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to increment a HASH value",
              "fullTitle": "incrby/decrby command test should fail to increment a HASH value",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 2,
=======
              "duration": 13,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `test-incr-${new Date().getTime()}`;\n        let response = yield common_test_1.sendCommand(client, ['hset', uniqueKey, 'one', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['incrby', uniqueKey, '12']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "26c549af-cbf0-499b-b95e-ca90f12dd1d8",
              "parentUUID": "646aad65-f0dc-4092-bb94-735ccbb1e3ab",
=======
              "uuid": "4cac0d10-f8cc-46b8-9186-b338859e48ba",
              "parentUUID": "8d616d0b-27fa-4401-a25a-c24707ae6855",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "96191246-4f6f-4eec-8b1e-22933813689b",
            "282a3866-37d2-477d-97d3-466f17f214c5",
            "d67aa3ab-d00b-4b57-b5c4-288360dd0243",
            "d0c949c6-4f0b-4245-855c-4bd3a591cbe7",
            "8b6199e0-4e4a-46d7-8d07-4ead610e9702",
            "d7eb83c7-44ae-47e5-9bd7-453161cae5af",
            "50a64b2a-5366-45db-b29f-c64d50d85f98",
            "c5865c18-9077-4b40-a2a9-0c5d015279e6",
            "26c549af-cbf0-499b-b95e-ca90f12dd1d8"
=======
            "a658f246-5b58-4783-a0bb-f63456792c4a",
            "9d045ed5-1ff6-4ce8-8a2e-79b61b750c68",
            "858e26e7-73ac-4929-8c90-a18feb2a668d",
            "c59ff341-fc8e-4e0c-842d-8a0459def03b",
            "f0f4296e-7c27-482d-8153-98b3ba522e59",
            "cb76de81-c330-4e79-a571-0e4cf838dea1",
            "71061f2a-4e95-4e9d-bcda-32ef53637a40",
            "6252d53d-27a7-4c85-a3c9-bab2c097ef04",
            "4cac0d10-f8cc-46b8-9186-b338859e48ba"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 110,
=======
          "duration": 58,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "40bf435b-0848-4b96-99de-1ffdad245285",
=======
          "uuid": "3115a23e-eb14-4e77-97ba-c9101160f7b7",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "mget-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/mget-command.test.ts",
          "file": "/test/resp/command/string/mget-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "mget-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 28,
=======
              "duration": 4,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "69008749-8860-49ed-aa2b-69ec4b9ff8c1",
              "parentUUID": "40bf435b-0848-4b96-99de-1ffdad245285",
=======
              "uuid": "322c7c48-d41c-45a8-98f0-45feada26887",
              "parentUUID": "3115a23e-eb14-4e77-97ba-c9101160f7b7",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "mget-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "07e1fddd-6b83-40a9-b345-ab2c6cb774f8",
              "parentUUID": "40bf435b-0848-4b96-99de-1ffdad245285",
=======
              "uuid": "6f98fb5e-ae2c-4b2b-8343-e388e4cbad62",
              "parentUUID": "3115a23e-eb14-4e77-97ba-c9101160f7b7",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "mget-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "330023c9-cec7-4c45-92d7-e1ef6f44426d",
              "parentUUID": "40bf435b-0848-4b96-99de-1ffdad245285",
=======
              "uuid": "5310051d-1c87-437a-ae4a-f455c4b748fa",
              "parentUUID": "3115a23e-eb14-4e77-97ba-c9101160f7b7",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "mget-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "59339b4c-d41d-47a3-a4ee-bdd90e08c16c",
              "parentUUID": "40bf435b-0848-4b96-99de-1ffdad245285",
=======
              "uuid": "2e0b4c51-3858-47e1-94dd-338a7344ea9d",
              "parentUUID": "3115a23e-eb14-4e77-97ba-c9101160f7b7",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when the key does not exist",
              "fullTitle": "mget-command test should return NIL when the key does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mget', 'zset', 'member']);\n        chai_1.expect(response).to.eql([null, null]);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "42be5d41-3686-482e-a34c-44a96c53bfa3",
              "parentUUID": "40bf435b-0848-4b96-99de-1ffdad245285",
=======
              "uuid": "7c4027a6-fbcd-4940-aa93-be3b2f197331",
              "parentUUID": "3115a23e-eb14-4e77-97ba-c9101160f7b7",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return multiple values for string keys as requested",
              "fullTitle": "mget-command test should return multiple values for string keys as requested",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 2,
=======
              "duration": 24,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mset', 'key1', '1', 'key2', '2', 'key3', '3']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['mget', 'key2', 'key1', 'noneya', 'key3']);\n        chai_1.expect(response).to.eql(['2', '1', null, '3']);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "144e4639-baab-4237-b5de-5073f6cb765b",
              "parentUUID": "40bf435b-0848-4b96-99de-1ffdad245285",
=======
              "uuid": "e9a5ed7a-cacd-4d22-a18b-a3a6052bb02d",
              "parentUUID": "3115a23e-eb14-4e77-97ba-c9101160f7b7",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NIL for ZSET, LIST, and HASH types as well",
              "fullTitle": "mget-command test should return NIL for ZSET, LIST, and HASH types as well",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 25,
=======
              "duration": 11,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'member']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'list', 'value']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['hset', 'hash', 'field', 'value']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['mget', 'key2', 'key1', 'list', 'key3', 'hash', 'zset']);\n        chai_1.expect(response).to.eql(['2', '1', null, '3', null, null]);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "1e70e891-b7e5-4d2a-932f-6ea7bd362a91",
              "parentUUID": "40bf435b-0848-4b96-99de-1ffdad245285",
=======
              "uuid": "08b57b9f-876b-4549-be97-95e6e045ff49",
              "parentUUID": "3115a23e-eb14-4e77-97ba-c9101160f7b7",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "42be5d41-3686-482e-a34c-44a96c53bfa3",
            "144e4639-baab-4237-b5de-5073f6cb765b",
            "1e70e891-b7e5-4d2a-932f-6ea7bd362a91"
=======
            "7c4027a6-fbcd-4940-aa93-be3b2f197331",
            "e9a5ed7a-cacd-4d22-a18b-a3a6052bb02d",
            "08b57b9f-876b-4549-be97-95e6e045ff49"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 30,
=======
          "duration": 37,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "44f61b04-5d32-4afa-90fc-761a0d02b5a6",
=======
          "uuid": "0ce5befd-dd3d-41a2-8c3f-ea8cbd71ed97",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "mset-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/mset-command.test.ts",
          "file": "/test/resp/command/string/mset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "mset-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 21,
=======
              "duration": 23,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "616adc7f-d14f-4897-a148-46414db021de",
              "parentUUID": "44f61b04-5d32-4afa-90fc-761a0d02b5a6",
=======
              "uuid": "d04e2fd6-68ea-4b75-a258-b67fd096ae7c",
              "parentUUID": "0ce5befd-dd3d-41a2-8c3f-ea8cbd71ed97",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "mset-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "78788f6c-48d6-4864-a3e4-c5e95771aa36",
              "parentUUID": "44f61b04-5d32-4afa-90fc-761a0d02b5a6",
=======
              "uuid": "54123360-4069-47a5-9e26-6051c444f940",
              "parentUUID": "0ce5befd-dd3d-41a2-8c3f-ea8cbd71ed97",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "mset-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "bd87de0f-c0fd-4d1d-92af-423becd6cb35",
              "parentUUID": "44f61b04-5d32-4afa-90fc-761a0d02b5a6",
=======
              "uuid": "e667de8f-c494-4471-a085-ecc8da2d11dc",
              "parentUUID": "0ce5befd-dd3d-41a2-8c3f-ea8cbd71ed97",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "mset-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "fb83b876-4e73-41c6-a814-0ef03f74b576",
              "parentUUID": "44f61b04-5d32-4afa-90fc-761a0d02b5a6",
=======
              "uuid": "6911ed7b-6e38-400d-90b4-e8aede0dc198",
              "parentUUID": "0ce5befd-dd3d-41a2-8c3f-ea8cbd71ed97",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create multiple keys at once",
              "fullTitle": "mset-command test should create multiple keys at once",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 3,
=======
              "duration": 5,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mset', 'key1', 'Hello', 'key2', 'world']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'key1']);\n        chai_1.expect(response).to.equal('Hello');\n        response = yield common_test_1.sendCommand(client, ['get', 'key2']);\n        chai_1.expect(response).to.equal('world');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "1e7c385a-3cf6-4ac0-aa83-9a4451e433c9",
              "parentUUID": "44f61b04-5d32-4afa-90fc-761a0d02b5a6",
=======
              "uuid": "8dae399e-6889-4804-b8b4-3f5f457b11cc",
              "parentUUID": "0ce5befd-dd3d-41a2-8c3f-ea8cbd71ed97",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only accept an even number of parameters",
              "fullTitle": "mset-command test should only accept an even number of parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['msEt', 'wrong', 'number', 'of']);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for MSET/i);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "dc7c1d44-598d-4800-884e-7e747ffd8aad",
              "parentUUID": "44f61b04-5d32-4afa-90fc-761a0d02b5a6",
=======
              "uuid": "4123d41e-530a-4268-8957-2ac690b5bb0b",
              "parentUUID": "0ce5befd-dd3d-41a2-8c3f-ea8cbd71ed97",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "1e7c385a-3cf6-4ac0-aa83-9a4451e433c9",
            "dc7c1d44-598d-4800-884e-7e747ffd8aad"
=======
            "8dae399e-6889-4804-b8b4-3f5f457b11cc",
            "4123d41e-530a-4268-8957-2ac690b5bb0b"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 4,
=======
          "duration": 6,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "8da3e568-a2da-4334-9ccc-2d9bc5a0ab21",
=======
          "uuid": "b41e6a35-92eb-433c-8ad3-d6c4431b0153",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "set-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/set-command.test.ts",
          "file": "/test/resp/command/string/set-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "set-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 33,
=======
              "duration": 22,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "2a9fc3f8-615a-4a96-8154-b380587fbd28",
              "parentUUID": "8da3e568-a2da-4334-9ccc-2d9bc5a0ab21",
=======
              "uuid": "ecc82027-fea1-42e6-8e21-90fe818263c7",
              "parentUUID": "b41e6a35-92eb-433c-8ad3-d6c4431b0153",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "set-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "77c10b4a-ed43-4f77-9cea-06e628beb36d",
              "parentUUID": "8da3e568-a2da-4334-9ccc-2d9bc5a0ab21",
=======
              "uuid": "f7cdac63-5066-442c-afa8-4fc167a87f9e",
              "parentUUID": "b41e6a35-92eb-433c-8ad3-d6c4431b0153",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "set-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "dcc1e70c-167b-46e1-8e6c-3400d591fe34",
              "parentUUID": "8da3e568-a2da-4334-9ccc-2d9bc5a0ab21",
=======
              "uuid": "c97390d5-0f46-487b-bdcf-a7f047368742",
              "parentUUID": "b41e6a35-92eb-433c-8ad3-d6c4431b0153",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "set-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "ee2f49a6-af71-4e73-abfc-1ea148a84768",
              "parentUUID": "8da3e568-a2da-4334-9ccc-2d9bc5a0ab21",
=======
              "uuid": "a25abda2-3e96-4a25-9e35-428645880099",
              "parentUUID": "b41e6a35-92eb-433c-8ad3-d6c4431b0153",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should allow us to set a several second ttl",
              "fullTitle": "set-command test should allow us to set a several second ttl",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 2,
=======
              "duration": 1,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // During local testing there are 8 milliseconds from put to get\n        response = yield common_test_1.sendCommand(client, ['set', 'TTLtest', 'key', 'EX', '1']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "3aaac553-fa11-4ccc-a53b-01ea043bb275",
              "parentUUID": "8da3e568-a2da-4334-9ccc-2d9bc5a0ab21",
=======
              "uuid": "5f4037f1-f366-43ed-bf1e-a1c5de06e7a7",
              "parentUUID": "b41e6a35-92eb-433c-8ad3-d6c4431b0153",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke NX after XX",
              "fullTitle": "set-command test should NOT allow SET to invoke NX after XX",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 20,
=======
              "duration": 1,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'XX', 'NX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "6b56b010-6f16-4857-a6b8-2a30a71dd7cc",
              "parentUUID": "8da3e568-a2da-4334-9ccc-2d9bc5a0ab21",
=======
              "uuid": "562b0a9b-ade1-417a-ac57-e466b34f62d0",
              "parentUUID": "b41e6a35-92eb-433c-8ad3-d6c4431b0153",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke XX after NX",
              "fullTitle": "set-command test should NOT allow SET to invoke XX after NX",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 3,
=======
              "duration": 1,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'NX', 'XX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "649e873c-889a-43ba-b74d-af7f4b3c6371",
              "parentUUID": "8da3e568-a2da-4334-9ccc-2d9bc5a0ab21",
=======
              "uuid": "e8abed4c-96f5-467a-931e-909005f9ce3f",
              "parentUUID": "b41e6a35-92eb-433c-8ad3-d6c4431b0153",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return nil when SET invoked with XX on a key that doesn't exist",
              "fullTitle": "set-command test should return nil when SET invoked with XX on a key that doesn't exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 2,
=======
              "duration": 1,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `TEST${new Date().getTime()}`;\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'key', 'XX']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "25675b14-c279-493e-8e0d-3b782d6a1706",
              "parentUUID": "8da3e568-a2da-4334-9ccc-2d9bc5a0ab21",
=======
              "uuid": "eb3d6381-7b71-4222-85b6-05c67cd6380a",
              "parentUUID": "b41e6a35-92eb-433c-8ad3-d6c4431b0153",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return OK when SET invoked with XX on a key that DOES exist",
              "fullTitle": "set-command test should return OK when SET invoked with XX on a key that DOES exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 24,
=======
              "duration": 20,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `TEST${new Date().getTime()}`;\n        // set the key with NX first to validate that functionality\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'key', 'NX']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'new value', 'XX']);\n        chai_1.expect(response).to.equal('OK');\n        // Now validate that the key is what we said last\n        response = yield common_test_1.sendCommand(client, ['get', uniqueKey]);\n        chai_1.expect(response).to.equal('new value');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "4e06bc7a-abdc-474d-9975-396b19297de7",
              "parentUUID": "8da3e568-a2da-4334-9ccc-2d9bc5a0ab21",
=======
              "uuid": "2d60a56f-b78a-4302-9033-f1fc51e9412b",
              "parentUUID": "b41e6a35-92eb-433c-8ad3-d6c4431b0153",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke EX and PX simultaneously",
              "fullTitle": "set-command test should NOT allow SET to invoke EX and PX simultaneously",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Note: Our behavior is different from redis.  This error is 'wrong number of args'\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'EX', '100', 'PX', '100']);\n        chai_1.expect(response).to.match(/^ReplyError: ERR syntax error/);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "6b7f0bc7-accd-427b-b7c6-a2122b438c9e",
              "parentUUID": "8da3e568-a2da-4334-9ccc-2d9bc5a0ab21",
=======
              "uuid": "55e34c35-b04f-413b-b6cc-acca498da405",
              "parentUUID": "b41e6a35-92eb-433c-8ad3-d6c4431b0153",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow us to set a millisecond ttl",
              "fullTitle": "set-command test should allow us to set a millisecond ttl",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // During local teseting there are 8 milliseconds from put to get\n        response = yield common_test_1.sendCommand(client, ['set', 'MILLItest', 'key', 'PX', '1']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "9aa99d1e-1f0a-47c6-8e9f-afdbfb6b997c",
              "parentUUID": "8da3e568-a2da-4334-9ccc-2d9bc5a0ab21",
=======
              "uuid": "71fef741-ceb4-4e2a-883f-fdc964b7c924",
              "parentUUID": "b41e6a35-92eb-433c-8ad3-d6c4431b0153",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prove that the one second TTL has expired",
              "fullTitle": "set-command test should prove that the one second TTL has expired",
              "timedOut": false,
              "duration": 1003,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "setTimeout(() => {\n    common_test_1.sendCommand(client, ['get', 'TTLtest'])\n        .then((responseGet) => {\n        chai_1.expect(responseGet).to.equal(null);\n        done();\n    });\n}, 1000);",
              "err": {},
<<<<<<< HEAD
              "uuid": "c2a7bb2b-c9da-42dc-8b28-e750ac1a2cf2",
              "parentUUID": "8da3e568-a2da-4334-9ccc-2d9bc5a0ab21",
=======
              "uuid": "211025b7-2c4a-4aa0-8f78-086f0893bf00",
              "parentUUID": "b41e6a35-92eb-433c-8ad3-d6c4431b0153",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not accept unknown parameters",
              "fullTitle": "set-command test should not accept unknown parameters",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'Q']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "65c7d527-67a8-4c36-9cf6-90c9b0fdeaae",
              "parentUUID": "8da3e568-a2da-4334-9ccc-2d9bc5a0ab21",
=======
              "uuid": "c4ecd307-b3e8-46b9-96db-4ac75228de0b",
              "parentUUID": "b41e6a35-92eb-433c-8ad3-d6c4431b0153",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke PX after EX",
              "fullTitle": "set-command test should NOT allow SET to invoke PX after EX",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 3,
=======
              "duration": 1,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'EX', '100', 'PX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "fc76deac-ab3d-4517-941d-468523db01ee",
              "parentUUID": "8da3e568-a2da-4334-9ccc-2d9bc5a0ab21",
=======
              "uuid": "e4834530-781c-4162-a4d4-a8e448f8b7e8",
              "parentUUID": "b41e6a35-92eb-433c-8ad3-d6c4431b0153",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke EX after PX",
              "fullTitle": "set-command test should NOT allow SET to invoke EX after PX",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'PX', '100', 'EX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "c1338c4e-0d2a-4519-9b28-e12bf46e2e14",
              "parentUUID": "8da3e568-a2da-4334-9ccc-2d9bc5a0ab21",
=======
              "uuid": "8b5a60b2-1c12-4f8c-a561-b13a54c77f01",
              "parentUUID": "b41e6a35-92eb-433c-8ad3-d6c4431b0153",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow a TTL less than 1ms",
              "fullTitle": "set-command test should not allow a TTL less than 1ms",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 3,
=======
              "duration": 0,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'MILLItest', 'key', 'PX', '0']);\n        chai_1.expect(response).to.equal('ReplyError: ERR invalid expire time in set');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "9703f75c-62cd-4d36-af8f-0d37153c61c4",
              "parentUUID": "8da3e568-a2da-4334-9ccc-2d9bc5a0ab21",
=======
              "uuid": "bd95827a-67d9-455d-afa8-2e3a0956d8a4",
              "parentUUID": "b41e6a35-92eb-433c-8ad3-d6c4431b0153",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prove that the millisecond TTL has expired",
              "fullTitle": "set-command test should prove that the millisecond TTL has expired",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 13,
=======
              "duration": 11,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "setTimeout(() => {\n    common_test_1.sendCommand(client, ['get', 'MILLItest'])\n        .then((responseGet) => {\n        chai_1.expect(responseGet).to.equal(null);\n        done();\n    });\n}, 10);",
              "err": {},
<<<<<<< HEAD
              "uuid": "cc92d8d8-9c60-488f-ad1e-0ce084f40aa8",
              "parentUUID": "8da3e568-a2da-4334-9ccc-2d9bc5a0ab21",
=======
              "uuid": "bd64539a-4182-4743-9245-ca472daeec74",
              "parentUUID": "b41e6a35-92eb-433c-8ad3-d6c4431b0153",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "3aaac553-fa11-4ccc-a53b-01ea043bb275",
            "6b56b010-6f16-4857-a6b8-2a30a71dd7cc",
            "649e873c-889a-43ba-b74d-af7f4b3c6371",
            "25675b14-c279-493e-8e0d-3b782d6a1706",
            "4e06bc7a-abdc-474d-9975-396b19297de7",
            "6b7f0bc7-accd-427b-b7c6-a2122b438c9e",
            "9aa99d1e-1f0a-47c6-8e9f-afdbfb6b997c",
            "c2a7bb2b-c9da-42dc-8b28-e750ac1a2cf2",
            "65c7d527-67a8-4c36-9cf6-90c9b0fdeaae",
            "fc76deac-ab3d-4517-941d-468523db01ee",
            "c1338c4e-0d2a-4519-9b28-e12bf46e2e14",
            "9703f75c-62cd-4d36-af8f-0d37153c61c4",
            "cc92d8d8-9c60-488f-ad1e-0ce084f40aa8"
=======
            "5f4037f1-f366-43ed-bf1e-a1c5de06e7a7",
            "562b0a9b-ade1-417a-ac57-e466b34f62d0",
            "e8abed4c-96f5-467a-931e-909005f9ce3f",
            "eb3d6381-7b71-4222-85b6-05c67cd6380a",
            "2d60a56f-b78a-4302-9033-f1fc51e9412b",
            "55e34c35-b04f-413b-b6cc-acca498da405",
            "71fef741-ceb4-4e2a-883f-fdc964b7c924",
            "211025b7-2c4a-4aa0-8f78-086f0893bf00",
            "c4ecd307-b3e8-46b9-96db-4ac75228de0b",
            "e4834530-781c-4162-a4d4-a8e448f8b7e8",
            "8b5a60b2-1c12-4f8c-a561-b13a54c77f01",
            "bd95827a-67d9-455d-afa8-2e3a0956d8a4",
            "bd64539a-4182-4743-9245-ca472daeec74"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 1083,
=======
          "duration": 1045,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "718a0901-a361-465f-b374-95499ef22234",
=======
          "uuid": "72f008e4-6c6a-4257-a1b0-91bbcff540d4",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "setnx-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/setnx-command.test.ts",
          "file": "/test/resp/command/string/setnx-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "setnx-command test \"before all\" hook",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 14,
=======
              "duration": 6,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
<<<<<<< HEAD
              "uuid": "9ae26244-506c-4784-af8d-50802077ee57",
              "parentUUID": "718a0901-a361-465f-b374-95499ef22234",
=======
              "uuid": "a26c5025-5f1a-407f-b0a7-84aaea5e2194",
              "parentUUID": "72f008e4-6c6a-4257-a1b0-91bbcff540d4",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "setnx-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "ca7cdd90-3e20-4904-be73-191e70a66d2d",
              "parentUUID": "718a0901-a361-465f-b374-95499ef22234",
=======
              "uuid": "698ff983-ff5d-4767-966a-07ab0b942c5b",
              "parentUUID": "72f008e4-6c6a-4257-a1b0-91bbcff540d4",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "setnx-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "8b6217e4-a6a2-4013-ad0f-f7d8d4bdad47",
              "parentUUID": "718a0901-a361-465f-b374-95499ef22234",
=======
              "uuid": "24354205-8c7a-4cad-ab9c-857da484f2db",
              "parentUUID": "72f008e4-6c6a-4257-a1b0-91bbcff540d4",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "setnx-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "0a51e336-5076-4f49-89dc-59a2435f842d",
              "parentUUID": "718a0901-a361-465f-b374-95499ef22234",
=======
              "uuid": "6c0f0c68-a08a-4284-806e-fd2a55573129",
              "parentUUID": "72f008e4-6c6a-4257-a1b0-91bbcff540d4",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 1 when the key does not exist",
              "fullTitle": "setnx-command test should return 1 when the key does not exist",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 4,
=======
              "duration": 1,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['setnx', 'test', 'key']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "59315b03-46d9-4e94-ab41-8c93481ba7ef",
              "parentUUID": "718a0901-a361-465f-b374-95499ef22234",
=======
              "uuid": "ce51d552-87ce-4710-8488-5b2972da8877",
              "parentUUID": "72f008e4-6c6a-4257-a1b0-91bbcff540d4",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the key already exists",
              "fullTitle": "setnx-command test should return 0 when the key already exists",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['setnx', 'test', 'other']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['get', 'test']);\n        chai_1.expect(response).to.equal('key');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "e080d39d-74d6-4fbc-b03f-5822ba01ae18",
              "parentUUID": "718a0901-a361-465f-b374-95499ef22234",
=======
              "uuid": "73b39281-3fb5-43a9-8992-b017673b26b8",
              "parentUUID": "72f008e4-6c6a-4257-a1b0-91bbcff540d4",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "59315b03-46d9-4e94-ab41-8c93481ba7ef",
            "e080d39d-74d6-4fbc-b03f-5822ba01ae18"
=======
            "ce51d552-87ce-4710-8488-5b2972da8877",
            "73b39281-3fb5-43a9-8992-b017673b26b8"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
<<<<<<< HEAD
          "duration": 8,
=======
          "duration": 4,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "0a42afef-72bb-42fe-ac66-2fb657f2a49a",
=======
          "uuid": "921c2130-79cb-4c61-b34c-5c87828ba18d",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "data-type test",
          "fullFile": "/home/lane/git/redis/test/resp/data/data-type.test.ts",
          "file": "/test/resp/data/data-type.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "data-type test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
<<<<<<< HEAD
              "uuid": "1f6f9db4-fb27-462d-a87a-4d37173f1334",
              "parentUUID": "0a42afef-72bb-42fe-ac66-2fb657f2a49a",
=======
              "uuid": "a7349eb4-8c48-4f85-b3ca-9a3dbd10833c",
              "parentUUID": "921c2130-79cb-4c61-b34c-5c87828ba18d",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "data-type test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "a54c731d-b2d0-43a4-a983-e4cc57c078bc",
              "parentUUID": "0a42afef-72bb-42fe-ac66-2fb657f2a49a",
=======
              "uuid": "9759e315-7e7a-4fba-8972-6e5429d7660d",
              "parentUUID": "921c2130-79cb-4c61-b34c-5c87828ba18d",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "data-type test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "ebe98300-c741-451b-91b8-3d55a3ba84ed",
              "parentUUID": "0a42afef-72bb-42fe-ac66-2fb657f2a49a",
=======
              "uuid": "e8d5099c-0f4b-4f4a-921b-ea5670611bf5",
              "parentUUID": "921c2130-79cb-4c61-b34c-5c87828ba18d",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should enumerate data-types",
              "fullTitle": "data-type test should enumerate data-types",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        chai_1.expect(data_type_1.DataType.NONE).to.equal('none');\n        chai_1.expect(data_type_1.DataType.STRING).to.equal('string');\n        chai_1.expect(data_type_1.DataType.LIST).to.equal('list');\n        chai_1.expect(data_type_1.DataType.SET).to.equal('set');\n        chai_1.expect(data_type_1.DataType.ZSET).to.equal('zset');\n        chai_1.expect(data_type_1.DataType.HASH).to.equal('hash');\n        chai_1.expect(Object.keys(data_type_1.DataType).length).to.equal(6);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "d9ecabde-c90e-4926-a34f-a68383a36eb3",
              "parentUUID": "0a42afef-72bb-42fe-ac66-2fb657f2a49a",
=======
              "uuid": "3a4c14a7-e023-458d-b1b1-e9a5b859d19d",
              "parentUUID": "921c2130-79cb-4c61-b34c-5c87828ba18d",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
<<<<<<< HEAD
            "d9ecabde-c90e-4926-a34f-a68383a36eb3"
=======
            "3a4c14a7-e023-458d-b1b1-e9a5b859d19d"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
<<<<<<< HEAD
          "uuid": "f1ccfde5-b049-442f-8d3e-b32d9fc1473e",
=======
          "uuid": "baf0e9ea-a2ed-4381-9885-23cf407f6c85",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "title": "sorted-set test",
          "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
          "file": "/test/resp/data/sorted-set.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "sorted-set test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();\nss = new sorted_set_1.SortedSet();\nz = new Z();",
              "err": {},
<<<<<<< HEAD
              "uuid": "b14e2c16-01ae-4fc9-b2d6-9b1031561347",
              "parentUUID": "f1ccfde5-b049-442f-8d3e-b32d9fc1473e",
=======
              "uuid": "c978d9bb-37d9-42bd-aa6b-65e091aefdc8",
              "parentUUID": "baf0e9ea-a2ed-4381-9885-23cf407f6c85",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sorted-set test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "6a70fe61-1a9d-4a51-8838-b4624b6f0153",
              "parentUUID": "f1ccfde5-b049-442f-8d3e-b32d9fc1473e",
=======
              "uuid": "46eb4f55-50be-4878-836b-c393ee64cd85",
              "parentUUID": "baf0e9ea-a2ed-4381-9885-23cf407f6c85",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sorted-set test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
<<<<<<< HEAD
              "uuid": "02c0d84a-c9c1-4683-be30-32536e4900f8",
              "parentUUID": "f1ccfde5-b049-442f-8d3e-b32d9fc1473e",
=======
              "uuid": "85edd3a4-26c8-488d-86a3-006346a80024",
              "parentUUID": "baf0e9ea-a2ed-4381-9885-23cf407f6c85",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should instantiate",
              "fullTitle": "sorted-set test should instantiate",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        chai_1.expect(z.constructor.name).to.equal('Z');\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(ss.constructor.name).to.equal('SortedSet');\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "04ba59a1-4ff1-476d-9720-7abc715237d7",
              "parentUUID": "f1ccfde5-b049-442f-8d3e-b32d9fc1473e",
=======
              "uuid": "57838ad9-f790-41f6-8c69-73f5eef68b04",
              "parentUUID": "baf0e9ea-a2ed-4381-9885-23cf407f6c85",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add, get, and delete an entry",
              "fullTitle": "sorted-set test should add, get, and delete an entry",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 3,
=======
              "duration": 2,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', 1);\n        chai_1.expect(added).to.equal(null);\n        added = ss.add('test', 1);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(z.keys().length).to.equal(1);\n        chai_1.expect(ss.keys().length).to.equal(1);\n        let item = z.get('test');\n        chai_1.expect(item.constructor.name).to.equal('Number');\n        item = ss.get('test');\n        chai_1.expect(item.constructor.name).to.equal('Number');\n        z.del('test');\n        chai_1.expect(z.keys().length).to.equal(0);\n        ss.del('test');\n        chai_1.expect(ss.keys().length).to.equal(0);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "57308db8-94e2-4625-9414-f3bbbe2167c3",
              "parentUUID": "f1ccfde5-b049-442f-8d3e-b32d9fc1473e",
=======
              "uuid": "c8aeee87-7127-4f62-ae7b-c3fd3d2d020e",
              "parentUUID": "baf0e9ea-a2ed-4381-9885-23cf407f6c85",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw when attempting to add __proto__ key",
              "fullTitle": "sorted-set test should throw when attempting to add __proto__ key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(() => {\n            z.add('__proto__', 0);\n        }).to.throw();\n        // expect(() => {\n        //   ss.add('__proto__', 0)\n        // }).to.throw();\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "5da2289d-5e3d-4c48-b010-5ed5d8308d9c",
              "parentUUID": "f1ccfde5-b049-442f-8d3e-b32d9fc1473e",
=======
              "uuid": "29e6442f-a45b-4031-82b8-861ac368f3bd",
              "parentUUID": "baf0e9ea-a2ed-4381-9885-23cf407f6c85",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add an undefined or null score",
              "fullTitle": "sorted-set test should not add an undefined or null score",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', null);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(z.keys().length).to.equal(0);\n        added = z.add('test', undefined);\n        chai_1.expect(z.keys().length).to.equal(0);\n        // Typescript prevents adding null\n        // added = ss.add('test', null);\n        // expect(added).to.equal(null);\n        // expect(ss.keys().length).to.equal(0);\n        // added = ss.add('test', undefined);\n        // expect(z.keys().length).to.equal(0);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "0d30758c-8ff1-4569-8db9-eb9afe8d9e40",
              "parentUUID": "f1ccfde5-b049-442f-8d3e-b32d9fc1473e",
=======
              "uuid": "fa0909c5-6bd3-4bc1-b316-98f0f8be8d7d",
              "parentUUID": "baf0e9ea-a2ed-4381-9885-23cf407f6c85",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not duplicate key/value pairs",
              "fullTitle": "sorted-set test should not duplicate key/value pairs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', 123);\n        chai_1.expect(added).to.equal(null); // This is weird\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = z.add('test', 123);\n        chai_1.expect(added).to.equal(123); // and weirder\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = ss.add('test', 123);\n        chai_1.expect(added).to.equal(null); // This is weird\n        chai_1.expect(ss.keys().length).to.equal(1);\n        added = ss.add('test', 123);\n        chai_1.expect(added).to.equal(123); // and weirder\n        chai_1.expect(ss.keys().length).to.equal(1);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "f5b26f13-ada4-44f8-a3cb-73d44337edb1",
              "parentUUID": "f1ccfde5-b049-442f-8d3e-b32d9fc1473e",
=======
              "uuid": "990d9c23-293c-4fe0-8cbb-f03bca96eb4b",
              "parentUUID": "baf0e9ea-a2ed-4381-9885-23cf407f6c85",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the old rank when replacing a key",
              "fullTitle": "sorted-set test should return the old rank when replacing a key",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 2,
=======
              "duration": 0,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', 123);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = z.add('test', 321);\n        chai_1.expect(added).to.equal(123);\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = z.get('test');\n        chai_1.expect(added).to.equal(321);\n        added = ss.add('test', 123);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(ss.keys().length).to.equal(1);\n        added = ss.add('test', 321);\n        chai_1.expect(added).to.equal(123);\n        chai_1.expect(ss.keys().length).to.equal(1);\n        added = ss.get('test');\n        chai_1.expect(added).to.equal(321);\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "64fac173-27af-4f3b-9e9b-4044979927d3",
              "parentUUID": "f1ccfde5-b049-442f-8d3e-b32d9fc1473e",
=======
              "uuid": "6774857f-cdb3-4153-a185-635a0d883d10",
              "parentUUID": "baf0e9ea-a2ed-4381-9885-23cf407f6c85",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a value when adding at least 32 values (I think - it is difficult to tell)",
              "fullTitle": "sorted-set test should return a value when adding at least 32 values (I think - it is difficult to tell)",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
<<<<<<< HEAD
              "uuid": "324ba926-71c0-4eed-aff8-0537b96e63e3",
              "parentUUID": "f1ccfde5-b049-442f-8d3e-b32d9fc1473e",
=======
              "uuid": "36b1e556-71f4-40fc-81a2-32941bd6446e",
              "parentUUID": "baf0e9ea-a2ed-4381-9885-23cf407f6c85",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "fullTitle": "sorted-set test should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 8,
=======
              "duration": 2,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(z.add('Terminator', 8.0)).to.equal(null); // => null\n        chai_1.expect(z.add('District 9', 8.0)).to.equal(null); // => null\n        chai_1.expect(z.add('Ex Machina', 0.7)).to.equal(null); // => null\n        chai_1.expect(z.add('Ex Machina', 7.7)).to.equal(0.7); // => 0.7\n        // alias\n        chai_1.expect(z.set('The Matrix', 8.7)).to.equal(null); // => null\n        // average O(1)\n        chai_1.expect(z.has('Terminator')).to.equal(true); // => true\n        chai_1.expect(z.has('Blade Runner')).to.equal(false); // => false\n        // average O(1)\n        chai_1.expect(z.score('Ex Machina')).to.equal(7.7); // => 7.7\n        chai_1.expect(z.score('Blade Runner')).to.equal(null); // => null\n        // alias\n        chai_1.expect(z.get('The Matrix')).to.equal(8.7); // => 8.7\n        // average O(log(N))\n        chai_1.expect(z.rem('Ex Machina')).to.equal(7.7); // => 7.7\n        // average O(1)\n        chai_1.expect(z.rem('Ex Machina')).to.equal(null); // => null\n        // alias\n        chai_1.expect(z.del('Ex Machina')).to.equal(null); // => null\n        // average O(log(N)+M) where M is the number of elements between min and max\n        // This is not working as expected\n        chai_1.expect(z.rangeByScore(7, 8)).to.eql(['District 9', 'Terminator']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        chai_1.expect(z.rangeByScore(8)).to.eql(['District 9', 'Terminator', 'The Matrix']); // [8.0-∞)\n        // => ['District 9', 'Terminator', 'The Matrix']\n        chai_1.expect(z.rangeByScore(8, null, { withScores: true })).to.eql([['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]);\n        // => [['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]\n        // average O(log(N)+log(M)) where M as in rangeByScore\n        // Again - not as expected\n        chai_1.expect(z.count(7, 8)).to.equal(2); // => 3\n        // average O(log(N))\n        // Not working as expected\n        chai_1.expect(z.rank('Ex Machina')).to.equal(null); // => 0\n        // Not working as expected\n        chai_1.expect(z.rank('Terminator')).to.equal(1); // => 2\n        chai_1.expect(z.rank('Blade Runner')).to.equal(null); // => null\n        // average O(log(N)+M) where M as in range\n        // Not working as expected\n        chai_1.expect(z.range(0, 2)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Not working as expected\n        chai_1.expect(z.range(0, 2, { withScores: true })).to.eql([['District 9', 8], ['Terminator', 8], ['The Matrix', 8.7]]);\n        // => [['Ex Machina', 7.7],\n        //     ['District 9', 8],\n        //     ['Terminator', 8]]\n        chai_1.expect(z.range(-1)).to.eql(['The Matrix']); // => ['The Matrix']\n        // almost alias\n        // Not working as expected\n        chai_1.expect(z.slice(0, 3)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Set cardinality (number of elements)\n        // average O(1)\n        // Not working as expected\n        chai_1.expect(z.card()).to.equal(3); // => 4\n        // alias\n        // Not working as expected\n        chai_1.expect(z.length).to.equal(3); // => 4\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "5c6d115b-027c-4cbc-8d10-f9257183a383",
              "parentUUID": "f1ccfde5-b049-442f-8d3e-b32d9fc1473e",
=======
              "uuid": "484e3173-38bb-46dc-a6b5-c82f141f2545",
              "parentUUID": "baf0e9ea-a2ed-4381-9885-23cf407f6c85",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            },
            {
              "title": "the rewrite should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "fullTitle": "sorted-set test the rewrite should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "timedOut": false,
<<<<<<< HEAD
              "duration": 7,
=======
              "duration": 1,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(ss.add('Terminator', 8.0)).to.equal(null); // => null\n        chai_1.expect(ss.add('District 9', 8.0)).to.equal(null); // => null\n        chai_1.expect(ss.add('Ex Machina', 0.7)).to.equal(null); // => null\n        chai_1.expect(ss.add('Ex Machina', 7.7)).to.equal(0.7); // => 0.7\n        // alias\n        chai_1.expect(ss.set('The Matrix', 8.7)).to.equal(null); // => null\n        // average O(1)\n        chai_1.expect(ss.has('Terminator')).to.equal(true); // => true\n        chai_1.expect(ss.has('Blade Runner')).to.equal(false); // => false\n        // average O(1)\n        chai_1.expect(ss.score('Ex Machina')).to.equal(7.7); // => 7.7\n        chai_1.expect(ss.score('Blade Runner')).to.equal(null); // => null\n        // alias\n        chai_1.expect(ss.get('The Matrix')).to.equal(8.7); // => 8.7\n        // average O(log(N))\n        chai_1.expect(ss.rem('Ex Machina')).to.equal(7.7); // => 7.7\n        // average O(1)\n        chai_1.expect(ss.rem('Ex Machina')).to.equal(null); // => null\n        // alias\n        chai_1.expect(ss.del('Ex Machina')).to.equal(null); // => null\n        // average O(log(N)+M) where M is the number of elements between min and max\n        // This is not working as expected\n        chai_1.expect(ss.rangeByScore(7, 8)).to.eql(['District 9', 'Terminator']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        chai_1.expect(ss.rangeByScore(8)).to.eql(['District 9', 'Terminator', 'The Matrix']); // [8.0-∞)\n        // => ['District 9', 'Terminator', 'The Matrix']\n        chai_1.expect(ss.rangeByScore(8, null, { withScores: true })).to.eql([['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]);\n        // => [['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]\n        // average O(log(N)+log(M)) where M as in rangeByScore\n        // Again - not as expected\n        chai_1.expect(ss.count(7, 8)).to.equal(2); // => 3\n        // average O(log(N))\n        // Not working as expected\n        chai_1.expect(ss.rank('Ex Machina')).to.equal(null); // => 0\n        // Not working as expected\n        chai_1.expect(ss.rank('Terminator')).to.equal(1); // => 2\n        chai_1.expect(ss.rank('Blade Runner')).to.equal(null); // => null\n        // average O(log(N)+M) where M as in range\n        // Not working as expected\n        chai_1.expect(ss.range(0, 2)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Not working as expected\n        chai_1.expect(ss.range(0, 2, { withScores: true })).to.eql([['District 9', 8], ['Terminator', 8], ['The Matrix', 8.7]]);\n        // => [['Ex Machina', 7.7],\n        //     ['District 9', 8],\n        //     ['Terminator', 8]]\n        chai_1.expect(ss.range(-1)).to.eql(['The Matrix']); // => ['The Matrix']\n        // almost alias\n        // Not working as expected\n        chai_1.expect(ss.slice(0, 3)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Set cardinality (number of elements)\n        // average O(1)\n        // Not working as expected\n        chai_1.expect(ss.card()).to.equal(3); // => 4\n        // alias\n        // Not working as expected\n        chai_1.expect(ss.length).to.equal(3); // => 4\n    })",
              "err": {},
<<<<<<< HEAD
              "uuid": "0b625cc4-f29b-4d5e-898b-6309a8ae50aa",
              "parentUUID": "f1ccfde5-b049-442f-8d3e-b32d9fc1473e",
=======
              "uuid": "72dfe3af-7af5-433a-8c2b-32180e040272",
              "parentUUID": "baf0e9ea-a2ed-4381-9885-23cf407f6c85",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
<<<<<<< HEAD
              "uuid": "2df47e56-3f6a-46ac-9629-04f9d4170f4c",
=======
              "uuid": "baca8be9-3cc7-4181-8316-6003cad695eb",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "title": "skip map",
              "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
              "file": "/test/resp/data/sorted-set.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should support basic operations",
                  "fullTitle": "sorted-set test skip map should support basic operations",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 8,
=======
                  "duration": 1,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var z = new Z();\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);\nchai_1.expect(z.range()).to.eql([]);\nchai_1.expect(z.rangeByScore()).to.eql([]);\nchai_1.expect(() => {\n    z.add('__proto__', 14);\n}).to.throw();\nz.add('5a600e16', 8);\nz.add('5a600e17', 9);\nchai_1.expect(z.add('5a600e18', 10)).to.equal(null);\nchai_1.expect(z.add('5a600e17', 12)).to.equal(9);\nchai_1.expect(z).to.have.length(3);\nchai_1.expect(z.toArray()).to.eql(['5a600e16', '5a600e18', '5a600e17']);\nchai_1.expect(z.toArray()).to.eql(z.range(0, -1));\nchai_1.expect(z.toArray()).to.eql(z.rangeByScore());\nchai_1.expect(z.has('5a600e16')).to.be.ok;\nchai_1.expect(z.has('5a600e17')).to.be.ok;\nchai_1.expect(z.has('5a600e18')).to.be.ok;\nchai_1.expect(z.has('5a600e19')).to.not.be.ok;\nchai_1.expect(z.score('5a600e16')).to.equal(8);\nchai_1.expect(z.score('5a600e17')).to.equal(12);\nchai_1.expect(z.score('5a600e18')).to.equal(10);\nchai_1.expect(z.score('5a600e19')).to.equal(null);\nchai_1.expect(z.rem('5a600e16')).to.equal(8);\nchai_1.expect(z).to.have.length(2);\nchai_1.expect(z.rem('5a600e16')).to.equal(null);\nchai_1.expect(z).to.have.length(2);\nchai_1.expect(z.has('5a600e16')).to.not.be.ok;\nchai_1.expect(z.toArray()).to.eql(['5a600e18', '5a600e17']);\nchai_1.expect(z.toArray({ withScores: true }))\n    .to.eql(z.range(0, -1, { withScores: true }));\nchai_1.expect(z.toArray()).to.eql(z.rangeByScore());\nz.add('5a600e16', 10);\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nchai_1.expect(z).to.have.length(9);\n// no change, so should be O(1)\nz.add('5a600e17', 12);\nchai_1.expect(z.rank('5a600e17')).to.equal(4);\nchai_1.expect(z).to.have.length(9);\nchai_1.expect(z.toArray()).to.eql([\n    '5a600e16',\n    '5a600e11',\n    '5a600e18',\n    '5a600e13',\n    '5a600e17',\n    '5a600e14',\n    '5a600e10',\n    '5a600e12',\n    '5a600e15',\n]);\nchai_1.expect(z.toArray()).to.eql(z.range(0, -1));\nchai_1.expect(z.toArray()).to.eql(z.rangeByScore());\nchai_1.expect(z.rangeByScore(14, 16, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n]);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "06fa6fac-5c97-4dd2-bbfc-30fb01ca27cf",
                  "parentUUID": "2df47e56-3f6a-46ac-9629-04f9d4170f4c",
=======
                  "uuid": "a196e06f-0d3b-4c32-b479-1a350803a2ec",
                  "parentUUID": "baca8be9-3cc7-4181-8316-6003cad695eb",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
<<<<<<< HEAD
                  "uuid": "ac9cea78-9c2d-474e-961a-6ff0a33f5231",
=======
                  "uuid": "d79ef916-76ab-411f-86ac-c9e6fe67f194",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#add",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should implicitly delete",
                      "fullTitle": "sorted-set test skip map #add should implicitly delete",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.add('5a600e14', null)).to.equal(14);\nchai_1.expect(z.add('5a600e19', null)).to.equal(null);\nchai_1.expect(z).to.have.length(8);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "d7c300ea-ffc3-4fae-8c5a-f95e497f4140",
                      "parentUUID": "ac9cea78-9c2d-474e-961a-6ff0a33f5231",
=======
                      "uuid": "c75a2506-7703-40ce-bf98-f9c82b4802e6",
                      "parentUUID": "d79ef916-76ab-411f-86ac-c9e6fe67f194",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "d7c300ea-ffc3-4fae-8c5a-f95e497f4140"
=======
                    "c75a2506-7703-40ce-bf98-f9c82b4802e6"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "1c828cfb-142a-4d1f-84b8-ff62adad5728",
=======
                  "uuid": "1b4dd367-2be8-407b-8bee-652797a18fbe",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#empty",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should remove all elements",
                      "fullTitle": "sorted-set test skip map #empty should remove all elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nz.empty();\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "809d823e-637e-4fc1-9387-b27cec1530ba",
                      "parentUUID": "1c828cfb-142a-4d1f-84b8-ff62adad5728",
=======
                      "uuid": "91d440bc-d6f7-4ae7-9adc-5c4a0cc9a644",
                      "parentUUID": "1b4dd367-2be8-407b-8bee-652797a18fbe",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "809d823e-637e-4fc1-9387-b27cec1530ba"
=======
                    "91d440bc-d6f7-4ae7-9adc-5c4a0cc9a644"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "8e286d9c-8b97-480a-85d0-1355be812bad",
=======
                  "uuid": "f8df32d2-d69c-40ec-a0f4-4a464955655c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#incrBy(increment, key)",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should increase rank",
                      "fullTitle": "sorted-set test skip map #incrBy(increment, key) should increase rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.add('second', 2);\nz.add('third', 3);\nz.add('fourth', 4);\nchai_1.expect(z.incrBy(2, 'first')).to.equal(3);\nchai_1.expect(z.rank('first')).to.equal(1);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "a4c13382-e894-4ea5-8eb0-06754e1066eb",
                      "parentUUID": "8e286d9c-8b97-480a-85d0-1355be812bad",
=======
                      "uuid": "eb212f0b-b66f-4def-adfd-c063569a8dfa",
                      "parentUUID": "f8df32d2-d69c-40ec-a0f4-4a464955655c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should create if not found",
                      "fullTitle": "sorted-set test skip map #incrBy(increment, key) should create if not found",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.incrBy(2, 'second');\nchai_1.expect(z.card()).to.equal(2);\nchai_1.expect(z.rank('second')).to.equal(1);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "c369684b-5468-4a12-8350-9a4d91f20a6d",
                      "parentUUID": "8e286d9c-8b97-480a-85d0-1355be812bad",
=======
                      "uuid": "8543aa6a-a999-43a0-9437-0875d361dba9",
                      "parentUUID": "f8df32d2-d69c-40ec-a0f4-4a464955655c",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "a4c13382-e894-4ea5-8eb0-06754e1066eb",
                    "c369684b-5468-4a12-8350-9a4d91f20a6d"
=======
                    "eb212f0b-b66f-4def-adfd-c063569a8dfa",
                    "8543aa6a-a999-43a0-9437-0875d361dba9"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "ee848c11-fef9-411c-98a5-a165744b93f5",
=======
                  "uuid": "63d618f9-db3a-4282-8f39-fadfd9bd7c67",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#keys",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the keys",
                      "fullTitle": "sorted-set test skip map #keys should return the keys",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.keys()).to.eql(['5a600e16', '5a600e11', '5a600e18', '5a600e13',\n    '5a600e17', '5a600e14', '5a600e10', '5a600e12', '5a600e15']);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "06e8f5a7-e325-4b9e-a300-715d6e63e430",
                      "parentUUID": "ee848c11-fef9-411c-98a5-a165744b93f5",
=======
                      "uuid": "47b1a7b7-e1fd-40ee-9ba8-f9efdeab8e24",
                      "parentUUID": "63d618f9-db3a-4282-8f39-fadfd9bd7c67",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "06e8f5a7-e325-4b9e-a300-715d6e63e430"
=======
                    "47b1a7b7-e1fd-40ee-9ba8-f9efdeab8e24"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "54fd224e-f351-4574-aead-42198d02207f",
=======
                  "uuid": "dcb4dd56-3d76-4c14-af83-e6d760dd7519",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#rangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map #rangeByScore should support special ranges",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rangeByScore(14, null, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);\nchai_1.expect(z.rangeByScore(null, 10, { withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n]);\nchai_1.expect(z.rangeByScore(-Infinity, Infinity)).to.eql(z.toArray());\nchai_1.expect(z.rangeByScore(null, null)).to.eql(z.toArray());",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "fffda394-1800-4589-8a0a-903cb7747749",
                      "parentUUID": "54fd224e-f351-4574-aead-42198d02207f",
=======
                      "uuid": "cf329d33-97f3-44c4-a9d1-7c1774d2ff26",
                      "parentUUID": "dcb4dd56-3d76-4c14-af83-e6d760dd7519",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "fffda394-1800-4589-8a0a-903cb7747749"
=======
                    "cf329d33-97f3-44c4-a9d1-7c1774d2ff26"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "242c7d25-6d3a-4211-be0e-5a49c6d8e764",
=======
                  "uuid": "bfca38ed-2bef-4ece-9d60-7ff8f4699247",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#count",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should count elements",
                      "fullTitle": "sorted-set test skip map #count should count elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nchai_1.expect(z.count()).to.equal(0);\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nz.add('5a600e19', 14);\nz.add('5a600f00', 30.0);\nz.add('5a600f01', 30.5);\nz.add('5a600f02', 31.0);\nz.add('5a600f03', 31.5);\nz.add('5a600f04', 32.0);\nz.add('5a600f05', 32.0);\nz.add('5a600f06', 32.0);\nchai_1.expect(z.count()).to.eql(z.rangeByScore().length);\nchai_1.expect(z.count(8)).to.eql(z.rangeByScore(8).length);\nchai_1.expect(z.count(3, 7)).to.eql(z.rangeByScore(3, 7).length);\nchai_1.expect(z.count(5, 14)).to.eql(z.rangeByScore(5, 14).length);\nchai_1.expect(z.count(5, 5)).to.eql(z.rangeByScore(5, 5).length);\nchai_1.expect(z.count(5, 0)).to.eql(z.rangeByScore(5, 0).length);\nchai_1.expect(z.count(30, 32)).to.eql(z.rangeByScore(30, 32).length);\nchai_1.expect(z.count(40)).to.eql(z.rangeByScore(40).length);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "41f287df-258b-4a42-a7aa-920d7f403dcf",
                      "parentUUID": "242c7d25-6d3a-4211-be0e-5a49c6d8e764",
=======
                      "uuid": "63370d25-eee6-47ab-a1dd-9f99433b511d",
                      "parentUUID": "bfca38ed-2bef-4ece-9d60-7ff8f4699247",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "41f287df-258b-4a42-a7aa-920d7f403dcf"
=======
                    "63370d25-eee6-47ab-a1dd-9f99433b511d"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "1278405b-01ca-414d-b19e-cd8adb3ec9a6",
=======
                  "uuid": "cb69c744-6908-4a8e-8037-60b6b0406a9b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#range",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map #range should support special ranges",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.add('second', 2);\nz.add('third', 3);\nz.add('fourth', 4);\nvar array = ['first', 'second', 'third', 'fourth'];\nchai_1.expect(z.range()).to.eql(array);\nchai_1.expect(z.range(2)).to.eql(array.slice(2));\nchai_1.expect(z.range(8)).to.eql(array.slice(8));\nchai_1.expect(z.range(0, 2)).to.eql(array.slice(0, 3));\nchai_1.expect(z.range(-1)).to.eql(['fourth']);\nchai_1.expect(z.range(-4)).to.eql(array);\nchai_1.expect(z.range(-4, -2)).to.eql(array.slice(0, 3));\nchai_1.expect(z.range(-4, z.length + 1000))\n    .to.eql(array.slice(-4, z.length + 1000));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "2544223a-eb4f-4541-bfaf-82762ff8a3b8",
                      "parentUUID": "1278405b-01ca-414d-b19e-cd8adb3ec9a6",
=======
                      "uuid": "ffba29a8-b4c7-4899-acf9-00b36ef6c820",
                      "parentUUID": "cb69c744-6908-4a8e-8037-60b6b0406a9b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should support withScores",
                      "fullTitle": "sorted-set test skip map #range should support withScores",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.add('second', 2);\nchai_1.expect(z.range(0, 0, { withScores: true }))\n    .to.eql([['first', 1]]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "04f63b25-acca-485d-a3fa-b03bc32d5684",
                      "parentUUID": "1278405b-01ca-414d-b19e-cd8adb3ec9a6",
=======
                      "uuid": "994abcf5-f298-4ef6-be1b-8468efe77a4e",
                      "parentUUID": "cb69c744-6908-4a8e-8037-60b6b0406a9b",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "2544223a-eb4f-4541-bfaf-82762ff8a3b8",
                    "04f63b25-acca-485d-a3fa-b03bc32d5684"
=======
                    "ffba29a8-b4c7-4899-acf9-00b36ef6c820",
                    "994abcf5-f298-4ef6-be1b-8468efe77a4e"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "c558beae-eda3-49fd-b84b-55051c169e1f",
=======
                  "uuid": "bf438bac-c32b-4604-8e29-711d141a6116",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#intersect",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should intersect two sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect two sets",
                      "timedOut": false,
<<<<<<< HEAD
                      "duration": 2,
=======
                      "duration": 1,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = new Z(), b = new Z();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nchai_1.expect(Z.intersect(a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e19', '5a600e1c', '5a600e15', '5a600e1b']);\nchai_1.expect(Z.intersect(b, a)).to.eql(['5a600e1b', '5a600e14',\n    '5a600e1c', '5a600e15', '5a600e19', '5a600e10', '5a600e17']);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "8eaba6da-28df-49fe-9882-72e6f0e34bbb",
                      "parentUUID": "c558beae-eda3-49fd-b84b-55051c169e1f",
=======
                      "uuid": "e1dd9701-b88f-4325-bbc3-319b8ffc1cba",
                      "parentUUID": "bf438bac-c32b-4604-8e29-711d141a6116",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect three sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect three sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = new Z(), b = new Z(), c = new Z();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nchai_1.expect(Z.intersect(c, a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e1c']);\nchai_1.expect(Z.intersect(c, a, b)).to.eql(c.intersect(a, b));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "a698ae1b-90f8-4c1a-aff4-fb74a10bd497",
                      "parentUUID": "c558beae-eda3-49fd-b84b-55051c169e1f",
=======
                      "uuid": "0f24182e-c75d-4c2a-8b01-c83f533aa92d",
                      "parentUUID": "bf438bac-c32b-4604-8e29-711d141a6116",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect four sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect four sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = new Z();\nvar b = new Z();\nvar c = new Z();\nvar d = new Z();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nd.add('5a600e1c', 400);\nd.add('5a600e17', 500);\nd.add('5a600e1f', 600);\nd.add('5a600e20', 700);\nchai_1.expect(Z.intersect(d, c, a, b)).to.eql(['5a600e17', '5a600e1c']);\nchai_1.expect(Z.intersect(d, c, a, b)).to.eql(d.intersect(c, a, b));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "696e937b-8b3d-4ca2-9362-fcc01a311364",
                      "parentUUID": "c558beae-eda3-49fd-b84b-55051c169e1f",
=======
                      "uuid": "2b32a897-a025-4dac-b2bc-e81d9bccca70",
                      "parentUUID": "bf438bac-c32b-4604-8e29-711d141a6116",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "8eaba6da-28df-49fe-9882-72e6f0e34bbb",
                    "a698ae1b-90f8-4c1a-aff4-fb74a10bd497",
                    "696e937b-8b3d-4ca2-9362-fcc01a311364"
=======
                    "e1dd9701-b88f-4325-bbc3-319b8ffc1cba",
                    "0f24182e-c75d-4c2a-8b01-c83f533aa92d",
                    "2b32a897-a025-4dac-b2bc-e81d9bccca70"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 4,
=======
                  "duration": 3,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "bbc69041-537d-4a9d-b74a-8ba3d327312b",
=======
                  "uuid": "9087f99b-5c2f-4f49-a937-600e913cc0f9",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#rank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should get the correct rank",
                      "fullTitle": "sorted-set test skip map #rank should get the correct rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rank('5a600e12')).to.equal(7);\nchai_1.expect(z.rank('5a600e13')).to.equal(3);\nchai_1.expect(z.rank('5a600e16')).to.equal(0);\nchai_1.expect(z.rank('5a600e15')).to.equal(8);\nchai_1.expect(z.rank('not in set')).to.equal(null);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "6bd585b5-e9d0-4b96-913a-5362b362618d",
                      "parentUUID": "bbc69041-537d-4a9d-b74a-8ba3d327312b",
=======
                      "uuid": "4199341c-58f0-4224-adbe-a3e6c09dc301",
                      "parentUUID": "9087f99b-5c2f-4f49-a937-600e913cc0f9",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "6bd585b5-e9d0-4b96-913a-5362b362618d"
=======
                    "4199341c-58f0-4224-adbe-a3e6c09dc301"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "42711771-e7f0-4626-8885-96d66db25509",
=======
                  "uuid": "a6c76083-600c-478a-8098-d26d283e1041",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#rem",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should delete special elements",
                      "fullTitle": "sorted-set test skip map #rem should delete special elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rem('5a600e15')).to.equal(19);\nchai_1.expect(z).to.have.length(8);\nchai_1.expect(z.rem('5a600e16')).to.equal(3);\nchai_1.expect(z).to.have.length(7);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "cb9f2e13-bccf-4070-93aa-8d161cbc6d07",
                      "parentUUID": "42711771-e7f0-4626-8885-96d66db25509",
=======
                      "uuid": "02086d42-03ba-4618-ba34-96f2adc7357d",
                      "parentUUID": "a6c76083-600c-478a-8098-d26d283e1041",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should delete many elements",
                      "fullTitle": "sorted-set test skip map #rem should delete many elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rem('5a600e11')).to.equal(6);\nchai_1.expect(z.rem('5a600e13')).to.equal(11);\nchai_1.expect(z.rem('5a600e14')).to.equal(14);\nchai_1.expect(z.rem('5a600e15')).to.equal(19);\nchai_1.expect(z.rem('5a600e16')).to.equal(3);\nchai_1.expect(z.rem('5a600e17')).to.equal(12);\nchai_1.expect(z.length).to.equal(3);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e18', 10],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "74b5812c-ff67-492b-ba0d-cb019eb784ba",
                      "parentUUID": "42711771-e7f0-4626-8885-96d66db25509",
=======
                      "uuid": "32337bb6-c711-4ad8-9835-ef5e472b49e7",
                      "parentUUID": "a6c76083-600c-478a-8098-d26d283e1041",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "cb9f2e13-bccf-4070-93aa-8d161cbc6d07",
                    "74b5812c-ff67-492b-ba0d-cb019eb784ba"
=======
                    "02086d42-03ba-4618-ba34-96f2adc7357d",
                    "32337bb6-c711-4ad8-9835-ef5e472b49e7"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "6d1713c2-7c99-444b-9cf9-4dbc32e88373",
=======
                  "uuid": "b7bf2a9b-fe4c-4119-bc4a-d9ea56280a74",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#remRangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a range of elements",
                      "fullTitle": "sorted-set test skip map #remRangeByScore should strip out a range of elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByScore(4, 14)).to.equal(5);\nchai_1.expect(z).to.have.length(4);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "81beaf3c-6d64-4615-a1f1-d4ed33ce6aaf",
                      "parentUUID": "6d1713c2-7c99-444b-9cf9-4dbc32e88373",
=======
                      "uuid": "3d63de53-eac5-421b-bc45-127c2593ba41",
                      "parentUUID": "b7bf2a9b-fe4c-4119-bc4a-d9ea56280a74",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all the elements",
                      "fullTitle": "sorted-set test skip map #remRangeByScore should strip out all the elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByScore(3, 19)).to.equal(9);\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "e72b81f3-1fa8-4fd4-bd84-c1efcff853f4",
                      "parentUUID": "6d1713c2-7c99-444b-9cf9-4dbc32e88373",
=======
                      "uuid": "a3239469-935a-4fdf-a749-6487f20ceadf",
                      "parentUUID": "b7bf2a9b-fe4c-4119-bc4a-d9ea56280a74",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "81beaf3c-6d64-4615-a1f1-d4ed33ce6aaf",
                    "e72b81f3-1fa8-4fd4-bd84-c1efcff853f4"
=======
                    "3d63de53-eac5-421b-bc45-127c2593ba41",
                    "a3239469-935a-4fdf-a749-6487f20ceadf"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "7f0d95a3-d4f6-439e-86a5-287790e380d8",
=======
                  "uuid": "fe43a118-83d1-40fa-a522-6e43f37baf2e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#remRangeByRank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a slice of elements",
                      "fullTitle": "sorted-set test skip map #remRangeByRank should strip out a slice of elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByRank(1, 6)).to.equal(5);\nchai_1.expect(z).to.have.length(4);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "fde8dc6c-3f5b-49e3-a82f-fd28564760cd",
                      "parentUUID": "7f0d95a3-d4f6-439e-86a5-287790e380d8",
=======
                      "uuid": "6c6dc8e8-40ee-4be4-becf-327623b35364",
                      "parentUUID": "fe43a118-83d1-40fa-a522-6e43f37baf2e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all elements",
                      "fullTitle": "sorted-set test skip map #remRangeByRank should strip out all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByRank(0, 9)).to.equal(9);\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "49076e9b-aeba-4139-879c-10beac78152f",
                      "parentUUID": "7f0d95a3-d4f6-439e-86a5-287790e380d8",
=======
                      "uuid": "f50186f1-894b-45b9-908e-b511d9cb3aa1",
                      "parentUUID": "fe43a118-83d1-40fa-a522-6e43f37baf2e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "fde8dc6c-3f5b-49e3-a82f-fd28564760cd",
                    "49076e9b-aeba-4139-879c-10beac78152f"
=======
                    "6c6dc8e8-40ee-4be4-becf-327623b35364",
                    "f50186f1-894b-45b9-908e-b511d9cb3aa1"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "b2533277-699c-494b-a7fe-0155b4dc0f03",
=======
                  "uuid": "145f0a65-7f60-4507-8e99-14981cf530d9",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#values",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the values",
                      "fullTitle": "sorted-set test skip map #values should return the values",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', -1);\nz.add('third', 5);\nz.add('second', 3);\nchai_1.expect(z.values()).to.eql([-1, 3, 5]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "7548a7fd-b828-4148-87f8-3995683e46b9",
                      "parentUUID": "b2533277-699c-494b-a7fe-0155b4dc0f03",
=======
                      "uuid": "0edfd8fa-5800-4034-b22d-5bb6e1d80f11",
                      "parentUUID": "145f0a65-7f60-4507-8e99-14981cf530d9",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "7548a7fd-b828-4148-87f8-3995683e46b9"
=======
                    "0edfd8fa-5800-4034-b22d-5bb6e1d80f11"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "017e8e46-7010-4495-b5f3-d80d3612ff5e",
=======
                  "uuid": "b0b6f3e2-fff8-426f-94ed-333c42c7ae16",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "unique",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should ensure values are unique",
                      "fullTitle": "sorted-set test skip map unique should ensure values are unique",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z({ unique: true });\nassert.equal(z.keys().length, 0, 'Expected an empty SortedSet');\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(() => {\n    z.add('5a600e19', 11);\n}).to.throw(/unique/);\n// quick exit test\nchai_1.expect(() => {\n    z.add('5a600dff', z._head.next[z._level - 1].next.value);\n}).to.throw(/unique/);\n// this test ensures the key < key check doesn't come into play\nchai_1.expect(() => {\n    z.add('5a600dff', 11);\n}).to.throw(/unique/);\nchai_1.expect(() => {\n    z.add('5a600e18', 10);\n}).to.not.throw();\nchai_1.expect(z).to.have.length(9);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "3496ba6c-4073-46a5-95d7-6152dc5c925c",
                      "parentUUID": "017e8e46-7010-4495-b5f3-d80d3612ff5e",
=======
                      "uuid": "30abc9fb-17c9-4889-b030-adedadd01d91",
                      "parentUUID": "b0b6f3e2-fff8-426f-94ed-333c42c7ae16",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert keys if constraint broken during update",
                      "fullTitle": "sorted-set test skip map unique should revert keys if constraint broken during update",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z({ unique: true });\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(() => {\n    z.add('5a600e13', 14);\n}).to.throw(/unique/);\nchai_1.expect(z).to.have.length(9);\nchai_1.expect(z.score('5a600e13')).to.equal(11);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "3d8db9db-5895-412f-907f-920609d35bdb",
                      "parentUUID": "017e8e46-7010-4495-b5f3-d80d3612ff5e",
=======
                      "uuid": "db30ea51-fb34-453c-9933-20f2e547277d",
                      "parentUUID": "b0b6f3e2-fff8-426f-94ed-333c42c7ae16",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "3496ba6c-4073-46a5-95d7-6152dc5c925c",
                    "3d8db9db-5895-412f-907f-920609d35bdb"
=======
                    "30abc9fb-17c9-4889-b030-adedadd01d91",
                    "db30ea51-fb34-453c-9933-20f2e547277d"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
<<<<<<< HEAD
                "06fa6fac-5c97-4dd2-bbfc-30fb01ca27cf"
=======
                "a196e06f-0d3b-4c32-b479-1a350803a2ec"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
<<<<<<< HEAD
              "duration": 8,
=======
              "duration": 1,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
<<<<<<< HEAD
              "uuid": "fe5660e3-8229-4dae-a71a-356bb04e42ef",
=======
              "uuid": "7aaefc77-5180-4d9b-ad23-2b6759c46ff1",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "title": "skip map rewrite",
              "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
              "file": "/test/resp/data/sorted-set.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should support basic operations",
                  "fullTitle": "sorted-set test skip map rewrite should support basic operations",
                  "timedOut": false,
<<<<<<< HEAD
                  "duration": 3,
=======
                  "duration": 2,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let ss = new sorted_set_1.SortedSet();\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);\nchai_1.expect(ss.range()).to.eql([]);\nchai_1.expect(ss.rangeByScore()).to.eql([]);\n// expect(() => {\n//   ss.add('__proto__', 14);\n// }).to.throw();\nss.add('5a600e16', 8);\nss.add('5a600e17', 9);\nchai_1.expect(ss.add('5a600e18', 10)).to.equal(null);\nchai_1.expect(ss.add('5a600e17', 12)).to.equal(9);\nchai_1.expect(ss).to.have.length(3);\nchai_1.expect(ss.toArray()).to.eql(['5a600e16', '5a600e18', '5a600e17']);\nchai_1.expect(ss.toArray()).to.eql(ss.range(0, -1));\nchai_1.expect(ss.toArray()).to.eql(ss.rangeByScore());\nchai_1.expect(ss.has('5a600e16')).to.be.ok;\nchai_1.expect(ss.has('5a600e17')).to.be.ok;\nchai_1.expect(ss.has('5a600e18')).to.be.ok;\nchai_1.expect(ss.has('5a600e19')).to.not.be.ok;\nchai_1.expect(ss.score('5a600e16')).to.equal(8);\nchai_1.expect(ss.score('5a600e17')).to.equal(12);\nchai_1.expect(ss.score('5a600e18')).to.equal(10);\nchai_1.expect(ss.score('5a600e19')).to.equal(null);\nchai_1.expect(ss.rem('5a600e16')).to.equal(8);\nchai_1.expect(ss).to.have.length(2);\nchai_1.expect(ss.rem('5a600e16')).to.equal(null);\nchai_1.expect(ss).to.have.length(2);\nchai_1.expect(ss.has('5a600e16')).to.not.be.ok;\nchai_1.expect(ss.toArray()).to.eql(['5a600e18', '5a600e17']);\nchai_1.expect(ss.toArray({ withScores: true }))\n    .to.eql(ss.range(0, -1, { withScores: true }));\nchai_1.expect(ss.toArray()).to.eql(ss.rangeByScore());\nss.add('5a600e16', 10);\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nchai_1.expect(ss).to.have.length(9);\n// no change, so should be O(1)\nss.add('5a600e17', 12);\nchai_1.expect(ss.rank('5a600e17')).to.equal(4);\nchai_1.expect(ss).to.have.length(9);\nchai_1.expect(ss.toArray()).to.eql([\n    '5a600e16',\n    '5a600e11',\n    '5a600e18',\n    '5a600e13',\n    '5a600e17',\n    '5a600e14',\n    '5a600e10',\n    '5a600e12',\n    '5a600e15',\n]);\nchai_1.expect(ss.toArray()).to.eql(ss.range(0, -1));\nchai_1.expect(ss.toArray()).to.eql(ss.rangeByScore());\nchai_1.expect(ss.rangeByScore(14, 16, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n]);",
                  "err": {},
<<<<<<< HEAD
                  "uuid": "21768d3c-340f-4a92-b1a7-f5c240748324",
                  "parentUUID": "fe5660e3-8229-4dae-a71a-356bb04e42ef",
=======
                  "uuid": "6cf74786-47d4-4b72-8b5c-5443e3def6c8",
                  "parentUUID": "7aaefc77-5180-4d9b-ad23-2b6759c46ff1",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
<<<<<<< HEAD
                  "uuid": "336845c4-480f-4f70-994b-2a906e7487d9",
=======
                  "uuid": "d1a930b1-4a7d-4d47-9edc-33e4670e9bee",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#add",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should implicitly delete",
                      "fullTitle": "sorted-set test skip map rewrite #add should implicitly delete",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.add('5a600e14', null)).to.equal(14);\nchai_1.expect(ss.add('5a600e19', null)).to.equal(null);\nchai_1.expect(ss).to.have.length(8);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "c3d09050-0c8d-494e-80a6-69270a2c79c6",
                      "parentUUID": "336845c4-480f-4f70-994b-2a906e7487d9",
=======
                      "uuid": "a04df464-69c7-47e9-82c5-d0315378e74a",
                      "parentUUID": "d1a930b1-4a7d-4d47-9edc-33e4670e9bee",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "c3d09050-0c8d-494e-80a6-69270a2c79c6"
=======
                    "a04df464-69c7-47e9-82c5-d0315378e74a"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "ae9a5439-9a77-47e4-8a54-86d97fa96884",
=======
                  "uuid": "76835a11-f4f4-42bd-bfd5-f68036ecdd18",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#empty",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should remove all elements",
                      "fullTitle": "sorted-set test skip map rewrite #empty should remove all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nss.empty();\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "2ad43f14-40fc-42bc-9fa2-6cc34cd7ccd1",
                      "parentUUID": "ae9a5439-9a77-47e4-8a54-86d97fa96884",
=======
                      "uuid": "ab5947e4-742c-46e4-a013-40d4b2d4696e",
                      "parentUUID": "76835a11-f4f4-42bd-bfd5-f68036ecdd18",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "2ad43f14-40fc-42bc-9fa2-6cc34cd7ccd1"
=======
                    "ab5947e4-742c-46e4-a013-40d4b2d4696e"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "9dda16f1-f35e-440b-962a-7431b86868e5",
=======
                  "uuid": "d4d03fd3-d507-4517-ba04-daf15c087e81",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#incrBy(increment, key)",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should increase rank",
                      "fullTitle": "sorted-set test skip map rewrite #incrBy(increment, key) should increase rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.add('second', 2);\nss.add('third', 3);\nss.add('fourth', 4);\nchai_1.expect(ss.incrBy(2, 'first')).to.equal(3);\nchai_1.expect(ss.rank('first')).to.equal(1);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "d417662d-626c-47d1-ba5b-cba96c39afad",
                      "parentUUID": "9dda16f1-f35e-440b-962a-7431b86868e5",
=======
                      "uuid": "a7e500f3-7d83-4dc1-b23f-a314e7846d6f",
                      "parentUUID": "d4d03fd3-d507-4517-ba04-daf15c087e81",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should create if not found",
                      "fullTitle": "sorted-set test skip map rewrite #incrBy(increment, key) should create if not found",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.incrBy(2, 'second');\nchai_1.expect(ss.card()).to.equal(2);\nchai_1.expect(ss.rank('second')).to.equal(1);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "106e4da3-8cbf-4e05-a2fb-3875356f13ae",
                      "parentUUID": "9dda16f1-f35e-440b-962a-7431b86868e5",
=======
                      "uuid": "743d0a38-f5ac-4b0a-ada7-f9f9a8c858f8",
                      "parentUUID": "d4d03fd3-d507-4517-ba04-daf15c087e81",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "d417662d-626c-47d1-ba5b-cba96c39afad",
                    "106e4da3-8cbf-4e05-a2fb-3875356f13ae"
=======
                    "a7e500f3-7d83-4dc1-b23f-a314e7846d6f",
                    "743d0a38-f5ac-4b0a-ada7-f9f9a8c858f8"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "c951843c-4a81-416b-bb1e-6ea7e3dc8448",
=======
                  "uuid": "1eec2ea5-7754-41a2-97eb-906f1a379326",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#keys",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the keys",
                      "fullTitle": "sorted-set test skip map rewrite #keys should return the keys",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.keys()).to.eql(['5a600e16', '5a600e11', '5a600e18', '5a600e13',\n    '5a600e17', '5a600e14', '5a600e10', '5a600e12', '5a600e15']);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "ab54e30a-b6ae-4528-a7a2-0eafd78e7ba3",
                      "parentUUID": "c951843c-4a81-416b-bb1e-6ea7e3dc8448",
=======
                      "uuid": "940becd3-c64d-4ad5-9052-c126e4888f37",
                      "parentUUID": "1eec2ea5-7754-41a2-97eb-906f1a379326",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "ab54e30a-b6ae-4528-a7a2-0eafd78e7ba3"
=======
                    "940becd3-c64d-4ad5-9052-c126e4888f37"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "a37f531d-6593-4cce-9ad2-f74b1a57da94",
=======
                  "uuid": "0b93861f-7d00-4c87-a431-4c58f155713e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#rangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map rewrite #rangeByScore should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rangeByScore(14, null, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);\nchai_1.expect(ss.rangeByScore(null, 10, { withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n]);\nchai_1.expect(ss.rangeByScore(-Infinity, Infinity)).to.eql(ss.toArray());\nchai_1.expect(ss.rangeByScore(null, null)).to.eql(ss.toArray());",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "4a50d38e-5bb8-4b0f-8ca3-40809f1a5bfc",
                      "parentUUID": "a37f531d-6593-4cce-9ad2-f74b1a57da94",
=======
                      "uuid": "7b656952-231a-4418-b037-d87b83ff13eb",
                      "parentUUID": "0b93861f-7d00-4c87-a431-4c58f155713e",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "4a50d38e-5bb8-4b0f-8ca3-40809f1a5bfc"
=======
                    "7b656952-231a-4418-b037-d87b83ff13eb"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "bb1e7f11-ede8-4087-ad31-ee62206cc1cc",
=======
                  "uuid": "9ec14391-d3b2-4b20-ad05-d44555fc7c5f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#count",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should count elements",
                      "fullTitle": "sorted-set test skip map rewrite #count should count elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nchai_1.expect(ss.count()).to.equal(0);\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nss.add('5a600e19', 14);\nss.add('5a600f00', 30.0);\nss.add('5a600f01', 30.5);\nss.add('5a600f02', 31.0);\nss.add('5a600f03', 31.5);\nss.add('5a600f04', 32.0);\nss.add('5a600f05', 32.0);\nss.add('5a600f06', 32.0);\nchai_1.expect(ss.count()).to.eql(ss.rangeByScore().length);\nchai_1.expect(ss.count(8)).to.eql(ss.rangeByScore(8).length);\nchai_1.expect(ss.count(3, 7)).to.eql(ss.rangeByScore(3, 7).length);\nchai_1.expect(ss.count(5, 14)).to.eql(ss.rangeByScore(5, 14).length);\nchai_1.expect(ss.count(5, 5)).to.eql(ss.rangeByScore(5, 5).length);\nchai_1.expect(ss.count(5, 0)).to.eql(ss.rangeByScore(5, 0).length);\nchai_1.expect(ss.count(30, 32)).to.eql(ss.rangeByScore(30, 32).length);\nchai_1.expect(ss.count(40)).to.eql(ss.rangeByScore(40).length);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "6c904d93-cb89-434c-9d26-c15544e6f182",
                      "parentUUID": "bb1e7f11-ede8-4087-ad31-ee62206cc1cc",
=======
                      "uuid": "3d239249-d705-44c4-a25f-469c5203054b",
                      "parentUUID": "9ec14391-d3b2-4b20-ad05-d44555fc7c5f",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "6c904d93-cb89-434c-9d26-c15544e6f182"
=======
                    "3d239249-d705-44c4-a25f-469c5203054b"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "d8d5f980-b279-4751-a5c5-46d8c3a4d3ff",
=======
                  "uuid": "44b692cd-a44f-4f9b-b1f2-a33c7e5efd17",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#range",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map rewrite #range should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.add('second', 2);\nss.add('third', 3);\nss.add('fourth', 4);\nlet array = ['first', 'second', 'third', 'fourth'];\nchai_1.expect(ss.range()).to.eql(array);\nchai_1.expect(ss.range(2)).to.eql(array.slice(2));\nchai_1.expect(ss.range(8)).to.eql(array.slice(8));\nchai_1.expect(ss.range(0, 2)).to.eql(array.slice(0, 3));\nchai_1.expect(ss.range(-1)).to.eql(['fourth']);\nchai_1.expect(ss.range(-4)).to.eql(array);\nchai_1.expect(ss.range(-4, -2)).to.eql(array.slice(0, 3));\nchai_1.expect(ss.range(-4, ss.length + 1000))\n    .to.eql(array.slice(-4, ss.length + 1000));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "b271def9-da28-4bc8-89f4-ad41fc56eff3",
                      "parentUUID": "d8d5f980-b279-4751-a5c5-46d8c3a4d3ff",
=======
                      "uuid": "a25bb615-3ef2-4aa9-8c6a-f5e6d0915e88",
                      "parentUUID": "44b692cd-a44f-4f9b-b1f2-a33c7e5efd17",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should support withScores",
                      "fullTitle": "sorted-set test skip map rewrite #range should support withScores",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.add('second', 2);\nchai_1.expect(ss.range(0, 0, { withScores: true }))\n    .to.eql([['first', 1]]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "b2b24ca4-3850-4dda-bd56-9b8bf608e299",
                      "parentUUID": "d8d5f980-b279-4751-a5c5-46d8c3a4d3ff",
=======
                      "uuid": "52722df5-fa58-43b2-9985-a11bc5060906",
                      "parentUUID": "44b692cd-a44f-4f9b-b1f2-a33c7e5efd17",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "b271def9-da28-4bc8-89f4-ad41fc56eff3",
                    "b2b24ca4-3850-4dda-bd56-9b8bf608e299"
=======
                    "a25bb615-3ef2-4aa9-8c6a-f5e6d0915e88",
                    "52722df5-fa58-43b2-9985-a11bc5060906"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "f38c7017-80e1-4b49-b92b-232ce0c7fac8",
=======
                  "uuid": "e792c355-16de-40ca-aafa-2a4f805390c6",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#intersect",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should intersect two sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect two sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nchai_1.expect(sorted_set_1.SortedSet.intersect(a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e19', '5a600e1c', '5a600e15', '5a600e1b']);\nchai_1.expect(sorted_set_1.SortedSet.intersect(b, a)).to.eql(['5a600e1b', '5a600e14',\n    '5a600e1c', '5a600e15', '5a600e19', '5a600e10', '5a600e17']);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "c4bf76a5-4c63-4b65-b733-56271f050c82",
                      "parentUUID": "f38c7017-80e1-4b49-b92b-232ce0c7fac8",
=======
                      "uuid": "1b359205-ac45-4860-8156-72a1f4fe1624",
                      "parentUUID": "e792c355-16de-40ca-aafa-2a4f805390c6",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect three sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect three sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet(), c = new sorted_set_1.SortedSet();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nchai_1.expect(sorted_set_1.SortedSet.intersect(c, a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e1c']);\n// expect(SortedSet.intersect(c, a, b)).to.eql(c.intersect(a, b));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "d823b8bd-9c64-4d94-821b-816c8f14c6fc",
                      "parentUUID": "f38c7017-80e1-4b49-b92b-232ce0c7fac8",
=======
                      "uuid": "edb85d0f-9223-417b-841e-d87de0e8ae1f",
                      "parentUUID": "e792c355-16de-40ca-aafa-2a4f805390c6",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect four sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect four sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let a = new sorted_set_1.SortedSet();\nlet b = new sorted_set_1.SortedSet();\nlet c = new sorted_set_1.SortedSet();\nlet d = new sorted_set_1.SortedSet();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nd.add('5a600e1c', 400);\nd.add('5a600e17', 500);\nd.add('5a600e1f', 600);\nd.add('5a600e20', 700);\nchai_1.expect(sorted_set_1.SortedSet.intersect(d, c, a, b)).to.eql(['5a600e17', '5a600e1c']);\n// expect(SortedSet.intersect(d, c, a, b)).to.eql(d.intersect(c, a, b));",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "7829a051-5dfd-41c2-9070-a71de2a1ec91",
                      "parentUUID": "f38c7017-80e1-4b49-b92b-232ce0c7fac8",
=======
                      "uuid": "a5eca4e3-0f6d-4ac0-a80d-3f5951733080",
                      "parentUUID": "e792c355-16de-40ca-aafa-2a4f805390c6",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "c4bf76a5-4c63-4b65-b733-56271f050c82",
                    "d823b8bd-9c64-4d94-821b-816c8f14c6fc",
                    "7829a051-5dfd-41c2-9070-a71de2a1ec91"
=======
                    "1b359205-ac45-4860-8156-72a1f4fe1624",
                    "edb85d0f-9223-417b-841e-d87de0e8ae1f",
                    "a5eca4e3-0f6d-4ac0-a80d-3f5951733080"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
<<<<<<< HEAD
                  "duration": 3,
=======
                  "duration": 1,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "9eefff51-0aab-4154-bf8e-4d86c548bd24",
=======
                  "uuid": "333f6bef-0d2e-4a04-aeab-442907c26835",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#rank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should get the correct rank",
                      "fullTitle": "sorted-set test skip map rewrite #rank should get the correct rank",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rank('5a600e12')).to.equal(7);\nchai_1.expect(ss.rank('5a600e13')).to.equal(3);\nchai_1.expect(ss.rank('5a600e16')).to.equal(0);\nchai_1.expect(ss.rank('5a600e15')).to.equal(8);\nchai_1.expect(ss.rank('not in set')).to.equal(null);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "c68bf617-a78c-46d2-bc13-bbe88aace3d5",
                      "parentUUID": "9eefff51-0aab-4154-bf8e-4d86c548bd24",
=======
                      "uuid": "818abdab-6ea4-4f3a-a145-2a90216fa999",
                      "parentUUID": "333f6bef-0d2e-4a04-aeab-442907c26835",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "c68bf617-a78c-46d2-bc13-bbe88aace3d5"
=======
                    "818abdab-6ea4-4f3a-a145-2a90216fa999"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "8c2a1e38-4049-48b3-ac8f-f5a9f76cd4db",
=======
                  "uuid": "9f167016-e770-4be7-b14f-665d4ecdf318",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#rem",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should delete special elements",
                      "fullTitle": "sorted-set test skip map rewrite #rem should delete special elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rem('5a600e15')).to.equal(19);\nchai_1.expect(ss).to.have.length(8);\nchai_1.expect(ss.rem('5a600e16')).to.equal(3);\nchai_1.expect(ss).to.have.length(7);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "224e4a84-be6f-4d6f-8b91-a5f0a4abafeb",
                      "parentUUID": "8c2a1e38-4049-48b3-ac8f-f5a9f76cd4db",
=======
                      "uuid": "b0a7e044-fd37-4f98-a9b1-8d8a0014fed4",
                      "parentUUID": "9f167016-e770-4be7-b14f-665d4ecdf318",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should delete many elements",
                      "fullTitle": "sorted-set test skip map rewrite #rem should delete many elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rem('5a600e11')).to.equal(6);\nchai_1.expect(ss.rem('5a600e13')).to.equal(11);\nchai_1.expect(ss.rem('5a600e14')).to.equal(14);\nchai_1.expect(ss.rem('5a600e15')).to.equal(19);\nchai_1.expect(ss.rem('5a600e16')).to.equal(3);\nchai_1.expect(ss.rem('5a600e17')).to.equal(12);\nchai_1.expect(ss.length).to.equal(3);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e18', 10],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "b3d48245-2ac7-402e-b9b3-92a030634f65",
                      "parentUUID": "8c2a1e38-4049-48b3-ac8f-f5a9f76cd4db",
=======
                      "uuid": "b4b42c2b-8436-46f8-9228-68c3f77a255a",
                      "parentUUID": "9f167016-e770-4be7-b14f-665d4ecdf318",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "224e4a84-be6f-4d6f-8b91-a5f0a4abafeb",
                    "b3d48245-2ac7-402e-b9b3-92a030634f65"
=======
                    "b0a7e044-fd37-4f98-a9b1-8d8a0014fed4",
                    "b4b42c2b-8436-46f8-9228-68c3f77a255a"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "13e3e649-a301-4419-8853-47c7b66587ef",
=======
                  "uuid": "3908bdab-bce1-4912-908a-ff271f69bb21",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#remRangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a range of elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByScore should strip out a range of elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByScore(4, 14)).to.equal(5);\nchai_1.expect(ss).to.have.length(4);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "6c27ffc8-1751-4bbf-a259-10cc9f7b1966",
                      "parentUUID": "13e3e649-a301-4419-8853-47c7b66587ef",
=======
                      "uuid": "dbbc6312-df10-4f25-81cf-6950108fd42b",
                      "parentUUID": "3908bdab-bce1-4912-908a-ff271f69bb21",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all the elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByScore should strip out all the elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByScore(3, 19)).to.equal(9);\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "3950ca68-7250-4be4-855f-b537aa1a2628",
                      "parentUUID": "13e3e649-a301-4419-8853-47c7b66587ef",
=======
                      "uuid": "4042dca5-c44e-45bc-b975-b89408ad2127",
                      "parentUUID": "3908bdab-bce1-4912-908a-ff271f69bb21",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "6c27ffc8-1751-4bbf-a259-10cc9f7b1966",
                    "3950ca68-7250-4be4-855f-b537aa1a2628"
=======
                    "dbbc6312-df10-4f25-81cf-6950108fd42b",
                    "4042dca5-c44e-45bc-b975-b89408ad2127"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "4bd387d0-4a52-4ffa-97e3-828816c9e664",
=======
                  "uuid": "42754d06-1f44-4424-ae26-2001b67e5208",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#remRangeByRank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a slice of elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByRank should strip out a slice of elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByRank(1, 6)).to.equal(5);\nchai_1.expect(ss).to.have.length(4);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "06cef09d-e324-4387-a529-5eafb6596f9d",
                      "parentUUID": "4bd387d0-4a52-4ffa-97e3-828816c9e664",
=======
                      "uuid": "b1ec4081-3f8a-4774-813e-479a4b943110",
                      "parentUUID": "42754d06-1f44-4424-ae26-2001b67e5208",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByRank should strip out all elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByRank(0, 9)).to.equal(9);\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "960e7f37-ae2e-40a8-aa47-a451356ec379",
                      "parentUUID": "4bd387d0-4a52-4ffa-97e3-828816c9e664",
=======
                      "uuid": "54111d0c-3ce8-487e-ac4b-c6b2a9c11a91",
                      "parentUUID": "42754d06-1f44-4424-ae26-2001b67e5208",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "06cef09d-e324-4387-a529-5eafb6596f9d",
                    "960e7f37-ae2e-40a8-aa47-a451356ec379"
=======
                    "b1ec4081-3f8a-4774-813e-479a4b943110",
                    "54111d0c-3ce8-487e-ac4b-c6b2a9c11a91"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "adf1dc55-c82d-4d68-8884-204af582130f",
=======
                  "uuid": "47434abc-725f-42fc-adda-29eed6728f77",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "#values",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the values",
                      "fullTitle": "sorted-set test skip map rewrite #values should return the values",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', -1);\nss.add('third', 5);\nss.add('second', 3);\nchai_1.expect(ss.values()).to.eql([-1, 3, 5]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "e8340b9c-b385-44f5-ad32-8bf783f978a6",
                      "parentUUID": "adf1dc55-c82d-4d68-8884-204af582130f",
=======
                      "uuid": "45b84048-6987-4109-9c88-5dec5e3af6c0",
                      "parentUUID": "47434abc-725f-42fc-adda-29eed6728f77",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "e8340b9c-b385-44f5-ad32-8bf783f978a6"
=======
                    "45b84048-6987-4109-9c88-5dec5e3af6c0"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
<<<<<<< HEAD
                  "uuid": "a337557c-160d-4302-b4d7-1f6716ffac7e",
=======
                  "uuid": "c163e9fe-d237-4e5b-a9fb-124ce8ec657a",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  "title": "unique rewrite",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should ensure values are unique",
                      "fullTitle": "sorted-set test skip map rewrite unique rewrite should ensure values are unique",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const options = { unique: true };\nlet ss = new sorted_set_1.SortedSet(options);\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(() => {\n    ss.add('5a600e19', 11);\n}).to.throw(/unique/);\n// quick exit test\nchai_1.expect(() => {\n    ss.add('5a600dff', ss._head.next[ss._level - 1].next.value);\n}).to.throw(/unique/);\n// this test ensures the key < key check doesn't come into play\nchai_1.expect(() => {\n    ss.add('5a600dff', 11);\n}).to.throw(/unique/);\nchai_1.expect(() => {\n    ss.add('5a600e18', 10);\n}).to.not.throw();\nchai_1.expect(ss).to.have.length(9);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "e5f6d868-50dc-48aa-894e-3d1726cad398",
                      "parentUUID": "a337557c-160d-4302-b4d7-1f6716ffac7e",
=======
                      "uuid": "bb6450fa-37f3-4045-9b7d-05ccb5b10c09",
                      "parentUUID": "c163e9fe-d237-4e5b-a9fb-124ce8ec657a",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert keys if constraint broken during update",
                      "fullTitle": "sorted-set test skip map rewrite unique rewrite should revert keys if constraint broken during update",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet({ unique: true });\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(() => {\n    ss.add('5a600e13', 14);\n}).to.throw(/unique/);\nchai_1.expect(ss).to.have.length(9);\nchai_1.expect(ss.score('5a600e13')).to.equal(11);",
                      "err": {},
<<<<<<< HEAD
                      "uuid": "9de0b26f-fc67-479a-b065-ffc30227d5a1",
                      "parentUUID": "a337557c-160d-4302-b4d7-1f6716ffac7e",
=======
                      "uuid": "7190ea3e-02bb-4fbc-acd2-e0ba11978bda",
                      "parentUUID": "c163e9fe-d237-4e5b-a9fb-124ce8ec657a",
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
<<<<<<< HEAD
                    "e5f6d868-50dc-48aa-894e-3d1726cad398",
                    "9de0b26f-fc67-479a-b065-ffc30227d5a1"
=======
                    "bb6450fa-37f3-4045-9b7d-05ccb5b10c09",
                    "7190ea3e-02bb-4fbc-acd2-e0ba11978bda"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
<<<<<<< HEAD
                "21768d3c-340f-4a92-b1a7-f5c240748324"
=======
                "6cf74786-47d4-4b72-8b5c-5443e3def6c8"
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
<<<<<<< HEAD
              "duration": 3,
=======
              "duration": 2,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
<<<<<<< HEAD
            "04ba59a1-4ff1-476d-9720-7abc715237d7",
            "57308db8-94e2-4625-9414-f3bbbe2167c3",
            "5da2289d-5e3d-4c48-b010-5ed5d8308d9c",
            "0d30758c-8ff1-4569-8db9-eb9afe8d9e40",
            "f5b26f13-ada4-44f8-a3cb-73d44337edb1",
            "64fac173-27af-4f3b-9e9b-4044979927d3",
            "5c6d115b-027c-4cbc-8d10-f9257183a383",
            "0b625cc4-f29b-4d5e-898b-6309a8ae50aa"
          ],
          "failures": [],
          "pending": [
            "324ba926-71c0-4eed-aff8-0537b96e63e3"
          ],
          "skipped": [],
          "duration": 24,
=======
            "57838ad9-f790-41f6-8c69-73f5eef68b04",
            "c8aeee87-7127-4f62-ae7b-c3fd3d2d020e",
            "29e6442f-a45b-4031-82b8-861ac368f3bd",
            "fa0909c5-6bd3-4bc1-b316-98f0f8be8d7d",
            "990d9c23-293c-4fe0-8cbb-f03bca96eb4b",
            "6774857f-cdb3-4153-a185-635a0d883d10",
            "484e3173-38bb-46dc-a6b5-c82f141f2545",
            "72dfe3af-7af5-433a-8c2b-32180e040272"
          ],
          "failures": [],
          "pending": [
            "36b1e556-71f4-40fc-81a2-32941bd6446e"
          ],
          "skipped": [],
          "duration": 7,
>>>>>>> 79105fae0be34e6b4af288a7ff21babc57330069
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "reportDir": "docs/mochawesome"
      },
      "version": "4.1.0"
    }
  }
}