{
  "stats": {
    "suites": 38,
    "tests": 107,
    "passes": 104,
    "pending": 3,
    "failures": 0,
    "start": "2024-06-18T20:34:07.613Z",
    "end": "2024-06-18T20:34:07.975Z",
    "duration": 362,
    "testsRegistered": 107,
    "passPercent": 100,
    "pendingPercent": 2.803738317757009,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8a4b12d3-8176-441a-bbac-440c1740dd04",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "done();",
          "err": {},
          "uuid": "19baab2e-0837-49f8-a446-08e7abd1e663",
          "parentUUID": "8a4b12d3-8176-441a-bbac-440c1740dd04",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "__awaiter(void 0, void 0, void 0, function* () {\n})",
          "err": {},
          "uuid": "f95bc930-4b87-4719-b628-a47393bd2c3a",
          "parentUUID": "8a4b12d3-8176-441a-bbac-440c1740dd04",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "0766e6ce-3716-4ace-9040-e2fd53f4acd1",
          "title": "client command test",
          "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/command/client-command.test.ts",
          "file": "/test/resp/command/client-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"client command test\"",
              "fullTitle": "client command test \"before all\" hook in \"client command test\"",
              "timedOut": false,
              "duration": 29,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on(\"ready\", () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "f5cc32b4-1c82-4789-afb5-e592e01c10c4",
              "parentUUID": "0766e6ce-3716-4ace-9040-e2fd53f4acd1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"client command test\"",
              "fullTitle": "client command test \"before each\" hook in \"client command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "ec13539d-8dc0-4caa-9932-2d442507ecdb",
              "parentUUID": "0766e6ce-3716-4ace-9040-e2fd53f4acd1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"client command test\"",
              "fullTitle": "client command test \"after all\" hook in \"client command test\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "cd3f4b16-134b-46dc-950e-ff40d33a4617",
              "parentUUID": "0766e6ce-3716-4ace-9040-e2fd53f4acd1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"client command test\"",
              "fullTitle": "client command test \"after each\" hook in \"client command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "867938e3-cfdf-4746-8a45-4dae0fd77cc8",
              "parentUUID": "0766e6ce-3716-4ace-9040-e2fd53f4acd1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow more than 3 parameters",
              "fullTitle": "client command test should not allow more than 3 parameters",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"one\",\n            \"two\",\n            \"three\",\n            \"four\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR Unknown subcommand or wrong number of arguments for 'one'. Try CLIENT HELP\");\n    })",
              "err": {},
              "uuid": "b91d897d-67b1-4708-9de5-e0acba6d9c06",
              "parentUUID": "0766e6ce-3716-4ace-9040-e2fd53f4acd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail predictably when an unknown subcommand is passed",
              "fullTitle": "client command test should fail predictably when an unknown subcommand is passed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"whatever\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(util.format(DEFAULT_ERROR, \"whatever\"));\n    })",
              "err": {},
              "uuid": "a154157c-faff-46a6-b7be-2971356c521f",
              "parentUUID": "0766e6ce-3716-4ace-9040-e2fd53f4acd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a NIL name when called with \"GETNAME\" subcommand",
              "fullTitle": "client command test should return a NIL name when called with \"GETNAME\" subcommand",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"getname\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "60d7a09a-3748-4913-ac9b-72718d3614c3",
              "parentUUID": "0766e6ce-3716-4ace-9040-e2fd53f4acd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail predictably when \"GETNAME\" is called with too many parameters",
              "fullTitle": "client command test should fail predictably when \"GETNAME\" is called with too many parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"getname\",\n            \"extra\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(util.format(DEFAULT_ERROR, \"getname\"));\n    })",
              "err": {},
              "uuid": "79379194-b90c-4fa0-b54a-7b5bb6136b43",
              "parentUUID": "0766e6ce-3716-4ace-9040-e2fd53f4acd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with \"OK\" when \"setname\" is called with a valid name",
              "fullTitle": "client command test should respond with \"OK\" when \"setname\" is called with a valid name",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"setname\",\n            \"whatever\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"getname\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"whatever\");\n    })",
              "err": {},
              "uuid": "afd96903-6013-46d4-92af-09d5b425c9f6",
              "parentUUID": "0766e6ce-3716-4ace-9040-e2fd53f4acd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should persist the value for \"setname\" across tests",
              "fullTitle": "client command test should persist the value for \"setname\" across tests",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"getname\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"whatever\");\n    })",
              "err": {},
              "uuid": "31224fdd-9fe0-4230-951f-888d102c45d8",
              "parentUUID": "0766e6ce-3716-4ace-9040-e2fd53f4acd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"setname\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"setname\" called with too many parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"setname\",\n            \"test\",\n            \"two\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(util.format(DEFAULT_ERROR, \"setname\"));\n    })",
              "err": {},
              "uuid": "e39576b6-02aa-4d79-a2a8-559d77d12344",
              "parentUUID": "0766e6ce-3716-4ace-9040-e2fd53f4acd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow whitespace in \"setname\" subcommand",
              "fullTitle": "client command test should not allow whitespace in \"setname\" subcommand",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"setname\",\n            \"te\\nst\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR Client names cannot contain spaces, newlines or special characters.\");\n    })",
              "err": {},
              "uuid": "25614f50-0b71-4cbe-beca-4a68c35ae4a8",
              "parentUUID": "0766e6ce-3716-4ace-9040-e2fd53f4acd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the server-assigned client id",
              "fullTitle": "client command test should return the server-assigned client id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"id\"\n        ]);\n        (0, chai_1.expect)(response).to.be.a(\"number\");\n        (0, chai_1.expect)(String(response).length).to.be.greaterThan(0);\n    })",
              "err": {},
              "uuid": "30409449-7f26-4d36-902e-4aab289ad9b6",
              "parentUUID": "0766e6ce-3716-4ace-9040-e2fd53f4acd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"id\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"id\" called with too many parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"id\",\n            \"test\",\n            \"two\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(util.format(DEFAULT_ERROR, \"id\"));\n    })",
              "err": {},
              "uuid": "d07369d0-669e-4141-a4d2-99b133fbaeeb",
              "parentUUID": "0766e6ce-3716-4ace-9040-e2fd53f4acd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a bunch of information when client \"list\" subcommand is invoked",
              "fullTitle": "client command test should return a bunch of information when client \"list\" subcommand is invoked",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"list\"\n        ]);\n        (0, chai_1.expect)(response).to.be.a(\"string\");\n        (0, chai_1.expect)(response.length).to.be.greaterThan(0);\n        (0, chai_1.expect)(response).to.match(/ name=whatever /);\n        (0, chai_1.expect)(response).to.match(/\\bdb=0\\b/);\n    })",
              "err": {},
              "uuid": "39e2939e-368c-4ae6-b5f3-09019d0c70e5",
              "parentUUID": "0766e6ce-3716-4ace-9040-e2fd53f4acd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"list\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"list\" called with too many parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"list\",\n            \"test\",\n            \"two\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR syntax error\");\n    })",
              "err": {},
              "uuid": "d0b728ac-6473-436b-9201-90a8e88b6245",
              "parentUUID": "0766e6ce-3716-4ace-9040-e2fd53f4acd1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b91d897d-67b1-4708-9de5-e0acba6d9c06",
            "a154157c-faff-46a6-b7be-2971356c521f",
            "60d7a09a-3748-4913-ac9b-72718d3614c3",
            "79379194-b90c-4fa0-b54a-7b5bb6136b43",
            "afd96903-6013-46d4-92af-09d5b425c9f6",
            "31224fdd-9fe0-4230-951f-888d102c45d8",
            "e39576b6-02aa-4d79-a2a8-559d77d12344",
            "25614f50-0b71-4cbe-beca-4a68c35ae4a8",
            "30409449-7f26-4d36-902e-4aab289ad9b6",
            "d07369d0-669e-4141-a4d2-99b133fbaeeb",
            "39e2939e-368c-4ae6-b5f3-09019d0c70e5",
            "d0b728ac-6473-436b-9201-90a8e88b6245"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 34,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1c80308f-994d-4923-a714-609c30a15330",
          "title": "multi command test",
          "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/command/multi-command.test.ts",
          "file": "/test/resp/command/multi-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"multi command test\"",
              "fullTitle": "multi command test \"before all\" hook in \"multi command test\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on(\"ready\", () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "1662f664-945a-42e6-adbb-f711889227ed",
              "parentUUID": "1c80308f-994d-4923-a714-609c30a15330",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"multi command test\"",
              "fullTitle": "multi command test \"before each\" hook in \"multi command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "2ca0e201-22ee-4167-a75a-28f121ad4578",
              "parentUUID": "1c80308f-994d-4923-a714-609c30a15330",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"multi command test\"",
              "fullTitle": "multi command test \"after all\" hook in \"multi command test\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "a6ffaf5f-a63f-4590-89bc-ad75efbbfa1b",
              "parentUUID": "1c80308f-994d-4923-a714-609c30a15330",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"multi command test\"",
              "fullTitle": "multi command test \"after each\" hook in \"multi command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "8ecf0625-837b-4538-815f-1bd6dbe02731",
              "parentUUID": "1c80308f-994d-4923-a714-609c30a15330",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow nested MULTI invocations",
              "fullTitle": "multi command test should not allow nested MULTI invocations",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"multi\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\"multi\"]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR MULTI calls can not be nested\");\n    })",
              "err": {},
              "uuid": "62aff95c-0ab4-44fa-801b-4ffd6ea4ff67",
              "parentUUID": "1c80308f-994d-4923-a714-609c30a15330",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect the DISCARD command",
              "fullTitle": "multi command test should respect the DISCARD command",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"discard\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n    })",
              "err": {},
              "uuid": "bbf9a010-2985-4c23-953f-4d616f5e47f2",
              "parentUUID": "1c80308f-994d-4923-a714-609c30a15330",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow DISCARD without MULTI",
              "fullTitle": "multi command test should not allow DISCARD without MULTI",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"discard\"]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR DISCARD without MULTI\");\n    })",
              "err": {},
              "uuid": "eb6004fe-5f03-4250-8d25-8ee812e0223c",
              "parentUUID": "1c80308f-994d-4923-a714-609c30a15330",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should continue to validate commands after MULTI",
              "fullTitle": "multi command test should continue to validate commands after MULTI",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"multi\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"unknown\",\n            \"command\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR unknown command `unknown`, with args beginning with: `command`, \", `${response}`);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpush\",\n            \"test\",\n            \"one\",\n            \"two\",\n            \"three\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"QUEUED\");\n    })",
              "err": {},
              "uuid": "40a7da11-758e-4af5-a62f-5d698adf67ce",
              "parentUUID": "1c80308f-994d-4923-a714-609c30a15330",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should EXECABORT from a previous error",
              "fullTitle": "multi command test should EXECABORT from a previous error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"exec\"]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: EXECABORT Transaction discarded because of previous errors.\");\n    })",
              "err": {},
              "uuid": "090a4f3c-9385-4a7f-9baf-26baf12da5f7",
              "parentUUID": "1c80308f-994d-4923-a714-609c30a15330",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should queue a set of commands when there is no intervening error",
              "fullTitle": "multi command test should queue a set of commands when there is no intervening error",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"multi\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpush\",\n            \"test\",\n            \"one\",\n            \"two\",\n            \"three\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"QUEUED\");\n        response = yield (0, common_test_1.sendCommand)(client, [\"exec\"]);\n        (0, chai_1.expect)(response).to.eql([3]);\n    })",
              "err": {},
              "uuid": "82e5cc44-6d44-4f3d-8453-a23764f99a23",
              "parentUUID": "1c80308f-994d-4923-a714-609c30a15330",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reset transaction state after executing commands",
              "fullTitle": "multi command test should reset transaction state after executing commands",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"multi\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\"discard\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n    })",
              "err": {},
              "uuid": "40a03f66-e7ee-4bd4-970f-1a8b16520ffd",
              "parentUUID": "1c80308f-994d-4923-a714-609c30a15330",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the results of multiple commands in the order provided",
              "fullTitle": "multi command test should return the results of multiple commands in the order provided",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"multi\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpop\",\n            \"test\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"QUEUED\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpop\",\n            \"test\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"QUEUED\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"brpoplpush\",\n            \"test\",\n            \"dest\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"QUEUED\");\n        response = yield (0, common_test_1.sendCommand)(client, [\"exec\"]);\n        (0, chai_1.expect)(response).to.eql([\n            \"three\",\n            \"two\",\n            \"one\"\n        ]);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"exists\",\n            \"test\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(0);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"exists\",\n            \"dest\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "71dbb847-5299-4c80-bd33-3bb222f831e2",
              "parentUUID": "1c80308f-994d-4923-a714-609c30a15330",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate the behavior of brpoplpush",
              "fullTitle": "multi command test should validate the behavior of brpoplpush",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"flushall\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpush\",\n            \"test\",\n            \"one\",\n            \"two\",\n            \"three\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(3);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpop\",\n            \"test\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"three\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpop\",\n            \"test\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"two\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"brpoplpush\",\n            \"test\",\n            \"dest\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"one\");\n    })",
              "err": {},
              "uuid": "5c84e72d-86e1-4910-8521-1a2e33b161cd",
              "parentUUID": "1c80308f-994d-4923-a714-609c30a15330",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when EXEC issued without MULTI",
              "fullTitle": "multi command test should fail when EXEC issued without MULTI",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"exec\"]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR EXEC without MULTI\");\n    })",
              "err": {},
              "uuid": "d39822ad-5695-4930-9baa-9234ff3e85d6",
              "parentUUID": "1c80308f-994d-4923-a714-609c30a15330",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "62aff95c-0ab4-44fa-801b-4ffd6ea4ff67",
            "bbf9a010-2985-4c23-953f-4d616f5e47f2",
            "eb6004fe-5f03-4250-8d25-8ee812e0223c",
            "40a7da11-758e-4af5-a62f-5d698adf67ce",
            "090a4f3c-9385-4a7f-9baf-26baf12da5f7",
            "82e5cc44-6d44-4f3d-8453-a23764f99a23",
            "40a03f66-e7ee-4bd4-970f-1a8b16520ffd",
            "71dbb847-5299-4c80-bd33-3bb222f831e2",
            "5c84e72d-86e1-4910-8521-1a2e33b161cd",
            "d39822ad-5695-4930-9baa-9234ff3e85d6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 30,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
          "title": "script-command test",
          "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/command/script-command.test.ts",
          "file": "/test/resp/command/script-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"script-command test\"",
              "fullTitle": "script-command test \"before all\" hook in \"script-command test\"",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on(\"ready\", () => __awaiter(void 0, void 0, void 0, function* () {\n    yield (0, common_test_1.sendCommand)(client, [\"flushall\"]);\n    yield (0, common_test_1.sendCommand)(client, [\n        \"select\",\n        \"0\"\n    ]);\n    yield (0, common_test_1.sendCommand)(client, [\n        \"script\",\n        \"flush\"\n    ]);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "af2cdcea-c49f-46fa-9a18-eefacede3113",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"script-command test\"",
              "fullTitle": "script-command test \"before each\" hook in \"script-command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "e3031282-d10c-41e4-a5a1-357df14eede2",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"script-command test\"",
              "fullTitle": "script-command test \"after all\" hook in \"script-command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "dee3d7b9-a463-4e3c-94e3-8693ee9569c8",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"script-command test\"",
              "fullTitle": "script-command test \"after each\" hook in \"script-command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "0c8135ea-2f14-497f-b137-e43857f6cca2",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should calcuclate the correct sha1 of a script and store the script",
              "fullTitle": "script-command test should calcuclate the correct sha1 of a script and store the script",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"script\",\n            \"exists\",\n            sha1\n        ]);\n        (0, chai_1.expect)(response).to.eql([0]);\n        // Validate failure on unparseable script\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"script\",\n            \"load\",\n            code\n        ]);\n        (0, chai_1.expect)(response).to.match(/ReplyError: ERR .*/);\n        // Validate success on parseable script\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"script\",\n            \"load\",\n            `${code}}`\n        ]);\n        (0, chai_1.expect)(response).to.equal(sha1);\n        // Validate a script is persisted\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"script\",\n            \"exists\",\n            sha1\n        ]);\n        (0, chai_1.expect)(response).to.eql([1]);\n        // Validate response to unknown sub command\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"script\",\n            \"test\",\n            sha1\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR Unknown subcommand or wrong number of arguments for 'test'. Try SCRIPT HELP.\");\n    })",
              "err": {},
              "uuid": "c29cbcd4-a657-4b62-8fec-9019d600baf9",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should evaluate a loaded lua script using evalsha",
              "fullTitle": "script-command test should evaluate a loaded lua script using evalsha",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Validate that NOSCRIPT is triggered\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"evalsha\",\n            `${sha1}xx`,\n            \"2\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: NOSCRIPT No matching script. Please use EVAL.\");\n        // Validate that param 1 cannot be negative\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"evalsha\",\n            sha1,\n            \"-2\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR Number of keys can't be negative\");\n        // Validate that param 1 cannot be text\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"evalsha\",\n            sha1,\n            \"two\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR value is not an integer or out of range\");\n    })",
              "err": {},
              "uuid": "a3cb2dd8-4291-4f6e-a7c4-5c977004273e",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should execute a simple script",
              "fullTitle": "script-command test should execute a simple script",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Validate that a simple script can be processed\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"EVAL\",\n            \"local val=\\\"Hello Compose\\\" return val\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"Hello Compose\");\n    })",
              "err": {},
              "uuid": "839af48d-2b29-4b66-9823-b271d767479b",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create and process the ARGV table",
              "fullTitle": "script-command test should create and process the ARGV table",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return ARGV[2]\",\n            \"2\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\"\n        ]);\n        (0, chai_1.expect)(response).to.eql(\"second\");\n    })",
              "err": {},
              "uuid": "c849c2db-efa5-423b-bdae-4fa331d9f11b",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create and process the KEYS table",
              "fullTitle": "script-command test should create and process the KEYS table",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return KEYS[1]\",\n            \"2\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"key1\");\n    })",
              "err": {},
              "uuid": "643b6b02-46c8-43d8-a018-954de3591e9f",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a NUMBER when required",
              "fullTitle": "script-command test should return a NUMBER when required",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return 123\",\n            \"2\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(123);\n    })",
              "err": {},
              "uuid": "2f2ad2e4-d960-467e-9849-b6754669ae68",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NIL when there is no return value",
              "fullTitle": "script-command test should return NIL when there is no return value",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"print \\\"Hello World\\\"\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "d5d98519-9f08-4f51-a345-98a706ca3ac8",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a TABLE when required",
              "fullTitle": "script-command test should return a TABLE when required",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return ARGV\",\n            \"2\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\",\n            \"third\"\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            \"first\",\n            \"second\",\n            \"third\"\n        ]);\n    })",
              "err": {},
              "uuid": "678421b5-33cb-4d8e-9f53-230371deeafb",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return items in order",
              "fullTitle": "script-command test should return items in order",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return {true, \\\"test\\\", false, 10, 10.2}\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            1,\n            \"test\",\n            null,\n            10,\n            10\n        ]);\n    })",
              "err": {},
              "uuid": "c7f19634-7549-4c2a-9745-cbd80a792756",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return integer and nil for true and false, respectively",
              "fullTitle": "script-command test should return integer and nil for true and false, respectively",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return { true, false, false}\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            1,\n            null,\n            null\n        ]);\n    })",
              "err": {},
              "uuid": "f3654a6b-eeb9-436e-8b29-858edc3dd129",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to execute a representative BULL script",
              "fullTitle": "script-command test should be able to execute a representative BULL script",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "0bbc5162-a682-469d-acba-b4c8ccaf10b6",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when we attempt to EVAL an invalid script",
              "fullTitle": "script-command test should fail when we attempt to EVAL an invalid script",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"-- Invalid\\r\\nscript\"\n        ]);\n        // Validated against redis\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR wrong number of arguments for 'eval' command\");\n    })",
              "err": {},
              "uuid": "2cc4099d-b40e-45fd-ac84-c79cb078115e",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to return a NULL value from a lua script",
              "fullTitle": "script-command test should be able to return a NULL value from a lua script",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = nil return val\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "b30bfa66-194c-44c0-9fe4-c0f2944fb376",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return table values after the first NIL is encountered and return integers not floats",
              "fullTitle": "script-command test should not return table values after the first NIL is encountered and return integers not floats",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "29b2008b-27ad-4359-9e8a-f2443bc5aa7a",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a table with embedded calls to redis",
              "fullTitle": "script-command test should return a table with embedded calls to redis",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"flushall\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"hset\",\n            embeddedkey,\n            \"one\",\n            \"1\",\n            \"two\",\n            \"2\",\n            \"three\",\n            \"3\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(3);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"hgetall\",\n            embeddedkey\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            \"one\",\n            \"1\",\n            \"two\",\n            \"2\",\n            \"three\",\n            \"3\"\n        ]);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            `local j = redis.call(\"HGETALL\", \"${embeddedkey}\") return { j, \"SAMPLE\" }`,\n            \"0\"\n        ]);\n        // Validated with redis\n        (0, chai_1.expect)(response).to.eql([\n            \"SAMPLE\",\n            [\n                \"one\",\n                \"1\",\n                \"two\",\n                \"2\",\n                \"three\",\n                \"3\"\n            ]\n        ]);\n    })",
              "err": {},
              "uuid": "a2300413-de28-4822-833c-ac9743271729",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support the unpack lua command",
              "fullTitle": "script-command test should support the unpack lua command",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"flushall\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"hset\",\n            embeddedkey,\n            \"one\",\n            \"1\",\n            \"two\",\n            \"2\",\n            \"three\",\n            \"3\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(3);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            `return { unpack(redis.call(\"hgetall\", \"${embeddedkey}\")) }`,\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            \"one\",\n            \"1\",\n            \"two\",\n            \"2\",\n            \"three\",\n            \"3\"\n        ]);\n    })",
              "err": {},
              "uuid": "7454904f-2f8f-450d-a98d-e0fc014fcfaa",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert values properly",
              "fullTitle": "script-command test should convert values properly",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return {1,2,{3,'Hello World!'}}\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            1,\n            2,\n            [\n                3,\n                \"Hello World!\"\n            ]\n        ]);\n    })",
              "err": {},
              "uuid": "5fdf3eec-651c-4ed5-ad72-6901f8dc4f09",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return embedded tables from embedded calls",
              "fullTitle": "script-command test should return embedded tables from embedded calls",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return {1,2,{3,bit.bxor(5,3)}}\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            1,\n            2,\n            [\n                3,\n                6\n            ]\n        ]);\n    })",
              "err": {},
              "uuid": "a3c0bf33-921f-4ac6-8b61-3a2e5fc76548",
              "parentUUID": "19abc252-f8d6-4b02-9399-bc4131d9c81d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c29cbcd4-a657-4b62-8fec-9019d600baf9",
            "a3cb2dd8-4291-4f6e-a7c4-5c977004273e",
            "839af48d-2b29-4b66-9823-b271d767479b",
            "c849c2db-efa5-423b-bdae-4fa331d9f11b",
            "643b6b02-46c8-43d8-a018-954de3591e9f",
            "2f2ad2e4-d960-467e-9849-b6754669ae68",
            "d5d98519-9f08-4f51-a345-98a706ca3ac8",
            "678421b5-33cb-4d8e-9f53-230371deeafb",
            "c7f19634-7549-4c2a-9745-cbd80a792756",
            "f3654a6b-eeb9-436e-8b29-858edc3dd129",
            "2cc4099d-b40e-45fd-ac84-c79cb078115e",
            "b30bfa66-194c-44c0-9fe4-c0f2944fb376",
            "a2300413-de28-4822-833c-ac9743271729",
            "7454904f-2f8f-450d-a98d-e0fc014fcfaa",
            "5fdf3eec-651c-4ed5-ad72-6901f8dc4f09",
            "a3c0bf33-921f-4ac6-8b61-3a2e5fc76548"
          ],
          "failures": [],
          "pending": [
            "0bbc5162-a682-469d-acba-b4c8ccaf10b6",
            "29b2008b-27ad-4359-9e8a-f2443bc5aa7a"
          ],
          "skipped": [],
          "duration": 116,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a336dc7e-e573-4171-af14-c5a6b584aab5",
          "title": "data-type test",
          "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/data-type.test.ts",
          "file": "/test/resp/data/data-type.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"data-type test\"",
              "fullTitle": "data-type test \"before each\" hook in \"data-type test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "d7836301-8ea9-49cc-ad90-c139642eb62f",
              "parentUUID": "a336dc7e-e573-4171-af14-c5a6b584aab5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"data-type test\"",
              "fullTitle": "data-type test \"after all\" hook in \"data-type test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "863127e8-4345-486c-9c13-337b47e9a9bd",
              "parentUUID": "a336dc7e-e573-4171-af14-c5a6b584aab5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"data-type test\"",
              "fullTitle": "data-type test \"after each\" hook in \"data-type test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "19395818-1750-47de-b269-1fbe283e9dfc",
              "parentUUID": "a336dc7e-e573-4171-af14-c5a6b584aab5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should enumerate data-types",
              "fullTitle": "data-type test should enumerate data-types",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        (0, chai_1.expect)(data_type_1.DataType.NONE).to.equal(\"none\");\n        (0, chai_1.expect)(data_type_1.DataType.STRING).to.equal(\"string\");\n        (0, chai_1.expect)(data_type_1.DataType.LIST).to.equal(\"list\");\n        (0, chai_1.expect)(data_type_1.DataType.SET).to.equal(\"set\");\n        (0, chai_1.expect)(data_type_1.DataType.ZSET).to.equal(\"zset\");\n        (0, chai_1.expect)(data_type_1.DataType.HASH).to.equal(\"hash\");\n        (0, chai_1.expect)(Object.keys(data_type_1.DataType).length).to.equal(6);\n    })",
              "err": {},
              "uuid": "b11b7f80-0d3e-4b43-aa7b-7c4d8ad6c8b8",
              "parentUUID": "a336dc7e-e573-4171-af14-c5a6b584aab5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b11b7f80-0d3e-4b43-aa7b-7c4d8ad6c8b8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1bf2afee-7a84-402c-bf92-343e69a88a03",
          "title": "sorted-set test",
          "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
          "file": "/test/resp/data/sorted-set.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"sorted-set test\"",
              "fullTitle": "sorted-set test \"before each\" hook in \"sorted-set test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();\nss = new sorted_set_1.SortedSet();\nz = new Z();",
              "err": {},
              "uuid": "7c2f5d8f-5ee1-41b0-98d7-f161785eb2be",
              "parentUUID": "1bf2afee-7a84-402c-bf92-343e69a88a03",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"sorted-set test\"",
              "fullTitle": "sorted-set test \"after all\" hook in \"sorted-set test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "3ba4eecc-9d1e-4a42-9c68-965c8deacc37",
              "parentUUID": "1bf2afee-7a84-402c-bf92-343e69a88a03",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"sorted-set test\"",
              "fullTitle": "sorted-set test \"after each\" hook in \"sorted-set test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a62de314-a06c-493a-bc56-d3dc057c69ea",
              "parentUUID": "1bf2afee-7a84-402c-bf92-343e69a88a03",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should instantiate",
              "fullTitle": "sorted-set test should instantiate",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        (0, chai_1.expect)(z.constructor.name).to.equal(\"Z\");\n        ss = new sorted_set_1.SortedSet();\n        (0, chai_1.expect)(ss.constructor.name).to.equal(\"SortedSet\");\n    })",
              "err": {},
              "uuid": "9d8bfd36-2617-4d69-a51e-05377d3427ff",
              "parentUUID": "1bf2afee-7a84-402c-bf92-343e69a88a03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add, get, and delete an entry",
              "fullTitle": "sorted-set test should add, get, and delete an entry",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add(\"test\", 1);\n        (0, chai_1.expect)(added).to.equal(null);\n        added = ss.add(\"test\", 1);\n        (0, chai_1.expect)(added).to.equal(null);\n        (0, chai_1.expect)(z.keys().length).to.equal(1);\n        (0, chai_1.expect)(ss.keys().length).to.equal(1);\n        let item = z.get(\"test\");\n        (0, chai_1.expect)(item.constructor.name).to.equal(\"Number\");\n        item = ss.get(\"test\");\n        (0, chai_1.expect)(item.constructor.name).to.equal(\"Number\");\n        z.del(\"test\");\n        (0, chai_1.expect)(z.keys().length).to.equal(0);\n        ss.del(\"test\");\n        (0, chai_1.expect)(ss.keys().length).to.equal(0);\n    })",
              "err": {},
              "uuid": "b3f10d64-ee0d-434a-8ae9-79c3a8532aa2",
              "parentUUID": "1bf2afee-7a84-402c-bf92-343e69a88a03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw when attempting to add __proto__ key",
              "fullTitle": "sorted-set test should throw when attempting to add __proto__ key",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        (0, chai_1.expect)(() => {\n            z.add(\"__proto__\", 0);\n        }).to.throw();\n        /*\n         * Expect(() => {\n         *   ss.add('__proto__', 0)\n         * }).to.throw();\n         */\n    })",
              "err": {},
              "uuid": "64b18d20-2b18-49c6-ac68-0a01a7d5919e",
              "parentUUID": "1bf2afee-7a84-402c-bf92-343e69a88a03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add an undefined or null score",
              "fullTitle": "sorted-set test should not add an undefined or null score",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add(\"test\", null);\n        (0, chai_1.expect)(added).to.equal(null);\n        (0, chai_1.expect)(z.keys().length).to.equal(0);\n        added = z.add(\"test\", undefined);\n        (0, chai_1.expect)(z.keys().length).to.equal(0);\n        /*\n         * Typescript prevents adding null\n         * added = ss.add('test', null);\n         * expect(added).to.equal(null);\n         * expect(ss.keys().length).to.equal(0);\n         * added = ss.add('test', undefined);\n         * expect(z.keys().length).to.equal(0);\n         */\n    })",
              "err": {},
              "uuid": "d439ae06-91f0-48e6-8529-bf86c383107f",
              "parentUUID": "1bf2afee-7a84-402c-bf92-343e69a88a03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not duplicate key/value pairs",
              "fullTitle": "sorted-set test should not duplicate key/value pairs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add(\"test\", 123);\n        (0, chai_1.expect)(added).to.equal(null); // This is weird\n        (0, chai_1.expect)(z.keys().length).to.equal(1);\n        added = z.add(\"test\", 123);\n        (0, chai_1.expect)(added).to.equal(123); // And weirder\n        (0, chai_1.expect)(z.keys().length).to.equal(1);\n        added = ss.add(\"test\", 123);\n        (0, chai_1.expect)(added).to.equal(null); // This is weird\n        (0, chai_1.expect)(ss.keys().length).to.equal(1);\n        added = ss.add(\"test\", 123);\n        (0, chai_1.expect)(added).to.equal(123); // And weirder\n        (0, chai_1.expect)(ss.keys().length).to.equal(1);\n    })",
              "err": {},
              "uuid": "c472604c-a0d3-405b-83ce-b136a805eef0",
              "parentUUID": "1bf2afee-7a84-402c-bf92-343e69a88a03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the old rank when replacing a key",
              "fullTitle": "sorted-set test should return the old rank when replacing a key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add(\"test\", 123);\n        (0, chai_1.expect)(added).to.equal(null);\n        (0, chai_1.expect)(z.keys().length).to.equal(1);\n        added = z.add(\"test\", 321);\n        (0, chai_1.expect)(added).to.equal(123);\n        (0, chai_1.expect)(z.keys().length).to.equal(1);\n        added = z.get(\"test\");\n        (0, chai_1.expect)(added).to.equal(321);\n        added = ss.add(\"test\", 123);\n        (0, chai_1.expect)(added).to.equal(null);\n        (0, chai_1.expect)(ss.keys().length).to.equal(1);\n        added = ss.add(\"test\", 321);\n        (0, chai_1.expect)(added).to.equal(123);\n        (0, chai_1.expect)(ss.keys().length).to.equal(1);\n        added = ss.get(\"test\");\n        (0, chai_1.expect)(added).to.equal(321);\n    })",
              "err": {},
              "uuid": "1a811aab-c838-42b9-8821-d59a3211cf37",
              "parentUUID": "1bf2afee-7a84-402c-bf92-343e69a88a03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a value when adding at least 32 values (I think - it is difficult to tell)",
              "fullTitle": "sorted-set test should return a value when adding at least 32 values (I think - it is difficult to tell)",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "82d4a3b5-ba1d-4357-88b2-918eb9b0f879",
              "parentUUID": "1bf2afee-7a84-402c-bf92-343e69a88a03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "fullTitle": "sorted-set test should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        (0, chai_1.expect)(z.add(\"Terminator\", 8.0)).to.equal(null); // => null\n        (0, chai_1.expect)(z.add(\"District 9\", 8.0)).to.equal(null); // => null\n        (0, chai_1.expect)(z.add(\"Ex Machina\", 0.7)).to.equal(null); // => null\n        (0, chai_1.expect)(z.add(\"Ex Machina\", 7.7)).to.equal(0.7); // => 0.7\n        // Alias\n        (0, chai_1.expect)(z.set(\"The Matrix\", 8.7)).to.equal(null); // => null\n        // Average O(1)\n        (0, chai_1.expect)(z.has(\"Terminator\")).to.equal(true); // => true\n        (0, chai_1.expect)(z.has(\"Blade Runner\")).to.equal(false); // => false\n        // Average O(1)\n        (0, chai_1.expect)(z.score(\"Ex Machina\")).to.equal(7.7); // => 7.7\n        (0, chai_1.expect)(z.score(\"Blade Runner\")).to.equal(null); // => null\n        // Alias\n        (0, chai_1.expect)(z.get(\"The Matrix\")).to.equal(8.7); // => 8.7\n        // Average O(log(N))\n        (0, chai_1.expect)(z.rem(\"Ex Machina\")).to.equal(7.7); // => 7.7\n        // Average O(1)\n        (0, chai_1.expect)(z.rem(\"Ex Machina\")).to.equal(null); // => null\n        // Alias\n        (0, chai_1.expect)(z.del(\"Ex Machina\")).to.equal(null); // => null\n        /*\n         * Average O(log(N)+M) where M is the number of elements between min and max\n         * This is not working as expected\n         */\n        (0, chai_1.expect)(z.rangeByScore(7, 8)).to.eql([\n            \"District 9\",\n            \"Terminator\"\n        ]);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        (0, chai_1.expect)(z.rangeByScore(8)).to.eql([\n            \"District 9\",\n            \"Terminator\",\n            \"The Matrix\"\n        ]); // [8.0-∞)\n        // => ['District 9', 'Terminator', 'The Matrix']\n        (0, chai_1.expect)(z.rangeByScore(8, null, { \"withScores\": true })).to.eql([\n            [\n                \"District 9\",\n                8.0\n            ],\n            [\n                \"Terminator\",\n                8.0\n            ],\n            [\n                \"The Matrix\",\n                8.7\n            ]\n        ]);\n        // => [['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]\n        /*\n         * Average O(log(N)+log(M)) where M as in rangeByScore\n         * Again - not as expected\n         */\n        (0, chai_1.expect)(z.count(7, 8)).to.equal(2); // => 3\n        /*\n         * Average O(log(N))\n         * Not working as expected\n         */\n        (0, chai_1.expect)(z.rank(\"Ex Machina\")).to.equal(null); // => 0\n        // Not working as expected\n        (0, chai_1.expect)(z.rank(\"Terminator\")).to.equal(1); // => 2\n        (0, chai_1.expect)(z.rank(\"Blade Runner\")).to.equal(null); // => null\n        /*\n         * Average O(log(N)+M) where M as in range\n         * Not working as expected\n         */\n        (0, chai_1.expect)(z.range(0, 2)).to.eql([\n            \"District 9\",\n            \"Terminator\",\n            \"The Matrix\"\n        ]);\n        /*\n         * => ['Ex Machina', 'District 9', 'Terminator']\n         * Not working as expected\n         */\n        (0, chai_1.expect)(z.range(0, 2, { \"withScores\": true })).to.eql([\n            [\n                \"District 9\",\n                8\n            ],\n            [\n                \"Terminator\",\n                8\n            ],\n            [\n                \"The Matrix\",\n                8.7\n            ]\n        ]);\n        /*\n         * => [['Ex Machina', 7.7],\n         *     ['District 9', 8],\n         *     ['Terminator', 8]]\n         */\n        (0, chai_1.expect)(z.range(-1)).to.eql([\"The Matrix\"]); // => ['The Matrix']\n        /*\n         * Almost alias\n         * Not working as expected\n         */\n        (0, chai_1.expect)(z.slice(0, 3)).to.eql([\n            \"District 9\",\n            \"Terminator\",\n            \"The Matrix\"\n        ]);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        /*\n         * Set cardinality (number of elements)\n         * Average O(1)\n         * Not working as expected\n         */\n        (0, chai_1.expect)(z.card()).to.equal(3); // => 4\n        /*\n         * Alias\n         * Not working as expected\n         */\n        (0, chai_1.expect)(z.length).to.equal(3); // => 4\n    })",
              "err": {},
              "uuid": "73c2c258-2ee1-4156-84a1-d6b62ec04cad",
              "parentUUID": "1bf2afee-7a84-402c-bf92-343e69a88a03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "the rewrite should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "fullTitle": "sorted-set test the rewrite should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        (0, chai_1.expect)(ss.add(\"Terminator\", 8.0)).to.equal(null); // => null\n        (0, chai_1.expect)(ss.add(\"District 9\", 8.0)).to.equal(null); // => null\n        (0, chai_1.expect)(ss.add(\"Ex Machina\", 0.7)).to.equal(null); // => null\n        (0, chai_1.expect)(ss.add(\"Ex Machina\", 7.7)).to.equal(0.7); // => 0.7\n        // Alias\n        (0, chai_1.expect)(ss.set(\"The Matrix\", 8.7)).to.equal(null); // => null\n        // Average O(1)\n        (0, chai_1.expect)(ss.has(\"Terminator\")).to.equal(true); // => true\n        (0, chai_1.expect)(ss.has(\"Blade Runner\")).to.equal(false); // => false\n        // Average O(1)\n        (0, chai_1.expect)(ss.score(\"Ex Machina\")).to.equal(7.7); // => 7.7\n        (0, chai_1.expect)(ss.score(\"Blade Runner\")).to.equal(null); // => null\n        // Alias\n        (0, chai_1.expect)(ss.get(\"The Matrix\")).to.equal(8.7); // => 8.7\n        // Average O(log(N))\n        (0, chai_1.expect)(ss.rem(\"Ex Machina\")).to.equal(7.7); // => 7.7\n        // Average O(1)\n        (0, chai_1.expect)(ss.rem(\"Ex Machina\")).to.equal(null); // => null\n        // Alias\n        (0, chai_1.expect)(ss.del(\"Ex Machina\")).to.equal(null); // => null\n        /*\n         * Average O(log(N)+M) where M is the number of elements between min and max\n         * This is not working as expected\n         */\n        (0, chai_1.expect)(ss.rangeByScore(7, 8)).to.eql([\n            \"District 9\",\n            \"Terminator\"\n        ]);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        (0, chai_1.expect)(ss.rangeByScore(8)).to.eql([\n            \"District 9\",\n            \"Terminator\",\n            \"The Matrix\"\n        ]); // [8.0-∞)\n        // => ['District 9', 'Terminator', 'The Matrix']\n        (0, chai_1.expect)(ss.rangeByScore(8, null, { \"withScores\": true })).to.eql([\n            [\n                \"District 9\",\n                8.0\n            ],\n            [\n                \"Terminator\",\n                8.0\n            ],\n            [\n                \"The Matrix\",\n                8.7\n            ]\n        ]);\n        // => [['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]\n        /*\n         * Average O(log(N)+log(M)) where M as in rangeByScore\n         * Again - not as expected\n         */\n        (0, chai_1.expect)(ss.count(7, 8)).to.equal(2); // => 3\n        /*\n         * Average O(log(N))\n         * Not working as expected\n         */\n        (0, chai_1.expect)(ss.rank(\"Ex Machina\")).to.equal(null); // => 0\n        // Not working as expected\n        (0, chai_1.expect)(ss.rank(\"Terminator\")).to.equal(1); // => 2\n        (0, chai_1.expect)(ss.rank(\"Blade Runner\")).to.equal(null); // => null\n        /*\n         * Average O(log(N)+M) where M as in range\n         * Not working as expected\n         */\n        (0, chai_1.expect)(ss.range(0, 2)).to.eql([\n            \"District 9\",\n            \"Terminator\",\n            \"The Matrix\"\n        ]);\n        /*\n         * => ['Ex Machina', 'District 9', 'Terminator']\n         * Not working as expected\n         */\n        (0, chai_1.expect)(ss.range(0, 2, { \"withScores\": true })).to.eql([\n            [\n                \"District 9\",\n                8\n            ],\n            [\n                \"Terminator\",\n                8\n            ],\n            [\n                \"The Matrix\",\n                8.7\n            ]\n        ]);\n        /*\n         * => [['Ex Machina', 7.7],\n         *     ['District 9', 8],\n         *     ['Terminator', 8]]\n         */\n        (0, chai_1.expect)(ss.range(-1)).to.eql([\"The Matrix\"]); // => ['The Matrix']\n        /*\n         * Almost alias\n         * Not working as expected\n         */\n        (0, chai_1.expect)(ss.slice(0, 3)).to.eql([\n            \"District 9\",\n            \"Terminator\",\n            \"The Matrix\"\n        ]);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        /*\n         * Set cardinality (number of elements)\n         * Average O(1)\n         * Not working as expected\n         */\n        (0, chai_1.expect)(ss.card()).to.equal(3); // => 4\n        /*\n         * Alias\n         * Not working as expected\n         */\n        (0, chai_1.expect)(ss.length).to.equal(3); // => 4\n    })",
              "err": {},
              "uuid": "a681174d-8eb2-491a-a376-4ea53472a203",
              "parentUUID": "1bf2afee-7a84-402c-bf92-343e69a88a03",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "11943f5f-cc0b-476c-9734-0b0933ac8567",
              "title": "skip map",
              "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
              "file": "/test/resp/data/sorted-set.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should support basic operations",
                  "fullTitle": "sorted-set test skip map should support basic operations",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const z = new Z();\n(0, chai_1.expect)(z).to.have.length(0);\n(0, chai_1.expect)(z.toArray()).to.eql([]);\n(0, chai_1.expect)(z.range()).to.eql([]);\n(0, chai_1.expect)(z.rangeByScore()).to.eql([]);\n(0, chai_1.expect)(() => {\n    z.add(\"__proto__\", 14);\n}).to.throw();\nz.add(\"5a600e16\", 8);\nz.add(\"5a600e17\", 9);\n(0, chai_1.expect)(z.add(\"5a600e18\", 10)).to.equal(null);\n(0, chai_1.expect)(z.add(\"5a600e17\", 12)).to.equal(9);\n(0, chai_1.expect)(z).to.have.length(3);\n(0, chai_1.expect)(z.toArray()).to.eql([\n    \"5a600e16\",\n    \"5a600e18\",\n    \"5a600e17\"\n]);\n(0, chai_1.expect)(z.toArray()).to.eql(z.range(0, -1));\n(0, chai_1.expect)(z.toArray()).to.eql(z.rangeByScore());\n(0, chai_1.expect)(z.has(\"5a600e16\")).to.be.ok;\n(0, chai_1.expect)(z.has(\"5a600e17\")).to.be.ok;\n(0, chai_1.expect)(z.has(\"5a600e18\")).to.be.ok;\n(0, chai_1.expect)(z.has(\"5a600e19\")).to.not.be.ok;\n(0, chai_1.expect)(z.score(\"5a600e16\")).to.equal(8);\n(0, chai_1.expect)(z.score(\"5a600e17\")).to.equal(12);\n(0, chai_1.expect)(z.score(\"5a600e18\")).to.equal(10);\n(0, chai_1.expect)(z.score(\"5a600e19\")).to.equal(null);\n(0, chai_1.expect)(z.rem(\"5a600e16\")).to.equal(8);\n(0, chai_1.expect)(z).to.have.length(2);\n(0, chai_1.expect)(z.rem(\"5a600e16\")).to.equal(null);\n(0, chai_1.expect)(z).to.have.length(2);\n(0, chai_1.expect)(z.has(\"5a600e16\")).to.not.be.ok;\n(0, chai_1.expect)(z.toArray()).to.eql([\n    \"5a600e18\",\n    \"5a600e17\"\n]);\n(0, chai_1.expect)(z.toArray({ \"withScores\": true })).\n    to.eql(z.range(0, -1, { \"withScores\": true }));\n(0, chai_1.expect)(z.toArray()).to.eql(z.rangeByScore());\nz.add(\"5a600e16\", 10);\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\n(0, chai_1.expect)(z).to.have.length(9);\n// No change, so should be O(1)\nz.add(\"5a600e17\", 12);\n(0, chai_1.expect)(z.rank(\"5a600e17\")).to.equal(4);\n(0, chai_1.expect)(z).to.have.length(9);\n(0, chai_1.expect)(z.toArray()).to.eql([\n    \"5a600e16\",\n    \"5a600e11\",\n    \"5a600e18\",\n    \"5a600e13\",\n    \"5a600e17\",\n    \"5a600e14\",\n    \"5a600e10\",\n    \"5a600e12\",\n    \"5a600e15\"\n]);\n(0, chai_1.expect)(z.toArray()).to.eql(z.range(0, -1));\n(0, chai_1.expect)(z.toArray()).to.eql(z.rangeByScore());\n(0, chai_1.expect)(z.rangeByScore(14, 16, { \"withScores\": true })).to.eql([\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ]\n]);",
                  "err": {},
                  "uuid": "f0fb172c-1e08-404e-86ce-93e80dd173b4",
                  "parentUUID": "11943f5f-cc0b-476c-9734-0b0933ac8567",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "3163c662-3d1a-4fba-9777-1cb1325da5c8",
                  "title": "#add",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should implicitly delete",
                      "fullTitle": "sorted-set test skip map #add should implicitly delete",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.add(\"5a600e14\", null)).to.equal(14);\n(0, chai_1.expect)(z.add(\"5a600e19\", null)).to.equal(null);\n(0, chai_1.expect)(z).to.have.length(8);",
                      "err": {},
                      "uuid": "54636583-0d4b-409c-b45f-9486cb7fa3d8",
                      "parentUUID": "3163c662-3d1a-4fba-9777-1cb1325da5c8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "54636583-0d4b-409c-b45f-9486cb7fa3d8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "017e8335-be19-4062-af66-e091a35dd970",
                  "title": "#empty",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should remove all elements",
                      "fullTitle": "sorted-set test skip map #empty should remove all elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\nz.empty();\n(0, chai_1.expect)(z).to.have.length(0);\n(0, chai_1.expect)(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "e9a95bff-e4d7-4b4e-9399-dd19e4410488",
                      "parentUUID": "017e8335-be19-4062-af66-e091a35dd970",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e9a95bff-e4d7-4b4e-9399-dd19e4410488"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "c3a395d2-991e-4995-8d2f-1627a26e4505",
                  "title": "#incrBy(increment, key)",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should increase rank",
                      "fullTitle": "sorted-set test skip map #incrBy(increment, key) should increase rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"first\", 1);\nz.add(\"second\", 2);\nz.add(\"third\", 3);\nz.add(\"fourth\", 4);\n(0, chai_1.expect)(z.incrBy(2, \"first\")).to.equal(3);\n(0, chai_1.expect)(z.rank(\"first\")).to.equal(1);",
                      "err": {},
                      "uuid": "1fe386c6-6894-43f8-b0a2-6976da2f8fcc",
                      "parentUUID": "c3a395d2-991e-4995-8d2f-1627a26e4505",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should create if not found",
                      "fullTitle": "sorted-set test skip map #incrBy(increment, key) should create if not found",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"first\", 1);\nz.incrBy(2, \"second\");\n(0, chai_1.expect)(z.card()).to.equal(2);\n(0, chai_1.expect)(z.rank(\"second\")).to.equal(1);",
                      "err": {},
                      "uuid": "04acbf18-d7eb-481a-b149-8f841f6060bf",
                      "parentUUID": "c3a395d2-991e-4995-8d2f-1627a26e4505",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1fe386c6-6894-43f8-b0a2-6976da2f8fcc",
                    "04acbf18-d7eb-481a-b149-8f841f6060bf"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a43736ae-b6d0-4a21-bc99-90fb21e56693",
                  "title": "#keys",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the keys",
                      "fullTitle": "sorted-set test skip map #keys should return the keys",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.keys()).to.eql([\n    \"5a600e16\",\n    \"5a600e11\",\n    \"5a600e18\",\n    \"5a600e13\",\n    \"5a600e17\",\n    \"5a600e14\",\n    \"5a600e10\",\n    \"5a600e12\",\n    \"5a600e15\"\n]);",
                      "err": {},
                      "uuid": "bbaae95a-02cc-401e-9831-205395af86be",
                      "parentUUID": "a43736ae-b6d0-4a21-bc99-90fb21e56693",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bbaae95a-02cc-401e-9831-205395af86be"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "22d1cd54-bf7c-4134-b6e9-936d05b41825",
                  "title": "#rangeByScore",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map #rangeByScore should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.rangeByScore(14, null, { \"withScores\": true })).to.eql([\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);\n(0, chai_1.expect)(z.rangeByScore(null, 10, { \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e11\",\n        6\n    ],\n    [\n        \"5a600e18\",\n        10\n    ]\n]);\n(0, chai_1.expect)(z.rangeByScore(-Infinity, Infinity)).to.eql(z.toArray());\n(0, chai_1.expect)(z.rangeByScore(null, null)).to.eql(z.toArray());",
                      "err": {},
                      "uuid": "520de029-74b6-4a86-9a41-b82a59dbcaed",
                      "parentUUID": "22d1cd54-bf7c-4134-b6e9-936d05b41825",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "520de029-74b6-4a86-9a41-b82a59dbcaed"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "bc920f3e-0978-49ec-83be-a5b7c606d5f1",
                  "title": "#count",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should count elements",
                      "fullTitle": "sorted-set test skip map #count should count elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\n(0, chai_1.expect)(z.count()).to.equal(0);\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\nz.add(\"5a600e19\", 14);\nz.add(\"5a600f00\", 30.0);\nz.add(\"5a600f01\", 30.5);\nz.add(\"5a600f02\", 31.0);\nz.add(\"5a600f03\", 31.5);\nz.add(\"5a600f04\", 32.0);\nz.add(\"5a600f05\", 32.0);\nz.add(\"5a600f06\", 32.0);\n(0, chai_1.expect)(z.count()).to.eql(z.rangeByScore().length);\n(0, chai_1.expect)(z.count(8)).to.eql(z.rangeByScore(8).length);\n(0, chai_1.expect)(z.count(3, 7)).to.eql(z.rangeByScore(3, 7).length);\n(0, chai_1.expect)(z.count(5, 14)).to.eql(z.rangeByScore(5, 14).length);\n(0, chai_1.expect)(z.count(5, 5)).to.eql(z.rangeByScore(5, 5).length);\n(0, chai_1.expect)(z.count(5, 0)).to.eql(z.rangeByScore(5, 0).length);\n(0, chai_1.expect)(z.count(30, 32)).to.eql(z.rangeByScore(30, 32).length);\n(0, chai_1.expect)(z.count(40)).to.eql(z.rangeByScore(40).length);",
                      "err": {},
                      "uuid": "208f0cc1-8d37-4436-b311-9b3f9fdd9753",
                      "parentUUID": "bc920f3e-0978-49ec-83be-a5b7c606d5f1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "208f0cc1-8d37-4436-b311-9b3f9fdd9753"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "ca36f839-8967-4c85-b78d-bc7e38ca01e5",
                  "title": "#range",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map #range should support special ranges",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"first\", 1);\nz.add(\"second\", 2);\nz.add(\"third\", 3);\nz.add(\"fourth\", 4);\nconst array = [\n    \"first\",\n    \"second\",\n    \"third\",\n    \"fourth\"\n];\n(0, chai_1.expect)(z.range()).to.eql(array);\n(0, chai_1.expect)(z.range(2)).to.eql(array.slice(2));\n(0, chai_1.expect)(z.range(8)).to.eql(array.slice(8));\n(0, chai_1.expect)(z.range(0, 2)).to.eql(array.slice(0, 3));\n(0, chai_1.expect)(z.range(-1)).to.eql([\"fourth\"]);\n(0, chai_1.expect)(z.range(-4)).to.eql(array);\n(0, chai_1.expect)(z.range(-4, -2)).to.eql(array.slice(0, 3));\n(0, chai_1.expect)(z.range(-4, z.length + 1000)).\n    to.eql(array.slice(-4, z.length + 1000));",
                      "err": {},
                      "uuid": "dffbf3f2-c639-4687-b8fa-6ee803f7d595",
                      "parentUUID": "ca36f839-8967-4c85-b78d-bc7e38ca01e5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should support withScores",
                      "fullTitle": "sorted-set test skip map #range should support withScores",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"first\", 1);\nz.add(\"second\", 2);\n(0, chai_1.expect)(z.range(0, 0, { \"withScores\": true })).\n    to.eql([\n    [\n        \"first\",\n        1\n    ]\n]);",
                      "err": {},
                      "uuid": "07971b13-8068-4c33-a42b-ff1a5a703d7a",
                      "parentUUID": "ca36f839-8967-4c85-b78d-bc7e38ca01e5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dffbf3f2-c639-4687-b8fa-6ee803f7d595",
                    "07971b13-8068-4c33-a42b-ff1a5a703d7a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "1a92dfde-24a6-45a3-a410-fb285e05360e",
                  "title": "#intersect",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should intersect two sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect two sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const a = new Z(), b = new Z();\na.add(\"5a600e10\", 16);\na.add(\"5a600e12\", 10);\na.add(\"5a600e14\", 9);\na.add(\"5a600e15\", 14);\na.add(\"5a600e17\", 20);\na.add(\"5a600e18\", 13);\na.add(\"5a600e19\", 15);\na.add(\"5a600e1a\", 19);\na.add(\"5a600e1b\", 7);\na.add(\"5a600e1c\", 13);\na.add(\"5a600e1e\", 10);\nb.add(\"5a600e10\", 0);\nb.add(\"5a600e11\", 15);\nb.add(\"5a600e13\", 5);\nb.add(\"5a600e14\", 3);\nb.add(\"5a600e15\", 14);\nb.add(\"5a600e17\", 12);\nb.add(\"5a600e19\", 12);\nb.add(\"5a600e1b\", 16);\nb.add(\"5a600e1c\", 12);\nb.add(\"5a600e1d\", 17);\nb.add(\"5a600e1f\", 3);\n(0, chai_1.expect)(Z.intersect(a, b)).to.eql([\n    \"5a600e10\",\n    \"5a600e14\",\n    \"5a600e17\",\n    \"5a600e19\",\n    \"5a600e1c\",\n    \"5a600e15\",\n    \"5a600e1b\"\n]);\n(0, chai_1.expect)(Z.intersect(b, a)).to.eql([\n    \"5a600e1b\",\n    \"5a600e14\",\n    \"5a600e1c\",\n    \"5a600e15\",\n    \"5a600e19\",\n    \"5a600e10\",\n    \"5a600e17\"\n]);",
                      "err": {},
                      "uuid": "c6c45266-81d6-40fb-948e-1db4dfee2119",
                      "parentUUID": "1a92dfde-24a6-45a3-a410-fb285e05360e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect three sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect three sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const a = new Z(), b = new Z(), c = new Z();\na.add(\"5a600e10\", 16);\na.add(\"5a600e12\", 10);\na.add(\"5a600e14\", 9);\na.add(\"5a600e15\", 14);\na.add(\"5a600e17\", 20);\na.add(\"5a600e18\", 13);\na.add(\"5a600e19\", 15);\na.add(\"5a600e1a\", 19);\na.add(\"5a600e1b\", 7);\na.add(\"5a600e1c\", 13);\na.add(\"5a600e1e\", 10);\nb.add(\"5a600e10\", 0);\nb.add(\"5a600e11\", 15);\nb.add(\"5a600e13\", 5);\nb.add(\"5a600e14\", 3);\nb.add(\"5a600e15\", 14);\nb.add(\"5a600e17\", 12);\nb.add(\"5a600e19\", 12);\nb.add(\"5a600e1b\", 16);\nb.add(\"5a600e1c\", 12);\nb.add(\"5a600e1d\", 17);\nb.add(\"5a600e1f\", 3);\nc.add(\"5a600e10\", 7);\nc.add(\"5a600e12\", 20);\nc.add(\"5a600e13\", 9);\nc.add(\"5a600e14\", 19);\nc.add(\"5a600e16\", 19);\nc.add(\"5a600e17\", 1);\nc.add(\"5a600e18\", 18);\nc.add(\"5a600e1a\", 6);\nc.add(\"5a600e1c\", 15);\nc.add(\"5a600e1f\", 4);\n(0, chai_1.expect)(Z.intersect(c, a, b)).to.eql([\n    \"5a600e10\",\n    \"5a600e14\",\n    \"5a600e17\",\n    \"5a600e1c\"\n]);\n(0, chai_1.expect)(Z.intersect(c, a, b)).to.eql(c.intersect(a, b));",
                      "err": {},
                      "uuid": "51217dcc-0365-4a3a-9e25-7bd404a9f561",
                      "parentUUID": "1a92dfde-24a6-45a3-a410-fb285e05360e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect four sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect four sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const a = new Z(), b = new Z(), c = new Z(), d = new Z();\na.add(\"5a600e10\", 16);\na.add(\"5a600e12\", 10);\na.add(\"5a600e14\", 9);\na.add(\"5a600e15\", 14);\na.add(\"5a600e17\", 20);\na.add(\"5a600e18\", 13);\na.add(\"5a600e19\", 15);\na.add(\"5a600e1a\", 19);\na.add(\"5a600e1b\", 7);\na.add(\"5a600e1c\", 13);\na.add(\"5a600e1e\", 10);\nb.add(\"5a600e10\", 0);\nb.add(\"5a600e11\", 15);\nb.add(\"5a600e13\", 5);\nb.add(\"5a600e14\", 3);\nb.add(\"5a600e15\", 14);\nb.add(\"5a600e17\", 12);\nb.add(\"5a600e19\", 12);\nb.add(\"5a600e1b\", 16);\nb.add(\"5a600e1c\", 12);\nb.add(\"5a600e1d\", 17);\nb.add(\"5a600e1f\", 3);\nc.add(\"5a600e10\", 7);\nc.add(\"5a600e12\", 20);\nc.add(\"5a600e13\", 9);\nc.add(\"5a600e14\", 19);\nc.add(\"5a600e16\", 19);\nc.add(\"5a600e17\", 1);\nc.add(\"5a600e18\", 18);\nc.add(\"5a600e1a\", 6);\nc.add(\"5a600e1c\", 15);\nc.add(\"5a600e1f\", 4);\nd.add(\"5a600e1c\", 400);\nd.add(\"5a600e17\", 500);\nd.add(\"5a600e1f\", 600);\nd.add(\"5a600e20\", 700);\n(0, chai_1.expect)(Z.intersect(d, c, a, b)).to.eql([\n    \"5a600e17\",\n    \"5a600e1c\"\n]);\n(0, chai_1.expect)(Z.intersect(d, c, a, b)).to.eql(d.intersect(c, a, b));",
                      "err": {},
                      "uuid": "c27fc526-c058-45ee-89f5-58d6b7312683",
                      "parentUUID": "1a92dfde-24a6-45a3-a410-fb285e05360e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c6c45266-81d6-40fb-948e-1db4dfee2119",
                    "51217dcc-0365-4a3a-9e25-7bd404a9f561",
                    "c27fc526-c058-45ee-89f5-58d6b7312683"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "efa1b4da-d870-4580-a682-40c1bbe67fba",
                  "title": "#rank",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should get the correct rank",
                      "fullTitle": "sorted-set test skip map #rank should get the correct rank",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.rank(\"5a600e12\")).to.equal(7);\n(0, chai_1.expect)(z.rank(\"5a600e13\")).to.equal(3);\n(0, chai_1.expect)(z.rank(\"5a600e16\")).to.equal(0);\n(0, chai_1.expect)(z.rank(\"5a600e15\")).to.equal(8);\n(0, chai_1.expect)(z.rank(\"not in set\")).to.equal(null);",
                      "err": {},
                      "uuid": "8cea47d6-b812-4e71-96d2-18788b704768",
                      "parentUUID": "efa1b4da-d870-4580-a682-40c1bbe67fba",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8cea47d6-b812-4e71-96d2-18788b704768"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "e413155f-2d3d-4ea8-b7e2-3247a24b44ae",
                  "title": "#rem",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should delete special elements",
                      "fullTitle": "sorted-set test skip map #rem should delete special elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.rem(\"5a600e15\")).to.equal(19);\n(0, chai_1.expect)(z).to.have.length(8);\n(0, chai_1.expect)(z.rem(\"5a600e16\")).to.equal(3);\n(0, chai_1.expect)(z).to.have.length(7);\n(0, chai_1.expect)(z.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e11\",\n        6\n    ],\n    [\n        \"5a600e18\",\n        10\n    ],\n    [\n        \"5a600e13\",\n        11\n    ],\n    [\n        \"5a600e17\",\n        12\n    ],\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ]\n]);",
                      "err": {},
                      "uuid": "1bff91be-645f-49c4-9eda-b99ec52b4e20",
                      "parentUUID": "e413155f-2d3d-4ea8-b7e2-3247a24b44ae",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should delete many elements",
                      "fullTitle": "sorted-set test skip map #rem should delete many elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.rem(\"5a600e11\")).to.equal(6);\n(0, chai_1.expect)(z.rem(\"5a600e13\")).to.equal(11);\n(0, chai_1.expect)(z.rem(\"5a600e14\")).to.equal(14);\n(0, chai_1.expect)(z.rem(\"5a600e15\")).to.equal(19);\n(0, chai_1.expect)(z.rem(\"5a600e16\")).to.equal(3);\n(0, chai_1.expect)(z.rem(\"5a600e17\")).to.equal(12);\n(0, chai_1.expect)(z.length).to.equal(3);\n(0, chai_1.expect)(z.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e18\",\n        10\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ]\n]);",
                      "err": {},
                      "uuid": "fec8d4b4-dd22-4739-83dc-578f55ce2bff",
                      "parentUUID": "e413155f-2d3d-4ea8-b7e2-3247a24b44ae",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1bff91be-645f-49c4-9eda-b99ec52b4e20",
                    "fec8d4b4-dd22-4739-83dc-578f55ce2bff"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "ae2a7967-1042-425e-ac15-3783587147f0",
                  "title": "#remRangeByScore",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a range of elements",
                      "fullTitle": "sorted-set test skip map #remRangeByScore should strip out a range of elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.remRangeByScore(4, 14)).to.equal(5);\n(0, chai_1.expect)(z).to.have.length(4);\n(0, chai_1.expect)(z.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);",
                      "err": {},
                      "uuid": "6036b8ae-11fd-40bc-a20a-f6e1e5b9337b",
                      "parentUUID": "ae2a7967-1042-425e-ac15-3783587147f0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all the elements",
                      "fullTitle": "sorted-set test skip map #remRangeByScore should strip out all the elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.remRangeByScore(3, 19)).to.equal(9);\n(0, chai_1.expect)(z).to.have.length(0);\n(0, chai_1.expect)(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "c7533886-96ec-419b-a042-f9b7df33d411",
                      "parentUUID": "ae2a7967-1042-425e-ac15-3783587147f0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6036b8ae-11fd-40bc-a20a-f6e1e5b9337b",
                    "c7533886-96ec-419b-a042-f9b7df33d411"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "25597e42-7a9f-431c-892d-069c0df7d578",
                  "title": "#remRangeByRank",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a slice of elements",
                      "fullTitle": "sorted-set test skip map #remRangeByRank should strip out a slice of elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.remRangeByRank(1, 6)).to.equal(5);\n(0, chai_1.expect)(z).to.have.length(4);\n(0, chai_1.expect)(z.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);",
                      "err": {},
                      "uuid": "6b998f39-6b40-4382-aa39-9873cb2bce1b",
                      "parentUUID": "25597e42-7a9f-431c-892d-069c0df7d578",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all elements",
                      "fullTitle": "sorted-set test skip map #remRangeByRank should strip out all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.remRangeByRank(0, 9)).to.equal(9);\n(0, chai_1.expect)(z).to.have.length(0);\n(0, chai_1.expect)(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "79bcd42c-d02d-4bc4-9d6f-3fc0a2bd9290",
                      "parentUUID": "25597e42-7a9f-431c-892d-069c0df7d578",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6b998f39-6b40-4382-aa39-9873cb2bce1b",
                    "79bcd42c-d02d-4bc4-9d6f-3fc0a2bd9290"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "87ead636-81b4-40ab-bff0-ceb829eebd0e",
                  "title": "#values",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the values",
                      "fullTitle": "sorted-set test skip map #values should return the values",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"first\", -1);\nz.add(\"third\", 5);\nz.add(\"second\", 3);\n(0, chai_1.expect)(z.values()).to.eql([\n    -1,\n    3,\n    5\n]);",
                      "err": {},
                      "uuid": "8cc932bb-d9f3-4803-8c4a-55fc8ac0ee3d",
                      "parentUUID": "87ead636-81b4-40ab-bff0-ceb829eebd0e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8cc932bb-d9f3-4803-8c4a-55fc8ac0ee3d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "f6d2de5b-08f5-4b18-9c16-c5cbcde0ff00",
                  "title": "unique",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should ensure values are unique",
                      "fullTitle": "sorted-set test skip map unique should ensure values are unique",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z({ \"unique\": true });\nassert.equal(z.keys().length, 0, \"Expected an empty SortedSet\");\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(() => {\n    z.add(\"5a600e19\", 11);\n}).to.throw(/unique/);\n// Quick exit test\n(0, chai_1.expect)(() => {\n    z.add(\"5a600dff\", z._head.next[z._level - 1].next.value);\n}).to.throw(/unique/);\n// This test ensures the key < key check doesn't come into play\n(0, chai_1.expect)(() => {\n    z.add(\"5a600dff\", 11);\n}).to.throw(/unique/);\n(0, chai_1.expect)(() => {\n    z.add(\"5a600e18\", 10);\n}).to.not.throw();\n(0, chai_1.expect)(z).to.have.length(9);\n(0, chai_1.expect)(z.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e11\",\n        6\n    ],\n    [\n        \"5a600e18\",\n        10\n    ],\n    [\n        \"5a600e13\",\n        11\n    ],\n    [\n        \"5a600e17\",\n        12\n    ],\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);",
                      "err": {},
                      "uuid": "8d03a988-9e7e-4dc7-86e6-d79e1b7a9d65",
                      "parentUUID": "f6d2de5b-08f5-4b18-9c16-c5cbcde0ff00",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert keys if constraint broken during update",
                      "fullTitle": "sorted-set test skip map unique should revert keys if constraint broken during update",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z({ \"unique\": true });\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(() => {\n    z.add(\"5a600e13\", 14);\n}).to.throw(/unique/);\n(0, chai_1.expect)(z).to.have.length(9);\n(0, chai_1.expect)(z.score(\"5a600e13\")).to.equal(11);",
                      "err": {},
                      "uuid": "eb935d9f-a5b4-4aea-a99c-04cc8645c428",
                      "parentUUID": "f6d2de5b-08f5-4b18-9c16-c5cbcde0ff00",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8d03a988-9e7e-4dc7-86e6-d79e1b7a9d65",
                    "eb935d9f-a5b4-4aea-a99c-04cc8645c428"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "f0fb172c-1e08-404e-86ce-93e80dd173b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "adec9268-a6d2-49bd-8c99-c7e6b93e3fe5",
              "title": "skip map rewrite",
              "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
              "file": "/test/resp/data/sorted-set.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should support basic operations",
                  "fullTitle": "sorted-set test skip map rewrite should support basic operations",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ss = new sorted_set_1.SortedSet();\n(0, chai_1.expect)(ss).to.have.length(0);\n(0, chai_1.expect)(ss.toArray()).to.eql([]);\n(0, chai_1.expect)(ss.range()).to.eql([]);\n(0, chai_1.expect)(ss.rangeByScore()).to.eql([]);\n/*\n * Expect(() => {\n *   Ss.add('__proto__', 14);\n * }).to.throw();\n */\nss.add(\"5a600e16\", 8);\nss.add(\"5a600e17\", 9);\n(0, chai_1.expect)(ss.add(\"5a600e18\", 10)).to.equal(null);\n(0, chai_1.expect)(ss.add(\"5a600e17\", 12)).to.equal(9);\n(0, chai_1.expect)(ss).to.have.length(3);\n(0, chai_1.expect)(ss.toArray()).to.eql([\n    \"5a600e16\",\n    \"5a600e18\",\n    \"5a600e17\"\n]);\n(0, chai_1.expect)(ss.toArray()).to.eql(ss.range(0, -1));\n(0, chai_1.expect)(ss.toArray()).to.eql(ss.rangeByScore());\n(0, chai_1.expect)(ss.has(\"5a600e16\")).to.be.ok;\n(0, chai_1.expect)(ss.has(\"5a600e17\")).to.be.ok;\n(0, chai_1.expect)(ss.has(\"5a600e18\")).to.be.ok;\n(0, chai_1.expect)(ss.has(\"5a600e19\")).to.not.be.ok;\n(0, chai_1.expect)(ss.score(\"5a600e16\")).to.equal(8);\n(0, chai_1.expect)(ss.score(\"5a600e17\")).to.equal(12);\n(0, chai_1.expect)(ss.score(\"5a600e18\")).to.equal(10);\n(0, chai_1.expect)(ss.score(\"5a600e19\")).to.equal(null);\n(0, chai_1.expect)(ss.rem(\"5a600e16\")).to.equal(8);\n(0, chai_1.expect)(ss).to.have.length(2);\n(0, chai_1.expect)(ss.rem(\"5a600e16\")).to.equal(null);\n(0, chai_1.expect)(ss).to.have.length(2);\n(0, chai_1.expect)(ss.has(\"5a600e16\")).to.not.be.ok;\n(0, chai_1.expect)(ss.toArray()).to.eql([\n    \"5a600e18\",\n    \"5a600e17\"\n]);\n(0, chai_1.expect)(ss.toArray({ \"withScores\": true })).\n    to.eql(ss.range(0, -1, { \"withScores\": true }));\n(0, chai_1.expect)(ss.toArray()).to.eql(ss.rangeByScore());\nss.add(\"5a600e16\", 10);\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\n(0, chai_1.expect)(ss).to.have.length(9);\n// No change, so should be O(1)\nss.add(\"5a600e17\", 12);\n(0, chai_1.expect)(ss.rank(\"5a600e17\")).to.equal(4);\n(0, chai_1.expect)(ss).to.have.length(9);\n(0, chai_1.expect)(ss.toArray()).to.eql([\n    \"5a600e16\",\n    \"5a600e11\",\n    \"5a600e18\",\n    \"5a600e13\",\n    \"5a600e17\",\n    \"5a600e14\",\n    \"5a600e10\",\n    \"5a600e12\",\n    \"5a600e15\"\n]);\n(0, chai_1.expect)(ss.toArray()).to.eql(ss.range(0, -1));\n(0, chai_1.expect)(ss.toArray()).to.eql(ss.rangeByScore());\n(0, chai_1.expect)(ss.rangeByScore(14, 16, { \"withScores\": true })).to.eql([\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ]\n]);",
                  "err": {},
                  "uuid": "339f14bd-0fee-4aa7-be15-9a5511d0baa7",
                  "parentUUID": "adec9268-a6d2-49bd-8c99-c7e6b93e3fe5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "2c15ef88-fcdb-437c-900c-c4db0d066f20",
                  "title": "#add",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should implicitly delete",
                      "fullTitle": "sorted-set test skip map rewrite #add should implicitly delete",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.add(\"5a600e14\", null)).to.equal(14);\n(0, chai_1.expect)(ss.add(\"5a600e19\", null)).to.equal(null);\n(0, chai_1.expect)(ss).to.have.length(8);",
                      "err": {},
                      "uuid": "d0bbe9ad-7c35-4695-8916-315c60f29239",
                      "parentUUID": "2c15ef88-fcdb-437c-900c-c4db0d066f20",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d0bbe9ad-7c35-4695-8916-315c60f29239"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "7d9bbb08-5003-4204-b56e-f7bd0420f5d6",
                  "title": "#empty",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should remove all elements",
                      "fullTitle": "sorted-set test skip map rewrite #empty should remove all elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\nss.empty();\n(0, chai_1.expect)(ss).to.have.length(0);\n(0, chai_1.expect)(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "3ae905bf-920b-4f3c-8587-4ba8ccd84711",
                      "parentUUID": "7d9bbb08-5003-4204-b56e-f7bd0420f5d6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3ae905bf-920b-4f3c-8587-4ba8ccd84711"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "4e187eef-7c75-43ec-9326-ceefea5e46af",
                  "title": "#incrBy(increment, key)",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should increase rank",
                      "fullTitle": "sorted-set test skip map rewrite #incrBy(increment, key) should increase rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"first\", 1);\nss.add(\"second\", 2);\nss.add(\"third\", 3);\nss.add(\"fourth\", 4);\n(0, chai_1.expect)(ss.incrBy(2, \"first\")).to.equal(3);\n(0, chai_1.expect)(ss.rank(\"first\")).to.equal(1);",
                      "err": {},
                      "uuid": "49f6bc62-5d51-4de1-bcfb-cd87a19d055d",
                      "parentUUID": "4e187eef-7c75-43ec-9326-ceefea5e46af",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should create if not found",
                      "fullTitle": "sorted-set test skip map rewrite #incrBy(increment, key) should create if not found",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"first\", 1);\nss.incrBy(2, \"second\");\n(0, chai_1.expect)(ss.card()).to.equal(2);\n(0, chai_1.expect)(ss.rank(\"second\")).to.equal(1);",
                      "err": {},
                      "uuid": "5c0e995a-190d-43a4-84b4-d8946e73cc20",
                      "parentUUID": "4e187eef-7c75-43ec-9326-ceefea5e46af",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "49f6bc62-5d51-4de1-bcfb-cd87a19d055d",
                    "5c0e995a-190d-43a4-84b4-d8946e73cc20"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "5e41aa8b-a2c2-4823-a25f-5a8d686272ab",
                  "title": "#keys",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the keys",
                      "fullTitle": "sorted-set test skip map rewrite #keys should return the keys",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.keys()).to.eql([\n    \"5a600e16\",\n    \"5a600e11\",\n    \"5a600e18\",\n    \"5a600e13\",\n    \"5a600e17\",\n    \"5a600e14\",\n    \"5a600e10\",\n    \"5a600e12\",\n    \"5a600e15\"\n]);",
                      "err": {},
                      "uuid": "d466921d-a078-4832-80b0-56aa7b913532",
                      "parentUUID": "5e41aa8b-a2c2-4823-a25f-5a8d686272ab",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d466921d-a078-4832-80b0-56aa7b913532"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "025d7119-6baa-4e9d-9dbc-9311b472b2b5",
                  "title": "#rangeByScore",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map rewrite #rangeByScore should support special ranges",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.rangeByScore(14, null, { \"withScores\": true })).to.eql([\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);\n(0, chai_1.expect)(ss.rangeByScore(null, 10, { \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e11\",\n        6\n    ],\n    [\n        \"5a600e18\",\n        10\n    ]\n]);\n(0, chai_1.expect)(ss.rangeByScore(-Infinity, Infinity)).to.eql(ss.toArray());\n(0, chai_1.expect)(ss.rangeByScore(null, null)).to.eql(ss.toArray());",
                      "err": {},
                      "uuid": "ade65c80-7d5c-4ce6-b54b-89a1f5cb94f5",
                      "parentUUID": "025d7119-6baa-4e9d-9dbc-9311b472b2b5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ade65c80-7d5c-4ce6-b54b-89a1f5cb94f5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "3f769df0-7a47-454d-b889-61cc55b4804f",
                  "title": "#count",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should count elements",
                      "fullTitle": "sorted-set test skip map rewrite #count should count elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\n(0, chai_1.expect)(ss.count()).to.equal(0);\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\nss.add(\"5a600e19\", 14);\nss.add(\"5a600f00\", 30.0);\nss.add(\"5a600f01\", 30.5);\nss.add(\"5a600f02\", 31.0);\nss.add(\"5a600f03\", 31.5);\nss.add(\"5a600f04\", 32.0);\nss.add(\"5a600f05\", 32.0);\nss.add(\"5a600f06\", 32.0);\n(0, chai_1.expect)(ss.count()).to.eql(ss.rangeByScore().length);\n(0, chai_1.expect)(ss.count(8)).to.eql(ss.rangeByScore(8).length);\n(0, chai_1.expect)(ss.count(3, 7)).to.eql(ss.rangeByScore(3, 7).length);\n(0, chai_1.expect)(ss.count(5, 14)).to.eql(ss.rangeByScore(5, 14).length);\n(0, chai_1.expect)(ss.count(5, 5)).to.eql(ss.rangeByScore(5, 5).length);\n(0, chai_1.expect)(ss.count(5, 0)).to.eql(ss.rangeByScore(5, 0).length);\n(0, chai_1.expect)(ss.count(30, 32)).to.eql(ss.rangeByScore(30, 32).length);\n(0, chai_1.expect)(ss.count(40)).to.eql(ss.rangeByScore(40).length);",
                      "err": {},
                      "uuid": "21b8c5c9-b459-4c06-ad40-b2952bf1445f",
                      "parentUUID": "3f769df0-7a47-454d-b889-61cc55b4804f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "21b8c5c9-b459-4c06-ad40-b2952bf1445f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "5150a4f9-4c27-49aa-bbe4-6b90e79bd15a",
                  "title": "#range",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map rewrite #range should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"first\", 1);\nss.add(\"second\", 2);\nss.add(\"third\", 3);\nss.add(\"fourth\", 4);\nconst array = [\n    \"first\",\n    \"second\",\n    \"third\",\n    \"fourth\"\n];\n(0, chai_1.expect)(ss.range()).to.eql(array);\n(0, chai_1.expect)(ss.range(2)).to.eql(array.slice(2));\n(0, chai_1.expect)(ss.range(8)).to.eql(array.slice(8));\n(0, chai_1.expect)(ss.range(0, 2)).to.eql(array.slice(0, 3));\n(0, chai_1.expect)(ss.range(-1)).to.eql([\"fourth\"]);\n(0, chai_1.expect)(ss.range(-4)).to.eql(array);\n(0, chai_1.expect)(ss.range(-4, -2)).to.eql(array.slice(0, 3));\n(0, chai_1.expect)(ss.range(-4, ss.length + 1000)).\n    to.eql(array.slice(-4, ss.length + 1000));",
                      "err": {},
                      "uuid": "0bc5415e-faf0-4f09-bb33-d4b41b828473",
                      "parentUUID": "5150a4f9-4c27-49aa-bbe4-6b90e79bd15a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should support withScores",
                      "fullTitle": "sorted-set test skip map rewrite #range should support withScores",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"first\", 1);\nss.add(\"second\", 2);\n(0, chai_1.expect)(ss.range(0, 0, { \"withScores\": true })).\n    to.eql([\n    [\n        \"first\",\n        1\n    ]\n]);",
                      "err": {},
                      "uuid": "56a15d03-d937-4af4-a2fb-dd4eaf8ee080",
                      "parentUUID": "5150a4f9-4c27-49aa-bbe4-6b90e79bd15a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0bc5415e-faf0-4f09-bb33-d4b41b828473",
                    "56a15d03-d937-4af4-a2fb-dd4eaf8ee080"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "43467541-ee0a-4091-9223-8c0b9dba938d",
                  "title": "#intersect",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should intersect two sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect two sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet();\na.add(\"5a600e10\", 16);\na.add(\"5a600e12\", 10);\na.add(\"5a600e14\", 9);\na.add(\"5a600e15\", 14);\na.add(\"5a600e17\", 20);\na.add(\"5a600e18\", 13);\na.add(\"5a600e19\", 15);\na.add(\"5a600e1a\", 19);\na.add(\"5a600e1b\", 7);\na.add(\"5a600e1c\", 13);\na.add(\"5a600e1e\", 10);\nb.add(\"5a600e10\", 0);\nb.add(\"5a600e11\", 15);\nb.add(\"5a600e13\", 5);\nb.add(\"5a600e14\", 3);\nb.add(\"5a600e15\", 14);\nb.add(\"5a600e17\", 12);\nb.add(\"5a600e19\", 12);\nb.add(\"5a600e1b\", 16);\nb.add(\"5a600e1c\", 12);\nb.add(\"5a600e1d\", 17);\nb.add(\"5a600e1f\", 3);\n(0, chai_1.expect)(sorted_set_1.SortedSet.intersect(a, b)).to.eql([\n    \"5a600e10\",\n    \"5a600e14\",\n    \"5a600e17\",\n    \"5a600e19\",\n    \"5a600e1c\",\n    \"5a600e15\",\n    \"5a600e1b\"\n]);\n(0, chai_1.expect)(sorted_set_1.SortedSet.intersect(b, a)).to.eql([\n    \"5a600e1b\",\n    \"5a600e14\",\n    \"5a600e1c\",\n    \"5a600e15\",\n    \"5a600e19\",\n    \"5a600e10\",\n    \"5a600e17\"\n]);",
                      "err": {},
                      "uuid": "d92a168e-d6f6-445f-8fd2-126a4e72141a",
                      "parentUUID": "43467541-ee0a-4091-9223-8c0b9dba938d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect three sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect three sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet(), c = new sorted_set_1.SortedSet();\na.add(\"5a600e10\", 16);\na.add(\"5a600e12\", 10);\na.add(\"5a600e14\", 9);\na.add(\"5a600e15\", 14);\na.add(\"5a600e17\", 20);\na.add(\"5a600e18\", 13);\na.add(\"5a600e19\", 15);\na.add(\"5a600e1a\", 19);\na.add(\"5a600e1b\", 7);\na.add(\"5a600e1c\", 13);\na.add(\"5a600e1e\", 10);\nb.add(\"5a600e10\", 0);\nb.add(\"5a600e11\", 15);\nb.add(\"5a600e13\", 5);\nb.add(\"5a600e14\", 3);\nb.add(\"5a600e15\", 14);\nb.add(\"5a600e17\", 12);\nb.add(\"5a600e19\", 12);\nb.add(\"5a600e1b\", 16);\nb.add(\"5a600e1c\", 12);\nb.add(\"5a600e1d\", 17);\nb.add(\"5a600e1f\", 3);\nc.add(\"5a600e10\", 7);\nc.add(\"5a600e12\", 20);\nc.add(\"5a600e13\", 9);\nc.add(\"5a600e14\", 19);\nc.add(\"5a600e16\", 19);\nc.add(\"5a600e17\", 1);\nc.add(\"5a600e18\", 18);\nc.add(\"5a600e1a\", 6);\nc.add(\"5a600e1c\", 15);\nc.add(\"5a600e1f\", 4);\n(0, chai_1.expect)(sorted_set_1.SortedSet.intersect(c, a, b)).to.eql([\n    \"5a600e10\",\n    \"5a600e14\",\n    \"5a600e17\",\n    \"5a600e1c\"\n]);\n// Expect(SortedSet.intersect(c, a, b)).to.eql(c.intersect(a, b));",
                      "err": {},
                      "uuid": "d0268a79-5251-4231-8cf8-98894029c172",
                      "parentUUID": "43467541-ee0a-4091-9223-8c0b9dba938d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect four sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect four sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet(), c = new sorted_set_1.SortedSet(), d = new sorted_set_1.SortedSet();\na.add(\"5a600e10\", 16);\na.add(\"5a600e12\", 10);\na.add(\"5a600e14\", 9);\na.add(\"5a600e15\", 14);\na.add(\"5a600e17\", 20);\na.add(\"5a600e18\", 13);\na.add(\"5a600e19\", 15);\na.add(\"5a600e1a\", 19);\na.add(\"5a600e1b\", 7);\na.add(\"5a600e1c\", 13);\na.add(\"5a600e1e\", 10);\nb.add(\"5a600e10\", 0);\nb.add(\"5a600e11\", 15);\nb.add(\"5a600e13\", 5);\nb.add(\"5a600e14\", 3);\nb.add(\"5a600e15\", 14);\nb.add(\"5a600e17\", 12);\nb.add(\"5a600e19\", 12);\nb.add(\"5a600e1b\", 16);\nb.add(\"5a600e1c\", 12);\nb.add(\"5a600e1d\", 17);\nb.add(\"5a600e1f\", 3);\nc.add(\"5a600e10\", 7);\nc.add(\"5a600e12\", 20);\nc.add(\"5a600e13\", 9);\nc.add(\"5a600e14\", 19);\nc.add(\"5a600e16\", 19);\nc.add(\"5a600e17\", 1);\nc.add(\"5a600e18\", 18);\nc.add(\"5a600e1a\", 6);\nc.add(\"5a600e1c\", 15);\nc.add(\"5a600e1f\", 4);\nd.add(\"5a600e1c\", 400);\nd.add(\"5a600e17\", 500);\nd.add(\"5a600e1f\", 600);\nd.add(\"5a600e20\", 700);\n(0, chai_1.expect)(sorted_set_1.SortedSet.intersect(d, c, a, b)).to.eql([\n    \"5a600e17\",\n    \"5a600e1c\"\n]);\n// Expect(SortedSet.intersect(d, c, a, b)).to.eql(d.intersect(c, a, b));",
                      "err": {},
                      "uuid": "3fda143e-ffbe-4785-8228-9d2790fea132",
                      "parentUUID": "43467541-ee0a-4091-9223-8c0b9dba938d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d92a168e-d6f6-445f-8fd2-126a4e72141a",
                    "d0268a79-5251-4231-8cf8-98894029c172",
                    "3fda143e-ffbe-4785-8228-9d2790fea132"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a61baf3d-ebd9-4876-b9a6-26263fe9309b",
                  "title": "#rank",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should get the correct rank",
                      "fullTitle": "sorted-set test skip map rewrite #rank should get the correct rank",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.rank(\"5a600e12\")).to.equal(7);\n(0, chai_1.expect)(ss.rank(\"5a600e13\")).to.equal(3);\n(0, chai_1.expect)(ss.rank(\"5a600e16\")).to.equal(0);\n(0, chai_1.expect)(ss.rank(\"5a600e15\")).to.equal(8);\n(0, chai_1.expect)(ss.rank(\"not in set\")).to.equal(null);",
                      "err": {},
                      "uuid": "c4504188-8faa-4934-9882-0aaf12b3ea0b",
                      "parentUUID": "a61baf3d-ebd9-4876-b9a6-26263fe9309b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c4504188-8faa-4934-9882-0aaf12b3ea0b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "4a1d407b-20e2-455d-82df-fb5e3a5f6ad9",
                  "title": "#rem",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should delete special elements",
                      "fullTitle": "sorted-set test skip map rewrite #rem should delete special elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.rem(\"5a600e15\")).to.equal(19);\n(0, chai_1.expect)(ss).to.have.length(8);\n(0, chai_1.expect)(ss.rem(\"5a600e16\")).to.equal(3);\n(0, chai_1.expect)(ss).to.have.length(7);\n(0, chai_1.expect)(ss.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e11\",\n        6\n    ],\n    [\n        \"5a600e18\",\n        10\n    ],\n    [\n        \"5a600e13\",\n        11\n    ],\n    [\n        \"5a600e17\",\n        12\n    ],\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ]\n]);",
                      "err": {},
                      "uuid": "d9da06a5-d230-4763-a439-452f7baa9869",
                      "parentUUID": "4a1d407b-20e2-455d-82df-fb5e3a5f6ad9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should delete many elements",
                      "fullTitle": "sorted-set test skip map rewrite #rem should delete many elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.rem(\"5a600e11\")).to.equal(6);\n(0, chai_1.expect)(ss.rem(\"5a600e13\")).to.equal(11);\n(0, chai_1.expect)(ss.rem(\"5a600e14\")).to.equal(14);\n(0, chai_1.expect)(ss.rem(\"5a600e15\")).to.equal(19);\n(0, chai_1.expect)(ss.rem(\"5a600e16\")).to.equal(3);\n(0, chai_1.expect)(ss.rem(\"5a600e17\")).to.equal(12);\n(0, chai_1.expect)(ss.length).to.equal(3);\n(0, chai_1.expect)(ss.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e18\",\n        10\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ]\n]);",
                      "err": {},
                      "uuid": "e55c2573-6ce0-4685-8f67-4177d71f34f8",
                      "parentUUID": "4a1d407b-20e2-455d-82df-fb5e3a5f6ad9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d9da06a5-d230-4763-a439-452f7baa9869",
                    "e55c2573-6ce0-4685-8f67-4177d71f34f8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "6506779e-ed99-4edc-80b7-e2113da72fa4",
                  "title": "#remRangeByScore",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a range of elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByScore should strip out a range of elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.remRangeByScore(4, 14)).to.equal(5);\n(0, chai_1.expect)(ss).to.have.length(4);\n(0, chai_1.expect)(ss.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);",
                      "err": {},
                      "uuid": "f92cc83f-6786-4eec-b0ee-67da93f7d58f",
                      "parentUUID": "6506779e-ed99-4edc-80b7-e2113da72fa4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all the elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByScore should strip out all the elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.remRangeByScore(3, 19)).to.equal(9);\n(0, chai_1.expect)(ss).to.have.length(0);\n(0, chai_1.expect)(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "13bf3abf-5468-4124-865b-2a1c410f7db3",
                      "parentUUID": "6506779e-ed99-4edc-80b7-e2113da72fa4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f92cc83f-6786-4eec-b0ee-67da93f7d58f",
                    "13bf3abf-5468-4124-865b-2a1c410f7db3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "6b2b0869-9679-4cfa-aa40-a2bc0bb43432",
                  "title": "#remRangeByRank",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a slice of elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByRank should strip out a slice of elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.remRangeByRank(1, 6)).to.equal(5);\n(0, chai_1.expect)(ss).to.have.length(4);\n(0, chai_1.expect)(ss.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);",
                      "err": {},
                      "uuid": "3a4a0b2e-2223-4a33-8976-8c6573dd15e5",
                      "parentUUID": "6b2b0869-9679-4cfa-aa40-a2bc0bb43432",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByRank should strip out all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.remRangeByRank(0, 9)).to.equal(9);\n(0, chai_1.expect)(ss).to.have.length(0);\n(0, chai_1.expect)(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "4fd1ff16-7f7f-486c-af77-766d6ebc8f67",
                      "parentUUID": "6b2b0869-9679-4cfa-aa40-a2bc0bb43432",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3a4a0b2e-2223-4a33-8976-8c6573dd15e5",
                    "4fd1ff16-7f7f-486c-af77-766d6ebc8f67"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "41eca259-5df7-4e33-a150-c42802e0aaf8",
                  "title": "#values",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the values",
                      "fullTitle": "sorted-set test skip map rewrite #values should return the values",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"first\", -1);\nss.add(\"third\", 5);\nss.add(\"second\", 3);\n(0, chai_1.expect)(ss.values()).to.eql([\n    -1,\n    3,\n    5\n]);",
                      "err": {},
                      "uuid": "a40aae03-0837-4cda-bbac-199f7d9c2c1b",
                      "parentUUID": "41eca259-5df7-4e33-a150-c42802e0aaf8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a40aae03-0837-4cda-bbac-199f7d9c2c1b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "8cb90dff-315c-48de-93dd-440affbb1bb7",
                  "title": "unique rewrite",
                  "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should ensure values are unique",
                      "fullTitle": "sorted-set test skip map rewrite unique rewrite should ensure values are unique",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const options = { \"unique\": true }, ss = new sorted_set_1.SortedSet(options);\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(() => {\n    ss.add(\"5a600e19\", 11);\n}).to.throw(/unique/);\n// Quick exit test\n(0, chai_1.expect)(() => {\n    ss.add(\"5a600dff\", ss._head.next[ss._level - 1].next.value);\n}).to.throw(/unique/);\n// This test ensures the key < key check doesn't come into play\n(0, chai_1.expect)(() => {\n    ss.add(\"5a600dff\", 11);\n}).to.throw(/unique/);\n(0, chai_1.expect)(() => {\n    ss.add(\"5a600e18\", 10);\n}).to.not.throw();\n(0, chai_1.expect)(ss).to.have.length(9);\n(0, chai_1.expect)(ss.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e11\",\n        6\n    ],\n    [\n        \"5a600e18\",\n        10\n    ],\n    [\n        \"5a600e13\",\n        11\n    ],\n    [\n        \"5a600e17\",\n        12\n    ],\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);",
                      "err": {},
                      "uuid": "99501e4f-67e1-4f65-ba16-9a2417cf5085",
                      "parentUUID": "8cb90dff-315c-48de-93dd-440affbb1bb7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert keys if constraint broken during update",
                      "fullTitle": "sorted-set test skip map rewrite unique rewrite should revert keys if constraint broken during update",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet({ \"unique\": true });\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(() => {\n    ss.add(\"5a600e13\", 14);\n}).to.throw(/unique/);\n(0, chai_1.expect)(ss).to.have.length(9);\n(0, chai_1.expect)(ss.score(\"5a600e13\")).to.equal(11);",
                      "err": {},
                      "uuid": "f91d6d86-cff9-4629-ae0d-55602c44c0d9",
                      "parentUUID": "8cb90dff-315c-48de-93dd-440affbb1bb7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "99501e4f-67e1-4f65-ba16-9a2417cf5085",
                    "f91d6d86-cff9-4629-ae0d-55602c44c0d9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "339f14bd-0fee-4aa7-be15-9a5511d0baa7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "9d8bfd36-2617-4d69-a51e-05377d3427ff",
            "b3f10d64-ee0d-434a-8ae9-79c3a8532aa2",
            "64b18d20-2b18-49c6-ac68-0a01a7d5919e",
            "d439ae06-91f0-48e6-8529-bf86c383107f",
            "c472604c-a0d3-405b-83ce-b136a805eef0",
            "1a811aab-c838-42b9-8821-d59a3211cf37",
            "73c2c258-2ee1-4156-84a1-d6b62ec04cad",
            "a681174d-8eb2-491a-a376-4ea53472a203"
          ],
          "failures": [],
          "pending": [
            "82d4a3b5-ba1d-4357-88b2-918eb9b0f879"
          ],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5e5e6c45-f0b3-4be8-a566-290644cf3377",
          "title": "lua-bit test",
          "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/lua/lua-bit.test.ts",
          "file": "/test/lua/lua-bit.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"lua-bit test\"",
              "fullTitle": "lua-bit test \"before all\" hook in \"lua-bit test\"",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on(\"ready\", () => __awaiter(void 0, void 0, void 0, function* () {\n    yield (0, common_test_1.sendCommand)(client, [\"flushall\"]);\n    yield (0, common_test_1.sendCommand)(client, [\n        \"select\",\n        \"0\"\n    ]);\n    yield (0, common_test_1.sendCommand)(client, [\n        \"script\",\n        \"flush\"\n    ]);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "ac4c891c-3a8e-44bb-afd3-5e46003e2a9b",
              "parentUUID": "5e5e6c45-f0b3-4be8-a566-290644cf3377",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"lua-bit test\"",
              "fullTitle": "lua-bit test \"before each\" hook in \"lua-bit test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "19e644b0-f934-47ee-9c91-5306f57f06eb",
              "parentUUID": "5e5e6c45-f0b3-4be8-a566-290644cf3377",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"lua-bit test\"",
              "fullTitle": "lua-bit test \"after all\" hook in \"lua-bit test\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "61b8658c-618d-47f0-a34c-fc4e0281f00e",
              "parentUUID": "5e5e6c45-f0b3-4be8-a566-290644cf3377",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"lua-bit test\"",
              "fullTitle": "lua-bit test \"after each\" hook in \"lua-bit test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a940cc7e-81ae-467c-9cb2-79d4ddcdea73",
              "parentUUID": "5e5e6c45-f0b3-4be8-a566-290644cf3377",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should leverage the LUA bit library for bit AND op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit AND op",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = bit.band(5, 1) return val \",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "a903b785-56e2-4e80-86f6-6843d73e56b2",
              "parentUUID": "5e5e6c45-f0b3-4be8-a566-290644cf3377",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit OR op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit OR op",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = bit.bor(5, 1) return val \",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(5);\n    })",
              "err": {},
              "uuid": "b9273f8c-21dc-4b92-9ebf-969ee0af8a07",
              "parentUUID": "5e5e6c45-f0b3-4be8-a566-290644cf3377",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit XOR op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit XOR op",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = bit.bxor(5, 1) return val \",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(4);\n    })",
              "err": {},
              "uuid": "ee58b01c-f8ce-4ced-bdf8-1e1850ecd439",
              "parentUUID": "5e5e6c45-f0b3-4be8-a566-290644cf3377",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit NOT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit NOT op",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = bit.bnot(5) return val \",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(-6);\n    })",
              "err": {},
              "uuid": "696e64ad-51d7-4319-8100-4b78b84ec036",
              "parentUUID": "5e5e6c45-f0b3-4be8-a566-290644cf3377",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit LSHIFT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit LSHIFT op",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = bit.lshift(5, 1) return val \",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(10);\n    })",
              "err": {},
              "uuid": "dc5d253a-38ab-40e5-b602-78d0475988c1",
              "parentUUID": "5e5e6c45-f0b3-4be8-a566-290644cf3377",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit RSHIFT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit RSHIFT op",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield (0, common_test_1.sendCommand)(new net.Socket(), [\n            \"info\",\n            \"server\"\n        ]);\n        // Only run this test if this is unit-redis-ness\n        if (!(/redis_version:5/gim).test(response)) {\n            response = yield (0, common_test_1.sendCommand)(client, [\n                \"eval\",\n                \"local val = bit.rshift(-5, 1) return val \",\n                \"0\"\n            ]);\n            (0, chai_1.expect)(response).to.equal(-3);\n        }\n    })",
              "err": {},
              "uuid": "f64a61f8-9b6b-4b24-9d78-6b4c43522b0b",
              "parentUUID": "5e5e6c45-f0b3-4be8-a566-290644cf3377",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit ARSHIFT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit ARSHIFT op",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = bit.arshift(5, 1) return val \",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(2);\n    })",
              "err": {},
              "uuid": "6740893c-be93-4684-8dff-683a7046e136",
              "parentUUID": "5e5e6c45-f0b3-4be8-a566-290644cf3377",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a903b785-56e2-4e80-86f6-6843d73e56b2",
            "b9273f8c-21dc-4b92-9ebf-969ee0af8a07",
            "ee58b01c-f8ce-4ced-bdf8-1e1850ecd439",
            "696e64ad-51d7-4319-8100-4b78b84ec036",
            "dc5d253a-38ab-40e5-b602-78d0475988c1",
            "f64a61f8-9b6b-4b24-9d78-6b4c43522b0b",
            "6740893c-be93-4684-8dff-683a7046e136"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 37,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e66a3892-ce2f-4387-9061-fec480c9925c",
          "title": "dictionary test",
          "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/dictionary.test.ts",
          "file": "/test/dictionary.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"dictionary test\"",
              "fullTitle": "dictionary test \"before each\" hook in \"dictionary test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dictionary = new dictionary_1.Dictionary();\nsinon.createSandbox();",
              "err": {},
              "uuid": "926b29a1-373f-4be2-8653-adeb8f5ec422",
              "parentUUID": "e66a3892-ce2f-4387-9061-fec480c9925c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"dictionary test\"",
              "fullTitle": "dictionary test \"after all\" hook in \"dictionary test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "243249fd-b063-4e3a-9b40-b6b741d1176b",
              "parentUUID": "e66a3892-ce2f-4387-9061-fec480c9925c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"dictionary test\"",
              "fullTitle": "dictionary test \"after each\" hook in \"dictionary test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "2e3b5ef1-260e-475f-8bcb-6b1a12d486ce",
              "parentUUID": "e66a3892-ce2f-4387-9061-fec480c9925c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should construct",
              "fullTitle": "dictionary test should construct",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        (0, chai_1.expect)(dictionary.constructor.name).to.equal(\"Dictionary\");\n    })",
              "err": {},
              "uuid": "53aef074-2352-4fa9-bb82-79ed5c176f2b",
              "parentUUID": "e66a3892-ce2f-4387-9061-fec480c9925c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should implement basic put/get/remove/size/clear/contains/exists/keys/values functionality",
              "fullTitle": "dictionary test should implement basic put/get/remove/size/clear/contains/exists/keys/values functionality",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dictionary.put(\"item\", \"one\");\n(0, chai_1.expect)(dictionary.exists(\"item\")).to.equal(true);\n(0, chai_1.expect)(dictionary.exists(\"one\")).to.equal(false);\n(0, chai_1.expect)(dictionary.get(\"item\")).to.equal(\"one\");\n(0, chai_1.expect)(dictionary.size()).to.equal(1);\n(0, chai_1.expect)(dictionary.contains(\"one\")).to.equal(true);\n(0, chai_1.expect)(dictionary.keys().length).to.equal(1);\n(0, chai_1.expect)(dictionary.values().length).to.equal(1);\ndictionary.put(\"item\", \"two\");\n(0, chai_1.expect)(dictionary.get(\"item\")).to.equal(\"two\");\ndictionary.put(\"one\", { \"embedded\": true });\ndictionary.remove(\"three\");\n(0, chai_1.expect)(dictionary.size()).to.equal(2);\nlet foundTwo = false;\nfor (const each of dictionary) {\n    if (!foundTwo) {\n        (0, chai_1.expect)(each).to.equal(\"two\");\n        foundTwo = true;\n    }\n    else {\n        (0, chai_1.expect)(each).to.eql({ \"embedded\": true });\n    }\n}\ndictionary.remove(\"item\");\n(0, chai_1.expect)(dictionary.size()).to.equal(1);\ndictionary.clear();\n(0, chai_1.expect)(dictionary.size()).to.equal(0);",
              "err": {},
              "uuid": "4a675359-7a87-40ef-a1fe-2975cb8d48e9",
              "parentUUID": "e66a3892-ce2f-4387-9061-fec480c9925c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "53aef074-2352-4fa9-bb82-79ed5c176f2b",
            "4a675359-7a87-40ef-a1fe-2975cb8d48e9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3c8bbab9-6a66-4377-a534-c8fe6a5ec293",
          "title": "logger test",
          "fullFile": "/mnt/tuscawilla/git/unit-redis-ness/test/logger.test.ts",
          "file": "/test/logger.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"logger test\"",
              "fullTitle": "logger test \"before each\" hook in \"logger test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "4912c5a8-7cee-4c36-9e0c-716c3d56d0bb",
              "parentUUID": "3c8bbab9-6a66-4377-a534-c8fe6a5ec293",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"logger test\"",
              "fullTitle": "logger test \"after all\" hook in \"logger test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "a7f564b7-3113-43a1-965b-f3da3baf8e50",
              "parentUUID": "3c8bbab9-6a66-4377-a534-c8fe6a5ec293",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"logger test\"",
              "fullTitle": "logger test \"after each\" hook in \"logger test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "f7ab3013-6ad0-4bcb-82c7-96f2bd57cda8",
              "parentUUID": "3c8bbab9-6a66-4377-a534-c8fe6a5ec293",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should construct",
              "fullTitle": "logger test should construct",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        logger = new logger_1.Logger(module.id);\n        (0, chai_1.expect)(logger.constructor.name).to.equal(\"Logger\");\n        logger.info(\"This is an info message\");\n        logger.warn(\"This is a warning message\");\n        logger.debug(\"This is an invisible debug message\");\n    })",
              "err": {},
              "uuid": "81f2637b-c527-4449-aa0f-de935ca380bd",
              "parentUUID": "3c8bbab9-6a66-4377-a534-c8fe6a5ec293",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not construct when initialized with an empty string",
              "fullTitle": "logger test should not construct when initialized with an empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, chai_1.expect)(() => {\n    logger = new logger_1.Logger(\"\");\n}).to.throw();",
              "err": {},
              "uuid": "da1c0f41-3840-489b-b043-b138f4770160",
              "parentUUID": "3c8bbab9-6a66-4377-a534-c8fe6a5ec293",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "81f2637b-c527-4449-aa0f-de935ca380bd",
            "da1c0f41-3840-489b-b043-b138f4770160"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "docs/mochawesome"
      },
      "version": "6.2.0"
    }
  }
}