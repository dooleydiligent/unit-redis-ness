{
  "stats": {
    "suites": 57,
    "tests": 172,
    "passes": 171,
    "pending": 1,
    "failures": 0,
    "start": "2020-01-10T18:51:39.676Z",
    "end": "2020-01-10T18:51:42.642Z",
    "duration": 2966,
    "testsRegistered": 172,
    "passPercent": 100,
    "pendingPercent": 0.5813953488372093,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "eddc4216-ba73-43e7-8fb8-061eb90b73d3",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook",
          "fullTitle": "\"before all\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "done();",
          "err": {},
          "uuid": "7f887c0c-c2cd-4a08-abce-f78a00873dcf",
          "parentUUID": "eddc4216-ba73-43e7-8fb8-061eb90b73d3",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook",
          "fullTitle": "\"after all\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "__awaiter(void 0, void 0, void 0, function* () {\n})",
          "err": {},
          "uuid": "4c5b9f4d-af3c-43cf-ba35-6e8b74a1bfe7",
          "parentUUID": "eddc4216-ba73-43e7-8fb8-061eb90b73d3",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "f64a5656-a38c-4348-a5b5-c9eadce272ff",
          "title": "dictionary test",
          "fullFile": "/home/lane/git/redis/test/dictionary.test.ts",
          "file": "/test/dictionary.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "dictionary test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dictionary = new dictionary_1.Dictionary();\nsinon.createSandbox();",
              "err": {},
              "uuid": "533625d6-9a2e-4ee6-8198-ed1f518cf91f",
              "parentUUID": "f64a5656-a38c-4348-a5b5-c9eadce272ff",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "dictionary test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "080be802-e315-4d13-b5bf-cdf682ab64ae",
              "parentUUID": "f64a5656-a38c-4348-a5b5-c9eadce272ff",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "dictionary test \"after each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "dcd3293a-66e3-427a-8d22-d76c389aaef2",
              "parentUUID": "f64a5656-a38c-4348-a5b5-c9eadce272ff",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should construct",
              "fullTitle": "dictionary test should construct",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        chai_1.expect(dictionary.constructor.name).to.equal('Dictionary');\n    })",
              "err": {},
              "uuid": "b48603f2-5776-4f40-bb7c-a1c5ea934acb",
              "parentUUID": "f64a5656-a38c-4348-a5b5-c9eadce272ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should implement basic put/get/remove/size/clear/contains/exists/keys/values functionality",
              "fullTitle": "dictionary test should implement basic put/get/remove/size/clear/contains/exists/keys/values functionality",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dictionary.put('item', 'one');\nchai_1.expect(dictionary.exists('item')).to.equal(true);\nchai_1.expect(dictionary.exists('one')).to.equal(false);\nchai_1.expect(dictionary.get('item')).to.equal('one');\nchai_1.expect(dictionary.size()).to.equal(1);\nchai_1.expect(dictionary.contains('one')).to.equal(true);\nchai_1.expect(dictionary.keys().length).to.equal(1);\nchai_1.expect(dictionary.values().length).to.equal(1);\ndictionary.put('item', 'two');\nchai_1.expect(dictionary.get('item')).to.equal('two');\ndictionary.put('one', { embedded: true });\ndictionary.remove('three');\nchai_1.expect(dictionary.size()).to.equal(2);\nlet foundTwo = false;\nfor (const each of dictionary) {\n    if (!foundTwo) {\n        chai_1.expect(each).to.equal('two');\n        foundTwo = true;\n    }\n    else {\n        chai_1.expect(each).to.eql({ embedded: true });\n    }\n}\ndictionary.remove('item');\nchai_1.expect(dictionary.size()).to.equal(1);\ndictionary.clear();\nchai_1.expect(dictionary.size()).to.equal(0);",
              "err": {},
              "uuid": "483f4755-7e44-4ac6-8f4e-4fe04fc8dfa0",
              "parentUUID": "f64a5656-a38c-4348-a5b5-c9eadce272ff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b48603f2-5776-4f40-bb7c-a1c5ea934acb",
            "483f4755-7e44-4ac6-8f4e-4fe04fc8dfa0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e5e3b102-b208-4c67-a0df-3c880076fce2",
          "title": "logger test",
          "fullFile": "/home/lane/git/redis/test/logger.test.ts",
          "file": "/test/logger.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "logger test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "16428cf7-2cce-40a7-8330-910aeacf3aac",
              "parentUUID": "e5e3b102-b208-4c67-a0df-3c880076fce2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "logger test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "332de895-50a9-4282-b871-805ffe206485",
              "parentUUID": "e5e3b102-b208-4c67-a0df-3c880076fce2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "logger test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "465c36f6-eb6d-4028-a348-3701012a2930",
              "parentUUID": "e5e3b102-b208-4c67-a0df-3c880076fce2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should construct",
              "fullTitle": "logger test should construct",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        logger = new logger_1.Logger(module.id);\n        chai_1.expect(logger.constructor.name).to.equal('Logger');\n        logger.info(`This is an info message`);\n        logger.warn('This is a warning message');\n        logger.debug(`This is an invisible debug message`);\n    })",
              "err": {},
              "uuid": "32755bb8-2dc0-449b-8c9d-aa036a19b6af",
              "parentUUID": "e5e3b102-b208-4c67-a0df-3c880076fce2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not construct when initialized with an empty string",
              "fullTitle": "logger test should not construct when initialized with an empty string",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(() => {\n    logger = new logger_1.Logger('');\n}).to.throw();",
              "err": {},
              "uuid": "1fd46d8c-b2d5-4927-b743-421ccb8a050e",
              "parentUUID": "e5e3b102-b208-4c67-a0df-3c880076fce2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "32755bb8-2dc0-449b-8c9d-aa036a19b6af",
            "1fd46d8c-b2d5-4927-b743-421ccb8a050e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "74f0a809-ea1f-4d13-85a2-3914a662b8d4",
          "title": "client command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/client-command.test.ts",
          "file": "/test/resp/command/client-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "client command test \"before all\" hook",
              "timedOut": false,
              "duration": 51,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "188c8425-e619-4718-9573-cf0c42bac23d",
              "parentUUID": "74f0a809-ea1f-4d13-85a2-3914a662b8d4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "client command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "97f41904-d8b1-46bd-9c9b-f16ecde1b23f",
              "parentUUID": "74f0a809-ea1f-4d13-85a2-3914a662b8d4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "client command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "7ca5ea17-b7d7-4db2-be3e-2e69a69d8470",
              "parentUUID": "74f0a809-ea1f-4d13-85a2-3914a662b8d4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "client command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "4488fa1c-09e2-4e4a-9ee6-7d8942f44ee6",
              "parentUUID": "74f0a809-ea1f-4d13-85a2-3914a662b8d4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow more than 3 parameters",
              "fullTitle": "client command test should not allow more than 3 parameters",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'one', 'two', 'three', 'four']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'client\\' command');\n    })",
              "err": {},
              "uuid": "6bf996cb-93e4-44c6-bb4f-66b513d2fedd",
              "parentUUID": "74f0a809-ea1f-4d13-85a2-3914a662b8d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail predictably when an unknown subcommand is passed",
              "fullTitle": "client command test should fail predictably when an unknown subcommand is passed",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'whatever']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'whatever'));\n    })",
              "err": {},
              "uuid": "7e6a7afb-189b-448d-8877-846adfa7b81d",
              "parentUUID": "74f0a809-ea1f-4d13-85a2-3914a662b8d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a NIL name when called with \"GETNAME\" subcommand",
              "fullTitle": "client command test should return a NIL name when called with \"GETNAME\" subcommand",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'getname']);\n        console.log(`RESPONSE: '${response}'`);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "f0f4500e-ffd4-463b-9186-e19324376eff",
              "parentUUID": "74f0a809-ea1f-4d13-85a2-3914a662b8d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail predictably when \"GETNAME\" is called with too many parameters",
              "fullTitle": "client command test should fail predictably when \"GETNAME\" is called with too many parameters",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'getname', 'extra']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'getname'));\n    })",
              "err": {},
              "uuid": "1116f91f-ce0d-4402-b784-747ec71a2cae",
              "parentUUID": "74f0a809-ea1f-4d13-85a2-3914a662b8d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with \"OK\" when \"setname\" is called with a valid name",
              "fullTitle": "client command test should respond with \"OK\" when \"setname\" is called with a valid name",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['client', 'setname', 'whatever']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['client', 'getname']);\n        chai_1.expect(response).to.equal('whatever');\n    })",
              "err": {},
              "uuid": "40f900e7-71a8-4c35-987b-6ae1c84743ee",
              "parentUUID": "74f0a809-ea1f-4d13-85a2-3914a662b8d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should persist the value for \"setname\" across tests",
              "fullTitle": "client command test should persist the value for \"setname\" across tests",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'getname']);\n        chai_1.expect(response).to.equal('whatever');\n    })",
              "err": {},
              "uuid": "ea169fed-6685-4ccf-963e-43e7e52fc6bf",
              "parentUUID": "74f0a809-ea1f-4d13-85a2-3914a662b8d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"setname\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"setname\" called with too many parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'setname', 'test', 'two']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'setname'));\n    })",
              "err": {},
              "uuid": "02c74227-a066-44c8-a748-1e045db17e24",
              "parentUUID": "74f0a809-ea1f-4d13-85a2-3914a662b8d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow whitespace in \"setname\" subcommand",
              "fullTitle": "client command test should not allow whitespace in \"setname\" subcommand",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'setname', 'te\\nst']);\n        chai_1.expect(response).to.equal(`ReplyError: Client names cannot contain spaces, newlines or special characters.`);\n    })",
              "err": {},
              "uuid": "d4c09d78-af06-497e-ac4a-c06edba8390d",
              "parentUUID": "74f0a809-ea1f-4d13-85a2-3914a662b8d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the server-assigned client id",
              "fullTitle": "client command test should return the server-assigned client id",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'id']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response.length).to.be.greaterThan(0);\n    })",
              "err": {},
              "uuid": "a7a01b83-04e7-4f11-bb4b-b0a138c6da4d",
              "parentUUID": "74f0a809-ea1f-4d13-85a2-3914a662b8d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"id\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"id\" called with too many parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'id', 'test', 'two']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'id'));\n    })",
              "err": {},
              "uuid": "e56327c2-3d8d-483d-bb2d-c6fed250a025",
              "parentUUID": "74f0a809-ea1f-4d13-85a2-3914a662b8d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a bunch of information when client \"list\" subcommand is invoked",
              "fullTitle": "client command test should return a bunch of information when client \"list\" subcommand is invoked",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'list']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response.length).to.be.greaterThan(0);\n        chai_1.expect(response).to.match(/ name: whatever /);\n        chai_1.expect(response).to.match(/\\bdb:\\s0\\b/);\n    })",
              "err": {},
              "uuid": "251a9b75-7b96-4d3f-bb02-4f5c3624d0e0",
              "parentUUID": "74f0a809-ea1f-4d13-85a2-3914a662b8d4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"list\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"list\" called with too many parameters",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'list', 'test', 'two']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'list'));\n    })",
              "err": {},
              "uuid": "f08e3da0-8f16-430f-bc62-768181cab155",
              "parentUUID": "74f0a809-ea1f-4d13-85a2-3914a662b8d4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6bf996cb-93e4-44c6-bb4f-66b513d2fedd",
            "7e6a7afb-189b-448d-8877-846adfa7b81d",
            "f0f4500e-ffd4-463b-9186-e19324376eff",
            "1116f91f-ce0d-4402-b784-747ec71a2cae",
            "40f900e7-71a8-4c35-987b-6ae1c84743ee",
            "ea169fed-6685-4ccf-963e-43e7e52fc6bf",
            "02c74227-a066-44c8-a748-1e045db17e24",
            "d4c09d78-af06-497e-ac4a-c06edba8390d",
            "a7a01b83-04e7-4f11-bb4b-b0a138c6da4d",
            "e56327c2-3d8d-483d-bb2d-c6fed250a025",
            "251a9b75-7b96-4d3f-bb02-4f5c3624d0e0",
            "f08e3da0-8f16-430f-bc62-768181cab155"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 143,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5ae2d131-7de6-49fc-820d-4088b7f12f3b",
          "title": "flushall-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/db/flushall-command.test.ts",
          "file": "/test/resp/command/db/flushall-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "flushall-command test \"before all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "01845a3f-bc3e-49ea-8bd2-7988e57e23f5",
              "parentUUID": "5ae2d131-7de6-49fc-820d-4088b7f12f3b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "flushall-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "e44e5334-9fdd-4c5b-acbb-556700f7811a",
              "parentUUID": "5ae2d131-7de6-49fc-820d-4088b7f12f3b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "flushall-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "45520faf-f7d1-4895-a957-d4c7a3de5ec6",
              "parentUUID": "5ae2d131-7de6-49fc-820d-4088b7f12f3b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "flushall-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "d6a41583-f55a-455e-a71c-8fdb8d61b407",
              "parentUUID": "5ae2d131-7de6-49fc-820d-4088b7f12f3b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should remove all keys from all databases",
              "fullTitle": "flushall-command test should remove all keys from all databases",
              "timedOut": false,
              "duration": 126,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let db = 0; db < 16; db++) {\n            response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['set', 'dbid', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.equal(1);\n        }\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        for (let db = 0; db < 16; db++) {\n            response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            console.log(`DB is ${db}, dbsize is ${response}`);\n            chai_1.expect(response).to.equal(0);\n        }\n    })",
              "err": {},
              "uuid": "2c9d196f-1621-45a6-bbe5-bc95919a0679",
              "parentUUID": "5ae2d131-7de6-49fc-820d-4088b7f12f3b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2c9d196f-1621-45a6-bbe5-bc95919a0679"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 126,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b21cba83-ae54-4cdb-8827-929331e6b09a",
          "title": "flushdb-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/db/flushdb-command.test.ts",
          "file": "/test/resp/command/db/flushdb-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "flushdb-command test \"before all\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "0150fd78-9f36-4f49-9826-031efddb40d8",
              "parentUUID": "b21cba83-ae54-4cdb-8827-929331e6b09a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "flushdb-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "91ecbb3b-0e6c-4cfd-8c82-43fdb3e3caee",
              "parentUUID": "b21cba83-ae54-4cdb-8827-929331e6b09a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "flushdb-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "f7fc1add-3335-4a82-90eb-e84bc197cb46",
              "parentUUID": "b21cba83-ae54-4cdb-8827-929331e6b09a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "flushdb-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "763c62a0-faeb-40fe-8d2f-c1fd17cb8ef3",
              "parentUUID": "b21cba83-ae54-4cdb-8827-929331e6b09a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should remove all keys from only the currently selected databases",
              "fullTitle": "flushdb-command test should remove all keys from only the currently selected databases",
              "timedOut": false,
              "duration": 129,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let db = 0; db < 16; db++) {\n            response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['set', 'dbid', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.equal(1);\n        }\n        for (let db = 0; db < 16; db++) {\n            if (db !== 14) {\n                response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n                chai_1.expect(response).to.equal('OK');\n                response = yield common_test_1.sendCommand(client, ['flushdb']);\n                chai_1.expect(response).to.equal('OK');\n                response = yield common_test_1.sendCommand(client, ['exists', 'dbid']);\n                chai_1.expect(response).to.equal(0);\n                response = yield common_test_1.sendCommand(client, ['dbsize']);\n                chai_1.expect(response).to.equal(0);\n            }\n        }\n        response = yield common_test_1.sendCommand(client, ['select', '14']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'dbid']);\n        chai_1.expect(response).to.equal('14');\n        response = yield common_test_1.sendCommand(client, ['dbsize']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "dabef165-0d76-4dc3-997d-292cda7c74a8",
              "parentUUID": "b21cba83-ae54-4cdb-8827-929331e6b09a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dabef165-0d76-4dc3-997d-292cda7c74a8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 129,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "492e250b-efcb-40e0-a784-ea48b24f0cef",
          "title": "hget command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/hash/hget-command.test.ts",
          "file": "/test/resp/command/hash/hget-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "hget command test \"before all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "416da8bd-b42e-4c28-86c1-90c9ef4af178",
              "parentUUID": "492e250b-efcb-40e0-a784-ea48b24f0cef",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "hget command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "04e86924-48c4-4149-bab2-d4537574cc0e",
              "parentUUID": "492e250b-efcb-40e0-a784-ea48b24f0cef",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "hget command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "f1be1f39-ff0a-4e77-9ba9-b70bb13b603d",
              "parentUUID": "492e250b-efcb-40e0-a784-ea48b24f0cef",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "hget command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "26faf05f-eca7-4c35-b4e0-f9f9b9207e07",
              "parentUUID": "492e250b-efcb-40e0-a784-ea48b24f0cef",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require exactly 2 parameters",
              "fullTitle": "hget command test should require exactly 2 parameters",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['hget', 'test'])\n    .then((response1) => {\n    chai_1.expect(response1).to.equal('ReplyError: ERR wrong number of arguments for \\'hget\\' command');\n    common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'one', 'two'])\n        .then((response2) => {\n        chai_1.expect(response2).to.equal('ReplyError: ERR wrong number of arguments for \\'hget\\' command');\n        common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'one'])\n            .then((response3) => {\n            chai_1.expect(response3).to.equal(null);\n            done();\n        });\n    });\n});",
              "err": {},
              "uuid": "f6492b06-03da-4bbf-9a42-552da227b092",
              "parentUUID": "492e250b-efcb-40e0-a784-ea48b24f0cef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a value after it has be set",
              "fullTitle": "hget command test should get a value after it has be set",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['hset', 'test', 'one', 'two'])\n    .then(() => {\n    common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'one'])\n        .then((response) => {\n        chai_1.expect(response).to.equal('two');\n        done();\n    });\n});",
              "err": {},
              "uuid": "01ff7b99-ca93-475c-9485-04a111446bc3",
              "parentUUID": "492e250b-efcb-40e0-a784-ea48b24f0cef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return nil string when the key exists but the field does not",
              "fullTitle": "hget command test should return nil string when the key exists but the field does not",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'two'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(null);\n    done();\n});",
              "err": {},
              "uuid": "5bb1981f-e4c3-4303-a0ec-bd3f3a483c0d",
              "parentUUID": "492e250b-efcb-40e0-a784-ea48b24f0cef",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f6492b06-03da-4bbf-9a42-552da227b092",
            "01ff7b99-ca93-475c-9485-04a111446bc3",
            "5bb1981f-e4c3-4303-a0ec-bd3f3a483c0d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b3dcc6ee-0914-40c0-acce-af25baf9ec69",
          "title": "hset command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/hash/hset-command.test.ts",
          "file": "/test/resp/command/hash/hset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "hset command test \"before all\" hook",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "130609e4-1631-43bd-8a86-16212e7cbf22",
              "parentUUID": "b3dcc6ee-0914-40c0-acce-af25baf9ec69",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "hset command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "60449272-d6da-48d4-9673-907ec668ade9",
              "parentUUID": "b3dcc6ee-0914-40c0-acce-af25baf9ec69",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "hset command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "5cc3d4af-94a1-4bc8-95e5-af59acb11f22",
              "parentUUID": "b3dcc6ee-0914-40c0-acce-af25baf9ec69",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "hset command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "715359fc-bbda-478f-bdcc-6df5384a544c",
              "parentUUID": "b3dcc6ee-0914-40c0-acce-af25baf9ec69",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require a minimum of 3 parameters",
              "fullTitle": "hset command test should require a minimum of 3 parameters",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = safeId();\n        chai_1.expect(uniqueKey).not.to.equal(lastId);\n        lastId = uniqueKey;\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey]);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'hset\\' command');\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'hset\\' command');\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'two']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "828e0e75-4e64-4fa6-9108-4be741a2b4fd",
              "parentUUID": "b3dcc6ee-0914-40c0-acce-af25baf9ec69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only accept an odd number of parameters",
              "fullTitle": "hset command test should only accept an odd number of parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = safeId();\n        chai_1.expect(uniqueKey).not.to.equal(lastId);\n        lastId = uniqueKey;\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one2', 'two', 'fail']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'hset\\' command');\n    })",
              "err": {},
              "uuid": "ccb5bc00-87bc-4a3f-b280-d50885bcf815",
              "parentUUID": "b3dcc6ee-0914-40c0-acce-af25baf9ec69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only report added fields",
              "fullTitle": "hset command test should only report added fields",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = safeId();\n        chai_1.expect(uniqueKey).not.to.equal(lastId);\n        lastId = uniqueKey;\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'six']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'anothervalue']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hget', uniqueKey, 'one']);\n        chai_1.expect(response).to.equal('anothervalue');\n    })",
              "err": {},
              "uuid": "2122a913-185d-4ce2-8b9b-35ffc6ee0181",
              "parentUUID": "b3dcc6ee-0914-40c0-acce-af25baf9ec69",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "828e0e75-4e64-4fa6-9108-4be741a2b4fd",
            "ccb5bc00-87bc-4a3f-b280-d50885bcf815",
            "2122a913-185d-4ce2-8b9b-35ffc6ee0181"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5ac06d14-57a8-470f-8c12-3e0a2bfd6773",
          "title": "del-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/del-command.test.ts",
          "file": "/test/resp/command/key/del-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "del-command test \"before all\" hook",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "a4e1b503-3cd1-4c5f-af82-1c427007fd24",
              "parentUUID": "5ac06d14-57a8-470f-8c12-3e0a2bfd6773",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "del-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "2c77a25a-7c22-4f81-8191-aad575a8bf3a",
              "parentUUID": "5ac06d14-57a8-470f-8c12-3e0a2bfd6773",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "del-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "0c4e4523-d882-407c-93d3-27d4e31bc356",
              "parentUUID": "5ac06d14-57a8-470f-8c12-3e0a2bfd6773",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "del-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a31ad3e8-b7fe-4eee-8198-17f93e793ddd",
              "parentUUID": "5ac06d14-57a8-470f-8c12-3e0a2bfd6773",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when called with no keys present",
              "fullTitle": "del-command test should report ZERO when called with no keys present",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['del', 'key1', 'key2', 'key3'])\n    .then((response) => {\n    chai_1.expect(response).to.be.a('number');\n    chai_1.expect(response).to.equal(0);\n    done();\n});",
              "err": {},
              "uuid": "168b3c4f-48f8-40ba-891b-cbddf99d6baf",
              "parentUUID": "5ac06d14-57a8-470f-8c12-3e0a2bfd6773",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report the number of keys actually removed",
              "fullTitle": "del-command test should report the number of keys actually removed",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const client = new net.Socket();\ncommon_test_1.sendCommand(client, ['set', 'key1', 'data'])\n    .then(() => {\n    common_test_1.sendCommand(client, ['set', 'key2', 'data'])\n        .then(() => {\n        common_test_1.sendCommand(client, ['set', 'key3', 'data'])\n            .then(() => {\n            common_test_1.sendCommand(client, ['del', 'key1', 'key3'])\n                .then((response) => {\n                chai_1.expect(response).to.equal(2);\n                done();\n            });\n        });\n    });\n});",
              "err": {},
              "uuid": "20dc801f-b1ca-4fa0-a2e4-f8e8ed227b17",
              "parentUUID": "5ac06d14-57a8-470f-8c12-3e0a2bfd6773",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have retained key2 from the previous test",
              "fullTitle": "del-command test should have retained key2 from the previous test",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['del', 'key2'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n    done();\n});",
              "err": {},
              "uuid": "2f4fe608-342f-423b-acff-ca38708c0ec8",
              "parentUUID": "5ac06d14-57a8-470f-8c12-3e0a2bfd6773",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "168b3c4f-48f8-40ba-891b-cbddf99d6baf",
            "20dc801f-b1ca-4fa0-a2e4-f8e8ed227b17",
            "2f4fe608-342f-423b-acff-ca38708c0ec8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "db278fe2-5173-4363-a4f9-ac6104376348",
          "title": "exists-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/exists-command.test.ts",
          "file": "/test/resp/command/key/exists-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "exists-command test \"before all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a millisecond TTL to validate exists respects TTL\n    common_test_1.sendCommand(new net.Socket(), ['set', 'ttlkey', 'value', 'PX', '3'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
              "uuid": "7a1bb20a-981f-4bbe-b355-df8ef2d818b6",
              "parentUUID": "db278fe2-5173-4363-a4f9-ac6104376348",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "exists-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "5d33c74e-f866-4a66-8727-dd14f02c890f",
              "parentUUID": "db278fe2-5173-4363-a4f9-ac6104376348",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "exists-command test \"after all\" hook",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "fd9072ef-8598-4460-be8b-3ca848f493c2",
              "parentUUID": "db278fe2-5173-4363-a4f9-ac6104376348",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "exists-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "82a26aef-0d63-4481-8a51-d7321576c3ea",
              "parentUUID": "db278fe2-5173-4363-a4f9-ac6104376348",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when none of the specified keys exist",
              "fullTitle": "exists-command test should report ZERO when none of the specified keys exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['exists', 'key1', 'key2', 'key3'])\n    .then((response) => {\n    chai_1.expect(response).to.be.a('number');\n    chai_1.expect(response).to.equal(0);\n    done();\n});",
              "err": {},
              "uuid": "ca9ef6a0-62eb-41f5-96c3-ab7228ad2a29",
              "parentUUID": "db278fe2-5173-4363-a4f9-ac6104376348",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require at least ONE parameter",
              "fullTitle": "exists-command test should require at least ONE parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['exists'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'exists\\' command');\n    done();\n});",
              "err": {},
              "uuid": "a133649f-e347-4c85-afbc-b923ac8b9cea",
              "parentUUID": "db278fe2-5173-4363-a4f9-ac6104376348",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report GREATER THAN ZERO when checking for the same existing key multiple times",
              "fullTitle": "exists-command test should report GREATER THAN ZERO when checking for the same existing key multiple times",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['set', 'key', 'value'])\n    .then(() => {\n    common_test_1.sendCommand(new net.Socket(), ['exists', 'key', 'key', 'unknownkey', 'another', 'another'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(2);\n        done();\n    });\n});",
              "err": {},
              "uuid": "492bb747-d828-45fe-896d-b453831dce90",
              "parentUUID": "db278fe2-5173-4363-a4f9-ac6104376348",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect the TTL value on a key",
              "fullTitle": "exists-command test should respect the TTL value on a key",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['exists', 'ttlkey'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(0);\n    done();\n});",
              "err": {},
              "uuid": "04a69d90-707d-4edd-af26-5faf97551661",
              "parentUUID": "db278fe2-5173-4363-a4f9-ac6104376348",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ca9ef6a0-62eb-41f5-96c3-ab7228ad2a29",
            "a133649f-e347-4c85-afbc-b923ac8b9cea",
            "492bb747-d828-45fe-896d-b453831dce90",
            "04a69d90-707d-4edd-af26-5faf97551661"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "72db4889-d856-453d-a68e-7b776f0b29cd",
          "title": "expire-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/expire-command.test.ts",
          "file": "/test/resp/command/key/expire-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "expire-command test \"before all\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "f6e01b31-a6bf-4d93-8fbd-059136ae73c6",
              "parentUUID": "72db4889-d856-453d-a68e-7b776f0b29cd",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "expire-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "0cd1d93f-bfdd-4266-a534-d2d52195a787",
              "parentUUID": "72db4889-d856-453d-a68e-7b776f0b29cd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "expire-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "e149623e-006b-4877-956c-56be7e8a7b25",
              "parentUUID": "72db4889-d856-453d-a68e-7b776f0b29cd",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "expire-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a7f35564-e9b8-4338-bea7-207768967f97",
              "parentUUID": "72db4889-d856-453d-a68e-7b776f0b29cd",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when expire called on non-existent key",
              "fullTitle": "expire-command test should report ZERO when expire called on non-existent key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['expire', 'no-key', '1000']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "96b91806-beab-41ab-9972-aeccddc3d1fe",
              "parentUUID": "72db4889-d856-453d-a68e-7b776f0b29cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require an integer value for the ttl parameter",
              "fullTitle": "expire-command test should require an integer value for the ttl parameter",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'mykey', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', '10.2']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', 'ten']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "55dec465-af3d-44b1-9a6b-e46d5d935f2d",
              "parentUUID": "72db4889-d856-453d-a68e-7b776f0b29cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set the requested ttl on a key",
              "fullTitle": "expire-command test should set the requested ttl on a key",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', '10000']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "85b89471-db36-4ee4-be0b-118957db1aea",
              "parentUUID": "72db4889-d856-453d-a68e-7b776f0b29cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should expire a key when we set a negative ttl",
              "fullTitle": "expire-command test should expire a key when we set a negative ttl",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', '-1']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "4733c11b-9992-4991-a5e1-e8a6d9907fb5",
              "parentUUID": "72db4889-d856-453d-a68e-7b776f0b29cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should work with ZKEYs (and other key types - as yet untested)",
              "fullTitle": "expire-command test should work with ZKEYs (and other key types - as yet untested)",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '1', 'member']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'zkey']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['expire', 'zkey', '1']);\n        chai_1.expect(response).to.equal(1);\n        yield setTimeout(() => __awaiter(void 0, void 0, void 0, function* () {\n            response = yield common_test_1.sendCommand(client, ['exists', 'zkey']);\n            chai_1.expect(response).to.equal(0);\n        }), 2000);\n    })",
              "err": {},
              "uuid": "c3ae8646-e39a-494d-9361-bfa69dc82aac",
              "parentUUID": "72db4889-d856-453d-a68e-7b776f0b29cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should survive the RENAME operation",
              "fullTitle": "expire-command test should survive the RENAME operation",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'rename-test', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['expire', 'rename-test', '1']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rename', 'rename-test', 'new-name']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'new-name']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'rename-test']);\n        chai_1.expect(response).to.equal(0);\n        yield setTimeout(() => __awaiter(void 0, void 0, void 0, function* () {\n            response = yield common_test_1.sendCommand(client, ['exists', 'new-name']);\n            chai_1.expect(response).to.equal(0);\n        }), 2000);\n    })",
              "err": {},
              "uuid": "4add6738-1b2d-42af-b78b-754793c79219",
              "parentUUID": "72db4889-d856-453d-a68e-7b776f0b29cd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "96b91806-beab-41ab-9972-aeccddc3d1fe",
            "55dec465-af3d-44b1-9a6b-e46d5d935f2d",
            "85b89471-db36-4ee4-be0b-118957db1aea",
            "4733c11b-9992-4991-a5e1-e8a6d9907fb5",
            "c3ae8646-e39a-494d-9361-bfa69dc82aac",
            "4add6738-1b2d-42af-b78b-754793c79219"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 57,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7bd0bea6-58b4-4bfa-ab58-9b10ae11fcbf",
          "title": "keys-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/keys-command.test.ts",
          "file": "/test/resp/command/key/keys-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "keys-command test \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "e41a0189-2530-4db4-8293-44b3eae65a06",
              "parentUUID": "7bd0bea6-58b4-4bfa-ab58-9b10ae11fcbf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "keys-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "2cf197e8-361e-4241-bf8d-6d191325c07b",
              "parentUUID": "7bd0bea6-58b4-4bfa-ab58-9b10ae11fcbf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "keys-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "f9837c82-4d48-4fc0-80ec-8c23fe623303",
              "parentUUID": "7bd0bea6-58b4-4bfa-ab58-9b10ae11fcbf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "keys-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "db7d9b79-8c3f-4f3c-a9df-362cb84ac352",
              "parentUUID": "7bd0bea6-58b4-4bfa-ab58-9b10ae11fcbf",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should retrieve keys by glob patterns",
              "fullTitle": "keys-command test should retrieve keys by glob patterns",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mset', 'firstname', 'Jack', 'lastname', 'Stuntman', 'age', '35']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['keys', '*name*']);\n        chai_1.expect(response).to.eql(['firstname', 'lastname']);\n        response = yield common_test_1.sendCommand(client, ['keys', 'a??']);\n        chai_1.expect(response).to.eql(['age']);\n        response = yield common_test_1.sendCommand(client, ['keys', '*']);\n        chai_1.expect(response).to.eql(['firstname', 'lastname', 'age']);\n    })",
              "err": {},
              "uuid": "e2563386-a871-47c6-93a6-161e082c0760",
              "parentUUID": "7bd0bea6-58b4-4bfa-ab58-9b10ae11fcbf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e2563386-a871-47c6-93a6-161e082c0760"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b936f68b-bd75-4602-b8a2-6874400481d8",
          "title": "rename-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/rename-command.test.ts",
          "file": "/test/resp/command/key/rename-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rename-command test \"before all\" hook",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "eef664c7-b6b7-4dfa-a136-9fd6ad4f5532",
              "parentUUID": "b936f68b-bd75-4602-b8a2-6874400481d8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rename-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "654e4a33-572b-46da-8c03-f1d90a28b98a",
              "parentUUID": "b936f68b-bd75-4602-b8a2-6874400481d8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rename-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "65c2ab2e-1c8b-4a39-8e0c-e8d4622428a1",
              "parentUUID": "b936f68b-bd75-4602-b8a2-6874400481d8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rename-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "5a899c4d-1940-4dd5-b773-190e4cb0ebcb",
              "parentUUID": "b936f68b-bd75-4602-b8a2-6874400481d8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report an error when the key does not exist",
              "fullTitle": "rename-command test should report an error when the key does not exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rename', 'mykey', 'my-otherkey']);\n        chai_1.expect(response).to.equal('ReplyError: ERR no such key');\n    })",
              "err": {},
              "uuid": "1cfe60e2-e688-4247-9d66-45a2b2af4c08",
              "parentUUID": "b936f68b-bd75-4602-b8a2-6874400481d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should rename a key",
              "fullTitle": "rename-command test should rename a key",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'mykey', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['rename', 'mykey', 'my-otherkey']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'my-otherkey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "8fd2a43e-91bb-447e-8fce-a4ce99af9f9f",
              "parentUUID": "b936f68b-bd75-4602-b8a2-6874400481d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overwrite an existing key without notice",
              "fullTitle": "rename-command test should overwrite an existing key without notice",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'myoriginalkey', 'something']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['rename', 'my-otherkey', 'myoriginalkey']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'myoriginalkey']);\n        chai_1.expect(response).to.equal('value');\n    })",
              "err": {},
              "uuid": "9d33f738-10b5-4fc0-858e-02d87ab8457f",
              "parentUUID": "b936f68b-bd75-4602-b8a2-6874400481d8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1cfe60e2-e688-4247-9d66-45a2b2af4c08",
            "8fd2a43e-91bb-447e-8fce-a4ce99af9f9f",
            "9d33f738-10b5-4fc0-858e-02d87ab8457f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 44,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "aea88f69-fab2-4d08-8ccd-b3af904af2a6",
          "title": "type-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/type-command.test.ts",
          "file": "/test/resp/command/key/type-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "type-command test \"before all\" hook",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "12946fdf-4334-4a71-a263-1aa2b10f0cd4",
              "parentUUID": "aea88f69-fab2-4d08-8ccd-b3af904af2a6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "type-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "3033e7b1-59af-49c8-b75e-f6a550270561",
              "parentUUID": "aea88f69-fab2-4d08-8ccd-b3af904af2a6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "type-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "88435285-ad16-42e2-af0f-899c12e71d90",
              "parentUUID": "aea88f69-fab2-4d08-8ccd-b3af904af2a6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "type-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "dd555eb6-2db4-4d4e-a792-07b7dc705175",
              "parentUUID": "aea88f69-fab2-4d08-8ccd-b3af904af2a6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report the type of key",
              "fullTitle": "type-command test should report the type of key",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['set', 'string-key', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['type', 'string-key']);\n        chai_1.expect(response).to.equal('string');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'list-key', 'test']);\n        chai_1.expect(response).to.match(/^ReplyError: ERR unknown command.*/);\n        response = yield common_test_1.sendCommand(client, ['type', 'list-key']);\n        chai_1.expect(response).to.equal('none');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'set-key', 'test']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['type', 'set-key']);\n        chai_1.expect(response).to.equal('set');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['type', 'zkey']);\n        chai_1.expect(response).to.equal('zset');\n    })",
              "err": {},
              "uuid": "ecf9950c-25c1-41ad-8d9a-774858f5c843",
              "parentUUID": "aea88f69-fab2-4d08-8ccd-b3af904af2a6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ecf9950c-25c1-41ad-8d9a-774858f5c843"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "96c157cc-619e-4025-b60d-747311d507d1",
          "title": "script-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/script-command.test.ts",
          "file": "/test/resp/command/script-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "script-command test \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "57d0e058-5840-408c-a34f-6b980a5a7c78",
              "parentUUID": "96c157cc-619e-4025-b60d-747311d507d1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "script-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "7840b1f9-8ce8-465e-8b4e-b3061358f9cf",
              "parentUUID": "96c157cc-619e-4025-b60d-747311d507d1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "script-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "faf330d9-6ce9-497f-87b8-3e679fdc97f6",
              "parentUUID": "96c157cc-619e-4025-b60d-747311d507d1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "script-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "250d0500-fbae-4e01-ae9c-ca4d1ac97e1f",
              "parentUUID": "96c157cc-619e-4025-b60d-747311d507d1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should calcuclate the correct sha1 of a script and store the script",
              "fullTitle": "script-command test should calcuclate the correct sha1 of a script and store the script",
              "timedOut": false,
              "duration": 184,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['script', 'exists', sha1]);\n        chai_1.expect(response).to.equal('0');\n        // validate failure on unparseable script\n        response = yield common_test_1.sendCommand(client, ['script', 'load', code]);\n        chai_1.expect(response).to.equal('ReplyError: Error: LUA SYNTAX Error evaluating: \"%s\"'.replace('%s', code));\n        // validate success on parseable script\n        response = yield common_test_1.sendCommand(client, ['script', 'load', `${code}}`]);\n        chai_1.expect(response).to.equal(sha1);\n        // validate a script is persisted\n        response = yield common_test_1.sendCommand(client, ['script', 'exists', sha1]);\n        chai_1.expect(response).to.equal('1');\n        // validate response to unknown sub command\n        response = yield common_test_1.sendCommand(client, ['script', 'test', sha1]);\n        chai_1.expect(response).to.equal('ReplyError: ERR Unknown subcommand or wrong number of arguments for \\'test\\'. Try SCRIPT HELP.');\n    })",
              "err": {},
              "uuid": "cb4ef771-2ddb-4b1b-bc2b-8d42c28f59f7",
              "parentUUID": "96c157cc-619e-4025-b60d-747311d507d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should evaluate a loaded lua script using evalsha",
              "fullTitle": "script-command test should evaluate a loaded lua script using evalsha",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Validate that NOSCRIPT is triggered\n        response = yield common_test_1.sendCommand(client, ['evalsha', `${sha1}xx`, '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('ReplyError: NOSCRIPT No matching script. Please use EVAL.');\n        // Validate that param 1 cannot be negative\n        response = yield common_test_1.sendCommand(client, ['evalsha', sha1, '-2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('ReplyError: ERR Number of keys can\\'t be negative');\n        // Validate that param 1 cannot be text\n        response = yield common_test_1.sendCommand(client, ['evalsha', sha1, 'two', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "9d21d4b7-ce03-43f5-8789-77d57557dc52",
              "parentUUID": "96c157cc-619e-4025-b60d-747311d507d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should execute a simple script",
              "fullTitle": "script-command test should execute a simple script",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Validate that a simple script can be processed\n        response = yield common_test_1.sendCommand(client, ['EVAL', 'local val=\"Hello Compose\" return val', '0']);\n        chai_1.expect(response).to.equal('Hello Compose');\n    })",
              "err": {},
              "uuid": "03c9e76f-b68d-4d8b-822e-adce89c924e0",
              "parentUUID": "96c157cc-619e-4025-b60d-747311d507d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create and process the ARGV table",
              "fullTitle": "script-command test should create and process the ARGV table",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return ARGV[2]', '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.eql('second');\n    })",
              "err": {},
              "uuid": "b7d655a8-d8fa-451d-8193-c8d42cea216a",
              "parentUUID": "96c157cc-619e-4025-b60d-747311d507d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create and process the KEYS table",
              "fullTitle": "script-command test should create and process the KEYS table",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return KEYS[1]', '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('key1');\n    })",
              "err": {},
              "uuid": "3f1cc123-071d-41cc-8f9e-47fdd1fe6da9",
              "parentUUID": "96c157cc-619e-4025-b60d-747311d507d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a NUMBER when required",
              "fullTitle": "script-command test should return a NUMBER when required",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return 123', '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('123');\n    })",
              "err": {},
              "uuid": "2203cc0e-baa5-4728-b758-b60e07e3fe77",
              "parentUUID": "96c157cc-619e-4025-b60d-747311d507d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NIL when there is no return value",
              "fullTitle": "script-command test should return NIL when there is no return value",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'print \"Hello World\"', '0']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "5b254b99-31e4-48f6-a524-7e367ee157ae",
              "parentUUID": "96c157cc-619e-4025-b60d-747311d507d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a TABLE when required",
              "fullTitle": "script-command test should return a TABLE when required",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, [`eval`, `return ARGV`, '2', 'key1', 'key2', 'first', 'second', 'third']);\n        chai_1.expect(response).to.eql(['first', 'second', 'third']);\n    })",
              "err": {},
              "uuid": "d6859451-2f5c-4e5c-b817-e930fd824900",
              "parentUUID": "96c157cc-619e-4025-b60d-747311d507d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return items in order",
              "fullTitle": "script-command test should return items in order",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return {true, \"test\", false, 10, 10.2}', '0']);\n        console.log(`Response is ${response}`, response);\n        chai_1.expect(response).to.eql([1, 'test', null, 10, 10]);\n    })",
              "err": {},
              "uuid": "abef32df-c856-4ac8-b3a2-07914900a6d7",
              "parentUUID": "96c157cc-619e-4025-b60d-747311d507d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return integer and nil for true and false, respectively",
              "fullTitle": "script-command test should return integer and nil for true and false, respectively",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return { true, false, false}', '0']);\n        console.log(`Response is ${response}`, response);\n        chai_1.expect(response).to.eql([1, null, null]);\n    })",
              "err": {},
              "uuid": "e6fa0d74-743a-459e-8010-f2ebd02d28a8",
              "parentUUID": "96c157cc-619e-4025-b60d-747311d507d1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cb4ef771-2ddb-4b1b-bc2b-8d42c28f59f7",
            "9d21d4b7-ce03-43f5-8789-77d57557dc52",
            "03c9e76f-b68d-4d8b-822e-adce89c924e0",
            "b7d655a8-d8fa-451d-8193-c8d42cea216a",
            "3f1cc123-071d-41cc-8f9e-47fdd1fe6da9",
            "2203cc0e-baa5-4728-b758-b60e07e3fe77",
            "5b254b99-31e4-48f6-a524-7e367ee157ae",
            "d6859451-2f5c-4e5c-b817-e930fd824900",
            "abef32df-c856-4ac8-b3a2-07914900a6d7",
            "e6fa0d74-743a-459e-8010-f2ebd02d28a8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 409,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0a06efef-274c-413a-8362-921d425c766d",
          "title": "resp-server test",
          "fullFile": "/home/lane/git/redis/test/resp/command/server/resp-server.test.ts",
          "file": "/test/resp/command/server/resp-server.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "resp-server test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "7e6ceb87-070c-4481-becd-e42e9061bd1b",
              "parentUUID": "0a06efef-274c-413a-8362-921d425c766d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "resp-server test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "d208b845-b856-4086-900c-479bed75c056",
              "parentUUID": "0a06efef-274c-413a-8362-921d425c766d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "5c05f855-ef5c-46be-9dd3-9731a0809ee3",
              "title": "server start and stop tests",
              "fullFile": "/home/lane/git/redis/test/resp/command/server/resp-server.test.ts",
              "file": "/test/resp/command/server/resp-server.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should instantiate",
                  "fullTitle": "resp-server test server start and stop tests should instantiate",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            respServer = new resp_server_1.RespServer();\n            chai_1.expect(respServer.constructor.name).to.equal('RespServer');\n        })",
                  "err": {},
                  "uuid": "163a4343-c7ba-484a-9cdd-907c653c908c",
                  "parentUUID": "5c05f855-ef5c-46be-9dd3-9731a0809ee3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit \"ready\" on startup",
                  "fullTitle": "resp-server test server start and stop tests should emit \"ready\" on startup",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
                  "err": {},
                  "uuid": "2ead3273-a8df-40d9-a043-f91ca878408e",
                  "parentUUID": "5c05f855-ef5c-46be-9dd3-9731a0809ee3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit \"closed\" on shutdown",
                  "fullTitle": "resp-server test server start and stop tests should emit \"closed\" on shutdown",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer.on('closed', () => {\n    done();\n});\nrespServer.stop();",
                  "err": {},
                  "uuid": "32794024-4180-44e0-a25c-cc7226a35441",
                  "parentUUID": "5c05f855-ef5c-46be-9dd3-9731a0809ee3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept connections on default ${env.REDIS_HOST}:${env.REDIS_PORT}",
                  "fullTitle": "resp-server test server start and stop tests should accept connections on default ${env.REDIS_HOST}:${env.REDIS_PORT}",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    const client = new net.Socket();\n    client.on('ready', (data) => {\n        respServer.on('closed', () => {\n            done();\n        });\n        respServer.stop();\n    });\n    client.on('connect', (data) => {\n    });\n    client.on('error', (err) => {\n        assert_1.fail(`Unexpected error during connection`, err.stack);\n    });\n    client.connect(Number(process.env.REDIS_PORT || 6379), process.env.REDIS_HOST || 'localhost', () => {\n    });\n});\nrespServer.start();",
                  "err": {},
                  "uuid": "144aa4d6-b98e-49c4-acc2-bde38fbe9459",
                  "parentUUID": "5c05f855-ef5c-46be-9dd3-9731a0809ee3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "163a4343-c7ba-484a-9cdd-907c653c908c",
                "2ead3273-a8df-40d9-a043-f91ca878408e",
                "32794024-4180-44e0-a25c-cc7226a35441",
                "144aa4d6-b98e-49c4-acc2-bde38fbe9459"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "17420348-6936-44c0-adbe-bab4ed16336a",
              "title": "other server tests",
              "fullFile": "/home/lane/git/redis/test/resp/command/server/resp-server.test.ts",
              "file": "/test/resp/command/server/resp-server.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "resp-server test other server tests \"before all\" hook",
                  "timedOut": false,
                  "duration": 3,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    client = new net.Socket();\n    done();\n});\nrespServer.start();",
                  "err": {},
                  "uuid": "4b58ae83-d2c8-437c-b318-4dff3fb881c9",
                  "parentUUID": "17420348-6936-44c0-adbe-bab4ed16336a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "resp-server test other server tests \"after all\" hook",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            yield respServer.stop();\n        })",
                  "err": {},
                  "uuid": "26843810-dc82-4a25-962b-92f21e6141dc",
                  "parentUUID": "17420348-6936-44c0-adbe-bab4ed16336a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should respond properly to the \"ping\" command",
                  "fullTitle": "resp-server test other server tests should respond properly to the \"ping\" command",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['ping'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('PONG');\n    done();\n});",
                  "err": {},
                  "uuid": "66e59196-b2bb-4a20-a5c9-7dd7790fd3b9",
                  "parentUUID": "17420348-6936-44c0-adbe-bab4ed16336a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond properly to the \"echo\" command",
                  "fullTitle": "resp-server test other server tests should respond properly to the \"echo\" command",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['echo', 'test'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('test');\n    done();\n});",
                  "err": {},
                  "uuid": "05eedc49-da76-4d26-91bc-75761c70e06f",
                  "parentUUID": "17420348-6936-44c0-adbe-bab4ed16336a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond properly to the \"quit\" command",
                  "fullTitle": "resp-server test other server tests should respond properly to the \"quit\" command",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Note however that the server does not disconnect us.  That is the client's job\ncommon_test_1.sendCommand(client, ['quit'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    done();\n});",
                  "err": {},
                  "uuid": "b27a6346-1a76-4b5a-b9ba-cb64d56fcd7a",
                  "parentUUID": "17420348-6936-44c0-adbe-bab4ed16336a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond with \"ERR\" when echo command has no parameters",
                  "fullTitle": "resp-server test other server tests should respond with \"ERR\" when echo command has no parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Note that 'ReplyError:' is supplied by the redis parser, NOT by the code under test\ncommon_test_1.sendCommand(client, ['echo'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'echo\\' command');\n    done();\n});",
                  "err": {},
                  "uuid": "28f94292-0921-40da-a0d9-6b5c69c27a53",
                  "parentUUID": "17420348-6936-44c0-adbe-bab4ed16336a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond with \"ERR\" when echo command has two or more parameters",
                  "fullTitle": "resp-server test other server tests should respond with \"ERR\" when echo command has two or more parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['echo', 'one', 'two'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'echo\\' command');\n    done();\n});",
                  "err": {},
                  "uuid": "29455b41-26dd-4f0e-94c0-0e16ab0088e7",
                  "parentUUID": "17420348-6936-44c0-adbe-bab4ed16336a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond to the \"time\" command with an array of two strings",
                  "fullTitle": "resp-server test other server tests should respond to the \"time\" command with an array of two strings",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Note: we use hrtime which should already do what we need so we don't validate\ncommon_test_1.sendCommand(client, ['time'])\n    .then((response) => {\n    chai_1.expect(response).to.be.an('array');\n    chai_1.expect(response.length).to.equal(2);\n    chai_1.expect(parseInt(response[0], 10)).to.be.greaterThan(0);\n    chai_1.expect(parseInt(response[1], 10)).to.be.greaterThan(0);\n    done();\n});",
                  "err": {},
                  "uuid": "be5ec9c9-7694-4bb8-be77-0c3c027f20f4",
                  "parentUUID": "17420348-6936-44c0-adbe-bab4ed16336a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond with nulCommand when the command is not known",
                  "fullTitle": "resp-server test other server tests should respond with nulCommand when the command is not known",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['felix', 'the', 'cat'])\n    .then((response) => {\n    chai_1.expect(response).to.match(/^ReplyError: ERR unknown command.*/);\n    done();\n});",
                  "err": {},
                  "uuid": "54c24e96-2c64-4136-a090-3077a5f93c88",
                  "parentUUID": "17420348-6936-44c0-adbe-bab4ed16336a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should implement the info command",
                  "fullTitle": "resp-server test other server tests should implement the info command",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['info'])\n    .then((response) => {\n    chai_1.expect(response).to.match(/^#server\\r\\nserver:node_version:.*/m);\n    done();\n});",
                  "err": {},
                  "uuid": "3ed06bed-5f15-4ecc-bf24-9317c9feb49e",
                  "parentUUID": "17420348-6936-44c0-adbe-bab4ed16336a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should implement the SET command",
                  "fullTitle": "resp-server test other server tests should implement the SET command",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['SET', 'this', 'that'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    common_test_1.sendCommand(client, ['GET', 'this'])\n        .then((getresponse) => {\n        chai_1.expect(getresponse).to.equal('that');\n        done();\n    });\n});",
                  "err": {},
                  "uuid": "70f0e5ba-b5ba-4db8-87bb-71107050f7bd",
                  "parentUUID": "17420348-6936-44c0-adbe-bab4ed16336a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nil string when GET is invoked with unknown parameters",
                  "fullTitle": "resp-server test other server tests should return nil string when GET is invoked with unknown parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['GET', ' '])\n    .then((getresponse) => {\n    chai_1.expect(getresponse).to.equal(null);\n    done();\n});",
                  "err": {},
                  "uuid": "adb3a746-aa9c-4d8b-9361-7800caef1c25",
                  "parentUUID": "17420348-6936-44c0-adbe-bab4ed16336a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should implement the info command with a known parameter",
                  "fullTitle": "resp-server test other server tests should implement the info command with a known parameter",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['info', 'memory'])\n    .then((response) => {\n    chai_1.expect(response).to.match(/^#memory.*/m);\n    done();\n});",
                  "err": {},
                  "uuid": "cbb022e3-4c5b-46d5-8dbe-a3b9964ebe12",
                  "parentUUID": "17420348-6936-44c0-adbe-bab4ed16336a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not respond when info is called with an unknown paramter",
                  "fullTitle": "resp-server test other server tests should not respond when info is called with an unknown paramter",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['info', 'juicy'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(null);\n    done();\n});",
                  "err": {},
                  "uuid": "12111895-0d61-4562-a192-3b223e6d9fb2",
                  "parentUUID": "17420348-6936-44c0-adbe-bab4ed16336a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should report the number of keys in the current database",
                  "fullTitle": "resp-server test other server tests should report the number of keys in the current database",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.be.a('number');\n            chai_1.expect(response).to.be.greaterThan(0);\n        })",
                  "err": {},
                  "uuid": "866bd49a-e236-4948-b063-a3747ccb96b2",
                  "parentUUID": "17420348-6936-44c0-adbe-bab4ed16336a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support the \"select\" command",
                  "fullTitle": "resp-server test other server tests should support the \"select\" command",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['select', '12']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
                  "uuid": "32e462cd-71f1-4637-98f0-2efc3539118f",
                  "parentUUID": "17420348-6936-44c0-adbe-bab4ed16336a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow us to select an invalid database",
                  "fullTitle": "resp-server test other server tests should not allow us to select an invalid database",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['select', 'one']);\n            chai_1.expect(response).to.equal('ReplyError: Error: DB index is out of range');\n            response = yield common_test_1.sendCommand(client, ['select', '-12']);\n            chai_1.expect(response).to.equal('ReplyError: Error: DB index is out of range');\n            response = yield common_test_1.sendCommand(client, ['select', '22']);\n            chai_1.expect(response).to.equal('ReplyError: Error: DB index is out of range');\n        })",
                  "err": {},
                  "uuid": "90eb7b5c-caf8-4413-86b0-ccb666d3d0db",
                  "parentUUID": "17420348-6936-44c0-adbe-bab4ed16336a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66e59196-b2bb-4a20-a5c9-7dd7790fd3b9",
                "05eedc49-da76-4d26-91bc-75761c70e06f",
                "b27a6346-1a76-4b5a-b9ba-cb64d56fcd7a",
                "28f94292-0921-40da-a0d9-6b5c69c27a53",
                "29455b41-26dd-4f0e-94c0-0e16ab0088e7",
                "be5ec9c9-7694-4bb8-be77-0c3c027f20f4",
                "54c24e96-2c64-4136-a090-3077a5f93c88",
                "3ed06bed-5f15-4ecc-bf24-9317c9feb49e",
                "70f0e5ba-b5ba-4db8-87bb-71107050f7bd",
                "adb3a746-aa9c-4d8b-9361-7800caef1c25",
                "cbb022e3-4c5b-46d5-8dbe-a3b9964ebe12",
                "12111895-0d61-4562-a192-3b223e6d9fb2",
                "866bd49a-e236-4948-b063-a3747ccb96b2",
                "32e462cd-71f1-4637-98f0-2efc3539118f",
                "90eb7b5c-caf8-4413-86b0-ccb666d3d0db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 58,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "68c996b9-dd22-4a57-9df6-56dd24a6b10e",
          "title": "set commands test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/set-commands.test.ts",
          "file": "/test/resp/command/set/set-commands.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "set commands test \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "46f69d15-779b-41a5-8711-c76e2f507476",
              "parentUUID": "68c996b9-dd22-4a57-9df6-56dd24a6b10e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "set commands test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "df09ef43-12f2-47b6-8d79-5499f3d3f72b",
              "parentUUID": "68c996b9-dd22-4a57-9df6-56dd24a6b10e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "set commands test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "e60a153f-779f-4912-a392-fc868588ee97",
              "parentUUID": "68c996b9-dd22-4a57-9df6-56dd24a6b10e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "set commands test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a83106f3-1305-4a04-a09b-7e096162dc6b",
              "parentUUID": "68c996b9-dd22-4a57-9df6-56dd24a6b10e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return ZERO when certain commands are applied against key that doesn't exist",
              "fullTitle": "set commands test should return ZERO when certain commands are applied against key that doesn't exist",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['scard', 'doesnotexist']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['sismember', 'doesnotexist', 'test']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "ad6b8aeb-1ed5-47a5-ae7e-2eb6d8567e42",
              "parentUUID": "68c996b9-dd22-4a57-9df6-56dd24a6b10e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an appropriate error when a \"set\" command is applied to a non-set key",
              "fullTitle": "set commands test should throw an appropriate error when a \"set\" command is applied to a non-set key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['set', 'wrongtype', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sismember', 'wrongtype', 'set']);\n        chai_1.expect(response).to.equal(WRONG_TYPE);\n    })",
              "err": {},
              "uuid": "1a6bcb4b-0197-448a-930c-b13d4cdcca2c",
              "parentUUID": "68c996b9-dd22-4a57-9df6-56dd24a6b10e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new key when sadd is called correctly",
              "fullTitle": "set commands test should create a new key when sadd is called correctly",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['sadd', 'skey', 'test']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'skey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "46a4960e-ebeb-4221-9a5d-447c02a2d058",
              "parentUUID": "68c996b9-dd22-4a57-9df6-56dd24a6b10e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only report the number of added keys",
              "fullTitle": "set commands test should only report the number of added keys",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['sadd', 'skey', 'test', 'test2']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'skey']);\n        chai_1.expect(response).to.be.an('array');\n        chai_1.expect(response).to.eql(['test', 'test2']);\n    })",
              "err": {},
              "uuid": "722854f3-a3e7-44f5-8f6d-22b7a95d409b",
              "parentUUID": "68c996b9-dd22-4a57-9df6-56dd24a6b10e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "ff013fd6-d098-40ca-9937-aa0e952c4ed2",
              "title": "smove, sismember, and scard tests",
              "fullFile": "/home/lane/git/redis/test/resp/command/set/set-commands.test.ts",
              "file": "/test/resp/command/set/set-commands.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should do nothing when smove is called with a source key that does not exist",
                  "fullTitle": "set commands test smove, sismember, and scard tests should do nothing when smove is called with a source key that does not exist",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['smove', 'fromskey', 'toskey', 'nothing']);\n            chai_1.expect(response).to.equal(0);\n            response = yield common_test_1.sendCommand(client, ['exists', 'fromskey', 'toskey']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
                  "uuid": "2dd237e3-7f89-4275-9c76-631c803e16e8",
                  "parentUUID": "ff013fd6-d098-40ca-9937-aa0e952c4ed2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should move a key from one set to another (and create the target if necessary)",
                  "fullTitle": "set commands test smove, sismember, and scard tests should move a key from one set to another (and create the target if necessary)",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['exists', 'tonewskey']);\n            chai_1.expect(response).to.equal(0);\n            response = yield common_test_1.sendCommand(client, ['smembers', 'tonewskey']);\n            chai_1.expect(response).to.eql([]);\n            response = yield common_test_1.sendCommand(client, ['sadd', uniqueKey, 'key1', 'key2', 'key3']);\n            chai_1.expect(response).to.equal(3);\n            response = yield common_test_1.sendCommand(client, ['smembers', uniqueKey]);\n            chai_1.expect(response).to.eql(['key1', 'key2', 'key3']);\n            response = yield common_test_1.sendCommand(client, ['smove', uniqueKey, 'tonewskey', 'key2']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', 'tonewskey', 'key2']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['smembers', uniqueKey]);\n            chai_1.expect(response).to.eql(['key1', 'key3']);\n            response = yield common_test_1.sendCommand(client, ['smembers', 'tonewskey']);\n            chai_1.expect(response).to.eql(['key2']);\n        })",
                  "err": {},
                  "uuid": "356959e8-493e-44b4-b8fd-000c58229853",
                  "parentUUID": "ff013fd6-d098-40ca-9937-aa0e952c4ed2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should report cardinality of a set",
                  "fullTitle": "set commands test smove, sismember, and scard tests should report cardinality of a set",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['scard', uniqueKey]);\n            chai_1.expect(response).to.equal(2);\n            response = yield common_test_1.sendCommand(client, ['scard', 'tonewskey']);\n            chai_1.expect(response).to.equal(1);\n        })",
                  "err": {},
                  "uuid": "deee915b-5206-41b2-8d89-3d6abe705eaf",
                  "parentUUID": "ff013fd6-d098-40ca-9937-aa0e952c4ed2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should report ismember true/false",
                  "fullTitle": "set commands test smove, sismember, and scard tests should report ismember true/false",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['sismember', 'tonewskey', 'key2']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', 'tonewskey', 'key1']);\n            chai_1.expect(response).to.equal(0);\n            response = yield common_test_1.sendCommand(client, ['sismember', uniqueKey, 'key1']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', uniqueKey, 'key3']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', uniqueKey, 'key2']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
                  "uuid": "8a372b97-d551-4237-918e-07ed62b588a0",
                  "parentUUID": "ff013fd6-d098-40ca-9937-aa0e952c4ed2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2dd237e3-7f89-4275-9c76-631c803e16e8",
                "356959e8-493e-44b4-b8fd-000c58229853",
                "deee915b-5206-41b2-8d89-3d6abe705eaf",
                "8a372b97-d551-4237-918e-07ed62b588a0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 25,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "ad6b8aeb-1ed5-47a5-ae7e-2eb6d8567e42",
            "1a6bcb4b-0197-448a-930c-b13d4cdcca2c",
            "46a4960e-ebeb-4221-9a5d-447c02a2d058",
            "722854f3-a3e7-44f5-8f6d-22b7a95d409b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5d540a66-ec68-4829-93e2-f427f8aadd19",
          "title": "z-command tests",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/z-commands.test.ts",
          "file": "/test/resp/command/sset/z-commands.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "z-command tests \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "70bf648d-7d67-4b5e-9ed2-25688c8e9891",
              "parentUUID": "5d540a66-ec68-4829-93e2-f427f8aadd19",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "z-command tests \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "0c7b7ffe-ecdb-49c1-a428-bae5f0316a49",
              "parentUUID": "5d540a66-ec68-4829-93e2-f427f8aadd19",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "z-command tests \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "38f9d1cf-0be3-4f57-9404-02d8d53bf708",
              "parentUUID": "5d540a66-ec68-4829-93e2-f427f8aadd19",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "z-command tests \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "cab231f0-3eb8-474b-9d2e-bca4012f1760",
              "parentUUID": "5d540a66-ec68-4829-93e2-f427f8aadd19",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should support basic operations",
              "fullTitle": "z-command tests should support basic operations",
              "timedOut": false,
              "duration": 39,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueZkey = `key${new Date().getTime()}`;\n        let response = yield common_test_1.sendCommand(client, ['zrange', 'testkey', String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER)]);\n        chai_1.expect(response).to.eql([]);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'testkey', '14', '__proto__']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '8', '5a600e16']);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '9', '5a600e17']);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '10', '5a600e18']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zcard', uniqueZkey]);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql([['5a600e16', '8'],\n            ['5a600e17', '9'],\n            ['5a600e18', '10']]);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '12', '5a600e17']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['zcount', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER)]);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER)]);\n        chai_1.expect(response.length).to.equal(3);\n        chai_1.expect(response).to.eql(['5a600e16', '5a600e18', '5a600e17']);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql([['5a600e16', '8'], ['5a600e18', '10'], ['5a600e17', '12']]);\n        response = yield common_test_1.sendCommand(client, ['type', uniqueZkey]);\n        chai_1.expect(response).to.equal('zset');\n        response = yield common_test_1.sendCommand(client, ['zcount', uniqueZkey, '-Infinity', '10']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['zcount', uniqueZkey, 'Negative One', '10']);\n        chai_1.expect(response).to.equal('ReplyError: Error: min or max is not a float');\n        // report syntax error\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'with Scores']);\n        chai_1.expect(response).to.eql('ReplyError: syntax error');\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String('Number.MIN_SAFE_INTEGER'), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql('ReplyError: value is not an integer or out of range');\n        // Remove members without removing keys\n        response = yield common_test_1.sendCommand(client, ['zrem', uniqueZkey, 'does not exist', '5a600e16', '5a600e18', '5a600e17']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueZkey]);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "fcfd1530-ccad-47be-9306-ac71ba7323c6",
              "parentUUID": "5d540a66-ec68-4829-93e2-f427f8aadd19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should increase rank",
              "fullTitle": "z-command tests should increase rank",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueZkey = `incrkey${new Date().getTime()}`;\n        let response;\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '1', 'first']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '2', 'second']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '3', 'third']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '4', 'fourth']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, '2', 'first']);\n        chai_1.expect(response).to.equal('3');\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'first']);\n        // expect(ss.rank('first')).to.equal(1);\n        chai_1.expect(response).to.match(/^ReplyError: ERR unknown command.*/);\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, '-20', 'fourth']);\n        chai_1.expect(response).to.equal('-16');\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, `-${Number.MIN_SAFE_INTEGER + 1}.${Number.MAX_SAFE_INTEGER}`, 'fourth']);\n        chai_1.expect(response).to.equal('ReplyError: value is not a valid float');\n        // Should create a key if it doesn't exist\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, '-20', 'fifth']);\n        chai_1.expect(response).to.equal('-20');\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        console.log(response);\n        //    expect(response).to.eql([['5a600e16', '8'], ['5a600e18', '10'], ['5a600e17', '12']]);\n    })",
              "err": {},
              "uuid": "58d7ce91-72cd-4d77-981b-da953a11c2c7",
              "parentUUID": "5d540a66-ec68-4829-93e2-f427f8aadd19",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fcfd1530-ccad-47be-9306-ac71ba7323c6",
            "58d7ce91-72cd-4d77-981b-da953a11c2c7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 52,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "77d9d728-e1e8-40da-a7a8-f94dae277589",
          "title": "zadd command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zadd-command.test.ts",
          "file": "/test/resp/command/sset/zadd-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zadd command test \"before all\" hook",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "90f13270-5962-464d-ac6b-accfa11d200b",
              "parentUUID": "77d9d728-e1e8-40da-a7a8-f94dae277589",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zadd command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "7c8751c4-d0ff-4ac3-920b-963fbb946857",
              "parentUUID": "77d9d728-e1e8-40da-a7a8-f94dae277589",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zadd command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "fe496f2a-8ab5-4ea9-bb36-abdd9f6ab6e9",
              "parentUUID": "77d9d728-e1e8-40da-a7a8-f94dae277589",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zadd command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "cad27e9c-1ba3-4b83-a609-fbfcdfb2ae26",
              "parentUUID": "77d9d728-e1e8-40da-a7a8-f94dae277589",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require at least 3 parameters",
              "fullTitle": "zadd command test should require at least 3 parameters",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['zadd']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "fd6f6ebe-bcdc-40c0-ba42-1da4e8ad80f6",
              "parentUUID": "77d9d728-e1e8-40da-a7a8-f94dae277589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject even parameter counts",
              "fullTitle": "zadd command test should reject even parameter counts",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something', '456']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something', '456', 'another', '765']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something', '456', 'another', '765', 'test']);\n        // The \"something\" key should already exist so we only count 2 new fields\n        chai_1.expect(response).to.equal(2);\n    })",
              "err": {},
              "uuid": "979084e4-7b3b-44ac-8f4c-e9a94715a6ed",
              "parentUUID": "77d9d728-e1e8-40da-a7a8-f94dae277589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject an attempt to store non-floatish rankings",
              "fullTitle": "zadd command test should reject an attempt to store non-floatish rankings",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '__data__', 'something']);\n        chai_1.expect(response).to.equal('ReplyError: Error: value is not a valid float');\n    })",
              "err": {},
              "uuid": "970a7b8a-3831-43bb-b9da-377bfcdb7fc0",
              "parentUUID": "77d9d728-e1e8-40da-a7a8-f94dae277589",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fd6f6ebe-bcdc-40c0-ba42-1da4e8ad80f6",
            "979084e4-7b3b-44ac-8f4c-e9a94715a6ed",
            "970a7b8a-3831-43bb-b9da-377bfcdb7fc0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e060ae7f-e2b3-4404-933c-a01563985f66",
          "title": "incr/decr command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/incr-command.test.ts",
          "file": "/test/resp/command/string/incr-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "incr/decr command test \"before all\" hook",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a millisecond TTL to validate incr respects TTL\n    common_test_1.sendCommand(new net.Socket(), ['set', 'ttlkey', '100', 'PX', '3'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
              "uuid": "541112d7-2867-4bbd-898c-9f65b159f0be",
              "parentUUID": "e060ae7f-e2b3-4404-933c-a01563985f66",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "incr/decr command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "e43dde48-1c36-42b2-82fd-b2aa7d05ea2a",
              "parentUUID": "e060ae7f-e2b3-4404-933c-a01563985f66",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "incr/decr command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "a9edf03c-a6c1-4bf6-aeb2-45f15ab5fe69",
              "parentUUID": "e060ae7f-e2b3-4404-933c-a01563985f66",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "incr/decr command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "970b9b00-b631-40ac-954d-944d9324c110",
              "parentUUID": "e060ae7f-e2b3-4404-933c-a01563985f66",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ONE when incr called against unknown key",
              "fullTitle": "incr/decr command test should report ONE when incr called against unknown key",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['incr', 'incr-key']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "54991c8d-4f82-419e-9d3f-e5bffd2c2ceb",
              "parentUUID": "e060ae7f-e2b3-4404-933c-a01563985f66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incr/decr command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['get', 'incr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('1');\n    })",
              "err": {},
              "uuid": "106cb6cd-c84c-44da-8052-9179b4d4a73c",
              "parentUUID": "e060ae7f-e2b3-4404-933c-a01563985f66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incr/decr command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['set', 'incr-key', '9007199254740990']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(new net.Socket(), ['incr', 'incr-key']);\n        chai_1.expect(response).to.equal(Number.MAX_SAFE_INTEGER);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['incr', 'incr-key']);\n        chai_1.expect(response).to.equal('ReplyError: Error: increment or decrement would overflow');\n    })",
              "err": {},
              "uuid": "b93bb80a-d910-439a-a9af-9004b8c92c74",
              "parentUUID": "e060ae7f-e2b3-4404-933c-a01563985f66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report -1 when decr called against unknown key",
              "fullTitle": "incr/decr command test should report -1 when decr called against unknown key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['decr', 'decr-key']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(-1);\n    })",
              "err": {},
              "uuid": "ecb52703-7dbc-400f-a5b1-5d4b083beffa",
              "parentUUID": "e060ae7f-e2b3-4404-933c-a01563985f66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incr/decr command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['get', 'decr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('-1');\n    })",
              "err": {},
              "uuid": "27a7f129-1056-4b68-adcb-402b7fa0427e",
              "parentUUID": "e060ae7f-e2b3-4404-933c-a01563985f66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incr/decr command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['set', 'decr-key', '-9007199254740990']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(new net.Socket(), ['decr', 'decr-key']);\n        chai_1.expect(response).to.equal(Number.MIN_SAFE_INTEGER);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['decr', 'decr-key']);\n        chai_1.expect(response).to.equal('ReplyError: Error: increment or decrement would overflow');\n    })",
              "err": {},
              "uuid": "3d8f91f3-80eb-4ab4-b2a5-1d153fd2d472",
              "parentUUID": "e060ae7f-e2b3-4404-933c-a01563985f66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect TTL",
              "fullTitle": "incr/decr command test should respect TTL",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['get', 'ttlkey']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "75d3f314-7ac4-48f5-a760-1ac25202a51d",
              "parentUUID": "e060ae7f-e2b3-4404-933c-a01563985f66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to increment a HASH value",
              "fullTitle": "incr/decr command test should fail to increment a HASH value",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `test-incr-${new Date().getTime()}`;\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'two']);\n        console.log(`Response is`, response);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['incr', uniqueKey]);\n        console.log(`ERROR is ${response}`);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "730e8134-437c-4ad7-a153-b1e442d96bff",
              "parentUUID": "e060ae7f-e2b3-4404-933c-a01563985f66",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "54991c8d-4f82-419e-9d3f-e5bffd2c2ceb",
            "106cb6cd-c84c-44da-8052-9179b4d4a73c",
            "b93bb80a-d910-439a-a9af-9004b8c92c74",
            "ecb52703-7dbc-400f-a5b1-5d4b083beffa",
            "27a7f129-1056-4b68-adcb-402b7fa0427e",
            "3d8f91f3-80eb-4ab4-b2a5-1d153fd2d472",
            "75d3f314-7ac4-48f5-a760-1ac25202a51d",
            "730e8134-437c-4ad7-a153-b1e442d96bff"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 34,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f4b804ae-5efe-492a-974b-924409893834",
          "title": "incrby/decrby command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/incrby-command.test.ts",
          "file": "/test/resp/command/string/incrby-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "incrby/decrby command test \"before all\" hook",
              "timedOut": false,
              "duration": 51,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a millisecond TTL to validate incrby respects TTL\n    common_test_1.sendCommand(client, ['set', 'ttlkey', '100', 'PX', '3'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
              "uuid": "4529ca02-a246-4106-bc8f-2413ca840b9f",
              "parentUUID": "f4b804ae-5efe-492a-974b-924409893834",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "incrby/decrby command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "34ee655c-4216-4e42-8eca-094d10729254",
              "parentUUID": "f4b804ae-5efe-492a-974b-924409893834",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "incrby/decrby command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "b59fcae1-4b8d-496c-8f4b-68cfccdf6a90",
              "parentUUID": "f4b804ae-5efe-492a-974b-924409893834",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "incrby/decrby command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "1ba4d262-2d71-48e1-984e-ccb4b2440ef4",
              "parentUUID": "f4b804ae-5efe-492a-974b-924409893834",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report the INCREMENT when incrby called against unknown key",
              "fullTitle": "incrby/decrby command test should report the INCREMENT when incrby called against unknown key",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['incrby', 'incr-key', '10']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(10);\n    })",
              "err": {},
              "uuid": "44c9c47c-8809-4ef4-af90-55123510741b",
              "parentUUID": "f4b804ae-5efe-492a-974b-924409893834",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incrby/decrby command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['get', 'incr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('10');\n    })",
              "err": {},
              "uuid": "09ca0945-9891-4e4b-a915-dc91761d037e",
              "parentUUID": "f4b804ae-5efe-492a-974b-924409893834",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incrby/decrby command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['set', 'incr-key', '9007199254740981']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['incrby', 'incr-key', '10']);\n        chai_1.expect(response).to.equal(Number.MAX_SAFE_INTEGER);\n        response = yield common_test_1.sendCommand(client, ['incrby', 'incr-key', '110']);\n        chai_1.expect(response).to.equal('ReplyError: Error: increment or decrement would overflow');\n    })",
              "err": {},
              "uuid": "8f68e3d7-9746-4c76-912c-b944f1c23c42",
              "parentUUID": "f4b804ae-5efe-492a-974b-924409893834",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report the NEGATIVE increment when decrby called against unknown key",
              "fullTitle": "incrby/decrby command test should report the NEGATIVE increment when decrby called against unknown key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['decrby', 'decr-key', '12']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(-12);\n    })",
              "err": {},
              "uuid": "882a4de4-a94d-4383-8b91-424a5099c500",
              "parentUUID": "f4b804ae-5efe-492a-974b-924409893834",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support negative increment and positive decrement",
              "fullTitle": "incrby/decrby command test should support negative increment and positive decrement",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['incrby', 'negincr', '-12']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(-12);\n        response = yield common_test_1.sendCommand(client, ['decrby', 'negincr', '-24']);\n        chai_1.expect(response).to.equal(12);\n    })",
              "err": {},
              "uuid": "8988f9a6-9734-4075-bb63-357891cb2aa5",
              "parentUUID": "f4b804ae-5efe-492a-974b-924409893834",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incrby/decrby command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['get', 'decr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('-12');\n    })",
              "err": {},
              "uuid": "0850ed2c-2640-441f-8b95-6bbd77c04bee",
              "parentUUID": "f4b804ae-5efe-492a-974b-924409893834",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incrby/decrby command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['set', 'decr-key', '-9007199254740981']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['decrby', 'decr-key', '10']);\n        chai_1.expect(response).to.equal(Number.MIN_SAFE_INTEGER);\n        // This does not seem to be exact\n        // response = await sendCommand(client, ['decrby', 'decr-key', String(Number.MAX_SAFE_INTEGER)]);\n        // expect(response).to.equal('ReplyError: Error: increment or decrement would overflow');\n    })",
              "err": {},
              "uuid": "04088f17-8d06-4591-9892-95b123637fe3",
              "parentUUID": "f4b804ae-5efe-492a-974b-924409893834",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect TTL",
              "fullTitle": "incrby/decrby command test should respect TTL",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['get', 'ttlkey']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "e34700f5-5fb1-41a8-83c9-c9c20c6e2284",
              "parentUUID": "f4b804ae-5efe-492a-974b-924409893834",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to increment a HASH value",
              "fullTitle": "incrby/decrby command test should fail to increment a HASH value",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `test-incr-${new Date().getTime()}`;\n        let response = yield common_test_1.sendCommand(client, ['hset', uniqueKey, 'one', 'two']);\n        console.log(`Response is`, response);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['incrby', uniqueKey, '12']);\n        console.log(`ERROR is ${response}`);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "1ac34d17-a70d-4d8f-98a8-1e45bd72c8bd",
              "parentUUID": "f4b804ae-5efe-492a-974b-924409893834",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "44c9c47c-8809-4ef4-af90-55123510741b",
            "09ca0945-9891-4e4b-a915-dc91761d037e",
            "8f68e3d7-9746-4c76-912c-b944f1c23c42",
            "882a4de4-a94d-4383-8b91-424a5099c500",
            "8988f9a6-9734-4075-bb63-357891cb2aa5",
            "0850ed2c-2640-441f-8b95-6bbd77c04bee",
            "04088f17-8d06-4591-9892-95b123637fe3",
            "e34700f5-5fb1-41a8-83c9-c9c20c6e2284",
            "1ac34d17-a70d-4d8f-98a8-1e45bd72c8bd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 46,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a2d2dfd9-bcfa-4a1a-ba5c-780528d67948",
          "title": "mset-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/mset-command.test.ts",
          "file": "/test/resp/command/string/mset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "mset-command test \"before all\" hook",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "9a53020f-8c46-4caa-8cb9-a5f84dc0cdf0",
              "parentUUID": "a2d2dfd9-bcfa-4a1a-ba5c-780528d67948",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "mset-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "4c9f78f8-c896-4a32-833f-a140691b2a12",
              "parentUUID": "a2d2dfd9-bcfa-4a1a-ba5c-780528d67948",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "mset-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "d01d7bdc-94e0-4116-aead-fed8d6429c84",
              "parentUUID": "a2d2dfd9-bcfa-4a1a-ba5c-780528d67948",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "mset-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "5105693c-1da9-4293-8a13-6822e6096a8f",
              "parentUUID": "a2d2dfd9-bcfa-4a1a-ba5c-780528d67948",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create multiple keys at once",
              "fullTitle": "mset-command test should create multiple keys at once",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mset', 'key1', 'Hello', 'key2', 'world']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'key1']);\n        chai_1.expect(response).to.equal('Hello');\n        response = yield common_test_1.sendCommand(client, ['get', 'key2']);\n        chai_1.expect(response).to.equal('world');\n    })",
              "err": {},
              "uuid": "ec29ce0b-0821-4106-88ea-4fef539cd610",
              "parentUUID": "a2d2dfd9-bcfa-4a1a-ba5c-780528d67948",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only accept an even number of parameters",
              "fullTitle": "mset-command test should only accept an even number of parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['msEt', 'wrong', 'number', 'of']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'mset\\' command');\n    })",
              "err": {},
              "uuid": "09723b8e-2dff-47a9-bf29-7206d3bf67e9",
              "parentUUID": "a2d2dfd9-bcfa-4a1a-ba5c-780528d67948",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ec29ce0b-0821-4106-88ea-4fef539cd610",
            "09723b8e-2dff-47a9-bf29-7206d3bf67e9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b967d44f-e1df-4970-9a87-44bb037e7a94",
          "title": "set-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/set-command.test.ts",
          "file": "/test/resp/command/string/set-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "set-command test \"before all\" hook",
              "timedOut": false,
              "duration": 103,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "03bf8150-3ff5-46e6-8e1e-eb949b2f13ac",
              "parentUUID": "b967d44f-e1df-4970-9a87-44bb037e7a94",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "set-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "b45fc361-aefa-48d4-ad06-6e489d17eb3c",
              "parentUUID": "b967d44f-e1df-4970-9a87-44bb037e7a94",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "set-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "c9c92c00-8073-4697-b8a0-e9d8279ab74d",
              "parentUUID": "b967d44f-e1df-4970-9a87-44bb037e7a94",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "set-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "41175337-6baf-4d4d-995b-909c567bba55",
              "parentUUID": "b967d44f-e1df-4970-9a87-44bb037e7a94",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should allow us to set a several second ttl",
              "fullTitle": "set-command test should allow us to set a several second ttl",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// During local testing there are 8 milliseconds from put to get\ncommon_test_1.sendCommand(new net.Socket(), ['set', 'TTLtest', 'key', 'EX', '1'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    done();\n});",
              "err": {},
              "uuid": "69230d34-3994-450e-8f0a-d1f3d5c8a7a0",
              "parentUUID": "b967d44f-e1df-4970-9a87-44bb037e7a94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke NX after XX",
              "fullTitle": "set-command test should NOT allow SET to invoke NX after XX",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['set', 'test', 'key', 'XX', 'NX'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('ReplyError: Error: Syntax Exception - cannot set NX with XX');\n    done();\n});",
              "err": {},
              "uuid": "8045b704-1b0b-4858-867f-023121fd29be",
              "parentUUID": "b967d44f-e1df-4970-9a87-44bb037e7a94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke XX after NX",
              "fullTitle": "set-command test should NOT allow SET to invoke XX after NX",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['set', 'test', 'key', 'NX', 'XX'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('ReplyError: Error: Syntax Exception - cannot set XX with NX');\n    done();\n});",
              "err": {},
              "uuid": "c0a95cc2-5481-4509-8099-da7fe8858d88",
              "parentUUID": "b967d44f-e1df-4970-9a87-44bb037e7a94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return nil when SET invoked with XX on a key that doesn't exist",
              "fullTitle": "set-command test should return nil when SET invoked with XX on a key that doesn't exist",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueKey = `TEST${new Date().getTime()}`;\ncommon_test_1.sendCommand(new net.Socket(), ['set', uniqueKey, 'key', 'XX'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(null);\n    done();\n});",
              "err": {},
              "uuid": "fec6666a-8c1b-4052-ae16-244926320814",
              "parentUUID": "b967d44f-e1df-4970-9a87-44bb037e7a94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return OK when SET invoked with XX on a key that DOES exist",
              "fullTitle": "set-command test should return OK when SET invoked with XX on a key that DOES exist",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueKey = `TEST${new Date().getTime()}`;\n// set the key with NX first to validate that functionality\ncommon_test_1.sendCommand(new net.Socket(), ['set', uniqueKey, 'key', 'NX'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    common_test_1.sendCommand(new net.Socket(), ['set', uniqueKey, 'new value', 'XX'])\n        .then((responseXX) => {\n        chai_1.expect(responseXX).to.equal('OK');\n        // Now validate that the key is what we said last\n        common_test_1.sendCommand(new net.Socket(), ['get', uniqueKey])\n            .then((responseGet) => {\n            chai_1.expect(responseGet).to.equal('new value');\n            done();\n        });\n    });\n});",
              "err": {},
              "uuid": "e58186f8-d8fe-45d0-bd32-203e6e875f71",
              "parentUUID": "b967d44f-e1df-4970-9a87-44bb037e7a94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke EX and PX simultaneously",
              "fullTitle": "set-command test should NOT allow SET to invoke EX and PX simultaneously",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Note: Our behavior is different from redis.  This error is 'wrong number of args'\ncommon_test_1.sendCommand(new net.Socket(), ['set', 'test', 'key', 'EX', '100', 'PX', '100'])\n    .then((response) => {\n    chai_1.expect(response).to.match(/^ReplyError: ERR wrong number of arguments.*/);\n    done();\n});",
              "err": {},
              "uuid": "15282aaa-659f-464f-9bc8-fc8616526f30",
              "parentUUID": "b967d44f-e1df-4970-9a87-44bb037e7a94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow us to set a millisecond ttl",
              "fullTitle": "set-command test should allow us to set a millisecond ttl",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// During local teseting there are 8 milliseconds from put to get\ncommon_test_1.sendCommand(new net.Socket(), ['set', 'MILLItest', 'key', 'PX', '1'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    done();\n});",
              "err": {},
              "uuid": "5ad76017-5142-47c4-bd74-cdcfdc3c98db",
              "parentUUID": "b967d44f-e1df-4970-9a87-44bb037e7a94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prove that the one second TTL has expired",
              "fullTitle": "set-command test should prove that the one second TTL has expired",
              "timedOut": false,
              "duration": 1002,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "setTimeout(() => {\n    common_test_1.sendCommand(new net.Socket(), ['get', 'TTLtest'])\n        .then((responseGet) => {\n        chai_1.expect(responseGet).to.equal(null);\n        done();\n    });\n}, 1000);",
              "err": {},
              "uuid": "387c0e43-eb08-4fc1-acd6-17da750d2010",
              "parentUUID": "b967d44f-e1df-4970-9a87-44bb037e7a94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not accept unknown parameters",
              "fullTitle": "set-command test should not accept unknown parameters",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['set', 'test', 'key', 'Q'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('ReplyError: Error: Cannot parse the command');\n    done();\n});",
              "err": {},
              "uuid": "87d999f7-cdfa-4ae2-878b-81f0fbaf7d8c",
              "parentUUID": "b967d44f-e1df-4970-9a87-44bb037e7a94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke PX after EX",
              "fullTitle": "set-command test should NOT allow SET to invoke PX after EX",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['set', 'test', 'key', 'EX', '100', 'PX'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('ReplyError: Error: Syntax Exception - cannot set ttl twice');\n    done();\n});",
              "err": {},
              "uuid": "7ffcc5e7-e94a-44c3-bb57-f9642742b893",
              "parentUUID": "b967d44f-e1df-4970-9a87-44bb037e7a94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke EX after PX",
              "fullTitle": "set-command test should NOT allow SET to invoke EX after PX",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['set', 'test', 'key', 'PX', '100', 'EX'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('ReplyError: Error: Syntax Exception - cannot set ttl twice');\n    done();\n});",
              "err": {},
              "uuid": "99a4e8e2-eff3-4c75-b6de-345f158296c8",
              "parentUUID": "b967d44f-e1df-4970-9a87-44bb037e7a94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow a TTL less than 1ms",
              "fullTitle": "set-command test should not allow a TTL less than 1ms",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['set', 'MILLItest', 'key', 'PX', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('ReplyError: Error: invalid expire time in set');\n    done();\n});",
              "err": {},
              "uuid": "c1b6c30c-7022-4ab0-9eb5-dc2f9731c4b9",
              "parentUUID": "b967d44f-e1df-4970-9a87-44bb037e7a94",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prove that the millisecond TTL has expired",
              "fullTitle": "set-command test should prove that the millisecond TTL has expired",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "setTimeout(() => {\n    common_test_1.sendCommand(new net.Socket(), ['get', 'MILLItest'])\n        .then((responseGet) => {\n        chai_1.expect(responseGet).to.equal(null);\n        done();\n    });\n}, 10);",
              "err": {},
              "uuid": "55f5c27e-1fb3-4080-bc04-7dcf7ed399bf",
              "parentUUID": "b967d44f-e1df-4970-9a87-44bb037e7a94",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "69230d34-3994-450e-8f0a-d1f3d5c8a7a0",
            "8045b704-1b0b-4858-867f-023121fd29be",
            "c0a95cc2-5481-4509-8099-da7fe8858d88",
            "fec6666a-8c1b-4052-ae16-244926320814",
            "e58186f8-d8fe-45d0-bd32-203e6e875f71",
            "15282aaa-659f-464f-9bc8-fc8616526f30",
            "5ad76017-5142-47c4-bd74-cdcfdc3c98db",
            "387c0e43-eb08-4fc1-acd6-17da750d2010",
            "87d999f7-cdfa-4ae2-878b-81f0fbaf7d8c",
            "7ffcc5e7-e94a-44c3-bb57-f9642742b893",
            "99a4e8e2-eff3-4c75-b6de-345f158296c8",
            "c1b6c30c-7022-4ab0-9eb5-dc2f9731c4b9",
            "55f5c27e-1fb3-4080-bc04-7dcf7ed399bf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1044,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ae22343c-82c6-4c4e-bfd2-846c985e6f9c",
          "title": "data-type test",
          "fullFile": "/home/lane/git/redis/test/resp/data/data-type.test.ts",
          "file": "/test/resp/data/data-type.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "data-type test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "d69e3716-4d56-4867-abd9-134190deeb45",
              "parentUUID": "ae22343c-82c6-4c4e-bfd2-846c985e6f9c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "data-type test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "2abf78d3-6ba1-47c9-8700-5f27dee8cee1",
              "parentUUID": "ae22343c-82c6-4c4e-bfd2-846c985e6f9c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "data-type test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "ae0cddba-723b-4a51-a1a9-8d8747aaaa9b",
              "parentUUID": "ae22343c-82c6-4c4e-bfd2-846c985e6f9c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should enumerate data-types",
              "fullTitle": "data-type test should enumerate data-types",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        chai_1.expect(data_type_1.DataType.NONE).to.equal('none');\n        chai_1.expect(data_type_1.DataType.STRING).to.equal('string');\n        chai_1.expect(data_type_1.DataType.LIST).to.equal('list');\n        chai_1.expect(data_type_1.DataType.SET).to.equal('set');\n        chai_1.expect(data_type_1.DataType.ZSET).to.equal('zset');\n        chai_1.expect(data_type_1.DataType.HASH).to.equal('hash');\n        chai_1.expect(Object.keys(data_type_1.DataType).length).to.equal(6);\n    })",
              "err": {},
              "uuid": "4e2b4d80-c1ca-427b-bd84-7f49e005c7e8",
              "parentUUID": "ae22343c-82c6-4c4e-bfd2-846c985e6f9c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4e2b4d80-c1ca-427b-bd84-7f49e005c7e8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5015be88-8d9a-4041-84b1-be137462880e",
          "title": "sorted-set test",
          "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
          "file": "/test/resp/data/sorted-set.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "sorted-set test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();\nss = new sorted_set_1.SortedSet();\nz = new Z();",
              "err": {},
              "uuid": "06052891-dbd7-49fe-9c2e-9b6d3141ff0f",
              "parentUUID": "5015be88-8d9a-4041-84b1-be137462880e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sorted-set test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "c0ef9720-73ce-46c0-8e72-e40f28bbb7fa",
              "parentUUID": "5015be88-8d9a-4041-84b1-be137462880e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sorted-set test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "858aa6dd-2a74-465b-a4dd-b9d7e8b2df36",
              "parentUUID": "5015be88-8d9a-4041-84b1-be137462880e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should instantiate",
              "fullTitle": "sorted-set test should instantiate",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        chai_1.expect(z.constructor.name).to.equal('Z');\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(ss.constructor.name).to.equal('SortedSet');\n    })",
              "err": {},
              "uuid": "9ea43dd1-975c-4042-bf10-53a78cc5ea72",
              "parentUUID": "5015be88-8d9a-4041-84b1-be137462880e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add, get, and delete an entry",
              "fullTitle": "sorted-set test should add, get, and delete an entry",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', 1);\n        chai_1.expect(added).to.equal(null);\n        added = ss.add('test', 1);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(z.keys().length).to.equal(1);\n        chai_1.expect(ss.keys().length).to.equal(1);\n        let item = z.get('test');\n        chai_1.expect(item.constructor.name).to.equal('Number');\n        item = ss.get('test');\n        chai_1.expect(item.constructor.name).to.equal('Number');\n        z.del('test');\n        chai_1.expect(z.keys().length).to.equal(0);\n        ss.del('test');\n        chai_1.expect(ss.keys().length).to.equal(0);\n    })",
              "err": {},
              "uuid": "1222a5ca-2e8f-4af1-9a1e-579a270e8b9f",
              "parentUUID": "5015be88-8d9a-4041-84b1-be137462880e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw when attempting to add __proto__ key",
              "fullTitle": "sorted-set test should throw when attempting to add __proto__ key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(() => {\n            z.add('__proto__', 0);\n        }).to.throw();\n        // expect(() => {\n        //   ss.add('__proto__', 0)\n        // }).to.throw();\n    })",
              "err": {},
              "uuid": "e5347a44-94dc-47f5-b3d1-425bfc391f5d",
              "parentUUID": "5015be88-8d9a-4041-84b1-be137462880e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add an undefined or null score",
              "fullTitle": "sorted-set test should not add an undefined or null score",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', null);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(z.keys().length).to.equal(0);\n        added = z.add('test', undefined);\n        chai_1.expect(z.keys().length).to.equal(0);\n        // Typescript prevents adding null\n        // added = ss.add('test', null);\n        // expect(added).to.equal(null);\n        // expect(ss.keys().length).to.equal(0);\n        // added = ss.add('test', undefined);\n        // expect(z.keys().length).to.equal(0);\n    })",
              "err": {},
              "uuid": "f72419a6-900c-4fe2-83e4-c9f7f07c5d82",
              "parentUUID": "5015be88-8d9a-4041-84b1-be137462880e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not duplicate key/value pairs",
              "fullTitle": "sorted-set test should not duplicate key/value pairs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', 123);\n        chai_1.expect(added).to.equal(null); // This is weird\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = z.add('test', 123);\n        chai_1.expect(added).to.equal(123); // and weirder\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = ss.add('test', 123);\n        chai_1.expect(added).to.equal(null); // This is weird\n        chai_1.expect(ss.keys().length).to.equal(1);\n        added = ss.add('test', 123);\n        chai_1.expect(added).to.equal(123); // and weirder\n        chai_1.expect(ss.keys().length).to.equal(1);\n    })",
              "err": {},
              "uuid": "2b39a5ff-ed78-47ae-acb1-9c309cc225a1",
              "parentUUID": "5015be88-8d9a-4041-84b1-be137462880e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the old rank when replacing a key",
              "fullTitle": "sorted-set test should return the old rank when replacing a key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', 123);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = z.add('test', 321);\n        chai_1.expect(added).to.equal(123);\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = z.get('test');\n        chai_1.expect(added).to.equal(321);\n        added = ss.add('test', 123);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(ss.keys().length).to.equal(1);\n        added = ss.add('test', 321);\n        chai_1.expect(added).to.equal(123);\n        chai_1.expect(ss.keys().length).to.equal(1);\n        added = ss.get('test');\n        chai_1.expect(added).to.equal(321);\n    })",
              "err": {},
              "uuid": "fb1c0137-7632-4d5e-957f-c9f41a962a20",
              "parentUUID": "5015be88-8d9a-4041-84b1-be137462880e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a value when adding at least 32 values (I think - it is difficult to tell)",
              "fullTitle": "sorted-set test should return a value when adding at least 32 values (I think - it is difficult to tell)",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e377edbb-3939-4f23-929f-0c11e6dbd90d",
              "parentUUID": "5015be88-8d9a-4041-84b1-be137462880e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "fullTitle": "sorted-set test should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(z.add('Terminator', 8.0)).to.equal(null); // => null\n        chai_1.expect(z.add('District 9', 8.0)).to.equal(null); // => null\n        chai_1.expect(z.add('Ex Machina', 0.7)).to.equal(null); // => null\n        chai_1.expect(z.add('Ex Machina', 7.7)).to.equal(0.7); // => 0.7\n        // alias\n        chai_1.expect(z.set('The Matrix', 8.7)).to.equal(null); // => null\n        // average O(1)\n        chai_1.expect(z.has('Terminator')).to.equal(true); // => true\n        chai_1.expect(z.has('Blade Runner')).to.equal(false); // => false\n        // average O(1)\n        chai_1.expect(z.score('Ex Machina')).to.equal(7.7); // => 7.7\n        chai_1.expect(z.score('Blade Runner')).to.equal(null); // => null\n        // alias\n        chai_1.expect(z.get('The Matrix')).to.equal(8.7); // => 8.7\n        // average O(log(N))\n        chai_1.expect(z.rem('Ex Machina')).to.equal(7.7); // => 7.7\n        // average O(1)\n        chai_1.expect(z.rem('Ex Machina')).to.equal(null); // => null\n        // alias\n        chai_1.expect(z.del('Ex Machina')).to.equal(null); // => null\n        // average O(log(N)+M) where M is the number of elements between min and max\n        // This is not working as expected\n        chai_1.expect(z.rangeByScore(7, 8)).to.eql(['District 9', 'Terminator']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        chai_1.expect(z.rangeByScore(8)).to.eql(['District 9', 'Terminator', 'The Matrix']); // [8.0-∞)\n        // => ['District 9', 'Terminator', 'The Matrix']\n        chai_1.expect(z.rangeByScore(8, null, { withScores: true })).to.eql([['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]);\n        // => [['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]\n        // average O(log(N)+log(M)) where M as in rangeByScore\n        // Again - not as expected\n        chai_1.expect(z.count(7, 8)).to.equal(2); // => 3\n        // average O(log(N))\n        // Not working as expected\n        chai_1.expect(z.rank('Ex Machina')).to.equal(null); // => 0\n        // Not working as expected\n        chai_1.expect(z.rank('Terminator')).to.equal(1); // => 2\n        chai_1.expect(z.rank('Blade Runner')).to.equal(null); // => null\n        // average O(log(N)+M) where M as in range\n        // Not working as expected\n        chai_1.expect(z.range(0, 2)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Not working as expected\n        chai_1.expect(z.range(0, 2, { withScores: true })).to.eql([['District 9', 8], ['Terminator', 8], ['The Matrix', 8.7]]);\n        // => [['Ex Machina', 7.7],\n        //     ['District 9', 8],\n        //     ['Terminator', 8]]\n        chai_1.expect(z.range(-1)).to.eql(['The Matrix']); // => ['The Matrix']\n        // almost alias\n        // Not working as expected\n        chai_1.expect(z.slice(0, 3)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Set cardinality (number of elements)\n        // average O(1)\n        // Not working as expected\n        chai_1.expect(z.card()).to.equal(3); // => 4\n        // alias\n        // Not working as expected\n        chai_1.expect(z.length).to.equal(3); // => 4\n    })",
              "err": {},
              "uuid": "ac363476-d6b2-4a9a-9732-a8574b97d77c",
              "parentUUID": "5015be88-8d9a-4041-84b1-be137462880e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "the rewrite should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "fullTitle": "sorted-set test the rewrite should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(ss.add('Terminator', 8.0)).to.equal(null); // => null\n        chai_1.expect(ss.add('District 9', 8.0)).to.equal(null); // => null\n        chai_1.expect(ss.add('Ex Machina', 0.7)).to.equal(null); // => null\n        chai_1.expect(ss.add('Ex Machina', 7.7)).to.equal(0.7); // => 0.7\n        // alias\n        chai_1.expect(ss.set('The Matrix', 8.7)).to.equal(null); // => null\n        // average O(1)\n        chai_1.expect(ss.has('Terminator')).to.equal(true); // => true\n        chai_1.expect(ss.has('Blade Runner')).to.equal(false); // => false\n        // average O(1)\n        chai_1.expect(ss.score('Ex Machina')).to.equal(7.7); // => 7.7\n        chai_1.expect(ss.score('Blade Runner')).to.equal(null); // => null\n        // alias\n        chai_1.expect(ss.get('The Matrix')).to.equal(8.7); // => 8.7\n        // average O(log(N))\n        chai_1.expect(ss.rem('Ex Machina')).to.equal(7.7); // => 7.7\n        // average O(1)\n        chai_1.expect(ss.rem('Ex Machina')).to.equal(null); // => null\n        // alias\n        chai_1.expect(ss.del('Ex Machina')).to.equal(null); // => null\n        // average O(log(N)+M) where M is the number of elements between min and max\n        // This is not working as expected\n        chai_1.expect(ss.rangeByScore(7, 8)).to.eql(['District 9', 'Terminator']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        chai_1.expect(ss.rangeByScore(8)).to.eql(['District 9', 'Terminator', 'The Matrix']); // [8.0-∞)\n        // => ['District 9', 'Terminator', 'The Matrix']\n        chai_1.expect(ss.rangeByScore(8, null, { withScores: true })).to.eql([['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]);\n        // => [['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]\n        // average O(log(N)+log(M)) where M as in rangeByScore\n        // Again - not as expected\n        chai_1.expect(ss.count(7, 8)).to.equal(2); // => 3\n        // average O(log(N))\n        // Not working as expected\n        chai_1.expect(ss.rank('Ex Machina')).to.equal(null); // => 0\n        // Not working as expected\n        chai_1.expect(ss.rank('Terminator')).to.equal(1); // => 2\n        chai_1.expect(ss.rank('Blade Runner')).to.equal(null); // => null\n        // average O(log(N)+M) where M as in range\n        // Not working as expected\n        chai_1.expect(ss.range(0, 2)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Not working as expected\n        chai_1.expect(ss.range(0, 2, { withScores: true })).to.eql([['District 9', 8], ['Terminator', 8], ['The Matrix', 8.7]]);\n        // => [['Ex Machina', 7.7],\n        //     ['District 9', 8],\n        //     ['Terminator', 8]]\n        chai_1.expect(ss.range(-1)).to.eql(['The Matrix']); // => ['The Matrix']\n        // almost alias\n        // Not working as expected\n        chai_1.expect(ss.slice(0, 3)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Set cardinality (number of elements)\n        // average O(1)\n        // Not working as expected\n        chai_1.expect(ss.card()).to.equal(3); // => 4\n        // alias\n        // Not working as expected\n        chai_1.expect(ss.length).to.equal(3); // => 4\n    })",
              "err": {},
              "uuid": "7eba8879-5af9-454a-a0c1-c585d4d54498",
              "parentUUID": "5015be88-8d9a-4041-84b1-be137462880e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "f71ca65a-8075-466b-ad43-f8abcde09e61",
              "title": "skip map",
              "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
              "file": "/test/resp/data/sorted-set.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should support basic operations",
                  "fullTitle": "sorted-set test skip map should support basic operations",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var z = new Z();\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);\nchai_1.expect(z.range()).to.eql([]);\nchai_1.expect(z.rangeByScore()).to.eql([]);\nchai_1.expect(() => {\n    z.add('__proto__', 14);\n}).to.throw();\nz.add('5a600e16', 8);\nz.add('5a600e17', 9);\nchai_1.expect(z.add('5a600e18', 10)).to.equal(null);\nchai_1.expect(z.add('5a600e17', 12)).to.equal(9);\nchai_1.expect(z).to.have.length(3);\nchai_1.expect(z.toArray()).to.eql(['5a600e16', '5a600e18', '5a600e17']);\nchai_1.expect(z.toArray()).to.eql(z.range(0, -1));\nchai_1.expect(z.toArray()).to.eql(z.rangeByScore());\nchai_1.expect(z.has('5a600e16')).to.be.ok;\nchai_1.expect(z.has('5a600e17')).to.be.ok;\nchai_1.expect(z.has('5a600e18')).to.be.ok;\nchai_1.expect(z.has('5a600e19')).to.not.be.ok;\nchai_1.expect(z.score('5a600e16')).to.equal(8);\nchai_1.expect(z.score('5a600e17')).to.equal(12);\nchai_1.expect(z.score('5a600e18')).to.equal(10);\nchai_1.expect(z.score('5a600e19')).to.equal(null);\nchai_1.expect(z.rem('5a600e16')).to.equal(8);\nchai_1.expect(z).to.have.length(2);\nchai_1.expect(z.rem('5a600e16')).to.equal(null);\nchai_1.expect(z).to.have.length(2);\nchai_1.expect(z.has('5a600e16')).to.not.be.ok;\nchai_1.expect(z.toArray()).to.eql(['5a600e18', '5a600e17']);\nchai_1.expect(z.toArray({ withScores: true }))\n    .to.eql(z.range(0, -1, { withScores: true }));\nchai_1.expect(z.toArray()).to.eql(z.rangeByScore());\nz.add('5a600e16', 10);\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nchai_1.expect(z).to.have.length(9);\n// no change, so should be O(1)\nz.add('5a600e17', 12);\nchai_1.expect(z.rank('5a600e17')).to.equal(4);\nchai_1.expect(z).to.have.length(9);\nchai_1.expect(z.toArray()).to.eql([\n    '5a600e16',\n    '5a600e11',\n    '5a600e18',\n    '5a600e13',\n    '5a600e17',\n    '5a600e14',\n    '5a600e10',\n    '5a600e12',\n    '5a600e15',\n]);\nchai_1.expect(z.toArray()).to.eql(z.range(0, -1));\nchai_1.expect(z.toArray()).to.eql(z.rangeByScore());\nchai_1.expect(z.rangeByScore(14, 16, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n]);",
                  "err": {},
                  "uuid": "35b16094-c54f-44c5-bde6-1e0dff64c4af",
                  "parentUUID": "f71ca65a-8075-466b-ad43-f8abcde09e61",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "6d816955-226d-469c-9e63-c05dbced93aa",
                  "title": "#add",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should implicitly delete",
                      "fullTitle": "sorted-set test skip map #add should implicitly delete",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.add('5a600e14', null)).to.equal(14);\nchai_1.expect(z.add('5a600e19', null)).to.equal(null);\nchai_1.expect(z).to.have.length(8);",
                      "err": {},
                      "uuid": "40587fc5-f4c7-4b92-bf16-d025676f7873",
                      "parentUUID": "6d816955-226d-469c-9e63-c05dbced93aa",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "40587fc5-f4c7-4b92-bf16-d025676f7873"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "b1b15afa-a7d1-4d73-b38f-cad7fb827ea1",
                  "title": "#empty",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should remove all elements",
                      "fullTitle": "sorted-set test skip map #empty should remove all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nz.empty();\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "a8cacbff-55b0-430d-b384-f30f50f7e3cc",
                      "parentUUID": "b1b15afa-a7d1-4d73-b38f-cad7fb827ea1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a8cacbff-55b0-430d-b384-f30f50f7e3cc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "a5bb6393-0ecc-4c9a-a302-f10352631d89",
                  "title": "#incrBy(increment, key)",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should increase rank",
                      "fullTitle": "sorted-set test skip map #incrBy(increment, key) should increase rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.add('second', 2);\nz.add('third', 3);\nz.add('fourth', 4);\nchai_1.expect(z.incrBy(2, 'first')).to.equal(3);\nchai_1.expect(z.rank('first')).to.equal(1);",
                      "err": {},
                      "uuid": "b827b3ca-454b-42e5-af6b-19cb9d27a92b",
                      "parentUUID": "a5bb6393-0ecc-4c9a-a302-f10352631d89",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should create if not found",
                      "fullTitle": "sorted-set test skip map #incrBy(increment, key) should create if not found",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.incrBy(2, 'second');\nchai_1.expect(z.card()).to.equal(2);\nchai_1.expect(z.rank('second')).to.equal(1);",
                      "err": {},
                      "uuid": "b7b44d76-9516-4a51-a39d-604560282d4a",
                      "parentUUID": "a5bb6393-0ecc-4c9a-a302-f10352631d89",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b827b3ca-454b-42e5-af6b-19cb9d27a92b",
                    "b7b44d76-9516-4a51-a39d-604560282d4a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "92fef184-bf59-498a-bb07-cd38bf292644",
                  "title": "#keys",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the keys",
                      "fullTitle": "sorted-set test skip map #keys should return the keys",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.keys()).to.eql(['5a600e16', '5a600e11', '5a600e18', '5a600e13',\n    '5a600e17', '5a600e14', '5a600e10', '5a600e12', '5a600e15']);",
                      "err": {},
                      "uuid": "ed19adf1-7577-425a-83e8-9d6bda0632d9",
                      "parentUUID": "92fef184-bf59-498a-bb07-cd38bf292644",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ed19adf1-7577-425a-83e8-9d6bda0632d9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "13bcc78f-97b4-45ec-81d3-04b38edca95a",
                  "title": "#rangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map #rangeByScore should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rangeByScore(14, null, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);\nchai_1.expect(z.rangeByScore(null, 10, { withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n]);\nchai_1.expect(z.rangeByScore(-Infinity, Infinity)).to.eql(z.toArray());\nchai_1.expect(z.rangeByScore(null, null)).to.eql(z.toArray());",
                      "err": {},
                      "uuid": "d2d91a99-38cb-4f77-b6bb-88deeb986cbf",
                      "parentUUID": "13bcc78f-97b4-45ec-81d3-04b38edca95a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d2d91a99-38cb-4f77-b6bb-88deeb986cbf"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "9432043f-69aa-4d68-8ed1-6c327cb29745",
                  "title": "#count",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should count elements",
                      "fullTitle": "sorted-set test skip map #count should count elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nchai_1.expect(z.count()).to.equal(0);\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nz.add('5a600e19', 14);\nz.add('5a600f00', 30.0);\nz.add('5a600f01', 30.5);\nz.add('5a600f02', 31.0);\nz.add('5a600f03', 31.5);\nz.add('5a600f04', 32.0);\nz.add('5a600f05', 32.0);\nz.add('5a600f06', 32.0);\nchai_1.expect(z.count()).to.eql(z.rangeByScore().length);\nchai_1.expect(z.count(8)).to.eql(z.rangeByScore(8).length);\nchai_1.expect(z.count(3, 7)).to.eql(z.rangeByScore(3, 7).length);\nchai_1.expect(z.count(5, 14)).to.eql(z.rangeByScore(5, 14).length);\nchai_1.expect(z.count(5, 5)).to.eql(z.rangeByScore(5, 5).length);\nchai_1.expect(z.count(5, 0)).to.eql(z.rangeByScore(5, 0).length);\nchai_1.expect(z.count(30, 32)).to.eql(z.rangeByScore(30, 32).length);\nchai_1.expect(z.count(40)).to.eql(z.rangeByScore(40).length);",
                      "err": {},
                      "uuid": "a62d6f4d-8fcd-4f1c-892a-78c05e850dde",
                      "parentUUID": "9432043f-69aa-4d68-8ed1-6c327cb29745",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a62d6f4d-8fcd-4f1c-892a-78c05e850dde"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "d042431b-8985-4542-936a-e503d2ed7295",
                  "title": "#range",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map #range should support special ranges",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.add('second', 2);\nz.add('third', 3);\nz.add('fourth', 4);\nvar array = ['first', 'second', 'third', 'fourth'];\nchai_1.expect(z.range()).to.eql(array);\nchai_1.expect(z.range(2)).to.eql(array.slice(2));\nchai_1.expect(z.range(8)).to.eql(array.slice(8));\nchai_1.expect(z.range(0, 2)).to.eql(array.slice(0, 3));\nchai_1.expect(z.range(-1)).to.eql(['fourth']);\nchai_1.expect(z.range(-4)).to.eql(array);\nchai_1.expect(z.range(-4, -2)).to.eql(array.slice(0, 3));\nchai_1.expect(z.range(-4, z.length + 1000))\n    .to.eql(array.slice(-4, z.length + 1000));",
                      "err": {},
                      "uuid": "94ba6744-ae12-418d-bbbb-cf3832600b25",
                      "parentUUID": "d042431b-8985-4542-936a-e503d2ed7295",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should support withScores",
                      "fullTitle": "sorted-set test skip map #range should support withScores",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.add('second', 2);\nchai_1.expect(z.range(0, 0, { withScores: true }))\n    .to.eql([['first', 1]]);",
                      "err": {},
                      "uuid": "94448a36-b6ab-4509-b5e5-024b78c47a74",
                      "parentUUID": "d042431b-8985-4542-936a-e503d2ed7295",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "94ba6744-ae12-418d-bbbb-cf3832600b25",
                    "94448a36-b6ab-4509-b5e5-024b78c47a74"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "62f7e1fb-d3b2-4984-9f69-9d371de8c07b",
                  "title": "#intersect",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should intersect two sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect two sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = new Z(), b = new Z();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nchai_1.expect(Z.intersect(a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e19', '5a600e1c', '5a600e15', '5a600e1b']);\nchai_1.expect(Z.intersect(b, a)).to.eql(['5a600e1b', '5a600e14',\n    '5a600e1c', '5a600e15', '5a600e19', '5a600e10', '5a600e17']);",
                      "err": {},
                      "uuid": "f65baf08-5af5-41a0-9b94-498c657a87e5",
                      "parentUUID": "62f7e1fb-d3b2-4984-9f69-9d371de8c07b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect three sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect three sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = new Z(), b = new Z(), c = new Z();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nchai_1.expect(Z.intersect(c, a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e1c']);\nchai_1.expect(Z.intersect(c, a, b)).to.eql(c.intersect(a, b));",
                      "err": {},
                      "uuid": "4e72c155-1a2d-47e3-9c65-43ea745595b2",
                      "parentUUID": "62f7e1fb-d3b2-4984-9f69-9d371de8c07b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect four sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect four sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = new Z();\nvar b = new Z();\nvar c = new Z();\nvar d = new Z();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nd.add('5a600e1c', 400);\nd.add('5a600e17', 500);\nd.add('5a600e1f', 600);\nd.add('5a600e20', 700);\nchai_1.expect(Z.intersect(d, c, a, b)).to.eql(['5a600e17', '5a600e1c']);\nchai_1.expect(Z.intersect(d, c, a, b)).to.eql(d.intersect(c, a, b));",
                      "err": {},
                      "uuid": "2f935249-a196-40f2-b351-c59bda17ea3d",
                      "parentUUID": "62f7e1fb-d3b2-4984-9f69-9d371de8c07b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f65baf08-5af5-41a0-9b94-498c657a87e5",
                    "4e72c155-1a2d-47e3-9c65-43ea745595b2",
                    "2f935249-a196-40f2-b351-c59bda17ea3d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "258085a5-2092-479f-9d38-67f544c946a7",
                  "title": "#rank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should get the correct rank",
                      "fullTitle": "sorted-set test skip map #rank should get the correct rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rank('5a600e12')).to.equal(7);\nchai_1.expect(z.rank('5a600e13')).to.equal(3);\nchai_1.expect(z.rank('5a600e16')).to.equal(0);\nchai_1.expect(z.rank('5a600e15')).to.equal(8);\nchai_1.expect(z.rank('not in set')).to.equal(null);",
                      "err": {},
                      "uuid": "b0dbc5e5-e251-490a-a582-99409ad54a87",
                      "parentUUID": "258085a5-2092-479f-9d38-67f544c946a7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b0dbc5e5-e251-490a-a582-99409ad54a87"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "46c5bc78-c94a-452e-a796-e67f0dc34668",
                  "title": "#rem",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should delete special elements",
                      "fullTitle": "sorted-set test skip map #rem should delete special elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rem('5a600e15')).to.equal(19);\nchai_1.expect(z).to.have.length(8);\nchai_1.expect(z.rem('5a600e16')).to.equal(3);\nchai_1.expect(z).to.have.length(7);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "f0f4d678-c172-40a7-a831-96d27be910e0",
                      "parentUUID": "46c5bc78-c94a-452e-a796-e67f0dc34668",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should delete many elements",
                      "fullTitle": "sorted-set test skip map #rem should delete many elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rem('5a600e11')).to.equal(6);\nchai_1.expect(z.rem('5a600e13')).to.equal(11);\nchai_1.expect(z.rem('5a600e14')).to.equal(14);\nchai_1.expect(z.rem('5a600e15')).to.equal(19);\nchai_1.expect(z.rem('5a600e16')).to.equal(3);\nchai_1.expect(z.rem('5a600e17')).to.equal(12);\nchai_1.expect(z.length).to.equal(3);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e18', 10],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "a5b92e2e-b934-4987-adb0-4e227564b7fa",
                      "parentUUID": "46c5bc78-c94a-452e-a796-e67f0dc34668",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f0f4d678-c172-40a7-a831-96d27be910e0",
                    "a5b92e2e-b934-4987-adb0-4e227564b7fa"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "6c5056c4-660a-41ca-a79c-ccb275f22102",
                  "title": "#remRangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a range of elements",
                      "fullTitle": "sorted-set test skip map #remRangeByScore should strip out a range of elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByScore(4, 14)).to.equal(5);\nchai_1.expect(z).to.have.length(4);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "6cf5555a-ef41-42f4-b920-0dab43d2e164",
                      "parentUUID": "6c5056c4-660a-41ca-a79c-ccb275f22102",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all the elements",
                      "fullTitle": "sorted-set test skip map #remRangeByScore should strip out all the elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByScore(3, 19)).to.equal(9);\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "844dea42-80af-4a86-bd8a-454316086090",
                      "parentUUID": "6c5056c4-660a-41ca-a79c-ccb275f22102",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6cf5555a-ef41-42f4-b920-0dab43d2e164",
                    "844dea42-80af-4a86-bd8a-454316086090"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "f141e90f-f189-4057-a1d7-d7cfdf6106aa",
                  "title": "#remRangeByRank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a slice of elements",
                      "fullTitle": "sorted-set test skip map #remRangeByRank should strip out a slice of elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByRank(1, 6)).to.equal(5);\nchai_1.expect(z).to.have.length(4);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "4d5b09cd-b0f4-41f7-b78c-6e0811ab4897",
                      "parentUUID": "f141e90f-f189-4057-a1d7-d7cfdf6106aa",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all elements",
                      "fullTitle": "sorted-set test skip map #remRangeByRank should strip out all elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByRank(0, 9)).to.equal(9);\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "c481f32f-4179-4c13-a95f-ae165a5ecfe1",
                      "parentUUID": "f141e90f-f189-4057-a1d7-d7cfdf6106aa",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4d5b09cd-b0f4-41f7-b78c-6e0811ab4897",
                    "c481f32f-4179-4c13-a95f-ae165a5ecfe1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "386c1e7c-0ad4-49a6-a0f4-09400f59f667",
                  "title": "#values",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the values",
                      "fullTitle": "sorted-set test skip map #values should return the values",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', -1);\nz.add('third', 5);\nz.add('second', 3);\nchai_1.expect(z.values()).to.eql([-1, 3, 5]);",
                      "err": {},
                      "uuid": "9a563c24-9f8d-4c18-b687-7b7218745a7e",
                      "parentUUID": "386c1e7c-0ad4-49a6-a0f4-09400f59f667",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9a563c24-9f8d-4c18-b687-7b7218745a7e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "5b76fa3a-7624-49cc-a3cb-bcf0d9d8508c",
                  "title": "unique",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should ensure values are unique",
                      "fullTitle": "sorted-set test skip map unique should ensure values are unique",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z({ unique: true });\nassert.equal(z.keys().length, 0, 'Expected an empty SortedSet');\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(() => {\n    z.add('5a600e19', 11);\n}).to.throw(/unique/);\n// quick exit test\nchai_1.expect(() => {\n    z.add('5a600dff', z._head.next[z._level - 1].next.value);\n}).to.throw(/unique/);\n// this test ensures the key < key check doesn't come into play\nchai_1.expect(() => {\n    z.add('5a600dff', 11);\n}).to.throw(/unique/);\nchai_1.expect(() => {\n    z.add('5a600e18', 10);\n}).to.not.throw();\nchai_1.expect(z).to.have.length(9);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "60381633-0f96-45e9-b567-908ce4eab9d9",
                      "parentUUID": "5b76fa3a-7624-49cc-a3cb-bcf0d9d8508c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert keys if constraint broken during update",
                      "fullTitle": "sorted-set test skip map unique should revert keys if constraint broken during update",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z({ unique: true });\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(() => {\n    z.add('5a600e13', 14);\n}).to.throw(/unique/);\nchai_1.expect(z).to.have.length(9);\nchai_1.expect(z.score('5a600e13')).to.equal(11);",
                      "err": {},
                      "uuid": "54dbbbe3-aab0-4834-87e7-4dc044f8db5f",
                      "parentUUID": "5b76fa3a-7624-49cc-a3cb-bcf0d9d8508c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "60381633-0f96-45e9-b567-908ce4eab9d9",
                    "54dbbbe3-aab0-4834-87e7-4dc044f8db5f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "35b16094-c54f-44c5-bde6-1e0dff64c4af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "d3f8ba01-3fc3-4395-a5c7-147e6686b14c",
              "title": "skip map rewrite",
              "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
              "file": "/test/resp/data/sorted-set.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should support basic operations",
                  "fullTitle": "sorted-set test skip map rewrite should support basic operations",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let ss = new sorted_set_1.SortedSet();\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);\nchai_1.expect(ss.range()).to.eql([]);\nchai_1.expect(ss.rangeByScore()).to.eql([]);\n// expect(() => {\n//   ss.add('__proto__', 14);\n// }).to.throw();\nss.add('5a600e16', 8);\nss.add('5a600e17', 9);\nchai_1.expect(ss.add('5a600e18', 10)).to.equal(null);\nchai_1.expect(ss.add('5a600e17', 12)).to.equal(9);\nchai_1.expect(ss).to.have.length(3);\nchai_1.expect(ss.toArray()).to.eql(['5a600e16', '5a600e18', '5a600e17']);\nchai_1.expect(ss.toArray()).to.eql(ss.range(0, -1));\nchai_1.expect(ss.toArray()).to.eql(ss.rangeByScore());\nchai_1.expect(ss.has('5a600e16')).to.be.ok;\nchai_1.expect(ss.has('5a600e17')).to.be.ok;\nchai_1.expect(ss.has('5a600e18')).to.be.ok;\nchai_1.expect(ss.has('5a600e19')).to.not.be.ok;\nchai_1.expect(ss.score('5a600e16')).to.equal(8);\nchai_1.expect(ss.score('5a600e17')).to.equal(12);\nchai_1.expect(ss.score('5a600e18')).to.equal(10);\nchai_1.expect(ss.score('5a600e19')).to.equal(null);\nchai_1.expect(ss.rem('5a600e16')).to.equal(8);\nchai_1.expect(ss).to.have.length(2);\nchai_1.expect(ss.rem('5a600e16')).to.equal(null);\nchai_1.expect(ss).to.have.length(2);\nchai_1.expect(ss.has('5a600e16')).to.not.be.ok;\nchai_1.expect(ss.toArray()).to.eql(['5a600e18', '5a600e17']);\nchai_1.expect(ss.toArray({ withScores: true }))\n    .to.eql(ss.range(0, -1, { withScores: true }));\nchai_1.expect(ss.toArray()).to.eql(ss.rangeByScore());\nss.add('5a600e16', 10);\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nchai_1.expect(ss).to.have.length(9);\n// no change, so should be O(1)\nss.add('5a600e17', 12);\nchai_1.expect(ss.rank('5a600e17')).to.equal(4);\nchai_1.expect(ss).to.have.length(9);\nchai_1.expect(ss.toArray()).to.eql([\n    '5a600e16',\n    '5a600e11',\n    '5a600e18',\n    '5a600e13',\n    '5a600e17',\n    '5a600e14',\n    '5a600e10',\n    '5a600e12',\n    '5a600e15',\n]);\nchai_1.expect(ss.toArray()).to.eql(ss.range(0, -1));\nchai_1.expect(ss.toArray()).to.eql(ss.rangeByScore());\nchai_1.expect(ss.rangeByScore(14, 16, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n]);",
                  "err": {},
                  "uuid": "adcdeeed-c4db-427c-a9e1-fece160e7303",
                  "parentUUID": "d3f8ba01-3fc3-4395-a5c7-147e6686b14c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "dc67ef4a-d46d-4dc3-bbdb-2a17e84b2f14",
                  "title": "#add",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should implicitly delete",
                      "fullTitle": "sorted-set test skip map rewrite #add should implicitly delete",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.add('5a600e14', null)).to.equal(14);\nchai_1.expect(ss.add('5a600e19', null)).to.equal(null);\nchai_1.expect(ss).to.have.length(8);",
                      "err": {},
                      "uuid": "a1dfac74-e723-47bd-8919-1a40ab3e8516",
                      "parentUUID": "dc67ef4a-d46d-4dc3-bbdb-2a17e84b2f14",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a1dfac74-e723-47bd-8919-1a40ab3e8516"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "aef5b8ba-8686-4764-9a55-c33561879076",
                  "title": "#empty",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should remove all elements",
                      "fullTitle": "sorted-set test skip map rewrite #empty should remove all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nss.empty();\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "d84098d5-efd9-4940-bbd5-b6a64f83129a",
                      "parentUUID": "aef5b8ba-8686-4764-9a55-c33561879076",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d84098d5-efd9-4940-bbd5-b6a64f83129a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "9142bcd4-11de-4137-892c-d5009ab31313",
                  "title": "#incrBy(increment, key)",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should increase rank",
                      "fullTitle": "sorted-set test skip map rewrite #incrBy(increment, key) should increase rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.add('second', 2);\nss.add('third', 3);\nss.add('fourth', 4);\nchai_1.expect(ss.incrBy(2, 'first')).to.equal(3);\nchai_1.expect(ss.rank('first')).to.equal(1);",
                      "err": {},
                      "uuid": "5e7cd2d9-b24f-4ece-800e-8d007080a1a7",
                      "parentUUID": "9142bcd4-11de-4137-892c-d5009ab31313",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should create if not found",
                      "fullTitle": "sorted-set test skip map rewrite #incrBy(increment, key) should create if not found",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.incrBy(2, 'second');\nchai_1.expect(ss.card()).to.equal(2);\nchai_1.expect(ss.rank('second')).to.equal(1);",
                      "err": {},
                      "uuid": "6c1ee8ea-8f65-4d61-b883-0ac42ecd337d",
                      "parentUUID": "9142bcd4-11de-4137-892c-d5009ab31313",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5e7cd2d9-b24f-4ece-800e-8d007080a1a7",
                    "6c1ee8ea-8f65-4d61-b883-0ac42ecd337d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "983852dc-8047-4729-85d0-ef36e0995111",
                  "title": "#keys",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the keys",
                      "fullTitle": "sorted-set test skip map rewrite #keys should return the keys",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.keys()).to.eql(['5a600e16', '5a600e11', '5a600e18', '5a600e13',\n    '5a600e17', '5a600e14', '5a600e10', '5a600e12', '5a600e15']);",
                      "err": {},
                      "uuid": "ad7fe136-2f6f-47c8-bec3-d63f325324e6",
                      "parentUUID": "983852dc-8047-4729-85d0-ef36e0995111",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ad7fe136-2f6f-47c8-bec3-d63f325324e6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "11c58d22-e245-42a8-bd7a-bad4ee06a2fe",
                  "title": "#rangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map rewrite #rangeByScore should support special ranges",
                      "timedOut": false,
                      "duration": 16,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rangeByScore(14, null, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);\nchai_1.expect(ss.rangeByScore(null, 10, { withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n]);\nchai_1.expect(ss.rangeByScore(-Infinity, Infinity)).to.eql(ss.toArray());\nchai_1.expect(ss.rangeByScore(null, null)).to.eql(ss.toArray());",
                      "err": {},
                      "uuid": "a73c4268-e3a2-48d7-a6f5-0fffb1f7a25c",
                      "parentUUID": "11c58d22-e245-42a8-bd7a-bad4ee06a2fe",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a73c4268-e3a2-48d7-a6f5-0fffb1f7a25c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 16,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "89c1beba-e8df-410f-a8e1-ed2b7b92d518",
                  "title": "#count",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should count elements",
                      "fullTitle": "sorted-set test skip map rewrite #count should count elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nchai_1.expect(ss.count()).to.equal(0);\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nss.add('5a600e19', 14);\nss.add('5a600f00', 30.0);\nss.add('5a600f01', 30.5);\nss.add('5a600f02', 31.0);\nss.add('5a600f03', 31.5);\nss.add('5a600f04', 32.0);\nss.add('5a600f05', 32.0);\nss.add('5a600f06', 32.0);\nchai_1.expect(ss.count()).to.eql(ss.rangeByScore().length);\nchai_1.expect(ss.count(8)).to.eql(ss.rangeByScore(8).length);\nchai_1.expect(ss.count(3, 7)).to.eql(ss.rangeByScore(3, 7).length);\nchai_1.expect(ss.count(5, 14)).to.eql(ss.rangeByScore(5, 14).length);\nchai_1.expect(ss.count(5, 5)).to.eql(ss.rangeByScore(5, 5).length);\nchai_1.expect(ss.count(5, 0)).to.eql(ss.rangeByScore(5, 0).length);\nchai_1.expect(ss.count(30, 32)).to.eql(ss.rangeByScore(30, 32).length);\nchai_1.expect(ss.count(40)).to.eql(ss.rangeByScore(40).length);",
                      "err": {},
                      "uuid": "4e3840be-183c-407c-aa09-4675f3a4386c",
                      "parentUUID": "89c1beba-e8df-410f-a8e1-ed2b7b92d518",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4e3840be-183c-407c-aa09-4675f3a4386c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "49f80ced-80fe-4d3e-8d6a-c794036687df",
                  "title": "#range",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map rewrite #range should support special ranges",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.add('second', 2);\nss.add('third', 3);\nss.add('fourth', 4);\nlet array = ['first', 'second', 'third', 'fourth'];\nchai_1.expect(ss.range()).to.eql(array);\nchai_1.expect(ss.range(2)).to.eql(array.slice(2));\nchai_1.expect(ss.range(8)).to.eql(array.slice(8));\nchai_1.expect(ss.range(0, 2)).to.eql(array.slice(0, 3));\nchai_1.expect(ss.range(-1)).to.eql(['fourth']);\nchai_1.expect(ss.range(-4)).to.eql(array);\nchai_1.expect(ss.range(-4, -2)).to.eql(array.slice(0, 3));\nchai_1.expect(ss.range(-4, ss.length + 1000))\n    .to.eql(array.slice(-4, ss.length + 1000));",
                      "err": {},
                      "uuid": "bc12f5dd-3e54-4a8f-a570-38cdbad883da",
                      "parentUUID": "49f80ced-80fe-4d3e-8d6a-c794036687df",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should support withScores",
                      "fullTitle": "sorted-set test skip map rewrite #range should support withScores",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.add('second', 2);\nchai_1.expect(ss.range(0, 0, { withScores: true }))\n    .to.eql([['first', 1]]);",
                      "err": {},
                      "uuid": "7956ae90-3e77-465c-9dc7-4ae380810d2d",
                      "parentUUID": "49f80ced-80fe-4d3e-8d6a-c794036687df",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bc12f5dd-3e54-4a8f-a570-38cdbad883da",
                    "7956ae90-3e77-465c-9dc7-4ae380810d2d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "bff8df0f-5fab-4769-96af-964c1c73381c",
                  "title": "#intersect",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should intersect two sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect two sets",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nchai_1.expect(sorted_set_1.SortedSet.intersect(a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e19', '5a600e1c', '5a600e15', '5a600e1b']);\nchai_1.expect(sorted_set_1.SortedSet.intersect(b, a)).to.eql(['5a600e1b', '5a600e14',\n    '5a600e1c', '5a600e15', '5a600e19', '5a600e10', '5a600e17']);",
                      "err": {},
                      "uuid": "43a7a008-2723-4de5-8c4a-e9d448b26125",
                      "parentUUID": "bff8df0f-5fab-4769-96af-964c1c73381c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect three sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect three sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet(), c = new sorted_set_1.SortedSet();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nchai_1.expect(sorted_set_1.SortedSet.intersect(c, a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e1c']);\n// expect(SortedSet.intersect(c, a, b)).to.eql(c.intersect(a, b));",
                      "err": {},
                      "uuid": "dec147b6-03ac-40de-bca4-61cc209488ba",
                      "parentUUID": "bff8df0f-5fab-4769-96af-964c1c73381c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect four sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect four sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let a = new sorted_set_1.SortedSet();\nlet b = new sorted_set_1.SortedSet();\nlet c = new sorted_set_1.SortedSet();\nlet d = new sorted_set_1.SortedSet();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nd.add('5a600e1c', 400);\nd.add('5a600e17', 500);\nd.add('5a600e1f', 600);\nd.add('5a600e20', 700);\nchai_1.expect(sorted_set_1.SortedSet.intersect(d, c, a, b)).to.eql(['5a600e17', '5a600e1c']);\n// expect(SortedSet.intersect(d, c, a, b)).to.eql(d.intersect(c, a, b));",
                      "err": {},
                      "uuid": "160919f9-04bb-4265-af15-3cff2784f96f",
                      "parentUUID": "bff8df0f-5fab-4769-96af-964c1c73381c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "43a7a008-2723-4de5-8c4a-e9d448b26125",
                    "dec147b6-03ac-40de-bca4-61cc209488ba",
                    "160919f9-04bb-4265-af15-3cff2784f96f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "9a725b53-6c26-4043-98a7-9a253fc9e378",
                  "title": "#rank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should get the correct rank",
                      "fullTitle": "sorted-set test skip map rewrite #rank should get the correct rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rank('5a600e12')).to.equal(7);\nchai_1.expect(ss.rank('5a600e13')).to.equal(3);\nchai_1.expect(ss.rank('5a600e16')).to.equal(0);\nchai_1.expect(ss.rank('5a600e15')).to.equal(8);\nchai_1.expect(ss.rank('not in set')).to.equal(null);",
                      "err": {},
                      "uuid": "28973f14-2542-47b8-afcd-7afb9165a997",
                      "parentUUID": "9a725b53-6c26-4043-98a7-9a253fc9e378",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "28973f14-2542-47b8-afcd-7afb9165a997"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "372a2037-f634-4e4f-ab76-6fd3aa4bc55c",
                  "title": "#rem",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should delete special elements",
                      "fullTitle": "sorted-set test skip map rewrite #rem should delete special elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rem('5a600e15')).to.equal(19);\nchai_1.expect(ss).to.have.length(8);\nchai_1.expect(ss.rem('5a600e16')).to.equal(3);\nchai_1.expect(ss).to.have.length(7);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "e10ab60a-6d66-4232-be6b-ff07c89d6060",
                      "parentUUID": "372a2037-f634-4e4f-ab76-6fd3aa4bc55c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should delete many elements",
                      "fullTitle": "sorted-set test skip map rewrite #rem should delete many elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rem('5a600e11')).to.equal(6);\nchai_1.expect(ss.rem('5a600e13')).to.equal(11);\nchai_1.expect(ss.rem('5a600e14')).to.equal(14);\nchai_1.expect(ss.rem('5a600e15')).to.equal(19);\nchai_1.expect(ss.rem('5a600e16')).to.equal(3);\nchai_1.expect(ss.rem('5a600e17')).to.equal(12);\nchai_1.expect(ss.length).to.equal(3);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e18', 10],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "e27f6347-663f-4591-b589-35bd995e9ade",
                      "parentUUID": "372a2037-f634-4e4f-ab76-6fd3aa4bc55c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e10ab60a-6d66-4232-be6b-ff07c89d6060",
                    "e27f6347-663f-4591-b589-35bd995e9ade"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "7028daf5-6bcf-4363-b1d7-b55f98d02139",
                  "title": "#remRangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a range of elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByScore should strip out a range of elements",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByScore(4, 14)).to.equal(5);\nchai_1.expect(ss).to.have.length(4);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "580809ca-3557-4a43-a7f1-9faa0cd036ce",
                      "parentUUID": "7028daf5-6bcf-4363-b1d7-b55f98d02139",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all the elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByScore should strip out all the elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByScore(3, 19)).to.equal(9);\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "3bd12b48-d817-408b-a52f-ef3376237ee8",
                      "parentUUID": "7028daf5-6bcf-4363-b1d7-b55f98d02139",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "580809ca-3557-4a43-a7f1-9faa0cd036ce",
                    "3bd12b48-d817-408b-a52f-ef3376237ee8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "104bb429-51d8-4eb2-9d45-69db18a29c67",
                  "title": "#remRangeByRank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a slice of elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByRank should strip out a slice of elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByRank(1, 6)).to.equal(5);\nchai_1.expect(ss).to.have.length(4);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "682aa36b-617e-42af-b1ba-d567b6718f93",
                      "parentUUID": "104bb429-51d8-4eb2-9d45-69db18a29c67",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByRank should strip out all elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByRank(0, 9)).to.equal(9);\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "2af7e625-48d6-4227-ad4d-2ee4e43d2689",
                      "parentUUID": "104bb429-51d8-4eb2-9d45-69db18a29c67",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "682aa36b-617e-42af-b1ba-d567b6718f93",
                    "2af7e625-48d6-4227-ad4d-2ee4e43d2689"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "5669d2b6-2398-4dd4-980f-816aac3a9f5e",
                  "title": "#values",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the values",
                      "fullTitle": "sorted-set test skip map rewrite #values should return the values",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', -1);\nss.add('third', 5);\nss.add('second', 3);\nchai_1.expect(ss.values()).to.eql([-1, 3, 5]);",
                      "err": {},
                      "uuid": "07334135-9ab8-45e0-81db-0a43c68838af",
                      "parentUUID": "5669d2b6-2398-4dd4-980f-816aac3a9f5e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "07334135-9ab8-45e0-81db-0a43c68838af"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "e52c473b-87f4-4b27-bd60-7379141bf49c",
                  "title": "unique rewrite",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should ensure values are unique",
                      "fullTitle": "sorted-set test skip map rewrite unique rewrite should ensure values are unique",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const options = { unique: true };\nlet ss = new sorted_set_1.SortedSet(options);\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(() => {\n    ss.add('5a600e19', 11);\n}).to.throw(/unique/);\n// quick exit test\nchai_1.expect(() => {\n    ss.add('5a600dff', ss._head.next[ss._level - 1].next.value);\n}).to.throw(/unique/);\n// this test ensures the key < key check doesn't come into play\nchai_1.expect(() => {\n    ss.add('5a600dff', 11);\n}).to.throw(/unique/);\nchai_1.expect(() => {\n    ss.add('5a600e18', 10);\n}).to.not.throw();\nchai_1.expect(ss).to.have.length(9);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "c68f5e8b-8864-4de4-bf42-bbcb18707404",
                      "parentUUID": "e52c473b-87f4-4b27-bd60-7379141bf49c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert keys if constraint broken during update",
                      "fullTitle": "sorted-set test skip map rewrite unique rewrite should revert keys if constraint broken during update",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet({ unique: true });\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nconsole.log(`values is ${ss.values()}`);\nchai_1.expect(() => {\n    ss.add('5a600e13', 14);\n}).to.throw(/unique/);\nchai_1.expect(ss).to.have.length(9);\nchai_1.expect(ss.score('5a600e13')).to.equal(11);",
                      "err": {},
                      "uuid": "dd43794c-24cf-4bde-a4c9-da63451d19d1",
                      "parentUUID": "e52c473b-87f4-4b27-bd60-7379141bf49c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c68f5e8b-8864-4de4-bf42-bbcb18707404",
                    "dd43794c-24cf-4bde-a4c9-da63451d19d1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "adcdeeed-c4db-427c-a9e1-fece160e7303"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "9ea43dd1-975c-4042-bf10-53a78cc5ea72",
            "1222a5ca-2e8f-4af1-9a1e-579a270e8b9f",
            "e5347a44-94dc-47f5-b3d1-425bfc391f5d",
            "f72419a6-900c-4fe2-83e4-c9f7f07c5d82",
            "2b39a5ff-ed78-47ae-acb1-9c309cc225a1",
            "fb1c0137-7632-4d5e-957f-c9f41a962a20",
            "ac363476-d6b2-4a9a-9732-a8574b97d77c",
            "7eba8879-5af9-454a-a0c1-c585d4d54498"
          ],
          "failures": [],
          "pending": [
            "e377edbb-3939-4f23-929f-0c11e6dbd90d"
          ],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "reportDir": "docs/mochawesome"
      },
      "version": "4.1.0"
    }
  }
}