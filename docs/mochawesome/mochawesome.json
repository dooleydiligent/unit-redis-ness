{
  "stats": {
    "suites": 38,
    "tests": 107,
    "passes": 104,
    "pending": 3,
    "failures": 0,
    "start": "2023-12-10T21:40:25.500Z",
    "end": "2023-12-10T21:40:25.645Z",
    "duration": 145,
    "testsRegistered": 107,
    "passPercent": 100,
    "pendingPercent": 2.803738317757009,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0b32849c-0992-4f5c-a287-a58a9917b9ab",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "done();",
          "err": {},
          "uuid": "b26c0121-1de7-48fa-bc57-d5a4bfb772e9",
          "parentUUID": "0b32849c-0992-4f5c-a287-a58a9917b9ab",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "__awaiter(void 0, void 0, void 0, function* () {\n})",
          "err": {},
          "uuid": "63e92990-7067-417b-a818-5607b9cfc239",
          "parentUUID": "0b32849c-0992-4f5c-a287-a58a9917b9ab",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "01f643dc-8c3e-4bd1-aff6-951305d1336f",
          "title": "client command test",
          "fullFile": "/home/lane/git/unit-redis-ness/test/resp/command/client-command.test.ts",
          "file": "/test/resp/command/client-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"client command test\"",
              "fullTitle": "client command test \"before all\" hook in \"client command test\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on(\"ready\", () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "61ca49ea-f105-4950-9f78-9fec343c05f7",
              "parentUUID": "01f643dc-8c3e-4bd1-aff6-951305d1336f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"client command test\"",
              "fullTitle": "client command test \"before each\" hook in \"client command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "c4a8775c-21f1-4286-9932-1d151ef61e1e",
              "parentUUID": "01f643dc-8c3e-4bd1-aff6-951305d1336f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"client command test\"",
              "fullTitle": "client command test \"after all\" hook in \"client command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "0d87c3e4-f2d4-4b2b-8495-4e0a3cf70670",
              "parentUUID": "01f643dc-8c3e-4bd1-aff6-951305d1336f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"client command test\"",
              "fullTitle": "client command test \"after each\" hook in \"client command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "4c9cc297-86bd-4354-acb8-47067343ebb6",
              "parentUUID": "01f643dc-8c3e-4bd1-aff6-951305d1336f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow more than 3 parameters",
              "fullTitle": "client command test should not allow more than 3 parameters",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"one\",\n            \"two\",\n            \"three\",\n            \"four\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR Unknown subcommand or wrong number of arguments for 'one'. Try CLIENT HELP\");\n    })",
              "err": {},
              "uuid": "015c9701-f85c-454a-a85c-2c5e506cb7be",
              "parentUUID": "01f643dc-8c3e-4bd1-aff6-951305d1336f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail predictably when an unknown subcommand is passed",
              "fullTitle": "client command test should fail predictably when an unknown subcommand is passed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"whatever\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(util.format(DEFAULT_ERROR, \"whatever\"));\n    })",
              "err": {},
              "uuid": "d0007ccb-b0d8-420e-8fa7-f32f2d2e4f90",
              "parentUUID": "01f643dc-8c3e-4bd1-aff6-951305d1336f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a NIL name when called with \"GETNAME\" subcommand",
              "fullTitle": "client command test should return a NIL name when called with \"GETNAME\" subcommand",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"getname\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "ef90f47b-a1cd-4923-a9cf-9b54679d15f8",
              "parentUUID": "01f643dc-8c3e-4bd1-aff6-951305d1336f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail predictably when \"GETNAME\" is called with too many parameters",
              "fullTitle": "client command test should fail predictably when \"GETNAME\" is called with too many parameters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"getname\",\n            \"extra\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(util.format(DEFAULT_ERROR, \"getname\"));\n    })",
              "err": {},
              "uuid": "2f6b7502-86af-466f-b270-837ad035cb2b",
              "parentUUID": "01f643dc-8c3e-4bd1-aff6-951305d1336f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with \"OK\" when \"setname\" is called with a valid name",
              "fullTitle": "client command test should respond with \"OK\" when \"setname\" is called with a valid name",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"setname\",\n            \"whatever\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"getname\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"whatever\");\n    })",
              "err": {},
              "uuid": "1b698561-0d8a-471c-9a58-8f465cdf56dd",
              "parentUUID": "01f643dc-8c3e-4bd1-aff6-951305d1336f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should persist the value for \"setname\" across tests",
              "fullTitle": "client command test should persist the value for \"setname\" across tests",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"getname\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"whatever\");\n    })",
              "err": {},
              "uuid": "1add8f9b-d8f0-4fc4-8653-07afeb7f85a2",
              "parentUUID": "01f643dc-8c3e-4bd1-aff6-951305d1336f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"setname\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"setname\" called with too many parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"whatever\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(util.format(DEFAULT_ERROR, \"whatever\"));\n    })",
              "err": {},
              "uuid": "dc43d0f3-be9a-4b07-9f4c-1bf64811ba8d",
              "parentUUID": "4ae4a8f2-89ed-4212-8ada-d6b656db614d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a NIL name when called with \"GETNAME\" subcommand",
              "fullTitle": "client command test should return a NIL name when called with \"GETNAME\" subcommand",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"getname\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "039db6b3-5737-4f73-be3b-85a534191806",
              "parentUUID": "4ae4a8f2-89ed-4212-8ada-d6b656db614d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail predictably when \"GETNAME\" is called with too many parameters",
              "fullTitle": "client command test should fail predictably when \"GETNAME\" is called with too many parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"getname\",\n            \"extra\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(util.format(DEFAULT_ERROR, \"getname\"));\n    })",
              "err": {},
              "uuid": "7590e3d7-4b17-4b9c-b857-9148cca97717",
              "parentUUID": "4ae4a8f2-89ed-4212-8ada-d6b656db614d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with \"OK\" when \"setname\" is called with a valid name",
              "fullTitle": "client command test should respond with \"OK\" when \"setname\" is called with a valid name",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"setname\",\n            \"whatever\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"getname\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"whatever\");\n    })",
              "err": {},
              "uuid": "b44867c5-562d-4d4c-b3f1-6bddf876536c",
              "parentUUID": "4ae4a8f2-89ed-4212-8ada-d6b656db614d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should persist the value for \"setname\" across tests",
              "fullTitle": "client command test should persist the value for \"setname\" across tests",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"getname\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"whatever\");\n    })",
              "err": {},
              "uuid": "368ad471-50eb-4791-a742-5d465755cc2a",
              "parentUUID": "4ae4a8f2-89ed-4212-8ada-d6b656db614d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"setname\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"setname\" called with too many parameters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"setname\",\n            \"test\",\n            \"two\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(util.format(DEFAULT_ERROR, \"setname\"));\n    })",
              "err": {},
              "uuid": "6cc479ef-d461-4957-afcd-e5001a88a8ef",
              "parentUUID": "01f643dc-8c3e-4bd1-aff6-951305d1336f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow whitespace in \"setname\" subcommand",
              "fullTitle": "client command test should not allow whitespace in \"setname\" subcommand",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"setname\",\n            \"te\\nst\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR Client names cannot contain spaces, newlines or special characters.\");\n    })",
              "err": {},
              "uuid": "732ee6e3-26fa-4fbc-ab14-3191a13d8ea8",
              "parentUUID": "01f643dc-8c3e-4bd1-aff6-951305d1336f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the server-assigned client id",
              "fullTitle": "client command test should return the server-assigned client id",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"id\"\n        ]);\n        (0, chai_1.expect)(response).to.be.a(\"number\");\n        (0, chai_1.expect)(String(response).length).to.be.greaterThan(0);\n    })",
              "err": {},
              "uuid": "f9cb88c7-82de-4a31-9f3d-c51da9141f9f",
              "parentUUID": "01f643dc-8c3e-4bd1-aff6-951305d1336f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"id\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"id\" called with too many parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"id\",\n            \"test\",\n            \"two\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(util.format(DEFAULT_ERROR, \"id\"));\n    })",
              "err": {},
              "uuid": "8bb23dc8-e3d2-49bb-9dd0-c6a41e49f8a0",
              "parentUUID": "01f643dc-8c3e-4bd1-aff6-951305d1336f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a bunch of information when client \"list\" subcommand is invoked",
              "fullTitle": "client command test should return a bunch of information when client \"list\" subcommand is invoked",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"list\"\n        ]);\n        (0, chai_1.expect)(response).to.be.a(\"string\");\n        (0, chai_1.expect)(response.length).to.be.greaterThan(0);\n        (0, chai_1.expect)(response).to.match(/ name=whatever /);\n        (0, chai_1.expect)(response).to.match(/\\bdb=0\\b/);\n    })",
              "err": {},
              "uuid": "88b376cd-f4da-41ed-8006-73414d7a1c21",
              "parentUUID": "01f643dc-8c3e-4bd1-aff6-951305d1336f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"list\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"list\" called with too many parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"list\",\n            \"test\",\n            \"two\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR syntax error\");\n    })",
              "err": {},
              "uuid": "bf99732e-bc03-4cf5-9c84-533863767942",
              "parentUUID": "01f643dc-8c3e-4bd1-aff6-951305d1336f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "015c9701-f85c-454a-a85c-2c5e506cb7be",
            "d0007ccb-b0d8-420e-8fa7-f32f2d2e4f90",
            "ef90f47b-a1cd-4923-a9cf-9b54679d15f8",
            "2f6b7502-86af-466f-b270-837ad035cb2b",
            "1b698561-0d8a-471c-9a58-8f465cdf56dd",
            "1add8f9b-d8f0-4fc4-8653-07afeb7f85a2",
            "6cc479ef-d461-4957-afcd-e5001a88a8ef",
            "732ee6e3-26fa-4fbc-ab14-3191a13d8ea8",
            "f9cb88c7-82de-4a31-9f3d-c51da9141f9f",
            "8bb23dc8-e3d2-49bb-9dd0-c6a41e49f8a0",
            "88b376cd-f4da-41ed-8006-73414d7a1c21",
            "bf99732e-bc03-4cf5-9c84-533863767942"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cafea95c-6c1b-40a9-b9ce-26cb29221045",
          "title": "multi command test",
          "fullFile": "/home/lane/git/unit-redis-ness/test/resp/command/multi-command.test.ts",
          "file": "/test/resp/command/multi-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"multi command test\"",
              "fullTitle": "multi command test \"before all\" hook in \"multi command test\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on(\"ready\", () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "93207a70-89e3-4456-ad52-79012015fa8d",
              "parentUUID": "cafea95c-6c1b-40a9-b9ce-26cb29221045",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"multi command test\"",
              "fullTitle": "multi command test \"before each\" hook in \"multi command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "5e762447-aa4d-48ca-9b0b-25106c33780b",
              "parentUUID": "cafea95c-6c1b-40a9-b9ce-26cb29221045",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"multi command test\"",
              "fullTitle": "multi command test \"after all\" hook in \"multi command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "73973ee7-164d-4e3d-9cc7-1b5709ed6a2e",
              "parentUUID": "cafea95c-6c1b-40a9-b9ce-26cb29221045",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"multi command test\"",
              "fullTitle": "multi command test \"after each\" hook in \"multi command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "62b044e5-5f4a-4025-bebf-62c220351cfa",
              "parentUUID": "cafea95c-6c1b-40a9-b9ce-26cb29221045",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow nested MULTI invocations",
              "fullTitle": "multi command test should not allow nested MULTI invocations",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"multi\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\"multi\"]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR MULTI calls can not be nested\");\n    })",
              "err": {},
              "uuid": "f01a2917-e5ef-4d94-a30a-bc1c71032c4f",
              "parentUUID": "cafea95c-6c1b-40a9-b9ce-26cb29221045",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect the DISCARD command",
              "fullTitle": "multi command test should respect the DISCARD command",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"discard\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n    })",
              "err": {},
              "uuid": "799d10f4-1fcd-413f-9594-926b3075d5a5",
              "parentUUID": "cafea95c-6c1b-40a9-b9ce-26cb29221045",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow DISCARD without MULTI",
              "fullTitle": "multi command test should not allow DISCARD without MULTI",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"discard\"]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR DISCARD without MULTI\");\n    })",
              "err": {},
              "uuid": "b307f501-04b2-4728-8ab3-4836e6218a4c",
              "parentUUID": "cafea95c-6c1b-40a9-b9ce-26cb29221045",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should continue to validate commands after MULTI",
              "fullTitle": "multi command test should continue to validate commands after MULTI",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"multi\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"unknown\",\n            \"command\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR unknown command `unknown`, with args beginning with: `command`, \", `${response}`);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpush\",\n            \"test\",\n            \"one\",\n            \"two\",\n            \"three\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"QUEUED\");\n    })",
              "err": {},
              "uuid": "504295f9-3e5a-4a7a-ada3-7f260f646aad",
              "parentUUID": "cafea95c-6c1b-40a9-b9ce-26cb29221045",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should EXECABORT from a previous error",
              "fullTitle": "multi command test should EXECABORT from a previous error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"exec\"]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: EXECABORT Transaction discarded because of previous errors.\");\n    })",
              "err": {},
              "uuid": "f49fe745-4f9a-4b7e-bf52-bd707d1d46e8",
              "parentUUID": "cafea95c-6c1b-40a9-b9ce-26cb29221045",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should queue a set of commands when there is no intervening error",
              "fullTitle": "multi command test should queue a set of commands when there is no intervening error",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"multi\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpush\",\n            \"test\",\n            \"one\",\n            \"two\",\n            \"three\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"QUEUED\");\n        response = yield (0, common_test_1.sendCommand)(client, [\"exec\"]);\n        (0, chai_1.expect)(response).to.eql([3]);\n    })",
              "err": {},
              "uuid": "54d32d05-7862-4e69-8533-c125c75fa30c",
              "parentUUID": "cafea95c-6c1b-40a9-b9ce-26cb29221045",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reset transaction state after executing commands",
              "fullTitle": "multi command test should reset transaction state after executing commands",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"multi\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\"discard\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n    })",
              "err": {},
              "uuid": "d7bc2fe1-6230-4f10-ab81-d22d887f8608",
              "parentUUID": "cafea95c-6c1b-40a9-b9ce-26cb29221045",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the results of multiple commands in the order provided",
              "fullTitle": "multi command test should return the results of multiple commands in the order provided",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"multi\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpop\",\n            \"test\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"QUEUED\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpop\",\n            \"test\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"QUEUED\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"brpoplpush\",\n            \"test\",\n            \"dest\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"QUEUED\");\n        response = yield (0, common_test_1.sendCommand)(client, [\"exec\"]);\n        (0, chai_1.expect)(response).to.eql([\n            \"three\",\n            \"two\",\n            \"one\"\n        ]);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"exists\",\n            \"test\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(0);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"exists\",\n            \"dest\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "260e67d1-1e5e-409b-befc-54f4740a2640",
              "parentUUID": "cafea95c-6c1b-40a9-b9ce-26cb29221045",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate the behavior of brpoplpush",
              "fullTitle": "multi command test should validate the behavior of brpoplpush",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"flushall\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpush\",\n            \"test\",\n            \"one\",\n            \"two\",\n            \"three\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(3);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpop\",\n            \"test\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"three\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpop\",\n            \"test\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"two\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"brpoplpush\",\n            \"test\",\n            \"dest\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"one\");\n    })",
              "err": {},
              "uuid": "7f87b41e-769f-46d0-b542-1fa0b1c5ff42",
              "parentUUID": "cafea95c-6c1b-40a9-b9ce-26cb29221045",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when EXEC issued without MULTI",
              "fullTitle": "multi command test should fail when EXEC issued without MULTI",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"exec\"]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR EXEC without MULTI\");\n    })",
              "err": {},
              "uuid": "f03dedf2-4bc1-4247-9ad0-b579c723ddfd",
              "parentUUID": "cafea95c-6c1b-40a9-b9ce-26cb29221045",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f01a2917-e5ef-4d94-a30a-bc1c71032c4f",
            "799d10f4-1fcd-413f-9594-926b3075d5a5",
            "b307f501-04b2-4728-8ab3-4836e6218a4c",
            "504295f9-3e5a-4a7a-ada3-7f260f646aad",
            "f49fe745-4f9a-4b7e-bf52-bd707d1d46e8",
            "54d32d05-7862-4e69-8533-c125c75fa30c",
            "d7bc2fe1-6230-4f10-ab81-d22d887f8608",
            "260e67d1-1e5e-409b-befc-54f4740a2640",
            "7f87b41e-769f-46d0-b542-1fa0b1c5ff42",
            "f03dedf2-4bc1-4247-9ad0-b579c723ddfd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e7504474-0143-435c-842d-6db97282068e",
          "title": "script-command test",
          "fullFile": "/home/lane/git/unit-redis-ness/test/resp/command/script-command.test.ts",
          "file": "/test/resp/command/script-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"script-command test\"",
              "fullTitle": "script-command test \"before all\" hook in \"script-command test\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on(\"ready\", () => __awaiter(void 0, void 0, void 0, function* () {\n    yield (0, common_test_1.sendCommand)(client, [\"flushall\"]);\n    yield (0, common_test_1.sendCommand)(client, [\n        \"select\",\n        \"0\"\n    ]);\n    yield (0, common_test_1.sendCommand)(client, [\n        \"script\",\n        \"flush\"\n    ]);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "081909f4-eb50-4ebc-8bf6-3782047bdeae",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"script-command test\"",
              "fullTitle": "script-command test \"before each\" hook in \"script-command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "c9726fe3-0135-45e1-9ca1-651c861dd943",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"script-command test\"",
              "fullTitle": "script-command test \"after all\" hook in \"script-command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "5ac0d233-3707-4b21-bf58-068b5809a67f",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"script-command test\"",
              "fullTitle": "script-command test \"after each\" hook in \"script-command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "e9300e91-31b9-4cac-9f35-df4a98d8c714",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should calcuclate the correct sha1 of a script and store the script",
              "fullTitle": "script-command test should calcuclate the correct sha1 of a script and store the script",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"script\",\n            \"exists\",\n            sha1\n        ]);\n        (0, chai_1.expect)(response).to.eql([0]);\n        // Validate failure on unparseable script\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"script\",\n            \"load\",\n            code\n        ]);\n        (0, chai_1.expect)(response).to.match(/ReplyError: ERR .*/);\n        // Validate success on parseable script\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"script\",\n            \"load\",\n            `${code}}`\n        ]);\n        (0, chai_1.expect)(response).to.equal(sha1);\n        // Validate a script is persisted\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"script\",\n            \"exists\",\n            sha1\n        ]);\n        (0, chai_1.expect)(response).to.eql([1]);\n        // Validate response to unknown sub command\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"script\",\n            \"test\",\n            sha1\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR Unknown subcommand or wrong number of arguments for 'test'. Try SCRIPT HELP.\");\n    })",
              "err": {},
              "uuid": "cd88f202-8b2e-4593-bb1d-c5a6252d0840",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should evaluate a loaded lua script using evalsha",
              "fullTitle": "script-command test should evaluate a loaded lua script using evalsha",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Validate that NOSCRIPT is triggered\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"evalsha\",\n            `${sha1}xx`,\n            \"2\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: NOSCRIPT No matching script. Please use EVAL.\");\n        // Validate that param 1 cannot be negative\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"evalsha\",\n            sha1,\n            \"-2\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR Number of keys can't be negative\");\n        // Validate that param 1 cannot be text\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"evalsha\",\n            sha1,\n            \"two\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR value is not an integer or out of range\");\n    })",
              "err": {},
              "uuid": "830c8a75-124c-4170-9a4f-23889314ab6a",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should execute a simple script",
              "fullTitle": "script-command test should execute a simple script",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Validate that a simple script can be processed\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"EVAL\",\n            \"local val=\\\"Hello Compose\\\" return val\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"Hello Compose\");\n    })",
              "err": {},
              "uuid": "aa695ccf-8efa-4e8a-be03-0b6665cc0128",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create and process the ARGV table",
              "fullTitle": "script-command test should create and process the ARGV table",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return ARGV[2]\",\n            \"2\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\"\n        ]);\n        (0, chai_1.expect)(response).to.eql(\"second\");\n    })",
              "err": {},
              "uuid": "51ea9126-1ec4-45d5-8686-d69297b6ad27",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create and process the KEYS table",
              "fullTitle": "script-command test should create and process the KEYS table",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return KEYS[1]\",\n            \"2\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"key1\");\n    })",
              "err": {},
              "uuid": "bb80a1a9-4d42-4542-8f96-4a4bda3e0eaa",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a NUMBER when required",
              "fullTitle": "script-command test should return a NUMBER when required",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return 123\",\n            \"2\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(123);\n    })",
              "err": {},
              "uuid": "510f7337-b375-46ad-af5a-2bb0b923dd9f",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NIL when there is no return value",
              "fullTitle": "script-command test should return NIL when there is no return value",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"print \\\"Hello World\\\"\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "33b17242-9eb4-4ab6-bad8-4ac85c012a51",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a TABLE when required",
              "fullTitle": "script-command test should return a TABLE when required",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return ARGV\",\n            \"2\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\",\n            \"third\"\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            \"first\",\n            \"second\",\n            \"third\"\n        ]);\n    })",
              "err": {},
              "uuid": "685577bc-c419-4842-ae02-2ae44aae8b35",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return items in order",
              "fullTitle": "script-command test should return items in order",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return {true, \\\"test\\\", false, 10, 10.2}\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            1,\n            \"test\",\n            null,\n            10,\n            10\n        ]);\n    })",
              "err": {},
              "uuid": "85f4a3e1-d157-4e5f-ab62-b0a3f63ad088",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return integer and nil for true and false, respectively",
              "fullTitle": "script-command test should return integer and nil for true and false, respectively",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return { true, false, false}\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            1,\n            null,\n            null\n        ]);\n    })",
              "err": {},
              "uuid": "99164f60-13d8-4ada-851a-ce0827916f41",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to execute a representative BULL script",
              "fullTitle": "script-command test should be able to execute a representative BULL script",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "3e9e9d29-f5ca-4a39-976c-6786b9b126ef",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when we attempt to EVAL an invalid script",
              "fullTitle": "script-command test should fail when we attempt to EVAL an invalid script",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"-- Invalid\\r\\nscript\"\n        ]);\n        // Validated against redis\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR wrong number of arguments for 'eval' command\");\n    })",
              "err": {},
              "uuid": "6bcf423c-16b8-4f77-8ed7-4fb7e52ab44a",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to return a NULL value from a lua script",
              "fullTitle": "script-command test should be able to return a NULL value from a lua script",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = nil return val\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "1c65e687-ecc4-4579-ae7c-177369c905a8",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return table values after the first NIL is encountered and return integers not floats",
              "fullTitle": "script-command test should not return table values after the first NIL is encountered and return integers not floats",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "bee035aa-b69a-4b5b-aaff-7a427ac06b36",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a table with embedded calls to redis",
              "fullTitle": "script-command test should return a table with embedded calls to redis",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"flushall\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"hset\",\n            embeddedkey,\n            \"one\",\n            \"1\",\n            \"two\",\n            \"2\",\n            \"three\",\n            \"3\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(3);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"hgetall\",\n            embeddedkey\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            \"one\",\n            \"1\",\n            \"two\",\n            \"2\",\n            \"three\",\n            \"3\"\n        ]);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            `local j = redis.call(\"HGETALL\", \"${embeddedkey}\") return { j, \"SAMPLE\" }`,\n            \"0\"\n        ]);\n        // Validated with redis\n        (0, chai_1.expect)(response).to.eql([\n            \"SAMPLE\",\n            [\n                \"one\",\n                \"1\",\n                \"two\",\n                \"2\",\n                \"three\",\n                \"3\"\n            ]\n        ]);\n    })",
              "err": {},
              "uuid": "c97549d9-ba98-45df-baa6-78ee652e3f1f",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support the unpack lua command",
              "fullTitle": "script-command test should support the unpack lua command",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"flushall\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"hset\",\n            embeddedkey,\n            \"one\",\n            \"1\",\n            \"two\",\n            \"2\",\n            \"three\",\n            \"3\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(3);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            `return { unpack(redis.call(\"hgetall\", \"${embeddedkey}\")) }`,\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            \"one\",\n            \"1\",\n            \"two\",\n            \"2\",\n            \"three\",\n            \"3\"\n        ]);\n    })",
              "err": {},
              "uuid": "285f4027-bffe-4a79-a0f9-959e428729dc",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert values properly",
              "fullTitle": "script-command test should convert values properly",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return {1,2,{3,'Hello World!'}}\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            1,\n            2,\n            [\n                3,\n                \"Hello World!\"\n            ]\n        ]);\n    })",
              "err": {},
              "uuid": "f2577378-764e-4ee0-920b-ce065fbf573d",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return embedded tables from embedded calls",
              "fullTitle": "script-command test should return embedded tables from embedded calls",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return {1,2,{3,bit.bxor(5,3)}}\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            1,\n            2,\n            [\n                3,\n                6\n            ]\n        ]);\n    })",
              "err": {},
              "uuid": "b0b19357-2679-4708-bd8b-5f7c917592be",
              "parentUUID": "e7504474-0143-435c-842d-6db97282068e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cd88f202-8b2e-4593-bb1d-c5a6252d0840",
            "830c8a75-124c-4170-9a4f-23889314ab6a",
            "aa695ccf-8efa-4e8a-be03-0b6665cc0128",
            "51ea9126-1ec4-45d5-8686-d69297b6ad27",
            "bb80a1a9-4d42-4542-8f96-4a4bda3e0eaa",
            "510f7337-b375-46ad-af5a-2bb0b923dd9f",
            "33b17242-9eb4-4ab6-bad8-4ac85c012a51",
            "685577bc-c419-4842-ae02-2ae44aae8b35",
            "85f4a3e1-d157-4e5f-ab62-b0a3f63ad088",
            "99164f60-13d8-4ada-851a-ce0827916f41",
            "6bcf423c-16b8-4f77-8ed7-4fb7e52ab44a",
            "1c65e687-ecc4-4579-ae7c-177369c905a8",
            "c97549d9-ba98-45df-baa6-78ee652e3f1f",
            "285f4027-bffe-4a79-a0f9-959e428729dc",
            "f2577378-764e-4ee0-920b-ce065fbf573d",
            "b0b19357-2679-4708-bd8b-5f7c917592be"
          ],
          "failures": [],
          "pending": [
            "3e9e9d29-f5ca-4a39-976c-6786b9b126ef",
            "bee035aa-b69a-4b5b-aaff-7a427ac06b36"
          ],
          "skipped": [],
          "duration": 60,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "354c51ee-3b89-481f-a772-aa9fd9fa60d2",
          "title": "data-type test",
          "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/data-type.test.ts",
          "file": "/test/resp/data/data-type.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"data-type test\"",
              "fullTitle": "data-type test \"before each\" hook in \"data-type test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "c91b0fb0-502b-4f73-8291-cc677af0042e",
              "parentUUID": "354c51ee-3b89-481f-a772-aa9fd9fa60d2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"data-type test\"",
              "fullTitle": "data-type test \"after all\" hook in \"data-type test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "114b1108-3062-4417-a73e-cae2aed9bc95",
              "parentUUID": "354c51ee-3b89-481f-a772-aa9fd9fa60d2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"data-type test\"",
              "fullTitle": "data-type test \"after each\" hook in \"data-type test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "fb0e5268-1d94-400e-9350-0b5ee83bd549",
              "parentUUID": "354c51ee-3b89-481f-a772-aa9fd9fa60d2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should enumerate data-types",
              "fullTitle": "data-type test should enumerate data-types",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        (0, chai_1.expect)(data_type_1.DataType.NONE).to.equal(\"none\");\n        (0, chai_1.expect)(data_type_1.DataType.STRING).to.equal(\"string\");\n        (0, chai_1.expect)(data_type_1.DataType.LIST).to.equal(\"list\");\n        (0, chai_1.expect)(data_type_1.DataType.SET).to.equal(\"set\");\n        (0, chai_1.expect)(data_type_1.DataType.ZSET).to.equal(\"zset\");\n        (0, chai_1.expect)(data_type_1.DataType.HASH).to.equal(\"hash\");\n        (0, chai_1.expect)(Object.keys(data_type_1.DataType).length).to.equal(6);\n    })",
              "err": {},
              "uuid": "cf3251e8-806d-4fb9-94f3-b5b837be9b6e",
              "parentUUID": "354c51ee-3b89-481f-a772-aa9fd9fa60d2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cf3251e8-806d-4fb9-94f3-b5b837be9b6e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1c382305-5f19-4c98-ba79-35a493a1d0c8",
          "title": "sorted-set test",
          "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
          "file": "/test/resp/data/sorted-set.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"sorted-set test\"",
              "fullTitle": "sorted-set test \"before each\" hook in \"sorted-set test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();\nss = new sorted_set_1.SortedSet();\nz = new Z();",
              "err": {},
              "uuid": "46a69022-8faf-4ade-864e-5e3a47ee18fc",
              "parentUUID": "1c382305-5f19-4c98-ba79-35a493a1d0c8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"sorted-set test\"",
              "fullTitle": "sorted-set test \"after all\" hook in \"sorted-set test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "845557c6-bfed-4c43-839c-cb39598fe2ed",
              "parentUUID": "1c382305-5f19-4c98-ba79-35a493a1d0c8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"sorted-set test\"",
              "fullTitle": "sorted-set test \"after each\" hook in \"sorted-set test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "102de140-fc60-465a-9a95-6c1cde0291ea",
              "parentUUID": "1c382305-5f19-4c98-ba79-35a493a1d0c8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should instantiate",
              "fullTitle": "sorted-set test should instantiate",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        (0, chai_1.expect)(z.constructor.name).to.equal(\"Z\");\n        ss = new sorted_set_1.SortedSet();\n        (0, chai_1.expect)(ss.constructor.name).to.equal(\"SortedSet\");\n    })",
              "err": {},
              "uuid": "e6fc4af3-e75a-4fe4-9d22-0969578ac27f",
              "parentUUID": "1c382305-5f19-4c98-ba79-35a493a1d0c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add, get, and delete an entry",
              "fullTitle": "sorted-set test should add, get, and delete an entry",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add(\"test\", 1);\n        (0, chai_1.expect)(added).to.equal(null);\n        added = ss.add(\"test\", 1);\n        (0, chai_1.expect)(added).to.equal(null);\n        (0, chai_1.expect)(z.keys().length).to.equal(1);\n        (0, chai_1.expect)(ss.keys().length).to.equal(1);\n        let item = z.get(\"test\");\n        (0, chai_1.expect)(item.constructor.name).to.equal(\"Number\");\n        item = ss.get(\"test\");\n        (0, chai_1.expect)(item.constructor.name).to.equal(\"Number\");\n        z.del(\"test\");\n        (0, chai_1.expect)(z.keys().length).to.equal(0);\n        ss.del(\"test\");\n        (0, chai_1.expect)(ss.keys().length).to.equal(0);\n    })",
              "err": {},
              "uuid": "307ca885-a3f6-4a16-952a-f8c1675908fa",
              "parentUUID": "1c382305-5f19-4c98-ba79-35a493a1d0c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw when attempting to add __proto__ key",
              "fullTitle": "sorted-set test should throw when attempting to add __proto__ key",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        (0, chai_1.expect)(() => {\n            z.add(\"__proto__\", 0);\n        }).to.throw();\n        /*\n         * Expect(() => {\n         *   ss.add('__proto__', 0)\n         * }).to.throw();\n         */\n    })",
              "err": {},
              "uuid": "cdb1df6d-1cbd-4f0b-be44-32e7afeaec23",
              "parentUUID": "1c382305-5f19-4c98-ba79-35a493a1d0c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add an undefined or null score",
              "fullTitle": "sorted-set test should not add an undefined or null score",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add(\"test\", null);\n        (0, chai_1.expect)(added).to.equal(null);\n        (0, chai_1.expect)(z.keys().length).to.equal(0);\n        added = z.add(\"test\", undefined);\n        (0, chai_1.expect)(z.keys().length).to.equal(0);\n        /*\n         * Typescript prevents adding null\n         * added = ss.add('test', null);\n         * expect(added).to.equal(null);\n         * expect(ss.keys().length).to.equal(0);\n         * added = ss.add('test', undefined);\n         * expect(z.keys().length).to.equal(0);\n         */\n    })",
              "err": {},
              "uuid": "76c4aba4-5186-489d-80ec-b65a94d76385",
              "parentUUID": "1c382305-5f19-4c98-ba79-35a493a1d0c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not duplicate key/value pairs",
              "fullTitle": "sorted-set test should not duplicate key/value pairs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add(\"test\", 123);\n        (0, chai_1.expect)(added).to.equal(null); // This is weird\n        (0, chai_1.expect)(z.keys().length).to.equal(1);\n        added = z.add(\"test\", 123);\n        (0, chai_1.expect)(added).to.equal(123); // And weirder\n        (0, chai_1.expect)(z.keys().length).to.equal(1);\n        added = ss.add(\"test\", 123);\n        (0, chai_1.expect)(added).to.equal(null); // This is weird\n        (0, chai_1.expect)(ss.keys().length).to.equal(1);\n        added = ss.add(\"test\", 123);\n        (0, chai_1.expect)(added).to.equal(123); // And weirder\n        (0, chai_1.expect)(ss.keys().length).to.equal(1);\n    })",
              "err": {},
              "uuid": "16f3f0d3-4172-4977-872d-1234c310160f",
              "parentUUID": "1c382305-5f19-4c98-ba79-35a493a1d0c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the old rank when replacing a key",
              "fullTitle": "sorted-set test should return the old rank when replacing a key",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add(\"test\", 123);\n        (0, chai_1.expect)(added).to.equal(null);\n        (0, chai_1.expect)(z.keys().length).to.equal(1);\n        added = z.add(\"test\", 321);\n        (0, chai_1.expect)(added).to.equal(123);\n        (0, chai_1.expect)(z.keys().length).to.equal(1);\n        added = z.get(\"test\");\n        (0, chai_1.expect)(added).to.equal(321);\n        added = ss.add(\"test\", 123);\n        (0, chai_1.expect)(added).to.equal(null);\n        (0, chai_1.expect)(ss.keys().length).to.equal(1);\n        added = ss.add(\"test\", 321);\n        (0, chai_1.expect)(added).to.equal(123);\n        (0, chai_1.expect)(ss.keys().length).to.equal(1);\n        added = ss.get(\"test\");\n        (0, chai_1.expect)(added).to.equal(321);\n    })",
              "err": {},
              "uuid": "286fe1dd-266e-4ef0-99e6-d23e85d19d18",
              "parentUUID": "1c382305-5f19-4c98-ba79-35a493a1d0c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a value when adding at least 32 values (I think - it is difficult to tell)",
              "fullTitle": "sorted-set test should return a value when adding at least 32 values (I think - it is difficult to tell)",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "3122d47f-f7c1-4fea-9e89-5dfea2b6d821",
              "parentUUID": "1c382305-5f19-4c98-ba79-35a493a1d0c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "fullTitle": "sorted-set test should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        (0, chai_1.expect)(z.add(\"Terminator\", 8.0)).to.equal(null); // => null\n        (0, chai_1.expect)(z.add(\"District 9\", 8.0)).to.equal(null); // => null\n        (0, chai_1.expect)(z.add(\"Ex Machina\", 0.7)).to.equal(null); // => null\n        (0, chai_1.expect)(z.add(\"Ex Machina\", 7.7)).to.equal(0.7); // => 0.7\n        // Alias\n        (0, chai_1.expect)(z.set(\"The Matrix\", 8.7)).to.equal(null); // => null\n        // Average O(1)\n        (0, chai_1.expect)(z.has(\"Terminator\")).to.equal(true); // => true\n        (0, chai_1.expect)(z.has(\"Blade Runner\")).to.equal(false); // => false\n        // Average O(1)\n        (0, chai_1.expect)(z.score(\"Ex Machina\")).to.equal(7.7); // => 7.7\n        (0, chai_1.expect)(z.score(\"Blade Runner\")).to.equal(null); // => null\n        // Alias\n        (0, chai_1.expect)(z.get(\"The Matrix\")).to.equal(8.7); // => 8.7\n        // Average O(log(N))\n        (0, chai_1.expect)(z.rem(\"Ex Machina\")).to.equal(7.7); // => 7.7\n        // Average O(1)\n        (0, chai_1.expect)(z.rem(\"Ex Machina\")).to.equal(null); // => null\n        // Alias\n        (0, chai_1.expect)(z.del(\"Ex Machina\")).to.equal(null); // => null\n        /*\n         * Average O(log(N)+M) where M is the number of elements between min and max\n         * This is not working as expected\n         */\n        (0, chai_1.expect)(z.rangeByScore(7, 8)).to.eql([\n            \"District 9\",\n            \"Terminator\"\n        ]);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        (0, chai_1.expect)(z.rangeByScore(8)).to.eql([\n            \"District 9\",\n            \"Terminator\",\n            \"The Matrix\"\n        ]); // [8.0-∞)\n        // => ['District 9', 'Terminator', 'The Matrix']\n        (0, chai_1.expect)(z.rangeByScore(8, null, { \"withScores\": true })).to.eql([\n            [\n                \"District 9\",\n                8.0\n            ],\n            [\n                \"Terminator\",\n                8.0\n            ],\n            [\n                \"The Matrix\",\n                8.7\n            ]\n        ]);\n        // => [['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]\n        /*\n         * Average O(log(N)+log(M)) where M as in rangeByScore\n         * Again - not as expected\n         */\n        (0, chai_1.expect)(z.count(7, 8)).to.equal(2); // => 3\n        /*\n         * Average O(log(N))\n         * Not working as expected\n         */\n        (0, chai_1.expect)(z.rank(\"Ex Machina\")).to.equal(null); // => 0\n        // Not working as expected\n        (0, chai_1.expect)(z.rank(\"Terminator\")).to.equal(1); // => 2\n        (0, chai_1.expect)(z.rank(\"Blade Runner\")).to.equal(null); // => null\n        /*\n         * Average O(log(N)+M) where M as in range\n         * Not working as expected\n         */\n        (0, chai_1.expect)(z.range(0, 2)).to.eql([\n            \"District 9\",\n            \"Terminator\",\n            \"The Matrix\"\n        ]);\n        /*\n         * => ['Ex Machina', 'District 9', 'Terminator']\n         * Not working as expected\n         */\n        (0, chai_1.expect)(z.range(0, 2, { \"withScores\": true })).to.eql([\n            [\n                \"District 9\",\n                8\n            ],\n            [\n                \"Terminator\",\n                8\n            ],\n            [\n                \"The Matrix\",\n                8.7\n            ]\n        ]);\n        /*\n         * => [['Ex Machina', 7.7],\n         *     ['District 9', 8],\n         *     ['Terminator', 8]]\n         */\n        (0, chai_1.expect)(z.range(-1)).to.eql([\"The Matrix\"]); // => ['The Matrix']\n        /*\n         * Almost alias\n         * Not working as expected\n         */\n        (0, chai_1.expect)(z.slice(0, 3)).to.eql([\n            \"District 9\",\n            \"Terminator\",\n            \"The Matrix\"\n        ]);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        /*\n         * Set cardinality (number of elements)\n         * Average O(1)\n         * Not working as expected\n         */\n        (0, chai_1.expect)(z.card()).to.equal(3); // => 4\n        /*\n         * Alias\n         * Not working as expected\n         */\n        (0, chai_1.expect)(z.length).to.equal(3); // => 4\n    })",
              "err": {},
              "uuid": "c655611e-13d0-47e1-aa84-05591a41b184",
              "parentUUID": "1c382305-5f19-4c98-ba79-35a493a1d0c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "the rewrite should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "fullTitle": "sorted-set test the rewrite should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        (0, chai_1.expect)(ss.add(\"Terminator\", 8.0)).to.equal(null); // => null\n        (0, chai_1.expect)(ss.add(\"District 9\", 8.0)).to.equal(null); // => null\n        (0, chai_1.expect)(ss.add(\"Ex Machina\", 0.7)).to.equal(null); // => null\n        (0, chai_1.expect)(ss.add(\"Ex Machina\", 7.7)).to.equal(0.7); // => 0.7\n        // Alias\n        (0, chai_1.expect)(ss.set(\"The Matrix\", 8.7)).to.equal(null); // => null\n        // Average O(1)\n        (0, chai_1.expect)(ss.has(\"Terminator\")).to.equal(true); // => true\n        (0, chai_1.expect)(ss.has(\"Blade Runner\")).to.equal(false); // => false\n        // Average O(1)\n        (0, chai_1.expect)(ss.score(\"Ex Machina\")).to.equal(7.7); // => 7.7\n        (0, chai_1.expect)(ss.score(\"Blade Runner\")).to.equal(null); // => null\n        // Alias\n        (0, chai_1.expect)(ss.get(\"The Matrix\")).to.equal(8.7); // => 8.7\n        // Average O(log(N))\n        (0, chai_1.expect)(ss.rem(\"Ex Machina\")).to.equal(7.7); // => 7.7\n        // Average O(1)\n        (0, chai_1.expect)(ss.rem(\"Ex Machina\")).to.equal(null); // => null\n        // Alias\n        (0, chai_1.expect)(ss.del(\"Ex Machina\")).to.equal(null); // => null\n        /*\n         * Average O(log(N)+M) where M is the number of elements between min and max\n         * This is not working as expected\n         */\n        (0, chai_1.expect)(ss.rangeByScore(7, 8)).to.eql([\n            \"District 9\",\n            \"Terminator\"\n        ]);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        (0, chai_1.expect)(ss.rangeByScore(8)).to.eql([\n            \"District 9\",\n            \"Terminator\",\n            \"The Matrix\"\n        ]); // [8.0-∞)\n        // => ['District 9', 'Terminator', 'The Matrix']\n        (0, chai_1.expect)(ss.rangeByScore(8, null, { \"withScores\": true })).to.eql([\n            [\n                \"District 9\",\n                8.0\n            ],\n            [\n                \"Terminator\",\n                8.0\n            ],\n            [\n                \"The Matrix\",\n                8.7\n            ]\n        ]);\n        // => [['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]\n        /*\n         * Average O(log(N)+log(M)) where M as in rangeByScore\n         * Again - not as expected\n         */\n        (0, chai_1.expect)(ss.count(7, 8)).to.equal(2); // => 3\n        /*\n         * Average O(log(N))\n         * Not working as expected\n         */\n        (0, chai_1.expect)(ss.rank(\"Ex Machina\")).to.equal(null); // => 0\n        // Not working as expected\n        (0, chai_1.expect)(ss.rank(\"Terminator\")).to.equal(1); // => 2\n        (0, chai_1.expect)(ss.rank(\"Blade Runner\")).to.equal(null); // => null\n        /*\n         * Average O(log(N)+M) where M as in range\n         * Not working as expected\n         */\n        (0, chai_1.expect)(ss.range(0, 2)).to.eql([\n            \"District 9\",\n            \"Terminator\",\n            \"The Matrix\"\n        ]);\n        /*\n         * => ['Ex Machina', 'District 9', 'Terminator']\n         * Not working as expected\n         */\n        (0, chai_1.expect)(ss.range(0, 2, { \"withScores\": true })).to.eql([\n            [\n                \"District 9\",\n                8\n            ],\n            [\n                \"Terminator\",\n                8\n            ],\n            [\n                \"The Matrix\",\n                8.7\n            ]\n        ]);\n        /*\n         * => [['Ex Machina', 7.7],\n         *     ['District 9', 8],\n         *     ['Terminator', 8]]\n         */\n        (0, chai_1.expect)(ss.range(-1)).to.eql([\"The Matrix\"]); // => ['The Matrix']\n        /*\n         * Almost alias\n         * Not working as expected\n         */\n        (0, chai_1.expect)(ss.slice(0, 3)).to.eql([\n            \"District 9\",\n            \"Terminator\",\n            \"The Matrix\"\n        ]);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        /*\n         * Set cardinality (number of elements)\n         * Average O(1)\n         * Not working as expected\n         */\n        (0, chai_1.expect)(ss.card()).to.equal(3); // => 4\n        /*\n         * Alias\n         * Not working as expected\n         */\n        (0, chai_1.expect)(ss.length).to.equal(3); // => 4\n    })",
              "err": {},
              "uuid": "750ed855-b242-42d0-bdb8-3732bb494a80",
              "parentUUID": "1c382305-5f19-4c98-ba79-35a493a1d0c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "5cfc0350-c52b-4c24-9351-97369b1062c1",
              "title": "skip map",
              "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
              "file": "/test/resp/data/sorted-set.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should support basic operations",
                  "fullTitle": "sorted-set test skip map should support basic operations",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const z = new Z();\n(0, chai_1.expect)(z).to.have.length(0);\n(0, chai_1.expect)(z.toArray()).to.eql([]);\n(0, chai_1.expect)(z.range()).to.eql([]);\n(0, chai_1.expect)(z.rangeByScore()).to.eql([]);\n(0, chai_1.expect)(() => {\n    z.add(\"__proto__\", 14);\n}).to.throw();\nz.add(\"5a600e16\", 8);\nz.add(\"5a600e17\", 9);\n(0, chai_1.expect)(z.add(\"5a600e18\", 10)).to.equal(null);\n(0, chai_1.expect)(z.add(\"5a600e17\", 12)).to.equal(9);\n(0, chai_1.expect)(z).to.have.length(3);\n(0, chai_1.expect)(z.toArray()).to.eql([\n    \"5a600e16\",\n    \"5a600e18\",\n    \"5a600e17\"\n]);\n(0, chai_1.expect)(z.toArray()).to.eql(z.range(0, -1));\n(0, chai_1.expect)(z.toArray()).to.eql(z.rangeByScore());\n(0, chai_1.expect)(z.has(\"5a600e16\")).to.be.ok;\n(0, chai_1.expect)(z.has(\"5a600e17\")).to.be.ok;\n(0, chai_1.expect)(z.has(\"5a600e18\")).to.be.ok;\n(0, chai_1.expect)(z.has(\"5a600e19\")).to.not.be.ok;\n(0, chai_1.expect)(z.score(\"5a600e16\")).to.equal(8);\n(0, chai_1.expect)(z.score(\"5a600e17\")).to.equal(12);\n(0, chai_1.expect)(z.score(\"5a600e18\")).to.equal(10);\n(0, chai_1.expect)(z.score(\"5a600e19\")).to.equal(null);\n(0, chai_1.expect)(z.rem(\"5a600e16\")).to.equal(8);\n(0, chai_1.expect)(z).to.have.length(2);\n(0, chai_1.expect)(z.rem(\"5a600e16\")).to.equal(null);\n(0, chai_1.expect)(z).to.have.length(2);\n(0, chai_1.expect)(z.has(\"5a600e16\")).to.not.be.ok;\n(0, chai_1.expect)(z.toArray()).to.eql([\n    \"5a600e18\",\n    \"5a600e17\"\n]);\n(0, chai_1.expect)(z.toArray({ \"withScores\": true })).\n    to.eql(z.range(0, -1, { \"withScores\": true }));\n(0, chai_1.expect)(z.toArray()).to.eql(z.rangeByScore());\nz.add(\"5a600e16\", 10);\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\n(0, chai_1.expect)(z).to.have.length(9);\n// No change, so should be O(1)\nz.add(\"5a600e17\", 12);\n(0, chai_1.expect)(z.rank(\"5a600e17\")).to.equal(4);\n(0, chai_1.expect)(z).to.have.length(9);\n(0, chai_1.expect)(z.toArray()).to.eql([\n    \"5a600e16\",\n    \"5a600e11\",\n    \"5a600e18\",\n    \"5a600e13\",\n    \"5a600e17\",\n    \"5a600e14\",\n    \"5a600e10\",\n    \"5a600e12\",\n    \"5a600e15\"\n]);\n(0, chai_1.expect)(z.toArray()).to.eql(z.range(0, -1));\n(0, chai_1.expect)(z.toArray()).to.eql(z.rangeByScore());\n(0, chai_1.expect)(z.rangeByScore(14, 16, { \"withScores\": true })).to.eql([\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ]\n]);",
                  "err": {},
                  "uuid": "4cd0b173-5532-4881-ab43-3fb2344dee69",
                  "parentUUID": "5cfc0350-c52b-4c24-9351-97369b1062c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "aca6f325-52ae-4106-acd0-f2cd5d91222a",
                  "title": "#add",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should implicitly delete",
                      "fullTitle": "sorted-set test skip map #add should implicitly delete",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.add(\"5a600e14\", null)).to.equal(14);\n(0, chai_1.expect)(z.add(\"5a600e19\", null)).to.equal(null);\n(0, chai_1.expect)(z).to.have.length(8);",
                      "err": {},
                      "uuid": "e5101298-d145-4154-b5af-5b56e67053b4",
                      "parentUUID": "aca6f325-52ae-4106-acd0-f2cd5d91222a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e5101298-d145-4154-b5af-5b56e67053b4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "1ba4e381-556d-4ea6-8123-cc3e0e9fe863",
                  "title": "#empty",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should remove all elements",
                      "fullTitle": "sorted-set test skip map #empty should remove all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\nz.empty();\n(0, chai_1.expect)(z).to.have.length(0);\n(0, chai_1.expect)(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "df04e056-0b39-44f7-b966-d8331bb2bb25",
                      "parentUUID": "1ba4e381-556d-4ea6-8123-cc3e0e9fe863",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "df04e056-0b39-44f7-b966-d8331bb2bb25"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "8099c973-ca56-4c57-8eba-137c2c3679e0",
                  "title": "#incrBy(increment, key)",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should increase rank",
                      "fullTitle": "sorted-set test skip map #incrBy(increment, key) should increase rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"first\", 1);\nz.add(\"second\", 2);\nz.add(\"third\", 3);\nz.add(\"fourth\", 4);\n(0, chai_1.expect)(z.incrBy(2, \"first\")).to.equal(3);\n(0, chai_1.expect)(z.rank(\"first\")).to.equal(1);",
                      "err": {},
                      "uuid": "0d5dbfe4-28c6-4d52-a3fa-463c6c44eb32",
                      "parentUUID": "8099c973-ca56-4c57-8eba-137c2c3679e0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should create if not found",
                      "fullTitle": "sorted-set test skip map #incrBy(increment, key) should create if not found",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"first\", 1);\nz.incrBy(2, \"second\");\n(0, chai_1.expect)(z.card()).to.equal(2);\n(0, chai_1.expect)(z.rank(\"second\")).to.equal(1);",
                      "err": {},
                      "uuid": "f6633a01-e181-4d6a-ad1a-29e460d16ef4",
                      "parentUUID": "8099c973-ca56-4c57-8eba-137c2c3679e0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0d5dbfe4-28c6-4d52-a3fa-463c6c44eb32",
                    "f6633a01-e181-4d6a-ad1a-29e460d16ef4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "c4a87a4c-ced6-4ff3-85d4-9f8800ba87cc",
                  "title": "#keys",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the keys",
                      "fullTitle": "sorted-set test skip map #keys should return the keys",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.keys()).to.eql([\n    \"5a600e16\",\n    \"5a600e11\",\n    \"5a600e18\",\n    \"5a600e13\",\n    \"5a600e17\",\n    \"5a600e14\",\n    \"5a600e10\",\n    \"5a600e12\",\n    \"5a600e15\"\n]);",
                      "err": {},
                      "uuid": "f6936afc-9e34-490d-b431-08646e175278",
                      "parentUUID": "c4a87a4c-ced6-4ff3-85d4-9f8800ba87cc",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f6936afc-9e34-490d-b431-08646e175278"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "79da66cf-e31a-4c20-a8e4-73d714397ff3",
                  "title": "#rangeByScore",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map #rangeByScore should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.rangeByScore(14, null, { \"withScores\": true })).to.eql([\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);\n(0, chai_1.expect)(z.rangeByScore(null, 10, { \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e11\",\n        6\n    ],\n    [\n        \"5a600e18\",\n        10\n    ]\n]);\n(0, chai_1.expect)(z.rangeByScore(-Infinity, Infinity)).to.eql(z.toArray());\n(0, chai_1.expect)(z.rangeByScore(null, null)).to.eql(z.toArray());",
                      "err": {},
                      "uuid": "86c202b8-8352-4ab1-a3d8-6f5150a1869b",
                      "parentUUID": "79da66cf-e31a-4c20-a8e4-73d714397ff3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "86c202b8-8352-4ab1-a3d8-6f5150a1869b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "fe25cb3e-8d78-4c0d-8c77-804f7ca7349e",
                  "title": "#count",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should count elements",
                      "fullTitle": "sorted-set test skip map #count should count elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\n(0, chai_1.expect)(z.count()).to.equal(0);\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\nz.add(\"5a600e19\", 14);\nz.add(\"5a600f00\", 30.0);\nz.add(\"5a600f01\", 30.5);\nz.add(\"5a600f02\", 31.0);\nz.add(\"5a600f03\", 31.5);\nz.add(\"5a600f04\", 32.0);\nz.add(\"5a600f05\", 32.0);\nz.add(\"5a600f06\", 32.0);\n(0, chai_1.expect)(z.count()).to.eql(z.rangeByScore().length);\n(0, chai_1.expect)(z.count(8)).to.eql(z.rangeByScore(8).length);\n(0, chai_1.expect)(z.count(3, 7)).to.eql(z.rangeByScore(3, 7).length);\n(0, chai_1.expect)(z.count(5, 14)).to.eql(z.rangeByScore(5, 14).length);\n(0, chai_1.expect)(z.count(5, 5)).to.eql(z.rangeByScore(5, 5).length);\n(0, chai_1.expect)(z.count(5, 0)).to.eql(z.rangeByScore(5, 0).length);\n(0, chai_1.expect)(z.count(30, 32)).to.eql(z.rangeByScore(30, 32).length);\n(0, chai_1.expect)(z.count(40)).to.eql(z.rangeByScore(40).length);",
                      "err": {},
                      "uuid": "cf71f221-8510-46f2-b801-f795b487180f",
                      "parentUUID": "fe25cb3e-8d78-4c0d-8c77-804f7ca7349e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "cf71f221-8510-46f2-b801-f795b487180f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "fb989490-c15a-496b-b8ed-6e59eaa0840d",
                  "title": "#range",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map #range should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"first\", 1);\nz.add(\"second\", 2);\nz.add(\"third\", 3);\nz.add(\"fourth\", 4);\nconst array = [\n    \"first\",\n    \"second\",\n    \"third\",\n    \"fourth\"\n];\n(0, chai_1.expect)(z.range()).to.eql(array);\n(0, chai_1.expect)(z.range(2)).to.eql(array.slice(2));\n(0, chai_1.expect)(z.range(8)).to.eql(array.slice(8));\n(0, chai_1.expect)(z.range(0, 2)).to.eql(array.slice(0, 3));\n(0, chai_1.expect)(z.range(-1)).to.eql([\"fourth\"]);\n(0, chai_1.expect)(z.range(-4)).to.eql(array);\n(0, chai_1.expect)(z.range(-4, -2)).to.eql(array.slice(0, 3));\n(0, chai_1.expect)(z.range(-4, z.length + 1000)).\n    to.eql(array.slice(-4, z.length + 1000));",
                      "err": {},
                      "uuid": "2637e4fc-3d1e-442d-92df-66c76fda7513",
                      "parentUUID": "fb989490-c15a-496b-b8ed-6e59eaa0840d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should support withScores",
                      "fullTitle": "sorted-set test skip map #range should support withScores",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"first\", 1);\nz.add(\"second\", 2);\n(0, chai_1.expect)(z.range(0, 0, { \"withScores\": true })).\n    to.eql([\n    [\n        \"first\",\n        1\n    ]\n]);",
                      "err": {},
                      "uuid": "861b9ce3-6444-4de3-acd2-dc7d361534e2",
                      "parentUUID": "fb989490-c15a-496b-b8ed-6e59eaa0840d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2637e4fc-3d1e-442d-92df-66c76fda7513",
                    "861b9ce3-6444-4de3-acd2-dc7d361534e2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "fb378ee2-cdcb-4f83-a4e5-f023d20ddcb3",
                  "title": "#intersect",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should intersect two sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect two sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const a = new Z(), b = new Z();\na.add(\"5a600e10\", 16);\na.add(\"5a600e12\", 10);\na.add(\"5a600e14\", 9);\na.add(\"5a600e15\", 14);\na.add(\"5a600e17\", 20);\na.add(\"5a600e18\", 13);\na.add(\"5a600e19\", 15);\na.add(\"5a600e1a\", 19);\na.add(\"5a600e1b\", 7);\na.add(\"5a600e1c\", 13);\na.add(\"5a600e1e\", 10);\nb.add(\"5a600e10\", 0);\nb.add(\"5a600e11\", 15);\nb.add(\"5a600e13\", 5);\nb.add(\"5a600e14\", 3);\nb.add(\"5a600e15\", 14);\nb.add(\"5a600e17\", 12);\nb.add(\"5a600e19\", 12);\nb.add(\"5a600e1b\", 16);\nb.add(\"5a600e1c\", 12);\nb.add(\"5a600e1d\", 17);\nb.add(\"5a600e1f\", 3);\n(0, chai_1.expect)(Z.intersect(a, b)).to.eql([\n    \"5a600e10\",\n    \"5a600e14\",\n    \"5a600e17\",\n    \"5a600e19\",\n    \"5a600e1c\",\n    \"5a600e15\",\n    \"5a600e1b\"\n]);\n(0, chai_1.expect)(Z.intersect(b, a)).to.eql([\n    \"5a600e1b\",\n    \"5a600e14\",\n    \"5a600e1c\",\n    \"5a600e15\",\n    \"5a600e19\",\n    \"5a600e10\",\n    \"5a600e17\"\n]);",
                      "err": {},
                      "uuid": "1737a9be-d200-4b7b-b8a3-f1f581354da0",
                      "parentUUID": "fb378ee2-cdcb-4f83-a4e5-f023d20ddcb3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect three sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect three sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const a = new Z(), b = new Z(), c = new Z();\na.add(\"5a600e10\", 16);\na.add(\"5a600e12\", 10);\na.add(\"5a600e14\", 9);\na.add(\"5a600e15\", 14);\na.add(\"5a600e17\", 20);\na.add(\"5a600e18\", 13);\na.add(\"5a600e19\", 15);\na.add(\"5a600e1a\", 19);\na.add(\"5a600e1b\", 7);\na.add(\"5a600e1c\", 13);\na.add(\"5a600e1e\", 10);\nb.add(\"5a600e10\", 0);\nb.add(\"5a600e11\", 15);\nb.add(\"5a600e13\", 5);\nb.add(\"5a600e14\", 3);\nb.add(\"5a600e15\", 14);\nb.add(\"5a600e17\", 12);\nb.add(\"5a600e19\", 12);\nb.add(\"5a600e1b\", 16);\nb.add(\"5a600e1c\", 12);\nb.add(\"5a600e1d\", 17);\nb.add(\"5a600e1f\", 3);\nc.add(\"5a600e10\", 7);\nc.add(\"5a600e12\", 20);\nc.add(\"5a600e13\", 9);\nc.add(\"5a600e14\", 19);\nc.add(\"5a600e16\", 19);\nc.add(\"5a600e17\", 1);\nc.add(\"5a600e18\", 18);\nc.add(\"5a600e1a\", 6);\nc.add(\"5a600e1c\", 15);\nc.add(\"5a600e1f\", 4);\n(0, chai_1.expect)(Z.intersect(c, a, b)).to.eql([\n    \"5a600e10\",\n    \"5a600e14\",\n    \"5a600e17\",\n    \"5a600e1c\"\n]);\n(0, chai_1.expect)(Z.intersect(c, a, b)).to.eql(c.intersect(a, b));",
                      "err": {},
                      "uuid": "cf91b656-bcd1-4890-8983-89e11ef620e5",
                      "parentUUID": "fb378ee2-cdcb-4f83-a4e5-f023d20ddcb3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect four sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect four sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const a = new Z(), b = new Z(), c = new Z(), d = new Z();\na.add(\"5a600e10\", 16);\na.add(\"5a600e12\", 10);\na.add(\"5a600e14\", 9);\na.add(\"5a600e15\", 14);\na.add(\"5a600e17\", 20);\na.add(\"5a600e18\", 13);\na.add(\"5a600e19\", 15);\na.add(\"5a600e1a\", 19);\na.add(\"5a600e1b\", 7);\na.add(\"5a600e1c\", 13);\na.add(\"5a600e1e\", 10);\nb.add(\"5a600e10\", 0);\nb.add(\"5a600e11\", 15);\nb.add(\"5a600e13\", 5);\nb.add(\"5a600e14\", 3);\nb.add(\"5a600e15\", 14);\nb.add(\"5a600e17\", 12);\nb.add(\"5a600e19\", 12);\nb.add(\"5a600e1b\", 16);\nb.add(\"5a600e1c\", 12);\nb.add(\"5a600e1d\", 17);\nb.add(\"5a600e1f\", 3);\nc.add(\"5a600e10\", 7);\nc.add(\"5a600e12\", 20);\nc.add(\"5a600e13\", 9);\nc.add(\"5a600e14\", 19);\nc.add(\"5a600e16\", 19);\nc.add(\"5a600e17\", 1);\nc.add(\"5a600e18\", 18);\nc.add(\"5a600e1a\", 6);\nc.add(\"5a600e1c\", 15);\nc.add(\"5a600e1f\", 4);\nd.add(\"5a600e1c\", 400);\nd.add(\"5a600e17\", 500);\nd.add(\"5a600e1f\", 600);\nd.add(\"5a600e20\", 700);\n(0, chai_1.expect)(Z.intersect(d, c, a, b)).to.eql([\n    \"5a600e17\",\n    \"5a600e1c\"\n]);\n(0, chai_1.expect)(Z.intersect(d, c, a, b)).to.eql(d.intersect(c, a, b));",
                      "err": {},
                      "uuid": "19f10e71-54be-4e02-aadc-43d624a59ef6",
                      "parentUUID": "fb378ee2-cdcb-4f83-a4e5-f023d20ddcb3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1737a9be-d200-4b7b-b8a3-f1f581354da0",
                    "cf91b656-bcd1-4890-8983-89e11ef620e5",
                    "19f10e71-54be-4e02-aadc-43d624a59ef6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "0b818bc1-7a87-430f-bb2c-95e85b3c08ee",
                  "title": "#rank",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should get the correct rank",
                      "fullTitle": "sorted-set test skip map #rank should get the correct rank",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.rank(\"5a600e12\")).to.equal(7);\n(0, chai_1.expect)(z.rank(\"5a600e13\")).to.equal(3);\n(0, chai_1.expect)(z.rank(\"5a600e16\")).to.equal(0);\n(0, chai_1.expect)(z.rank(\"5a600e15\")).to.equal(8);\n(0, chai_1.expect)(z.rank(\"not in set\")).to.equal(null);",
                      "err": {},
                      "uuid": "bebf83c1-90a0-4b51-b592-19f3c81d0c49",
                      "parentUUID": "0b818bc1-7a87-430f-bb2c-95e85b3c08ee",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bebf83c1-90a0-4b51-b592-19f3c81d0c49"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "3eee015b-afb8-4cf4-98ab-9433a1676331",
                  "title": "#rem",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should delete special elements",
                      "fullTitle": "sorted-set test skip map #rem should delete special elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.rem(\"5a600e15\")).to.equal(19);\n(0, chai_1.expect)(z).to.have.length(8);\n(0, chai_1.expect)(z.rem(\"5a600e16\")).to.equal(3);\n(0, chai_1.expect)(z).to.have.length(7);\n(0, chai_1.expect)(z.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e11\",\n        6\n    ],\n    [\n        \"5a600e18\",\n        10\n    ],\n    [\n        \"5a600e13\",\n        11\n    ],\n    [\n        \"5a600e17\",\n        12\n    ],\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ]\n]);",
                      "err": {},
                      "uuid": "a765a724-d4b4-4a5c-b8ce-8c1a76d188f7",
                      "parentUUID": "3eee015b-afb8-4cf4-98ab-9433a1676331",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should delete many elements",
                      "fullTitle": "sorted-set test skip map #rem should delete many elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.rem(\"5a600e11\")).to.equal(6);\n(0, chai_1.expect)(z.rem(\"5a600e13\")).to.equal(11);\n(0, chai_1.expect)(z.rem(\"5a600e14\")).to.equal(14);\n(0, chai_1.expect)(z.rem(\"5a600e15\")).to.equal(19);\n(0, chai_1.expect)(z.rem(\"5a600e16\")).to.equal(3);\n(0, chai_1.expect)(z.rem(\"5a600e17\")).to.equal(12);\n(0, chai_1.expect)(z.length).to.equal(3);\n(0, chai_1.expect)(z.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e18\",\n        10\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ]\n]);",
                      "err": {},
                      "uuid": "8fb1ee2f-a5ad-4ae8-b500-c2374730fec9",
                      "parentUUID": "3eee015b-afb8-4cf4-98ab-9433a1676331",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a765a724-d4b4-4a5c-b8ce-8c1a76d188f7",
                    "8fb1ee2f-a5ad-4ae8-b500-c2374730fec9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "e1e7d099-7b4a-435b-ab72-ba6552f33db9",
                  "title": "#remRangeByScore",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a range of elements",
                      "fullTitle": "sorted-set test skip map #remRangeByScore should strip out a range of elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.remRangeByScore(4, 14)).to.equal(5);\n(0, chai_1.expect)(z).to.have.length(4);\n(0, chai_1.expect)(z.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);",
                      "err": {},
                      "uuid": "a5801214-bcd9-4b37-a61b-e961d46f519c",
                      "parentUUID": "e1e7d099-7b4a-435b-ab72-ba6552f33db9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all the elements",
                      "fullTitle": "sorted-set test skip map #remRangeByScore should strip out all the elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.remRangeByScore(3, 19)).to.equal(9);\n(0, chai_1.expect)(z).to.have.length(0);\n(0, chai_1.expect)(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "054285a3-6f00-4577-8f6d-172686fd893d",
                      "parentUUID": "e1e7d099-7b4a-435b-ab72-ba6552f33db9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a5801214-bcd9-4b37-a61b-e961d46f519c",
                    "054285a3-6f00-4577-8f6d-172686fd893d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "b2c95401-46b0-4b34-aa19-00877ece6fea",
                  "title": "#remRangeByRank",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a slice of elements",
                      "fullTitle": "sorted-set test skip map #remRangeByRank should strip out a slice of elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.remRangeByRank(1, 6)).to.equal(5);\n(0, chai_1.expect)(z).to.have.length(4);\n(0, chai_1.expect)(z.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);",
                      "err": {},
                      "uuid": "fd3c0e6f-f772-4b2e-83ce-350fc3f5fdd4",
                      "parentUUID": "b2c95401-46b0-4b34-aa19-00877ece6fea",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all elements",
                      "fullTitle": "sorted-set test skip map #remRangeByRank should strip out all elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.remRangeByRank(0, 9)).to.equal(9);\n(0, chai_1.expect)(z).to.have.length(0);\n(0, chai_1.expect)(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "d9574017-6cd4-4389-ad5f-237c342fd900",
                      "parentUUID": "b2c95401-46b0-4b34-aa19-00877ece6fea",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fd3c0e6f-f772-4b2e-83ce-350fc3f5fdd4",
                    "d9574017-6cd4-4389-ad5f-237c342fd900"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "484f3818-82b5-40dd-8121-2510e5f2707e",
                  "title": "#values",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the values",
                      "fullTitle": "sorted-set test skip map #values should return the values",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"first\", -1);\nz.add(\"third\", 5);\nz.add(\"second\", 3);\n(0, chai_1.expect)(z.values()).to.eql([\n    -1,\n    3,\n    5\n]);",
                      "err": {},
                      "uuid": "f0055b2e-cf6b-41c5-98bd-a11858779a38",
                      "parentUUID": "484f3818-82b5-40dd-8121-2510e5f2707e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f0055b2e-cf6b-41c5-98bd-a11858779a38"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "4ea00826-03e2-4fec-b9c0-0ca0c6359688",
                  "title": "unique",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should ensure values are unique",
                      "fullTitle": "sorted-set test skip map unique should ensure values are unique",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z({ \"unique\": true });\nassert.equal(z.keys().length, 0, \"Expected an empty SortedSet\");\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(() => {\n    z.add(\"5a600e19\", 11);\n}).to.throw(/unique/);\n// Quick exit test\n(0, chai_1.expect)(() => {\n    z.add(\"5a600dff\", z._head.next[z._level - 1].next.value);\n}).to.throw(/unique/);\n// This test ensures the key < key check doesn't come into play\n(0, chai_1.expect)(() => {\n    z.add(\"5a600dff\", 11);\n}).to.throw(/unique/);\n(0, chai_1.expect)(() => {\n    z.add(\"5a600e18\", 10);\n}).to.not.throw();\n(0, chai_1.expect)(z).to.have.length(9);\n(0, chai_1.expect)(z.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e11\",\n        6\n    ],\n    [\n        \"5a600e18\",\n        10\n    ],\n    [\n        \"5a600e13\",\n        11\n    ],\n    [\n        \"5a600e17\",\n        12\n    ],\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);",
                      "err": {},
                      "uuid": "65102b6a-3b1d-45a2-984d-13c236634e9b",
                      "parentUUID": "4ea00826-03e2-4fec-b9c0-0ca0c6359688",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert keys if constraint broken during update",
                      "fullTitle": "sorted-set test skip map unique should revert keys if constraint broken during update",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z({ \"unique\": true });\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(() => {\n    z.add(\"5a600e13\", 14);\n}).to.throw(/unique/);\n(0, chai_1.expect)(z).to.have.length(9);\n(0, chai_1.expect)(z.score(\"5a600e13\")).to.equal(11);",
                      "err": {},
                      "uuid": "d38926ac-bbaf-4b14-b53d-1641a30b1409",
                      "parentUUID": "4ea00826-03e2-4fec-b9c0-0ca0c6359688",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "65102b6a-3b1d-45a2-984d-13c236634e9b",
                    "d38926ac-bbaf-4b14-b53d-1641a30b1409"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "4cd0b173-5532-4881-ab43-3fb2344dee69"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "76e1fd76-498d-4513-8d25-ed140ff12131",
              "title": "skip map rewrite",
              "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
              "file": "/test/resp/data/sorted-set.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should support basic operations",
                  "fullTitle": "sorted-set test skip map rewrite should support basic operations",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ss = new sorted_set_1.SortedSet();\n(0, chai_1.expect)(ss).to.have.length(0);\n(0, chai_1.expect)(ss.toArray()).to.eql([]);\n(0, chai_1.expect)(ss.range()).to.eql([]);\n(0, chai_1.expect)(ss.rangeByScore()).to.eql([]);\n/*\n * Expect(() => {\n *   Ss.add('__proto__', 14);\n * }).to.throw();\n */\nss.add(\"5a600e16\", 8);\nss.add(\"5a600e17\", 9);\n(0, chai_1.expect)(ss.add(\"5a600e18\", 10)).to.equal(null);\n(0, chai_1.expect)(ss.add(\"5a600e17\", 12)).to.equal(9);\n(0, chai_1.expect)(ss).to.have.length(3);\n(0, chai_1.expect)(ss.toArray()).to.eql([\n    \"5a600e16\",\n    \"5a600e18\",\n    \"5a600e17\"\n]);\n(0, chai_1.expect)(ss.toArray()).to.eql(ss.range(0, -1));\n(0, chai_1.expect)(ss.toArray()).to.eql(ss.rangeByScore());\n(0, chai_1.expect)(ss.has(\"5a600e16\")).to.be.ok;\n(0, chai_1.expect)(ss.has(\"5a600e17\")).to.be.ok;\n(0, chai_1.expect)(ss.has(\"5a600e18\")).to.be.ok;\n(0, chai_1.expect)(ss.has(\"5a600e19\")).to.not.be.ok;\n(0, chai_1.expect)(ss.score(\"5a600e16\")).to.equal(8);\n(0, chai_1.expect)(ss.score(\"5a600e17\")).to.equal(12);\n(0, chai_1.expect)(ss.score(\"5a600e18\")).to.equal(10);\n(0, chai_1.expect)(ss.score(\"5a600e19\")).to.equal(null);\n(0, chai_1.expect)(ss.rem(\"5a600e16\")).to.equal(8);\n(0, chai_1.expect)(ss).to.have.length(2);\n(0, chai_1.expect)(ss.rem(\"5a600e16\")).to.equal(null);\n(0, chai_1.expect)(ss).to.have.length(2);\n(0, chai_1.expect)(ss.has(\"5a600e16\")).to.not.be.ok;\n(0, chai_1.expect)(ss.toArray()).to.eql([\n    \"5a600e18\",\n    \"5a600e17\"\n]);\n(0, chai_1.expect)(ss.toArray({ \"withScores\": true })).\n    to.eql(ss.range(0, -1, { \"withScores\": true }));\n(0, chai_1.expect)(ss.toArray()).to.eql(ss.rangeByScore());\nss.add(\"5a600e16\", 10);\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\n(0, chai_1.expect)(ss).to.have.length(9);\n// No change, so should be O(1)\nss.add(\"5a600e17\", 12);\n(0, chai_1.expect)(ss.rank(\"5a600e17\")).to.equal(4);\n(0, chai_1.expect)(ss).to.have.length(9);\n(0, chai_1.expect)(ss.toArray()).to.eql([\n    \"5a600e16\",\n    \"5a600e11\",\n    \"5a600e18\",\n    \"5a600e13\",\n    \"5a600e17\",\n    \"5a600e14\",\n    \"5a600e10\",\n    \"5a600e12\",\n    \"5a600e15\"\n]);\n(0, chai_1.expect)(ss.toArray()).to.eql(ss.range(0, -1));\n(0, chai_1.expect)(ss.toArray()).to.eql(ss.rangeByScore());\n(0, chai_1.expect)(ss.rangeByScore(14, 16, { \"withScores\": true })).to.eql([\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ]\n]);",
                  "err": {},
                  "uuid": "7b212cd6-4209-42ab-9141-f499bba795dc",
                  "parentUUID": "76e1fd76-498d-4513-8d25-ed140ff12131",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "eb6cf96f-fa9f-4a56-963e-ef55a801f25d",
                  "title": "#add",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should implicitly delete",
                      "fullTitle": "sorted-set test skip map rewrite #add should implicitly delete",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.add(\"5a600e14\", null)).to.equal(14);\n(0, chai_1.expect)(ss.add(\"5a600e19\", null)).to.equal(null);\n(0, chai_1.expect)(ss).to.have.length(8);",
                      "err": {},
                      "uuid": "b190454f-e753-43ad-b92f-38efafa6994c",
                      "parentUUID": "eb6cf96f-fa9f-4a56-963e-ef55a801f25d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b190454f-e753-43ad-b92f-38efafa6994c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "6189666e-816c-43aa-bb63-b6214004065e",
                  "title": "#empty",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should remove all elements",
                      "fullTitle": "sorted-set test skip map rewrite #empty should remove all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\nss.empty();\n(0, chai_1.expect)(ss).to.have.length(0);\n(0, chai_1.expect)(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "daa3a6e4-dd33-467e-b428-502350fb6c31",
                      "parentUUID": "6189666e-816c-43aa-bb63-b6214004065e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "daa3a6e4-dd33-467e-b428-502350fb6c31"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "77ab7b0b-cac6-41c6-bb7e-8ce25a8ba46a",
                  "title": "#incrBy(increment, key)",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should increase rank",
                      "fullTitle": "sorted-set test skip map rewrite #incrBy(increment, key) should increase rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"first\", 1);\nss.add(\"second\", 2);\nss.add(\"third\", 3);\nss.add(\"fourth\", 4);\n(0, chai_1.expect)(ss.incrBy(2, \"first\")).to.equal(3);\n(0, chai_1.expect)(ss.rank(\"first\")).to.equal(1);",
                      "err": {},
                      "uuid": "a222d050-5d8f-41c2-b3a9-60803789910b",
                      "parentUUID": "77ab7b0b-cac6-41c6-bb7e-8ce25a8ba46a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should create if not found",
                      "fullTitle": "sorted-set test skip map rewrite #incrBy(increment, key) should create if not found",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"first\", 1);\nss.incrBy(2, \"second\");\n(0, chai_1.expect)(ss.card()).to.equal(2);\n(0, chai_1.expect)(ss.rank(\"second\")).to.equal(1);",
                      "err": {},
                      "uuid": "bf23b940-4906-472b-bb0f-0e2087c966dc",
                      "parentUUID": "77ab7b0b-cac6-41c6-bb7e-8ce25a8ba46a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a222d050-5d8f-41c2-b3a9-60803789910b",
                    "bf23b940-4906-472b-bb0f-0e2087c966dc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "3b6cbcff-1bab-436b-b6c2-21965c91de5a",
                  "title": "#keys",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the keys",
                      "fullTitle": "sorted-set test skip map rewrite #keys should return the keys",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.keys()).to.eql([\n    \"5a600e16\",\n    \"5a600e11\",\n    \"5a600e18\",\n    \"5a600e13\",\n    \"5a600e17\",\n    \"5a600e14\",\n    \"5a600e10\",\n    \"5a600e12\",\n    \"5a600e15\"\n]);",
                      "err": {},
                      "uuid": "956cb528-f031-4535-a0ab-0f39547f4162",
                      "parentUUID": "3b6cbcff-1bab-436b-b6c2-21965c91de5a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "956cb528-f031-4535-a0ab-0f39547f4162"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "6d324bb3-b210-4c57-9a4a-37c370d9c624",
                  "title": "#rangeByScore",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map rewrite #rangeByScore should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.rangeByScore(14, null, { \"withScores\": true })).to.eql([\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);\n(0, chai_1.expect)(ss.rangeByScore(null, 10, { \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e11\",\n        6\n    ],\n    [\n        \"5a600e18\",\n        10\n    ]\n]);\n(0, chai_1.expect)(ss.rangeByScore(-Infinity, Infinity)).to.eql(ss.toArray());\n(0, chai_1.expect)(ss.rangeByScore(null, null)).to.eql(ss.toArray());",
                      "err": {},
                      "uuid": "4b00e28d-ad44-4415-a69a-19d75d4fe227",
                      "parentUUID": "6d324bb3-b210-4c57-9a4a-37c370d9c624",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4b00e28d-ad44-4415-a69a-19d75d4fe227"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "c4fdccc2-d99e-4600-b667-26d7fc298cfb",
                  "title": "#count",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should count elements",
                      "fullTitle": "sorted-set test skip map rewrite #count should count elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\n(0, chai_1.expect)(ss.count()).to.equal(0);\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\nss.add(\"5a600e19\", 14);\nss.add(\"5a600f00\", 30.0);\nss.add(\"5a600f01\", 30.5);\nss.add(\"5a600f02\", 31.0);\nss.add(\"5a600f03\", 31.5);\nss.add(\"5a600f04\", 32.0);\nss.add(\"5a600f05\", 32.0);\nss.add(\"5a600f06\", 32.0);\n(0, chai_1.expect)(ss.count()).to.eql(ss.rangeByScore().length);\n(0, chai_1.expect)(ss.count(8)).to.eql(ss.rangeByScore(8).length);\n(0, chai_1.expect)(ss.count(3, 7)).to.eql(ss.rangeByScore(3, 7).length);\n(0, chai_1.expect)(ss.count(5, 14)).to.eql(ss.rangeByScore(5, 14).length);\n(0, chai_1.expect)(ss.count(5, 5)).to.eql(ss.rangeByScore(5, 5).length);\n(0, chai_1.expect)(ss.count(5, 0)).to.eql(ss.rangeByScore(5, 0).length);\n(0, chai_1.expect)(ss.count(30, 32)).to.eql(ss.rangeByScore(30, 32).length);\n(0, chai_1.expect)(ss.count(40)).to.eql(ss.rangeByScore(40).length);",
                      "err": {},
                      "uuid": "8c8016d7-cc1b-40ad-b920-576ca71f3fe5",
                      "parentUUID": "c4fdccc2-d99e-4600-b667-26d7fc298cfb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8c8016d7-cc1b-40ad-b920-576ca71f3fe5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "9d45ec5a-101e-4866-87fd-45142733d00f",
                  "title": "#range",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map rewrite #range should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"first\", 1);\nss.add(\"second\", 2);\nss.add(\"third\", 3);\nss.add(\"fourth\", 4);\nconst array = [\n    \"first\",\n    \"second\",\n    \"third\",\n    \"fourth\"\n];\n(0, chai_1.expect)(ss.range()).to.eql(array);\n(0, chai_1.expect)(ss.range(2)).to.eql(array.slice(2));\n(0, chai_1.expect)(ss.range(8)).to.eql(array.slice(8));\n(0, chai_1.expect)(ss.range(0, 2)).to.eql(array.slice(0, 3));\n(0, chai_1.expect)(ss.range(-1)).to.eql([\"fourth\"]);\n(0, chai_1.expect)(ss.range(-4)).to.eql(array);\n(0, chai_1.expect)(ss.range(-4, -2)).to.eql(array.slice(0, 3));\n(0, chai_1.expect)(ss.range(-4, ss.length + 1000)).\n    to.eql(array.slice(-4, ss.length + 1000));",
                      "err": {},
                      "uuid": "b36cc1cf-1c49-4973-b267-1a32b0347b6d",
                      "parentUUID": "9d45ec5a-101e-4866-87fd-45142733d00f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should support withScores",
                      "fullTitle": "sorted-set test skip map rewrite #range should support withScores",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"first\", 1);\nss.add(\"second\", 2);\n(0, chai_1.expect)(ss.range(0, 0, { \"withScores\": true })).\n    to.eql([\n    [\n        \"first\",\n        1\n    ]\n]);",
                      "err": {},
                      "uuid": "213c4ae9-3b14-433d-a06f-40e1f756b055",
                      "parentUUID": "9d45ec5a-101e-4866-87fd-45142733d00f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b36cc1cf-1c49-4973-b267-1a32b0347b6d",
                    "213c4ae9-3b14-433d-a06f-40e1f756b055"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "8896474a-6c9d-4236-bd45-101450fc9edc",
                  "title": "#intersect",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should intersect two sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect two sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet();\na.add(\"5a600e10\", 16);\na.add(\"5a600e12\", 10);\na.add(\"5a600e14\", 9);\na.add(\"5a600e15\", 14);\na.add(\"5a600e17\", 20);\na.add(\"5a600e18\", 13);\na.add(\"5a600e19\", 15);\na.add(\"5a600e1a\", 19);\na.add(\"5a600e1b\", 7);\na.add(\"5a600e1c\", 13);\na.add(\"5a600e1e\", 10);\nb.add(\"5a600e10\", 0);\nb.add(\"5a600e11\", 15);\nb.add(\"5a600e13\", 5);\nb.add(\"5a600e14\", 3);\nb.add(\"5a600e15\", 14);\nb.add(\"5a600e17\", 12);\nb.add(\"5a600e19\", 12);\nb.add(\"5a600e1b\", 16);\nb.add(\"5a600e1c\", 12);\nb.add(\"5a600e1d\", 17);\nb.add(\"5a600e1f\", 3);\n(0, chai_1.expect)(sorted_set_1.SortedSet.intersect(a, b)).to.eql([\n    \"5a600e10\",\n    \"5a600e14\",\n    \"5a600e17\",\n    \"5a600e19\",\n    \"5a600e1c\",\n    \"5a600e15\",\n    \"5a600e1b\"\n]);\n(0, chai_1.expect)(sorted_set_1.SortedSet.intersect(b, a)).to.eql([\n    \"5a600e1b\",\n    \"5a600e14\",\n    \"5a600e1c\",\n    \"5a600e15\",\n    \"5a600e19\",\n    \"5a600e10\",\n    \"5a600e17\"\n]);",
                      "err": {},
                      "uuid": "436d1af3-6ae5-4357-a9fa-85ed6657280f",
                      "parentUUID": "8896474a-6c9d-4236-bd45-101450fc9edc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect three sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect three sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet(), c = new sorted_set_1.SortedSet();\na.add(\"5a600e10\", 16);\na.add(\"5a600e12\", 10);\na.add(\"5a600e14\", 9);\na.add(\"5a600e15\", 14);\na.add(\"5a600e17\", 20);\na.add(\"5a600e18\", 13);\na.add(\"5a600e19\", 15);\na.add(\"5a600e1a\", 19);\na.add(\"5a600e1b\", 7);\na.add(\"5a600e1c\", 13);\na.add(\"5a600e1e\", 10);\nb.add(\"5a600e10\", 0);\nb.add(\"5a600e11\", 15);\nb.add(\"5a600e13\", 5);\nb.add(\"5a600e14\", 3);\nb.add(\"5a600e15\", 14);\nb.add(\"5a600e17\", 12);\nb.add(\"5a600e19\", 12);\nb.add(\"5a600e1b\", 16);\nb.add(\"5a600e1c\", 12);\nb.add(\"5a600e1d\", 17);\nb.add(\"5a600e1f\", 3);\nc.add(\"5a600e10\", 7);\nc.add(\"5a600e12\", 20);\nc.add(\"5a600e13\", 9);\nc.add(\"5a600e14\", 19);\nc.add(\"5a600e16\", 19);\nc.add(\"5a600e17\", 1);\nc.add(\"5a600e18\", 18);\nc.add(\"5a600e1a\", 6);\nc.add(\"5a600e1c\", 15);\nc.add(\"5a600e1f\", 4);\n(0, chai_1.expect)(sorted_set_1.SortedSet.intersect(c, a, b)).to.eql([\n    \"5a600e10\",\n    \"5a600e14\",\n    \"5a600e17\",\n    \"5a600e1c\"\n]);\n// Expect(SortedSet.intersect(c, a, b)).to.eql(c.intersect(a, b));",
                      "err": {},
                      "uuid": "42bca508-09f3-4b0c-a7cb-33307717fe27",
                      "parentUUID": "8896474a-6c9d-4236-bd45-101450fc9edc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect four sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect four sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet(), c = new sorted_set_1.SortedSet(), d = new sorted_set_1.SortedSet();\na.add(\"5a600e10\", 16);\na.add(\"5a600e12\", 10);\na.add(\"5a600e14\", 9);\na.add(\"5a600e15\", 14);\na.add(\"5a600e17\", 20);\na.add(\"5a600e18\", 13);\na.add(\"5a600e19\", 15);\na.add(\"5a600e1a\", 19);\na.add(\"5a600e1b\", 7);\na.add(\"5a600e1c\", 13);\na.add(\"5a600e1e\", 10);\nb.add(\"5a600e10\", 0);\nb.add(\"5a600e11\", 15);\nb.add(\"5a600e13\", 5);\nb.add(\"5a600e14\", 3);\nb.add(\"5a600e15\", 14);\nb.add(\"5a600e17\", 12);\nb.add(\"5a600e19\", 12);\nb.add(\"5a600e1b\", 16);\nb.add(\"5a600e1c\", 12);\nb.add(\"5a600e1d\", 17);\nb.add(\"5a600e1f\", 3);\nc.add(\"5a600e10\", 7);\nc.add(\"5a600e12\", 20);\nc.add(\"5a600e13\", 9);\nc.add(\"5a600e14\", 19);\nc.add(\"5a600e16\", 19);\nc.add(\"5a600e17\", 1);\nc.add(\"5a600e18\", 18);\nc.add(\"5a600e1a\", 6);\nc.add(\"5a600e1c\", 15);\nc.add(\"5a600e1f\", 4);\nd.add(\"5a600e1c\", 400);\nd.add(\"5a600e17\", 500);\nd.add(\"5a600e1f\", 600);\nd.add(\"5a600e20\", 700);\n(0, chai_1.expect)(sorted_set_1.SortedSet.intersect(d, c, a, b)).to.eql([\n    \"5a600e17\",\n    \"5a600e1c\"\n]);\n// Expect(SortedSet.intersect(d, c, a, b)).to.eql(d.intersect(c, a, b));",
                      "err": {},
                      "uuid": "63b2b3bb-2146-4b7f-bda6-52805a10d196",
                      "parentUUID": "8896474a-6c9d-4236-bd45-101450fc9edc",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "436d1af3-6ae5-4357-a9fa-85ed6657280f",
                    "42bca508-09f3-4b0c-a7cb-33307717fe27",
                    "63b2b3bb-2146-4b7f-bda6-52805a10d196"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "f19d98c9-3b15-4d55-9876-ca6b74470e3b",
                  "title": "#rank",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should get the correct rank",
                      "fullTitle": "sorted-set test skip map rewrite #rank should get the correct rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.rank(\"5a600e12\")).to.equal(7);\n(0, chai_1.expect)(ss.rank(\"5a600e13\")).to.equal(3);\n(0, chai_1.expect)(ss.rank(\"5a600e16\")).to.equal(0);\n(0, chai_1.expect)(ss.rank(\"5a600e15\")).to.equal(8);\n(0, chai_1.expect)(ss.rank(\"not in set\")).to.equal(null);",
                      "err": {},
                      "uuid": "f5d97b13-f65e-4bf2-a3d2-eaa11a89c210",
                      "parentUUID": "f19d98c9-3b15-4d55-9876-ca6b74470e3b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f5d97b13-f65e-4bf2-a3d2-eaa11a89c210"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "f26b40b0-135a-4460-b9a6-33df69e0f034",
                  "title": "#rem",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should delete special elements",
                      "fullTitle": "sorted-set test skip map rewrite #rem should delete special elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.rem(\"5a600e15\")).to.equal(19);\n(0, chai_1.expect)(ss).to.have.length(8);\n(0, chai_1.expect)(ss.rem(\"5a600e16\")).to.equal(3);\n(0, chai_1.expect)(ss).to.have.length(7);\n(0, chai_1.expect)(ss.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e11\",\n        6\n    ],\n    [\n        \"5a600e18\",\n        10\n    ],\n    [\n        \"5a600e13\",\n        11\n    ],\n    [\n        \"5a600e17\",\n        12\n    ],\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ]\n]);",
                      "err": {},
                      "uuid": "10f9b256-b564-4454-b2d2-ee9f120e5f9c",
                      "parentUUID": "f26b40b0-135a-4460-b9a6-33df69e0f034",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should delete many elements",
                      "fullTitle": "sorted-set test skip map rewrite #rem should delete many elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.rem(\"5a600e11\")).to.equal(6);\n(0, chai_1.expect)(ss.rem(\"5a600e13\")).to.equal(11);\n(0, chai_1.expect)(ss.rem(\"5a600e14\")).to.equal(14);\n(0, chai_1.expect)(ss.rem(\"5a600e15\")).to.equal(19);\n(0, chai_1.expect)(ss.rem(\"5a600e16\")).to.equal(3);\n(0, chai_1.expect)(ss.rem(\"5a600e17\")).to.equal(12);\n(0, chai_1.expect)(ss.length).to.equal(3);\n(0, chai_1.expect)(ss.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e18\",\n        10\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ]\n]);",
                      "err": {},
                      "uuid": "783ad12b-8608-4895-bbb8-0a687ea38593",
                      "parentUUID": "f26b40b0-135a-4460-b9a6-33df69e0f034",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "10f9b256-b564-4454-b2d2-ee9f120e5f9c",
                    "783ad12b-8608-4895-bbb8-0a687ea38593"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "51148258-0381-441a-843e-8e679017211b",
                  "title": "#remRangeByScore",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a range of elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByScore should strip out a range of elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.remRangeByScore(4, 14)).to.equal(5);\n(0, chai_1.expect)(ss).to.have.length(4);\n(0, chai_1.expect)(ss.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);",
                      "err": {},
                      "uuid": "4ef2ce22-166d-42f7-a993-8911346a3ab8",
                      "parentUUID": "51148258-0381-441a-843e-8e679017211b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all the elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByScore should strip out all the elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.remRangeByScore(3, 19)).to.equal(9);\n(0, chai_1.expect)(ss).to.have.length(0);\n(0, chai_1.expect)(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "4d7dd09b-960d-4fa8-9322-7cfcd3c9f8e9",
                      "parentUUID": "51148258-0381-441a-843e-8e679017211b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4ef2ce22-166d-42f7-a993-8911346a3ab8",
                    "4d7dd09b-960d-4fa8-9322-7cfcd3c9f8e9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "d5290df5-63ac-4ee4-9900-4303a28fb856",
                  "title": "#remRangeByRank",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a slice of elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByRank should strip out a slice of elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.remRangeByRank(1, 6)).to.equal(5);\n(0, chai_1.expect)(ss).to.have.length(4);\n(0, chai_1.expect)(ss.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);",
                      "err": {},
                      "uuid": "1bcd9c26-0f66-4e61-96ea-ccc7d41e79e5",
                      "parentUUID": "d5290df5-63ac-4ee4-9900-4303a28fb856",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByRank should strip out all elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.remRangeByRank(0, 9)).to.equal(9);\n(0, chai_1.expect)(ss).to.have.length(0);\n(0, chai_1.expect)(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "3675a089-fa3e-45b0-9fcd-332f37391fe8",
                      "parentUUID": "d5290df5-63ac-4ee4-9900-4303a28fb856",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1bcd9c26-0f66-4e61-96ea-ccc7d41e79e5",
                    "3675a089-fa3e-45b0-9fcd-332f37391fe8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "873e3bf4-1c1e-47e2-8b9a-cd16f71a4239",
                  "title": "#values",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the values",
                      "fullTitle": "sorted-set test skip map rewrite #values should return the values",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"first\", -1);\nss.add(\"third\", 5);\nss.add(\"second\", 3);\n(0, chai_1.expect)(ss.values()).to.eql([\n    -1,\n    3,\n    5\n]);",
                      "err": {},
                      "uuid": "fa519328-59de-4680-bd2c-1b87351e0915",
                      "parentUUID": "873e3bf4-1c1e-47e2-8b9a-cd16f71a4239",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fa519328-59de-4680-bd2c-1b87351e0915"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "62a6d120-1c7d-4854-9dab-132ffab1f4f2",
                  "title": "unique rewrite",
                  "fullFile": "/home/lane/git/unit-redis-ness/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should ensure values are unique",
                      "fullTitle": "sorted-set test skip map rewrite unique rewrite should ensure values are unique",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const options = { \"unique\": true }, ss = new sorted_set_1.SortedSet(options);\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(() => {\n    ss.add(\"5a600e19\", 11);\n}).to.throw(/unique/);\n// Quick exit test\n(0, chai_1.expect)(() => {\n    ss.add(\"5a600dff\", ss._head.next[ss._level - 1].next.value);\n}).to.throw(/unique/);\n// This test ensures the key < key check doesn't come into play\n(0, chai_1.expect)(() => {\n    ss.add(\"5a600dff\", 11);\n}).to.throw(/unique/);\n(0, chai_1.expect)(() => {\n    ss.add(\"5a600e18\", 10);\n}).to.not.throw();\n(0, chai_1.expect)(ss).to.have.length(9);\n(0, chai_1.expect)(ss.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e11\",\n        6\n    ],\n    [\n        \"5a600e18\",\n        10\n    ],\n    [\n        \"5a600e13\",\n        11\n    ],\n    [\n        \"5a600e17\",\n        12\n    ],\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);",
                      "err": {},
                      "uuid": "31ff0223-3f20-4bf8-bdc2-574aad177740",
                      "parentUUID": "62a6d120-1c7d-4854-9dab-132ffab1f4f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert keys if constraint broken during update",
                      "fullTitle": "sorted-set test skip map rewrite unique rewrite should revert keys if constraint broken during update",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet({ \"unique\": true });\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(() => {\n    ss.add(\"5a600e13\", 14);\n}).to.throw(/unique/);\n(0, chai_1.expect)(ss).to.have.length(9);\n(0, chai_1.expect)(ss.score(\"5a600e13\")).to.equal(11);",
                      "err": {},
                      "uuid": "cf454d50-86aa-4883-ad71-bfecb38e4ec0",
                      "parentUUID": "62a6d120-1c7d-4854-9dab-132ffab1f4f2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "31ff0223-3f20-4bf8-bdc2-574aad177740",
                    "cf454d50-86aa-4883-ad71-bfecb38e4ec0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "7b212cd6-4209-42ab-9141-f499bba795dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "e6fc4af3-e75a-4fe4-9d22-0969578ac27f",
            "307ca885-a3f6-4a16-952a-f8c1675908fa",
            "cdb1df6d-1cbd-4f0b-be44-32e7afeaec23",
            "76c4aba4-5186-489d-80ec-b65a94d76385",
            "16f3f0d3-4172-4977-872d-1234c310160f",
            "286fe1dd-266e-4ef0-99e6-d23e85d19d18",
            "c655611e-13d0-47e1-aa84-05591a41b184",
            "750ed855-b242-42d0-bdb8-3732bb494a80"
          ],
          "failures": [],
          "pending": [
            "3122d47f-f7c1-4fea-9e89-5dfea2b6d821"
          ],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5b8883fb-4028-414d-8fef-ca8169ee6987",
          "title": "lua-bit test",
          "fullFile": "/home/lane/git/unit-redis-ness/test/lua/lua-bit.test.ts",
          "file": "/test/lua/lua-bit.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"lua-bit test\"",
              "fullTitle": "lua-bit test \"before all\" hook in \"lua-bit test\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on(\"ready\", () => __awaiter(void 0, void 0, void 0, function* () {\n    yield (0, common_test_1.sendCommand)(client, [\"flushall\"]);\n    yield (0, common_test_1.sendCommand)(client, [\n        \"select\",\n        \"0\"\n    ]);\n    yield (0, common_test_1.sendCommand)(client, [\n        \"script\",\n        \"flush\"\n    ]);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "287c7768-a3de-4a85-b6ac-9dcfd05b1a0b",
              "parentUUID": "5b8883fb-4028-414d-8fef-ca8169ee6987",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"lua-bit test\"",
              "fullTitle": "lua-bit test \"before each\" hook in \"lua-bit test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "967691ab-49e7-4ccf-b4ea-8994ba6afe53",
              "parentUUID": "5b8883fb-4028-414d-8fef-ca8169ee6987",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"lua-bit test\"",
              "fullTitle": "lua-bit test \"after all\" hook in \"lua-bit test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "05aa49c7-57ac-4593-af7e-3e51f69018f4",
              "parentUUID": "5b8883fb-4028-414d-8fef-ca8169ee6987",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"lua-bit test\"",
              "fullTitle": "lua-bit test \"after each\" hook in \"lua-bit test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "f142e552-1db1-4937-830f-6fe631364b15",
              "parentUUID": "5b8883fb-4028-414d-8fef-ca8169ee6987",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should leverage the LUA bit library for bit AND op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit AND op",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = bit.band(5, 1) return val \",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "be588129-417b-40f0-b999-8c7689f28a5d",
              "parentUUID": "5b8883fb-4028-414d-8fef-ca8169ee6987",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit OR op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit OR op",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = bit.bor(5, 1) return val \",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(5);\n    })",
              "err": {},
              "uuid": "58a4105b-dc5a-480d-ac05-b2cf8b47d8d9",
              "parentUUID": "5b8883fb-4028-414d-8fef-ca8169ee6987",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit XOR op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit XOR op",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = bit.bxor(5, 1) return val \",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(4);\n    })",
              "err": {},
              "uuid": "b916554b-7928-412e-bd12-5a02d098144f",
              "parentUUID": "5b8883fb-4028-414d-8fef-ca8169ee6987",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit NOT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit NOT op",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = bit.bnot(5) return val \",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(-6);\n    })",
              "err": {},
              "uuid": "e1af1fd3-23b1-460e-9696-c450248abfdf",
              "parentUUID": "5b8883fb-4028-414d-8fef-ca8169ee6987",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit LSHIFT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit LSHIFT op",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = bit.lshift(5, 1) return val \",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(10);\n    })",
              "err": {},
              "uuid": "5395e4cb-1e20-4722-9491-baaf26db8930",
              "parentUUID": "5b8883fb-4028-414d-8fef-ca8169ee6987",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit RSHIFT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit RSHIFT op",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield (0, common_test_1.sendCommand)(new net.Socket(), [\n            \"info\",\n            \"server\"\n        ]);\n        // Only run this test if this is unit-redis-ness\n        if (!(/redis_version:5/gim).test(response)) {\n            response = yield (0, common_test_1.sendCommand)(client, [\n                \"eval\",\n                \"local val = bit.rshift(-5, 1) return val \",\n                \"0\"\n            ]);\n            (0, chai_1.expect)(response).to.equal(-3);\n        }\n    })",
              "err": {},
              "uuid": "a8c5b52e-ed6e-4451-9411-f5d9a57328ca",
              "parentUUID": "5b8883fb-4028-414d-8fef-ca8169ee6987",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit ARSHIFT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit ARSHIFT op",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = bit.arshift(5, 1) return val \",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(2);\n    })",
              "err": {},
              "uuid": "c7a28105-70f7-45f7-b0b6-b49605da5bad",
              "parentUUID": "5b8883fb-4028-414d-8fef-ca8169ee6987",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "be588129-417b-40f0-b999-8c7689f28a5d",
            "58a4105b-dc5a-480d-ac05-b2cf8b47d8d9",
            "b916554b-7928-412e-bd12-5a02d098144f",
            "e1af1fd3-23b1-460e-9696-c450248abfdf",
            "5395e4cb-1e20-4722-9491-baaf26db8930",
            "a8c5b52e-ed6e-4451-9411-f5d9a57328ca",
            "c7a28105-70f7-45f7-b0b6-b49605da5bad"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b49d743a-632c-455b-bb97-e762d0f01963",
          "title": "dictionary test",
          "fullFile": "/home/lane/git/unit-redis-ness/test/dictionary.test.ts",
          "file": "/test/dictionary.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"dictionary test\"",
              "fullTitle": "dictionary test \"before each\" hook in \"dictionary test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dictionary = new dictionary_1.Dictionary();\nsinon.createSandbox();",
              "err": {},
              "uuid": "ffd31acf-604a-4d62-89bd-f0da4cd6859c",
              "parentUUID": "b49d743a-632c-455b-bb97-e762d0f01963",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"dictionary test\"",
              "fullTitle": "dictionary test \"after all\" hook in \"dictionary test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "6ec9204c-6637-460d-88f9-3cc6a14906a7",
              "parentUUID": "b49d743a-632c-455b-bb97-e762d0f01963",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"dictionary test\"",
              "fullTitle": "dictionary test \"after each\" hook in \"dictionary test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a0f8fd3e-0917-47f1-9a8b-fd5cf73798bd",
              "parentUUID": "b49d743a-632c-455b-bb97-e762d0f01963",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should construct",
              "fullTitle": "dictionary test should construct",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        (0, chai_1.expect)(dictionary.constructor.name).to.equal(\"Dictionary\");\n    })",
              "err": {},
              "uuid": "326eefb0-a8d8-4c5f-bb86-af2cb0643053",
              "parentUUID": "b49d743a-632c-455b-bb97-e762d0f01963",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should implement basic put/get/remove/size/clear/contains/exists/keys/values functionality",
              "fullTitle": "dictionary test should implement basic put/get/remove/size/clear/contains/exists/keys/values functionality",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dictionary.put(\"item\", \"one\");\n(0, chai_1.expect)(dictionary.exists(\"item\")).to.equal(true);\n(0, chai_1.expect)(dictionary.exists(\"one\")).to.equal(false);\n(0, chai_1.expect)(dictionary.get(\"item\")).to.equal(\"one\");\n(0, chai_1.expect)(dictionary.size()).to.equal(1);\n(0, chai_1.expect)(dictionary.contains(\"one\")).to.equal(true);\n(0, chai_1.expect)(dictionary.keys().length).to.equal(1);\n(0, chai_1.expect)(dictionary.values().length).to.equal(1);\ndictionary.put(\"item\", \"two\");\n(0, chai_1.expect)(dictionary.get(\"item\")).to.equal(\"two\");\ndictionary.put(\"one\", { \"embedded\": true });\ndictionary.remove(\"three\");\n(0, chai_1.expect)(dictionary.size()).to.equal(2);\nlet foundTwo = false;\nfor (const each of dictionary) {\n    if (!foundTwo) {\n        (0, chai_1.expect)(each).to.equal(\"two\");\n        foundTwo = true;\n    }\n    else {\n        (0, chai_1.expect)(each).to.eql({ \"embedded\": true });\n    }\n}\ndictionary.remove(\"item\");\n(0, chai_1.expect)(dictionary.size()).to.equal(1);\ndictionary.clear();\n(0, chai_1.expect)(dictionary.size()).to.equal(0);",
              "err": {},
              "uuid": "b59aebf9-f24d-4a49-bc5c-3d8923db0e6d",
              "parentUUID": "b49d743a-632c-455b-bb97-e762d0f01963",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "326eefb0-a8d8-4c5f-bb86-af2cb0643053",
            "b59aebf9-f24d-4a49-bc5c-3d8923db0e6d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f3f67e49-930c-4d5c-a75a-e73410114e67",
          "title": "logger test",
          "fullFile": "/home/lane/git/unit-redis-ness/test/logger.test.ts",
          "file": "/test/logger.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"logger test\"",
              "fullTitle": "logger test \"before each\" hook in \"logger test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "c300265f-29c9-4c09-9644-ff57b8e0a61e",
              "parentUUID": "f3f67e49-930c-4d5c-a75a-e73410114e67",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"logger test\"",
              "fullTitle": "logger test \"after all\" hook in \"logger test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "9c3b15fc-98ef-4f8a-bd73-3f217276f365",
              "parentUUID": "f3f67e49-930c-4d5c-a75a-e73410114e67",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"logger test\"",
              "fullTitle": "logger test \"after each\" hook in \"logger test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "9a3247a5-b4d2-41c1-92b2-94939013fc34",
              "parentUUID": "f3f67e49-930c-4d5c-a75a-e73410114e67",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should construct",
              "fullTitle": "logger test should construct",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        logger = new logger_1.Logger(module.id);\n        (0, chai_1.expect)(logger.constructor.name).to.equal(\"Logger\");\n        logger.info(\"This is an info message\");\n        logger.warn(\"This is a warning message\");\n        logger.debug(\"This is an invisible debug message\");\n    })",
              "err": {},
              "uuid": "81352c71-523c-477d-91c2-bd95a03c755e",
              "parentUUID": "f3f67e49-930c-4d5c-a75a-e73410114e67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not construct when initialized with an empty string",
              "fullTitle": "logger test should not construct when initialized with an empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, chai_1.expect)(() => {\n    logger = new logger_1.Logger(\"\");\n}).to.throw();",
              "err": {},
              "uuid": "58e23136-8e88-44f0-9961-9af9809204b0",
              "parentUUID": "f3f67e49-930c-4d5c-a75a-e73410114e67",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "81352c71-523c-477d-91c2-bd95a03c755e",
            "58e23136-8e88-44f0-9961-9af9809204b0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "docs/mochawesome"
      },
      "version": "6.2.0"
    }
  }
}