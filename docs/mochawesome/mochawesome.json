{
  "stats": {
    "suites": 89,
    "tests": 288,
    "passes": 287,
    "pending": 1,
    "failures": 0,
    "start": "2020-01-17T18:32:28.461Z",
    "end": "2020-01-17T18:32:40.023Z",
    "duration": 11562,
    "testsRegistered": 288,
    "passPercent": 100,
    "pendingPercent": 0.3472222222222222,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cc1dd728-d499-4dbb-98ce-b682e6fb6ce9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook",
          "fullTitle": "\"before all\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "done();",
          "err": {},
          "uuid": "92660a96-d501-4119-a3ac-fed1340a6417",
          "parentUUID": "cc1dd728-d499-4dbb-98ce-b682e6fb6ce9",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook",
          "fullTitle": "\"after all\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "__awaiter(void 0, void 0, void 0, function* () {\n})",
          "err": {},
          "uuid": "a44382be-c5f6-4dac-be69-81f2de669d23",
          "parentUUID": "cc1dd728-d499-4dbb-98ce-b682e6fb6ce9",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "dbbf05f8-6d53-46fc-9816-d5c089f5a61e",
          "title": "dictionary test",
          "fullFile": "/home/lane/git/redis/test/dictionary.test.ts",
          "file": "/test/dictionary.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "dictionary test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dictionary = new dictionary_1.Dictionary();\nsinon.createSandbox();",
              "err": {},
              "uuid": "47adb058-dd3f-49e9-ab2e-9681f15989fd",
              "parentUUID": "dbbf05f8-6d53-46fc-9816-d5c089f5a61e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "dictionary test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "fa8458d8-2eca-4f46-b23f-6c786b70686c",
              "parentUUID": "dbbf05f8-6d53-46fc-9816-d5c089f5a61e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "dictionary test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "20710d62-b663-435a-a03c-3d8fa6274e10",
              "parentUUID": "dbbf05f8-6d53-46fc-9816-d5c089f5a61e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should construct",
              "fullTitle": "dictionary test should construct",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        chai_1.expect(dictionary.constructor.name).to.equal('Dictionary');\n    })",
              "err": {},
              "uuid": "955425e8-9865-4ca2-9d4a-28d48668fb58",
              "parentUUID": "dbbf05f8-6d53-46fc-9816-d5c089f5a61e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should implement basic put/get/remove/size/clear/contains/exists/keys/values functionality",
              "fullTitle": "dictionary test should implement basic put/get/remove/size/clear/contains/exists/keys/values functionality",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dictionary.put('item', 'one');\nchai_1.expect(dictionary.exists('item')).to.equal(true);\nchai_1.expect(dictionary.exists('one')).to.equal(false);\nchai_1.expect(dictionary.get('item')).to.equal('one');\nchai_1.expect(dictionary.size()).to.equal(1);\nchai_1.expect(dictionary.contains('one')).to.equal(true);\nchai_1.expect(dictionary.keys().length).to.equal(1);\nchai_1.expect(dictionary.values().length).to.equal(1);\ndictionary.put('item', 'two');\nchai_1.expect(dictionary.get('item')).to.equal('two');\ndictionary.put('one', { embedded: true });\ndictionary.remove('three');\nchai_1.expect(dictionary.size()).to.equal(2);\nlet foundTwo = false;\nfor (const each of dictionary) {\n    if (!foundTwo) {\n        chai_1.expect(each).to.equal('two');\n        foundTwo = true;\n    }\n    else {\n        chai_1.expect(each).to.eql({ embedded: true });\n    }\n}\ndictionary.remove('item');\nchai_1.expect(dictionary.size()).to.equal(1);\ndictionary.clear();\nchai_1.expect(dictionary.size()).to.equal(0);",
              "err": {},
              "uuid": "937a1042-7253-4ca9-a433-5201b43c9ce0",
              "parentUUID": "dbbf05f8-6d53-46fc-9816-d5c089f5a61e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "955425e8-9865-4ca2-9d4a-28d48668fb58",
            "937a1042-7253-4ca9-a433-5201b43c9ce0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b2acc881-929d-4eae-b419-e7360d2f9e8a",
          "title": "logger test",
          "fullFile": "/home/lane/git/redis/test/logger.test.ts",
          "file": "/test/logger.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "logger test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "40f96857-99ac-4840-b01c-1f20d26b623a",
              "parentUUID": "b2acc881-929d-4eae-b419-e7360d2f9e8a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "logger test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "a15e6009-717e-435e-a1f7-45437aef1e99",
              "parentUUID": "b2acc881-929d-4eae-b419-e7360d2f9e8a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "logger test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "4f6efc7c-7233-490e-aa15-92c6a0785fdb",
              "parentUUID": "b2acc881-929d-4eae-b419-e7360d2f9e8a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should construct",
              "fullTitle": "logger test should construct",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        logger = new logger_1.Logger(module.id);\n        chai_1.expect(logger.constructor.name).to.equal('Logger');\n        logger.info(`This is an info message`);\n        logger.warn('This is a warning message');\n        logger.debug(`This is an invisible debug message`);\n    })",
              "err": {},
              "uuid": "f46ce2f7-7b26-44ef-8810-19ae7d36bc69",
              "parentUUID": "b2acc881-929d-4eae-b419-e7360d2f9e8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not construct when initialized with an empty string",
              "fullTitle": "logger test should not construct when initialized with an empty string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(() => {\n    logger = new logger_1.Logger('');\n}).to.throw();",
              "err": {},
              "uuid": "02600d4b-1e13-4c2d-9242-60f2f11a6abf",
              "parentUUID": "b2acc881-929d-4eae-b419-e7360d2f9e8a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f46ce2f7-7b26-44ef-8810-19ae7d36bc69",
            "02600d4b-1e13-4c2d-9242-60f2f11a6abf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "fa98f0a5-1dd0-4205-9856-51c2a54b8a3f",
          "title": "client command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/client-command.test.ts",
          "file": "/test/resp/command/client-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "client command test \"before all\" hook",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "b43997a9-6344-4a36-aea8-bb0f9b528270",
              "parentUUID": "fa98f0a5-1dd0-4205-9856-51c2a54b8a3f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "client command test \"before each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "bbc1c29d-cde8-416e-a205-786d9e344a85",
              "parentUUID": "fa98f0a5-1dd0-4205-9856-51c2a54b8a3f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "client command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "f1c45e76-23db-4d14-981f-e93446efaefb",
              "parentUUID": "fa98f0a5-1dd0-4205-9856-51c2a54b8a3f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "client command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "4c428f14-6ad2-4188-afe9-618e47f4ae36",
              "parentUUID": "fa98f0a5-1dd0-4205-9856-51c2a54b8a3f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow more than 3 parameters",
              "fullTitle": "client command test should not allow more than 3 parameters",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'one', 'two', 'three', 'four']);\n        chai_1.expect(response).to.equal('ReplyError: ERR Unknown subcommand or wrong number of arguments for \\'one\\'. Try CLIENT HELP');\n    })",
              "err": {},
              "uuid": "d9a86bb4-bc92-4adc-954b-3a619f3906e2",
              "parentUUID": "fa98f0a5-1dd0-4205-9856-51c2a54b8a3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail predictably when an unknown subcommand is passed",
              "fullTitle": "client command test should fail predictably when an unknown subcommand is passed",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'whatever']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'whatever'));\n    })",
              "err": {},
              "uuid": "b8401500-ce28-4057-aca6-6a2fbb4612fc",
              "parentUUID": "fa98f0a5-1dd0-4205-9856-51c2a54b8a3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a NIL name when called with \"GETNAME\" subcommand",
              "fullTitle": "client command test should return a NIL name when called with \"GETNAME\" subcommand",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'getname']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "e2abfb6a-f52e-45d2-87c7-728268207b8c",
              "parentUUID": "fa98f0a5-1dd0-4205-9856-51c2a54b8a3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail predictably when \"GETNAME\" is called with too many parameters",
              "fullTitle": "client command test should fail predictably when \"GETNAME\" is called with too many parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'getname', 'extra']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'getname'));\n    })",
              "err": {},
              "uuid": "ed5d9237-30f5-40da-ad18-e5af2e8d76d1",
              "parentUUID": "fa98f0a5-1dd0-4205-9856-51c2a54b8a3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with \"OK\" when \"setname\" is called with a valid name",
              "fullTitle": "client command test should respond with \"OK\" when \"setname\" is called with a valid name",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['client', 'setname', 'whatever']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['client', 'getname']);\n        chai_1.expect(response).to.equal('whatever');\n    })",
              "err": {},
              "uuid": "8cfd86c2-b967-46b3-bb02-facc480c1076",
              "parentUUID": "fa98f0a5-1dd0-4205-9856-51c2a54b8a3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should persist the value for \"setname\" across tests",
              "fullTitle": "client command test should persist the value for \"setname\" across tests",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'getname']);\n        chai_1.expect(response).to.equal('whatever');\n    })",
              "err": {},
              "uuid": "73fdf201-a7d9-4e65-a5c9-b1d7313f710d",
              "parentUUID": "fa98f0a5-1dd0-4205-9856-51c2a54b8a3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"setname\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"setname\" called with too many parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'setname', 'test', 'two']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'setname'));\n    })",
              "err": {},
              "uuid": "9843a052-7db7-4f9f-979a-c50c0a1e409e",
              "parentUUID": "fa98f0a5-1dd0-4205-9856-51c2a54b8a3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow whitespace in \"setname\" subcommand",
              "fullTitle": "client command test should not allow whitespace in \"setname\" subcommand",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'setname', 'te\\nst']);\n        chai_1.expect(response).to.equal(`ReplyError: ERR Client names cannot contain spaces, newlines or special characters.`);\n    })",
              "err": {},
              "uuid": "be0a1a6b-d837-408f-beb7-85f57088d5f0",
              "parentUUID": "fa98f0a5-1dd0-4205-9856-51c2a54b8a3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the server-assigned client id",
              "fullTitle": "client command test should return the server-assigned client id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'id']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(String(response).length).to.be.greaterThan(0);\n    })",
              "err": {},
              "uuid": "05f75e98-7cb5-4659-9466-6ab69e5484b1",
              "parentUUID": "fa98f0a5-1dd0-4205-9856-51c2a54b8a3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"id\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"id\" called with too many parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'id', 'test', 'two']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'id'));\n    })",
              "err": {},
              "uuid": "0ea81c51-011f-4a87-92c3-925040591b64",
              "parentUUID": "fa98f0a5-1dd0-4205-9856-51c2a54b8a3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a bunch of information when client \"list\" subcommand is invoked",
              "fullTitle": "client command test should return a bunch of information when client \"list\" subcommand is invoked",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'list']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response.length).to.be.greaterThan(0);\n        chai_1.expect(response).to.match(/ name=whatever /);\n        chai_1.expect(response).to.match(/\\bdb=0\\b/);\n    })",
              "err": {},
              "uuid": "ab70e873-9d3c-42f0-8eb9-3756e44c448e",
              "parentUUID": "fa98f0a5-1dd0-4205-9856-51c2a54b8a3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"list\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"list\" called with too many parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'list', 'test', 'two']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "efecf633-2cbe-452d-abb0-fd5f101e9201",
              "parentUUID": "fa98f0a5-1dd0-4205-9856-51c2a54b8a3f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d9a86bb4-bc92-4adc-954b-3a619f3906e2",
            "b8401500-ce28-4057-aca6-6a2fbb4612fc",
            "e2abfb6a-f52e-45d2-87c7-728268207b8c",
            "ed5d9237-30f5-40da-ad18-e5af2e8d76d1",
            "8cfd86c2-b967-46b3-bb02-facc480c1076",
            "73fdf201-a7d9-4e65-a5c9-b1d7313f710d",
            "9843a052-7db7-4f9f-979a-c50c0a1e409e",
            "be0a1a6b-d837-408f-beb7-85f57088d5f0",
            "05f75e98-7cb5-4659-9466-6ab69e5484b1",
            "0ea81c51-011f-4a87-92c3-925040591b64",
            "ab70e873-9d3c-42f0-8eb9-3756e44c448e",
            "efecf633-2cbe-452d-abb0-fd5f101e9201"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 37,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d0ef6639-2bd6-466f-beb6-ae796d8f22f3",
          "title": "flushall-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/db/flushall-command.test.ts",
          "file": "/test/resp/command/db/flushall-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "flushall-command test \"before all\" hook",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "9858718e-6336-4489-81f9-e144cc7c203b",
              "parentUUID": "d0ef6639-2bd6-466f-beb6-ae796d8f22f3",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "flushall-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "8b9a07f0-c8d3-4500-8e40-c7637f71a866",
              "parentUUID": "d0ef6639-2bd6-466f-beb6-ae796d8f22f3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "flushall-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "7f9f856a-fc5a-42c9-8131-1608cceca925",
              "parentUUID": "d0ef6639-2bd6-466f-beb6-ae796d8f22f3",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "flushall-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "f2a0e2c0-5130-460a-88c9-fa6cc9f0ddf1",
              "parentUUID": "d0ef6639-2bd6-466f-beb6-ae796d8f22f3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should remove all keys from all databases",
              "fullTitle": "flushall-command test should remove all keys from all databases",
              "timedOut": false,
              "duration": 74,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let db = 0; db < 16; db++) {\n            response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['set', 'dbid', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            console.log(`DB: ${db}: dbsize: ${response}`);\n            chai_1.expect(response).to.equal(1);\n        }\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        for (let db = 0; db < 16; db++) {\n            response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.equal(0);\n        }\n    })",
              "err": {},
              "uuid": "a51fc991-e0e8-4008-86de-012f6c665f55",
              "parentUUID": "d0ef6639-2bd6-466f-beb6-ae796d8f22f3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a51fc991-e0e8-4008-86de-012f6c665f55"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 74,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8ece8f40-d859-4151-ad8a-b3a0ddd208cf",
          "title": "flushdb-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/db/flushdb-command.test.ts",
          "file": "/test/resp/command/db/flushdb-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "flushdb-command test \"before all\" hook",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "8be1b969-e6c5-44c3-b2c8-e1b767377096",
              "parentUUID": "8ece8f40-d859-4151-ad8a-b3a0ddd208cf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "flushdb-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "7672ff13-6045-4771-ae36-b36ff63301e1",
              "parentUUID": "8ece8f40-d859-4151-ad8a-b3a0ddd208cf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "flushdb-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "79a78ede-297c-4e1c-9394-5a2e20bc27f8",
              "parentUUID": "8ece8f40-d859-4151-ad8a-b3a0ddd208cf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "flushdb-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "15e1e225-085a-4caf-969e-669d0cfbd3a8",
              "parentUUID": "8ece8f40-d859-4151-ad8a-b3a0ddd208cf",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should remove all keys from only the currently selected databases",
              "fullTitle": "flushdb-command test should remove all keys from only the currently selected databases",
              "timedOut": false,
              "duration": 102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let db = 0; db < 16; db++) {\n            response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['set', 'dbid', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.equal(1);\n        }\n        for (let db = 0; db < 16; db++) {\n            if (db !== 14) {\n                response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n                chai_1.expect(response).to.equal('OK');\n                response = yield common_test_1.sendCommand(client, ['flushdb']);\n                chai_1.expect(response).to.equal('OK');\n                response = yield common_test_1.sendCommand(client, ['exists', 'dbid']);\n                chai_1.expect(response).to.equal(0);\n                response = yield common_test_1.sendCommand(client, ['dbsize']);\n                chai_1.expect(response).to.equal(0);\n            }\n        }\n        response = yield common_test_1.sendCommand(client, ['select', '14']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'dbid']);\n        chai_1.expect(response).to.equal('14');\n        response = yield common_test_1.sendCommand(client, ['dbsize']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "0182fa6a-b4da-4ce4-8b7b-5da55eb64afa",
              "parentUUID": "8ece8f40-d859-4151-ad8a-b3a0ddd208cf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0182fa6a-b4da-4ce4-8b7b-5da55eb64afa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 102,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c0d41ad1-92f1-4390-85f2-c955164ec229",
          "title": "hget command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/hash/hget-command.test.ts",
          "file": "/test/resp/command/hash/hget-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "hget command test \"before all\" hook",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "ceca8eb6-606a-42b0-8994-23f11d71b00b",
              "parentUUID": "c0d41ad1-92f1-4390-85f2-c955164ec229",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "hget command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "c27fd905-3733-4571-9261-918898ea7024",
              "parentUUID": "c0d41ad1-92f1-4390-85f2-c955164ec229",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "hget command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "cc52e637-29f8-4552-bc98-22bd4024ff4f",
              "parentUUID": "c0d41ad1-92f1-4390-85f2-c955164ec229",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "hget command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "60b3ea4e-0a82-418f-be0a-d3f0cb31ecc2",
              "parentUUID": "c0d41ad1-92f1-4390-85f2-c955164ec229",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require exactly 2 parameters",
              "fullTitle": "hget command test should require exactly 2 parameters",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['hget', 'test'])\n    .then((response1) => {\n    chai_1.expect(response1).to.equal('ReplyError: ERR wrong number of arguments for \\'hget\\' command');\n    common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'one', 'two'])\n        .then((response2) => {\n        chai_1.expect(response2).to.equal('ReplyError: ERR wrong number of arguments for \\'hget\\' command');\n        common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'one'])\n            .then((response3) => {\n            chai_1.expect(response3).to.equal(null);\n            done();\n        });\n    });\n});",
              "err": {},
              "uuid": "c76c52d2-2d56-4d51-bf60-5a3c68947aed",
              "parentUUID": "c0d41ad1-92f1-4390-85f2-c955164ec229",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a value after it has be set",
              "fullTitle": "hget command test should get a value after it has be set",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['hset', 'test', 'one', 'two'])\n    .then(() => {\n    common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'one'])\n        .then((response) => {\n        chai_1.expect(response).to.equal('two');\n        done();\n    });\n});",
              "err": {},
              "uuid": "2c6d64a1-d8ed-4908-a798-83b8e7cf7fd3",
              "parentUUID": "c0d41ad1-92f1-4390-85f2-c955164ec229",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return nil string when the key exists but the field does not",
              "fullTitle": "hget command test should return nil string when the key exists but the field does not",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'two'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(null);\n    done();\n});",
              "err": {},
              "uuid": "7c2d9f5c-0fc0-4798-be8e-169b95fdd6f1",
              "parentUUID": "c0d41ad1-92f1-4390-85f2-c955164ec229",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c76c52d2-2d56-4d51-bf60-5a3c68947aed",
            "2c6d64a1-d8ed-4908-a798-83b8e7cf7fd3",
            "7c2d9f5c-0fc0-4798-be8e-169b95fdd6f1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "47a4a11a-4103-4a52-af2a-c42c60e5f15f",
          "title": "hset command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/hash/hset-command.test.ts",
          "file": "/test/resp/command/hash/hset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "hset command test \"before all\" hook",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(new net.Socket(), ['flushall']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "2d940ae7-8df7-4d7d-8049-74cdf52b18a2",
              "parentUUID": "47a4a11a-4103-4a52-af2a-c42c60e5f15f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "hset command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "ca7ae7a1-4ce4-4c68-9afc-3d14c4898a01",
              "parentUUID": "47a4a11a-4103-4a52-af2a-c42c60e5f15f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "hset command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "a5dfb63a-ec77-47a5-88ce-e786186063ab",
              "parentUUID": "47a4a11a-4103-4a52-af2a-c42c60e5f15f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "hset command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "f1b09614-1fe2-4666-ae95-81817516b7b0",
              "parentUUID": "47a4a11a-4103-4a52-af2a-c42c60e5f15f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require a minimum of 3 parameters",
              "fullTitle": "hset command test should require a minimum of 3 parameters",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = safeId();\n        chai_1.expect(uniqueKey).not.to.equal(lastId);\n        lastId = uniqueKey;\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey]);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for \\'hset\\' command/i);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one']);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for \\'hm?set\\' command/i);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'two']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "a661bb03-4a91-480d-986f-dd1e7cba2f18",
              "parentUUID": "47a4a11a-4103-4a52-af2a-c42c60e5f15f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only accept an odd number of parameters",
              "fullTitle": "hset command test should only accept an odd number of parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = safeId();\n        chai_1.expect(uniqueKey).not.to.equal(lastId);\n        lastId = uniqueKey;\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one2', 'two', 'fail']);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for hm?set/i);\n    })",
              "err": {},
              "uuid": "6fee0265-68b7-4251-bd6f-9571636162d1",
              "parentUUID": "47a4a11a-4103-4a52-af2a-c42c60e5f15f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only report added fields",
              "fullTitle": "hset command test should only report added fields",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = safeId();\n        chai_1.expect(uniqueKey).not.to.equal(lastId);\n        lastId = uniqueKey;\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'six']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'anothervalue']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hget', uniqueKey, 'one']);\n        chai_1.expect(response).to.equal('anothervalue');\n    })",
              "err": {},
              "uuid": "385e8484-170e-4e9a-8c46-0a3b9bb1b1c3",
              "parentUUID": "47a4a11a-4103-4a52-af2a-c42c60e5f15f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a661bb03-4a91-480d-986f-dd1e7cba2f18",
            "6fee0265-68b7-4251-bd6f-9571636162d1",
            "385e8484-170e-4e9a-8c46-0a3b9bb1b1c3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "68ac9892-771a-4d84-b7c8-a4e88bc780bd",
          "title": "del-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/del-command.test.ts",
          "file": "/test/resp/command/key/del-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "del-command test \"before all\" hook",
              "timedOut": false,
              "duration": 28,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "efae7478-0e97-4840-b0b0-f42a862c9a9a",
              "parentUUID": "68ac9892-771a-4d84-b7c8-a4e88bc780bd",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "del-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "dc58cb04-ed5d-4aff-b9ab-9ae337c48be7",
              "parentUUID": "68ac9892-771a-4d84-b7c8-a4e88bc780bd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "del-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "65ab9d40-c6bd-43ae-8613-64d9b5b36e56",
              "parentUUID": "68ac9892-771a-4d84-b7c8-a4e88bc780bd",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "del-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "f9a5de03-8cd9-4ed3-ad8c-f1376029abb6",
              "parentUUID": "68ac9892-771a-4d84-b7c8-a4e88bc780bd",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when called with no keys present",
              "fullTitle": "del-command test should report ZERO when called with no keys present",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['del', 'key1', 'key2', 'key3'])\n    .then((response) => {\n    chai_1.expect(response).to.be.a('number');\n    chai_1.expect(response).to.equal(0);\n    done();\n});",
              "err": {},
              "uuid": "041d82b9-8f1d-4368-9b3c-3a9291870934",
              "parentUUID": "68ac9892-771a-4d84-b7c8-a4e88bc780bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report the number of keys actually removed",
              "fullTitle": "del-command test should report the number of keys actually removed",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const client = new net.Socket();\ncommon_test_1.sendCommand(client, ['set', 'key1', 'data'])\n    .then(() => {\n    common_test_1.sendCommand(client, ['set', 'key2', 'data'])\n        .then(() => {\n        common_test_1.sendCommand(client, ['set', 'key3', 'data'])\n            .then(() => {\n            common_test_1.sendCommand(client, ['del', 'key1', 'key3'])\n                .then((response) => {\n                chai_1.expect(response).to.equal(2);\n                done();\n            });\n        });\n    });\n});",
              "err": {},
              "uuid": "160022b2-776d-4955-8f6e-c475fdaf4e4a",
              "parentUUID": "68ac9892-771a-4d84-b7c8-a4e88bc780bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have retained key2 from the previous test",
              "fullTitle": "del-command test should have retained key2 from the previous test",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['del', 'key2'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n    done();\n});",
              "err": {},
              "uuid": "89976e8b-c178-47de-bc49-24cf697287fa",
              "parentUUID": "68ac9892-771a-4d84-b7c8-a4e88bc780bd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "041d82b9-8f1d-4368-9b3c-3a9291870934",
            "160022b2-776d-4955-8f6e-c475fdaf4e4a",
            "89976e8b-c178-47de-bc49-24cf697287fa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e9c521e7-2842-43f5-9aa3-9ec114613d34",
          "title": "exists-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/exists-command.test.ts",
          "file": "/test/resp/command/key/exists-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "exists-command test \"before all\" hook",
              "timedOut": false,
              "duration": 40,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a millisecond TTL to validate exists respects TTL\n    common_test_1.sendCommand(new net.Socket(), ['set', 'ttlkey', 'value', 'PX', '3'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
              "uuid": "375fd23b-dadd-43c5-99e1-7804deadb709",
              "parentUUID": "e9c521e7-2842-43f5-9aa3-9ec114613d34",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "exists-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "18a8f09e-1086-4113-8032-5bb901a36854",
              "parentUUID": "e9c521e7-2842-43f5-9aa3-9ec114613d34",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "exists-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "dea2116e-369e-4fe1-82c9-febb7e058e27",
              "parentUUID": "e9c521e7-2842-43f5-9aa3-9ec114613d34",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "exists-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "8a4ebd51-1bf5-45ce-b4cd-6fecdc448f49",
              "parentUUID": "e9c521e7-2842-43f5-9aa3-9ec114613d34",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when none of the specified keys exist",
              "fullTitle": "exists-command test should report ZERO when none of the specified keys exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['exists', 'key1', 'key2', 'key3'])\n    .then((response) => {\n    chai_1.expect(response).to.be.a('number');\n    chai_1.expect(response).to.equal(0);\n    done();\n});",
              "err": {},
              "uuid": "511d706c-372f-41bf-b06e-803293376439",
              "parentUUID": "e9c521e7-2842-43f5-9aa3-9ec114613d34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require at least ONE parameter",
              "fullTitle": "exists-command test should require at least ONE parameter",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['exists'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'exists\\' command');\n    done();\n});",
              "err": {},
              "uuid": "cab13bf3-f33c-4045-a0e6-988ce371dd7f",
              "parentUUID": "e9c521e7-2842-43f5-9aa3-9ec114613d34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report GREATER THAN ZERO when checking for the same existing key multiple times",
              "fullTitle": "exists-command test should report GREATER THAN ZERO when checking for the same existing key multiple times",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['set', 'key', 'value'])\n    .then(() => {\n    common_test_1.sendCommand(new net.Socket(), ['exists', 'key', 'key', 'unknownkey', 'another', 'another'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(2);\n        done();\n    });\n});",
              "err": {},
              "uuid": "1aac210f-652e-47c2-bcd7-2c96deb328f0",
              "parentUUID": "e9c521e7-2842-43f5-9aa3-9ec114613d34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect the TTL value on a key",
              "fullTitle": "exists-command test should respect the TTL value on a key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['exists', 'ttlkey'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(0);\n    done();\n});",
              "err": {},
              "uuid": "75c0096d-2629-4372-9fd5-43b8e053628c",
              "parentUUID": "e9c521e7-2842-43f5-9aa3-9ec114613d34",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "511d706c-372f-41bf-b06e-803293376439",
            "cab13bf3-f33c-4045-a0e6-988ce371dd7f",
            "1aac210f-652e-47c2-bcd7-2c96deb328f0",
            "75c0096d-2629-4372-9fd5-43b8e053628c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "62973c61-4851-45e7-ae68-de3d4f4bd80e",
          "title": "expire-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/expire-command.test.ts",
          "file": "/test/resp/command/key/expire-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "expire-command test \"before all\" hook",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "9bbca51d-25c3-4fc6-914c-2b336aa4f6e1",
              "parentUUID": "62973c61-4851-45e7-ae68-de3d4f4bd80e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "expire-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "f97b39cc-958f-4fec-b4ca-cf6eede3eb56",
              "parentUUID": "62973c61-4851-45e7-ae68-de3d4f4bd80e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "expire-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "2af70f3a-7999-456c-ade2-54790c6ba125",
              "parentUUID": "62973c61-4851-45e7-ae68-de3d4f4bd80e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "expire-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "3d052eba-370b-4649-b235-052526faab1a",
              "parentUUID": "62973c61-4851-45e7-ae68-de3d4f4bd80e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when expire called on non-existent key",
              "fullTitle": "expire-command test should report ZERO when expire called on non-existent key",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['expire', 'no-key', '1000']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "b633182c-902c-4195-9f9c-da3cfe333698",
              "parentUUID": "62973c61-4851-45e7-ae68-de3d4f4bd80e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require an integer value for the ttl parameter",
              "fullTitle": "expire-command test should require an integer value for the ttl parameter",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'mykey', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', '10.2']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', 'ten']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "b3300adb-c2ec-4088-bbac-fd10e9821316",
              "parentUUID": "62973c61-4851-45e7-ae68-de3d4f4bd80e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set the requested ttl on a key",
              "fullTitle": "expire-command test should set the requested ttl on a key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', '10000']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "217e5d3e-1bb2-4901-9b02-921550eb54ef",
              "parentUUID": "62973c61-4851-45e7-ae68-de3d4f4bd80e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should expire a key when we set a negative ttl",
              "fullTitle": "expire-command test should expire a key when we set a negative ttl",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Note that this is not consistent with documentation\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', '-1']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "41ceeb93-5647-4c9b-a9e4-79e009af00a7",
              "parentUUID": "62973c61-4851-45e7-ae68-de3d4f4bd80e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should work with ZKEYs (and other key types - as yet untested)",
              "fullTitle": "expire-command test should work with ZKEYs (and other key types - as yet untested)",
              "timedOut": false,
              "duration": 2010,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['zadd', 'zkey', '1', 'member'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n    common_test_1.sendCommand(client, ['exists', 'zkey'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(1);\n        common_test_1.sendCommand(client, ['expire', 'zkey', '1'])\n            .then((response) => {\n            chai_1.expect(response).to.equal(1);\n            setTimeout(() => {\n                common_test_1.sendCommand(client, ['exists', 'zkey'])\n                    .then((response) => {\n                    chai_1.expect(response).to.equal(0, `Unexpected response ${response} should be ZERO`);\n                    done();\n                });\n            }, 2000);\n        });\n    });\n});",
              "err": {},
              "uuid": "3ceb5d91-a45b-4345-a7fc-c7dca8b1759d",
              "parentUUID": "62973c61-4851-45e7-ae68-de3d4f4bd80e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should survive the RENAME operation",
              "fullTitle": "expire-command test should survive the RENAME operation",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'rename-test', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['expire', 'rename-test', '1']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rename', 'rename-test', 'new-name']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'new-name']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'rename-test']);\n        chai_1.expect(response).to.equal(0);\n        yield setTimeout(() => __awaiter(void 0, void 0, void 0, function* () {\n            response = yield common_test_1.sendCommand(client, ['exists', 'new-name']);\n            chai_1.expect(response).to.equal(0);\n        }), 2000);\n    })",
              "err": {},
              "uuid": "2828cae2-464b-4929-9205-c77023af55eb",
              "parentUUID": "62973c61-4851-45e7-ae68-de3d4f4bd80e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b633182c-902c-4195-9f9c-da3cfe333698",
            "b3300adb-c2ec-4088-bbac-fd10e9821316",
            "217e5d3e-1bb2-4901-9b02-921550eb54ef",
            "41ceeb93-5647-4c9b-a9e4-79e009af00a7",
            "3ceb5d91-a45b-4345-a7fc-c7dca8b1759d",
            "2828cae2-464b-4929-9205-c77023af55eb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2032,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5771da4b-11d5-4d5d-9c7d-d970c7fe8335",
          "title": "keys-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/keys-command.test.ts",
          "file": "/test/resp/command/key/keys-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "keys-command test \"before all\" hook",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "0a1cf3ea-fa86-4dd9-b605-a57df024bc5f",
              "parentUUID": "5771da4b-11d5-4d5d-9c7d-d970c7fe8335",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "keys-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "d49fd706-b3f7-4d88-9fa1-7cb47b258224",
              "parentUUID": "5771da4b-11d5-4d5d-9c7d-d970c7fe8335",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "keys-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "53a9cfd9-2db7-4ec7-9ead-61cbe9a16f86",
              "parentUUID": "5771da4b-11d5-4d5d-9c7d-d970c7fe8335",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "keys-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "1f7c62f5-d553-4bb2-a70d-b75332de02d6",
              "parentUUID": "5771da4b-11d5-4d5d-9c7d-d970c7fe8335",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should retrieve keys by glob patterns",
              "fullTitle": "keys-command test should retrieve keys by glob patterns",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mset', 'firstname', 'Jack', 'lastname', 'Stuntman', 'age', '35']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['keys', '*name*']);\n        chai_1.expect(response.sort()).to.eql(['firstname', 'lastname']);\n        response = yield common_test_1.sendCommand(client, ['keys', 'a??']);\n        chai_1.expect(response).to.eql(['age']);\n        response = yield common_test_1.sendCommand(client, ['keys', '*']);\n        // NOTE: There does not appear to be a guarantee of order\n        chai_1.expect(response.sort()).to.eql(['age', 'firstname', 'lastname']);\n    })",
              "err": {},
              "uuid": "3272213e-fd10-4602-925d-027650883514",
              "parentUUID": "5771da4b-11d5-4d5d-9c7d-d970c7fe8335",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3272213e-fd10-4602-925d-027650883514"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b361a537-1ac4-4e77-bdd8-119ea6e057bb",
          "title": "move-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/move-command.test.ts",
          "file": "/test/resp/command/key/move-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "move-command test \"before all\" hook",
              "timedOut": false,
              "duration": 28,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "0231ce6c-672f-4a01-a4f9-cd45440573a4",
              "parentUUID": "b361a537-1ac4-4e77-bdd8-119ea6e057bb",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "move-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "970c97cc-2b53-4e01-808b-f20236d9eda3",
              "parentUUID": "b361a537-1ac4-4e77-bdd8-119ea6e057bb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "move-command test \"after all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "70c4585d-3dd6-41db-ac76-86e4e80e91b9",
              "parentUUID": "b361a537-1ac4-4e77-bdd8-119ea6e057bb",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "move-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "d5a978ed-d13b-4c28-9b1e-8f600644e6f5",
              "parentUUID": "b361a537-1ac4-4e77-bdd8-119ea6e057bb",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow target and source db to be the same",
              "fullTitle": "move-command test should not allow target and source db to be the same",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Even if source key does not exist\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, '0']);\n        chai_1.expect(response).to.equal('ReplyError: ERR source and destination objects are the same');\n    })",
              "err": {},
              "uuid": "515c92c5-4da1-4da2-9c36-151b3f24a95c",
              "parentUUID": "b361a537-1ac4-4e77-bdd8-119ea6e057bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should also report ZERO when the target key already exists",
              "fullTitle": "move-command test should also report ZERO when the target key already exists",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'database ZERO']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, '0']);\n        chai_1.expect(response).to.equal('ReplyError: ERR source and destination objects are the same');\n    })",
              "err": {},
              "uuid": "3eac6a47-4ab3-4089-8cfe-2fd440b095dd",
              "parentUUID": "b361a537-1ac4-4e77-bdd8-119ea6e057bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should move a key from one database to another otherwise",
              "fullTitle": "move-command test should move a key from one database to another otherwise",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, '14']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['select', '14']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "aa7c17d7-b64c-488a-8329-3971160d14ed",
              "parentUUID": "b361a537-1ac4-4e77-bdd8-119ea6e057bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report error when target database is invalid and key exists",
              "fullTitle": "move-command test should report error when target database is invalid and key exists",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Database 14 is already selected\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, 'InvalidDb']);\n        chai_1.expect(response).to.equal('ReplyError: ERR index out of range');\n    })",
              "err": {},
              "uuid": "db0527fd-2509-4114-a8fd-4a00c05de4ae",
              "parentUUID": "b361a537-1ac4-4e77-bdd8-119ea6e057bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the key does not exist in the current db",
              "fullTitle": "move-command test should return 0 when the key does not exist in the current db",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushdb']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['dbsize']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['move', 'nokey', '3']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "6e48a8de-70ce-4f58-b7d1-936d32032105",
              "parentUUID": "b361a537-1ac4-4e77-bdd8-119ea6e057bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the key exists in both source and target db",
              "fullTitle": "move-command test should return 0 when the key exists in both source and target db",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['select', '0']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['set', 'nokey', 'db0']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'nokey']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['select', '1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'nokey']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['set', 'nokey', 'db1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['move', 'nokey', '0']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['get', 'nokey']);\n        chai_1.expect(response).to.equal('db1');\n        response = yield common_test_1.sendCommand(client, ['select', '0']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'nokey']);\n        chai_1.expect(response).to.equal('db0');\n    })",
              "err": {},
              "uuid": "5d5e69f6-e8c3-4599-b15a-4828d8faeab3",
              "parentUUID": "b361a537-1ac4-4e77-bdd8-119ea6e057bb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "515c92c5-4da1-4da2-9c36-151b3f24a95c",
            "3eac6a47-4ab3-4089-8cfe-2fd440b095dd",
            "aa7c17d7-b64c-488a-8329-3971160d14ed",
            "db0527fd-2509-4114-a8fd-4a00c05de4ae",
            "6e48a8de-70ce-4f58-b7d1-936d32032105",
            "5d5e69f6-e8c3-4599-b15a-4828d8faeab3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 49,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a0c81c56-3309-487d-8f5e-c33d944eb452",
          "title": "randomkey-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/randomkey-command.test.ts",
          "file": "/test/resp/command/key/randomkey-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "randomkey-command test \"before all\" hook",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "cb3a2e1e-cca7-460b-8469-d2b472eaffa1",
              "parentUUID": "a0c81c56-3309-487d-8f5e-c33d944eb452",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "randomkey-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "09adc0b3-a007-4b54-9ccb-c0e7ca064737",
              "parentUUID": "a0c81c56-3309-487d-8f5e-c33d944eb452",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "randomkey-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "b4025288-9d83-4ce1-972f-7ee41228d426",
              "parentUUID": "a0c81c56-3309-487d-8f5e-c33d944eb452",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "randomkey-command test \"after each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "1ae49069-f48b-4689-8d1e-fd91db5f9edb",
              "parentUUID": "a0c81c56-3309-487d-8f5e-c33d944eb452",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when the database is empty",
              "fullTitle": "randomkey-command test should return NIL when the database is empty",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushdb']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['randomkey']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "6feace82-990d-4ed1-a35c-104e5b7acdfe",
              "parentUUID": "a0c81c56-3309-487d-8f5e-c33d944eb452",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return list, zkey, hash, and string keys without preference",
              "fullTitle": "randomkey-command test should return list, zkey, hash, and string keys without preference",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const results = [];\n        response = yield common_test_1.sendCommand(client, ['hset', 'hash', 'field', 'value']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lpush', 'list', 'element']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'member']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['set', 'string', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        for (let i = 0; i < 15; i++) {\n            response = yield common_test_1.sendCommand(client, ['randomkey']);\n            chai_1.expect(response).to.be.a('string');\n            response = yield common_test_1.sendCommand(client, ['type', response]);\n            chai_1.expect(response).to.be.a('string');\n            if (results.indexOf(response) === -1) {\n                results.push(response);\n            }\n            if (results.length === 4) {\n                break;\n            }\n        }\n        chai_1.expect(results.length).to.be.greaterThan(1);\n    })",
              "err": {},
              "uuid": "9615dc3a-8849-492f-904c-1cc5db342af6",
              "parentUUID": "a0c81c56-3309-487d-8f5e-c33d944eb452",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6feace82-990d-4ed1-a35c-104e5b7acdfe",
            "9615dc3a-8849-492f-904c-1cc5db342af6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9ace18c3-185d-49e0-9cf6-556f765e8683",
          "title": "rename-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/rename-command.test.ts",
          "file": "/test/resp/command/key/rename-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rename-command test \"before all\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "cb31d39e-08ae-4baf-a94d-cb343a3d35d3",
              "parentUUID": "9ace18c3-185d-49e0-9cf6-556f765e8683",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rename-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "2ab2138d-f0eb-4eda-a797-5b8078042e49",
              "parentUUID": "9ace18c3-185d-49e0-9cf6-556f765e8683",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rename-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "1b080355-4253-4a01-b4b4-42aca5395aff",
              "parentUUID": "9ace18c3-185d-49e0-9cf6-556f765e8683",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rename-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "5f22718e-2fb0-4142-8137-e4242ab2f301",
              "parentUUID": "9ace18c3-185d-49e0-9cf6-556f765e8683",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report an error when the key does not exist",
              "fullTitle": "rename-command test should report an error when the key does not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rename', 'mykey', 'my-otherkey']);\n        chai_1.expect(response).to.equal('ReplyError: ERR no such key');\n    })",
              "err": {},
              "uuid": "5a978ede-70f7-4d82-b780-31bc90f89cfb",
              "parentUUID": "9ace18c3-185d-49e0-9cf6-556f765e8683",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should rename a key",
              "fullTitle": "rename-command test should rename a key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'mykey', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['rename', 'mykey', 'my-otherkey']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'my-otherkey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "68d29537-2a2d-466f-9cf8-4ed4a6739c47",
              "parentUUID": "9ace18c3-185d-49e0-9cf6-556f765e8683",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overwrite an existing key without notice",
              "fullTitle": "rename-command test should overwrite an existing key without notice",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'myoriginalkey', 'something']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['rename', 'my-otherkey', 'myoriginalkey']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'myoriginalkey']);\n        chai_1.expect(response).to.equal('value');\n    })",
              "err": {},
              "uuid": "0cc52620-d4f7-44d0-8e17-2a1f755163b4",
              "parentUUID": "9ace18c3-185d-49e0-9cf6-556f765e8683",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5a978ede-70f7-4d82-b780-31bc90f89cfb",
            "68d29537-2a2d-466f-9cf8-4ed4a6739c47",
            "0cc52620-d4f7-44d0-8e17-2a1f755163b4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a4f27c6d-e658-4e18-8fb9-078b6a4dde1f",
          "title": "renamenx-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/renamenx-command.test.ts",
          "file": "/test/resp/command/key/renamenx-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "renamenx-command test \"before all\" hook",
              "timedOut": false,
              "duration": 42,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "0d74dc39-e70f-495d-bcfd-001ab02aedd5",
              "parentUUID": "a4f27c6d-e658-4e18-8fb9-078b6a4dde1f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "renamenx-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "4c90710a-a251-43c8-88e4-30f793ddab79",
              "parentUUID": "a4f27c6d-e658-4e18-8fb9-078b6a4dde1f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "renamenx-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "d8b2d925-9ee0-4660-ac0f-1681f56ae410",
              "parentUUID": "a4f27c6d-e658-4e18-8fb9-078b6a4dde1f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "renamenx-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "28b9a6d7-de00-4ac3-8801-f1c0eff271ec",
              "parentUUID": "a4f27c6d-e658-4e18-8fb9-078b6a4dde1f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report an error when the key does not exist",
              "fullTitle": "renamenx-command test should report an error when the key does not exist",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['renamenx', 'mykey', 'my-otherkey']);\n        chai_1.expect(response).to.equal('ReplyError: ERR no such key');\n    })",
              "err": {},
              "uuid": "7e2cae13-2298-4efa-a58c-2d85ed1bde41",
              "parentUUID": "a4f27c6d-e658-4e18-8fb9-078b6a4dde1f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when attempting renamenx with source = destination",
              "fullTitle": "renamenx-command test should return 0 when attempting renamenx with source = destination",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'key', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['renamenx', 'key', 'key']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'key']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "8456edc3-c531-45f8-a461-b4f08866acc8",
              "parentUUID": "a4f27c6d-e658-4e18-8fb9-078b6a4dde1f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should rename a key when requested",
              "fullTitle": "renamenx-command test should rename a key when requested",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['renamenx', 'key', 'newkey']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'key']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'newkey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "ece8dd28-2743-452f-a674-78eeef33c17d",
              "parentUUID": "a4f27c6d-e658-4e18-8fb9-078b6a4dde1f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7e2cae13-2298-4efa-a58c-2d85ed1bde41",
            "8456edc3-c531-45f8-a461-b4f08866acc8",
            "ece8dd28-2743-452f-a674-78eeef33c17d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ef47f780-65b0-49e9-bbce-32570097a6b9",
          "title": "ttl-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/ttl-command.test.ts",
          "file": "/test/resp/command/key/ttl-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "ttl-command test \"before all\" hook",
              "timedOut": false,
              "duration": 75,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a couple - second TTL to validate exists respects TTL\n    common_test_1.sendCommand(new net.Socket(), ['set', 'ttlkey', 'value', 'EX', '30'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
              "uuid": "a111cab1-192a-4db5-9615-22dacfe68fba",
              "parentUUID": "ef47f780-65b0-49e9-bbce-32570097a6b9",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "ttl-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "68e756b9-3485-4128-8311-7a900df6c3b8",
              "parentUUID": "ef47f780-65b0-49e9-bbce-32570097a6b9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "ttl-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "2428a8bf-cd93-47f2-9beb-0769271d8cf5",
              "parentUUID": "ef47f780-65b0-49e9-bbce-32570097a6b9",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "ttl-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a0c837a6-21a8-49d8-8c2f-97980bbe8845",
              "parentUUID": "ef47f780-65b0-49e9-bbce-32570097a6b9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report -2 when the key does not exist",
              "fullTitle": "ttl-command test should report -2 when the key does not exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ttl', 'nokey']);\n        chai_1.expect(response).to.equal(-2);\n    })",
              "err": {},
              "uuid": "a78002bc-613a-4150-a34c-a61da4316ee1",
              "parentUUID": "ef47f780-65b0-49e9-bbce-32570097a6b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return -1 when the key exists but does not have a ttl",
              "fullTitle": "ttl-command test should return -1 when the key exists but does not have a ttl",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'newkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['ttl', 'newkey']);\n        chai_1.expect(response).to.equal(-1);\n    })",
              "err": {},
              "uuid": "8cf985f5-406d-4892-946c-a810a4190f92",
              "parentUUID": "ef47f780-65b0-49e9-bbce-32570097a6b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the current ttl in seconds when available",
              "fullTitle": "ttl-command test should return the current ttl in seconds when available",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ttl', 'ttlkey']);\n        chai_1.expect(response).to.be.greaterThan(0);\n        chai_1.expect(response).to.be.lessThan(31);\n    })",
              "err": {},
              "uuid": "5aa2b9bb-8c33-46fb-9604-f7e2c8a08122",
              "parentUUID": "ef47f780-65b0-49e9-bbce-32570097a6b9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a78002bc-613a-4150-a34c-a61da4316ee1",
            "8cf985f5-406d-4892-946c-a810a4190f92",
            "5aa2b9bb-8c33-46fb-9604-f7e2c8a08122"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c14da728-45b1-464d-8193-5416a3357a65",
          "title": "type-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/type-command.test.ts",
          "file": "/test/resp/command/key/type-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "type-command test \"before all\" hook",
              "timedOut": false,
              "duration": 67,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "9897ffc7-91a1-4162-ba0f-0ab271214363",
              "parentUUID": "c14da728-45b1-464d-8193-5416a3357a65",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "type-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "54d74567-fa74-440b-9175-f89ba8d207ca",
              "parentUUID": "c14da728-45b1-464d-8193-5416a3357a65",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "type-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "b078194d-2d1d-49f5-b2bb-3df64d438415",
              "parentUUID": "c14da728-45b1-464d-8193-5416a3357a65",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "type-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "7f651e83-b42e-45be-b088-e508aca136c7",
              "parentUUID": "c14da728-45b1-464d-8193-5416a3357a65",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report the type of key",
              "fullTitle": "type-command test should report the type of key",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['set', 'string-key', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['type', 'string-key']);\n        chai_1.expect(response).to.equal('string');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'list-key', 'test']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['type', 'list-key']);\n        chai_1.expect(response).to.equal('list');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'set-key', 'test']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['type', 'set-key']);\n        chai_1.expect(response).to.equal('set');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['type', 'zkey']);\n        chai_1.expect(response).to.equal('zset');\n        response = yield common_test_1.sendCommand(client, ['type', 'never']);\n        chai_1.expect(response).to.equal('none');\n    })",
              "err": {},
              "uuid": "351fbe90-490a-461b-90a1-bcdb2b35bdfe",
              "parentUUID": "c14da728-45b1-464d-8193-5416a3357a65",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "351fbe90-490a-461b-90a1-bcdb2b35bdfe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ec18b9d4-8918-42e9-b8ac-7f03761521b6",
          "title": "blpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/blpop-command.test.ts",
          "file": "/test/resp/command/list/blpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "blpop-command test \"before all\" hook",
              "timedOut": false,
              "duration": 51,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "9ef22975-9489-4fc9-bac3-5825a5663235",
              "parentUUID": "ec18b9d4-8918-42e9-b8ac-7f03761521b6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "blpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "17fdc3be-ca51-4aa6-af86-1874eea78501",
              "parentUUID": "ec18b9d4-8918-42e9-b8ac-7f03761521b6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "blpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "a51c6ea1-a356-49b9-9f25-b56d95fa14de",
              "parentUUID": "ec18b9d4-8918-42e9-b8ac-7f03761521b6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "blpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "171fd6b7-98e4-402d-b3c7-8632571b1a1e",
              "parentUUID": "ec18b9d4-8918-42e9-b8ac-7f03761521b6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when timeout > 0 and list does not exist",
              "fullTitle": "blpop-command test should return NIL when timeout > 0 and list does not exist",
              "timedOut": false,
              "duration": 1010,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['blpop', 'no-key', '1']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "116ec07e-0546-4135-81fe-b4714ae97cf0",
              "parentUUID": "ec18b9d4-8918-42e9-b8ac-7f03761521b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should wait for a list to exist and return the list name and value",
              "fullTitle": "blpop-command test should wait for a list to exist and return the list name and value",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['blpop', 'no-key', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['no-key', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'no-key', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "e75a7799-2724-4e2a-871b-3b0c42ca7730",
              "parentUUID": "ec18b9d4-8918-42e9-b8ac-7f03761521b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the list name and HEAD value",
              "fullTitle": "blpop-command test should return the list name and HEAD value",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['blpop', 'no-key2', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['no-key2', 'first']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'no-key2', 'third', 'second', 'first'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n});",
              "err": {},
              "uuid": "b2d6dd7f-abb6-4824-bd00-ed88f6290359",
              "parentUUID": "ec18b9d4-8918-42e9-b8ac-7f03761521b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support blocking lpop against multiple lists in one call",
              "fullTitle": "blpop-command test should support blocking lpop against multiple lists in one call",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['blpop', 'list1', 'list2', 'list3', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['list2', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'list2', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "295ff718-d382-4194-89be-afcd040af7d1",
              "parentUUID": "ec18b9d4-8918-42e9-b8ac-7f03761521b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the pushd value when it already exists even if a timeout is set",
              "fullTitle": "blpop-command test should return the pushd value when it already exists even if a timeout is set",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueKey = `poplpush${new Date().getTime()}`;\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', uniqueKey, 'third', 'second', 'first'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n    common_test_1.sendCommand(client, ['blpop', uniqueKey, '0'])\n        .then((response) => {\n        chai_1.expect(response).to.eql([uniqueKey, 'first']);\n        done();\n    });\n});",
              "err": {},
              "uuid": "c709b70d-5d41-4fc3-96aa-3130287bd5a4",
              "parentUUID": "ec18b9d4-8918-42e9-b8ac-7f03761521b6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "116ec07e-0546-4135-81fe-b4714ae97cf0",
            "e75a7799-2724-4e2a-871b-3b0c42ca7730",
            "b2d6dd7f-abb6-4824-bd00-ed88f6290359",
            "295ff718-d382-4194-89be-afcd040af7d1",
            "c709b70d-5d41-4fc3-96aa-3130287bd5a4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1041,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "64b420d4-b07c-4ef3-a515-dddaea45f390",
          "title": "brpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/brpop-command.test.ts",
          "file": "/test/resp/command/list/brpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "brpop-command test \"before all\" hook",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "727c545f-eaf4-40cb-8052-7b8767d62370",
              "parentUUID": "64b420d4-b07c-4ef3-a515-dddaea45f390",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "brpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "327cbef7-b693-43d4-bf8c-f40bb7507fa1",
              "parentUUID": "64b420d4-b07c-4ef3-a515-dddaea45f390",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "brpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "b95edbca-81d2-472e-bd8b-d10dc629c321",
              "parentUUID": "64b420d4-b07c-4ef3-a515-dddaea45f390",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "brpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "4a519f98-47df-481c-bdc0-4d9584b2824f",
              "parentUUID": "64b420d4-b07c-4ef3-a515-dddaea45f390",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when timeout > 0 and list does not exist",
              "fullTitle": "brpop-command test should return NIL when timeout > 0 and list does not exist",
              "timedOut": false,
              "duration": 1007,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['brpop', 'no-key', '1']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "e420e49d-53f2-4c6d-bc49-43f59623d997",
              "parentUUID": "64b420d4-b07c-4ef3-a515-dddaea45f390",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should wait for a list to exist and return the list name and value",
              "fullTitle": "brpop-command test should wait for a list to exist and return the list name and value",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['brpop', 'no-key', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['no-key', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'no-key', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "52b9edbc-1712-4c88-ae3f-128d3d343647",
              "parentUUID": "64b420d4-b07c-4ef3-a515-dddaea45f390",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the list name and TAIL value",
              "fullTitle": "brpop-command test should return the list name and TAIL value",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['flushall'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    common_test_1.sendCommand(client, ['brpop', 'no-key2', '0'])\n        .then((response) => {\n        chai_1.expect(response).to.eql(['no-key2', 'first']);\n        done();\n    });\n    common_test_1.sendCommand(new net.Socket(), ['rpush', 'no-key2', 'third', 'second', 'first'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(3);\n    });\n});",
              "err": {},
              "uuid": "05061016-f44f-4633-bd47-f693f247490f",
              "parentUUID": "64b420d4-b07c-4ef3-a515-dddaea45f390",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support blocking rpop against multiple lists in one call",
              "fullTitle": "brpop-command test should support blocking rpop against multiple lists in one call",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['brpop', 'list1', 'list2', 'list3', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['list3', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'list3', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "ba81178a-93ab-4a54-b65e-fb8937aa0bee",
              "parentUUID": "64b420d4-b07c-4ef3-a515-dddaea45f390",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the pushd value when it already exists even if a timeout is set",
              "fullTitle": "brpop-command test should return the pushd value when it already exists even if a timeout is set",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueKey = `poprpush${new Date().getTime()}`;\ncommon_test_1.sendCommand(new net.Socket(), ['rpush', uniqueKey, 'third', 'second', 'first'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n    common_test_1.sendCommand(client, ['brpop', uniqueKey, '0'])\n        .then((response) => {\n        chai_1.expect(response).to.eql([uniqueKey, 'first']);\n        done();\n    });\n});",
              "err": {},
              "uuid": "b6f5b6b1-2a60-4266-aff9-419a9b00e195",
              "parentUUID": "64b420d4-b07c-4ef3-a515-dddaea45f390",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e420e49d-53f2-4c6d-bc49-43f59623d997",
            "52b9edbc-1712-4c88-ae3f-128d3d343647",
            "05061016-f44f-4633-bd47-f693f247490f",
            "ba81178a-93ab-4a54-b65e-fb8937aa0bee",
            "b6f5b6b1-2a60-4266-aff9-419a9b00e195"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1041,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e4c74440-37f8-4764-92d0-5465b6ddeb2a",
          "title": "brpoplpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/brpoplpush-command.test.ts",
          "file": "/test/resp/command/list/brpoplpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "brpoplpush-command test \"before all\" hook",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "baab0b78-d074-40a9-bdaa-d8fc3a7fc92d",
              "parentUUID": "e4c74440-37f8-4764-92d0-5465b6ddeb2a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "brpoplpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        sinon.createSandbox();\n        yield common_test_1.sendCommand(client, ['flushall']);\n        yield common_test_1.sendCommand(client, ['select', '0']);\n    })",
              "err": {},
              "uuid": "c645f744-18b7-455f-b83e-4625e1051997",
              "parentUUID": "e4c74440-37f8-4764-92d0-5465b6ddeb2a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "brpoplpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "e6efc3f9-357b-47cd-a0c4-e732b8334830",
              "parentUUID": "e4c74440-37f8-4764-92d0-5465b6ddeb2a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "brpoplpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "ccd16fdb-ad79-4324-8238-aba9653b3565",
              "parentUUID": "e4c74440-37f8-4764-92d0-5465b6ddeb2a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when destination does not exist and timeout expires",
              "fullTitle": "brpoplpush-command test should return NIL when destination does not exist and timeout expires",
              "timedOut": false,
              "duration": 2006,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['brpoplpush', 'src', 'dst', '2']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "e82c4cc9-3d4e-41db-b226-2936f9aac92f",
              "parentUUID": "e4c74440-37f8-4764-92d0-5465b6ddeb2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the poplpushed value when lpush is called",
              "fullTitle": "brpoplpush-command test should return the poplpushed value when lpush is called",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['brpoplpush', 'poplpushkey', 'poplpopkey', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('value1');\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'poplpushkey', 'value1', 'value2', 'value3'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n});",
              "err": {},
              "uuid": "2c3a758e-649d-42be-8a1b-a5e19e3956bb",
              "parentUUID": "e4c74440-37f8-4764-92d0-5465b6ddeb2a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the pushd value when it already exists even if a timeout is set",
              "fullTitle": "brpoplpush-command test should return the pushd value when it already exists even if a timeout is set",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueKey = `poplpush${new Date().getTime()}`;\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', uniqueKey, 'value1', 'value2', 'value3'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n    common_test_1.sendCommand(client, ['brpoplpush', uniqueKey, 'poplpopkey', '0'])\n        .then((response) => {\n        chai_1.expect(response).to.equal('value1');\n        done();\n    });\n});",
              "err": {},
              "uuid": "82867210-74a6-4db5-91db-0c193da90452",
              "parentUUID": "e4c74440-37f8-4764-92d0-5465b6ddeb2a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e82c4cc9-3d4e-41db-b226-2936f9aac92f",
            "2c3a758e-649d-42be-8a1b-a5e19e3956bb",
            "82867210-74a6-4db5-91db-0c193da90452"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2018,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c5f941b6-e909-4ffc-bfab-5aadb1a08c5c",
          "title": "lindex-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lindex-command.test.ts",
          "file": "/test/resp/command/list/lindex-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lindex-command test \"before all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "6265cfc8-c524-43bf-8347-8bf659e8b67f",
              "parentUUID": "c5f941b6-e909-4ffc-bfab-5aadb1a08c5c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lindex-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "36beb5ce-d72e-4f24-b8c6-47b663ea6ce3",
              "parentUUID": "c5f941b6-e909-4ffc-bfab-5aadb1a08c5c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lindex-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "be489271-8cee-4448-a327-6948c4c00a4c",
              "parentUUID": "c5f941b6-e909-4ffc-bfab-5aadb1a08c5c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lindex-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "9d9310ba-380a-4a04-a506-56c74521cd2f",
              "parentUUID": "c5f941b6-e909-4ffc-bfab-5aadb1a08c5c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when lindex called with invalid index on non-existent key",
              "fullTitle": "lindex-command test should report NIL when lindex called with invalid index on non-existent key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lindex', 'no-key', 'negative one thousand']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "0753b561-288c-4712-8016-aa8265b3d4ae",
              "parentUUID": "c5f941b6-e909-4ffc-bfab-5aadb1a08c5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report ERR when attempting to get lindex of non-list key",
              "fullTitle": "lindex-command test should report ERR when attempting to get lindex of non-list key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lindex', 'lkey', '0']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "1b098de5-1279-495e-a6d0-ae0168eb526f",
              "parentUUID": "c5f941b6-e909-4ffc-bfab-5aadb1a08c5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the correct key at an index",
              "fullTitle": "lindex-command test should return the correct key at an index",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `lkey-${new Date().getTime()}`;\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '0']);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '1']);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-1']);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-100']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, 'two']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, 'a1', 'b2', 'c3']);\n        chai_1.expect(response).to.equal(6);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-6']);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-7']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '100']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "bc7bb424-b5ec-4fe2-bac5-37533d4bcf21",
              "parentUUID": "c5f941b6-e909-4ffc-bfab-5aadb1a08c5c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0753b561-288c-4712-8016-aa8265b3d4ae",
            "1b098de5-1279-495e-a6d0-ae0168eb526f",
            "bc7bb424-b5ec-4fe2-bac5-37533d4bcf21"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "bd07a284-e1fe-48e4-b7ac-884b7e357db2",
          "title": "llen-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/llen-command.test.ts",
          "file": "/test/resp/command/list/llen-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "llen-command test \"before all\" hook",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "1825e945-c0b2-4551-b83a-84c6bfd40b74",
              "parentUUID": "bd07a284-e1fe-48e4-b7ac-884b7e357db2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "llen-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "d578a42f-363c-452d-a4aa-e2ac01df6823",
              "parentUUID": "bd07a284-e1fe-48e4-b7ac-884b7e357db2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "llen-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "509e2d7c-568c-4d54-b35a-41645dfa44fc",
              "parentUUID": "bd07a284-e1fe-48e4-b7ac-884b7e357db2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "llen-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "c1a98044-c277-475e-9cff-a826230b48be",
              "parentUUID": "bd07a284-e1fe-48e4-b7ac-884b7e357db2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report 0 when llen called on non-existent key",
              "fullTitle": "llen-command test should report 0 when llen called on non-existent key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['llen', 'no-key']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "11399f1d-d8fe-4e4b-a127-4e1f73e2bc9a",
              "parentUUID": "bd07a284-e1fe-48e4-b7ac-884b7e357db2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report WRONGTYPE when attempting to get llen of non-list key",
              "fullTitle": "llen-command test should report WRONGTYPE when attempting to get llen of non-list key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'lkey']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "14950023-050a-4eec-ac19-fc02a4f1b6f3",
              "parentUUID": "bd07a284-e1fe-48e4-b7ac-884b7e357db2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the correct list length",
              "fullTitle": "llen-command test should return the correct list length",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `lkey-${new Date().getTime()}`;\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal(null);\n        // The list goes away when the last element is popped\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, '-6']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "ddbbe457-5721-4e0e-9285-84ad0189aa00",
              "parentUUID": "bd07a284-e1fe-48e4-b7ac-884b7e357db2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "11399f1d-d8fe-4e4b-a127-4e1f73e2bc9a",
            "14950023-050a-4eec-ac19-fc02a4f1b6f3",
            "ddbbe457-5721-4e0e-9285-84ad0189aa00"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "167eec46-d709-4568-99f5-ece978cfef9a",
          "title": "lpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lpop-command.test.ts",
          "file": "/test/resp/command/list/lpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lpop-command test \"before all\" hook",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "591c6d9a-33bf-4164-8610-0d0ab4ae7a47",
              "parentUUID": "167eec46-d709-4568-99f5-ece978cfef9a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "a812fb52-cfaa-4664-a258-51543e8c5ca9",
              "parentUUID": "167eec46-d709-4568-99f5-ece978cfef9a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "eae84aed-8c4e-4e3d-b5f3-8732c34b747c",
              "parentUUID": "167eec46-d709-4568-99f5-ece978cfef9a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "7f399e81-664f-4766-922a-269a36151acd",
              "parentUUID": "167eec46-d709-4568-99f5-ece978cfef9a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when lpop called on non-existent key",
              "fullTitle": "lpop-command test should report NIL when lpop called on non-existent key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lpop', 'no-key']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['exists', 'no-key']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "f018c4b3-a505-4d12-9e76-08613329d942",
              "parentUUID": "167eec46-d709-4568-99f5-ece978cfef9a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return values from the left side of a list",
              "fullTitle": "lpop-command test should return values from the left side of a list",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', testKey, 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('d');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal(null);\n        // The list goes away when the last element is removed\n        response = yield common_test_1.sendCommand(client, ['exists', testKey]);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "5041f254-a44a-42c9-acb6-68b939a2ff02",
              "parentUUID": "167eec46-d709-4568-99f5-ece978cfef9a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f018c4b3-a505-4d12-9e76-08613329d942",
            "5041f254-a44a-42c9-acb6-68b939a2ff02"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1d5debb9-05d9-452c-9f2c-3652ee949ff4",
          "title": "lpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lpush-command.test.ts",
          "file": "/test/resp/command/list/lpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lpush-command test \"before all\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "e5bfbf7a-0b94-425c-8363-7489c8fd80d8",
              "parentUUID": "1d5debb9-05d9-452c-9f2c-3652ee949ff4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "a7aac23f-be9e-43ea-a1a8-f028792b963f",
              "parentUUID": "1d5debb9-05d9-452c-9f2c-3652ee949ff4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "cf6849f2-585d-4a2f-a0ff-695544abece3",
              "parentUUID": "1d5debb9-05d9-452c-9f2c-3652ee949ff4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "c2144a88-227f-4f48-bfc9-1a11d8218cf6",
              "parentUUID": "1d5debb9-05d9-452c-9f2c-3652ee949ff4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ERR when attempting to lpush to a non-list key",
              "fullTitle": "lpush-command test should report ERR when attempting to lpush to a non-list key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'lkey', '0']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "d186fae1-f44f-4a05-9a5c-8b4c4b583a35",
              "parentUUID": "1d5debb9-05d9-452c-9f2c-3652ee949ff4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a list if it doesn't already exist",
              "fullTitle": "lpush-command test should create a list if it doesn't already exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exists', testKey]);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['lpush', testKey, 'a', 'b', 'c']);\n        // The list is now 'c', 'b', 'a'\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['exists', testKey]);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "4813bee2-4b0e-43cf-89e1-466bb5515ce9",
              "parentUUID": "1d5debb9-05d9-452c-9f2c-3652ee949ff4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the list in a predicatble order",
              "fullTitle": "lpush-command test should have created the list in a predicatble order",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lindex', testKey, '1']);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['llen', testKey]);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpop', testKey]);\n        chai_1.expect(response).to.equal('a');\n    })",
              "err": {},
              "uuid": "3b4bf971-7140-4e93-99dc-2e14d1d97680",
              "parentUUID": "1d5debb9-05d9-452c-9f2c-3652ee949ff4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d186fae1-f44f-4a05-9a5c-8b4c4b583a35",
            "4813bee2-4b0e-43cf-89e1-466bb5515ce9",
            "3b4bf971-7140-4e93-99dc-2e14d1d97680"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "07edd701-bbf1-43a7-ac8e-482aa51fa9e5",
          "title": "lrange-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lrange-command.test.ts",
          "file": "/test/resp/command/list/lrange-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lrange-command test \"before all\" hook",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "76c3e470-8375-429c-a5ac-e02de64079f2",
              "parentUUID": "07edd701-bbf1-43a7-ac8e-482aa51fa9e5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lrange-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "c9ac3412-8a45-4f04-bdfe-de8cd335e8c5",
              "parentUUID": "07edd701-bbf1-43a7-ac8e-482aa51fa9e5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lrange-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "6142f4cf-c40e-4324-8732-5404b146367f",
              "parentUUID": "07edd701-bbf1-43a7-ac8e-482aa51fa9e5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lrange-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "9920a67d-626a-4d06-9be0-2d19de96f5f7",
              "parentUUID": "07edd701-bbf1-43a7-ac8e-482aa51fa9e5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "return an empty list when the key does not exist",
              "fullTitle": "lrange-command test return an empty list when the key does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', '0', '100']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "a6f4ddaf-54c9-41f9-9ffd-b1af39417476",
              "parentUUID": "07edd701-bbf1-43a7-ac8e-482aa51fa9e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report an error when start or stop index are invalid",
              "fullTitle": "lrange-command test should report an error when start or stop index are invalid",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', 'negative one', '-2']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', '0', 'negative two']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', '-1', '-100']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "0692abf6-d82d-4120-9d5e-0be97e06d692",
              "parentUUID": "07edd701-bbf1-43a7-ac8e-482aa51fa9e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return predictable results",
              "fullTitle": "lrange-command test should return predictable results",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', 'newlist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'newlist', 'world']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'newlist', '0', '-1']);\n        chai_1.expect(response).to.eql(['hello', 'world']);\n    })",
              "err": {},
              "uuid": "e036de75-3860-4ee3-8eb5-a1ab6bc27d44",
              "parentUUID": "07edd701-bbf1-43a7-ac8e-482aa51fa9e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reproduce the results from the redis documentation",
              "fullTitle": "lrange-command test should reproduce the results from the redis documentation",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', 'doclist', 'one']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'doclist', 'two']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'doclist', 'three']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '0', '0']);\n        chai_1.expect(response).to.eql(['one']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '-3', '2']);\n        chai_1.expect(response).to.eql(['one', 'two', 'three']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '-100', '100']);\n        chai_1.expect(response).to.eql(['one', 'two', 'three']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '5', '10']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "17b2f74c-7512-469d-baed-25802de46c7a",
              "parentUUID": "07edd701-bbf1-43a7-ac8e-482aa51fa9e5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a6f4ddaf-54c9-41f9-9ffd-b1af39417476",
            "0692abf6-d82d-4120-9d5e-0be97e06d692",
            "e036de75-3860-4ee3-8eb5-a1ab6bc27d44",
            "17b2f74c-7512-469d-baed-25802de46c7a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ca5a6482-ef05-4ffb-bf6c-2a69adb141cd",
          "title": "lrem-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lrem-command.test.ts",
          "file": "/test/resp/command/list/lrem-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lrem-command test \"before all\" hook",
              "timedOut": false,
              "duration": 38,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "ca878546-560c-483a-902e-f1ad3d9f4766",
              "parentUUID": "ca5a6482-ef05-4ffb-bf6c-2a69adb141cd",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lrem-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "c9e77acf-60ba-48ec-b2ca-fea1225c4159",
              "parentUUID": "ca5a6482-ef05-4ffb-bf6c-2a69adb141cd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lrem-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "9f6a98ba-63c3-484e-b68c-2345728c6074",
              "parentUUID": "ca5a6482-ef05-4ffb-bf6c-2a69adb141cd",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lrem-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "9c49e1fa-bf55-4067-b7ae-5b1cc0c0e19b",
              "parentUUID": "ca5a6482-ef05-4ffb-bf6c-2a69adb141cd",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should NOT report 0 when lrem called with invalid non-existent key",
              "fullTitle": "lrem-command test should NOT report 0 when lrem called with invalid non-existent key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'no-key', 'negative one thousand', 'test']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "1dba7d60-557a-465a-89e9-a4c386243700",
              "parentUUID": "ca5a6482-ef05-4ffb-bf6c-2a69adb141cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report ERR when lrem called against existing key with invalid count argument",
              "fullTitle": "lrem-command test should report ERR when lrem called against existing key with invalid count argument",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lpush', 'lrem', 'akey']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'lrem', 'negative one thousand', 'test']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "b2fb0fe6-25c5-4c61-a0ad-18ba1f8799b0",
              "parentUUID": "ca5a6482-ef05-4ffb-bf6c-2a69adb141cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report 0 when lrem called with valid arguments and non-existing element",
              "fullTitle": "lrem-command test should report 0 when lrem called with valid arguments and non-existing element",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'lrem', '0', 'does not exist']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "5019fc73-6639-4e7d-b6ba-529d306cbbf3",
              "parentUUID": "ca5a6482-ef05-4ffb-bf6c-2a69adb141cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should use negative index counters",
              "fullTitle": "lrem-command test should use negative index counters",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'foo']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '-2', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '-1']);\n        chai_1.expect(response).to.eql(['hello', 'foo']);\n    })",
              "err": {},
              "uuid": "639a54f7-5693-493b-8a50-9b7d8c10353e",
              "parentUUID": "ca5a6482-ef05-4ffb-bf6c-2a69adb141cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a ZERO result when the key does not exist",
              "fullTitle": "lrem-command test should return a ZERO result when the key does not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'otherlist', '1', 'test']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "daa2e907-bde4-4612-98d2-4add084b8ea0",
              "parentUUID": "ca5a6482-ef05-4ffb-bf6c-2a69adb141cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove every matchin element when count is 0",
              "fullTitle": "lrem-command test should remove every matchin element when count is 0",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushdb']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'foo']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '0', 'hello']);\n        chai_1.expect(response).to.equal(3);\n    })",
              "err": {},
              "uuid": "4ec3a900-cf05-4f11-aa08-8412c9683b7f",
              "parentUUID": "ca5a6482-ef05-4ffb-bf6c-2a69adb141cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove the list when all elements are gone",
              "fullTitle": "lrem-command test should remove the list when all elements are gone",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '0', 'foo']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mylist']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "deccdbc0-ed93-4e3b-9f47-535b393a9598",
              "parentUUID": "ca5a6482-ef05-4ffb-bf6c-2a69adb141cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove only the number of requested elements when count > 0",
              "fullTitle": "lrem-command test should remove only the number of requested elements when count > 0",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'calibrate']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '1', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '2']);\n        chai_1.expect(response).to.eql(['hello', 'calibrate', 'hello']);\n    })",
              "err": {},
              "uuid": "2a437c87-dc43-4a0b-aff7-f4d8e94c0e4e",
              "parentUUID": "ca5a6482-ef05-4ffb-bf6c-2a69adb141cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should default to startIndex ZERO when it is less than ZERO",
              "fullTitle": "lrem-command test should default to startIndex ZERO when it is less than ZERO",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let i = 0; i < 10; i++) {\n            response = yield common_test_1.sendCommand(client, ['RPUSH', 'newlist', `${i}`]);\n            chai_1.expect(response).to.equal(i + 1);\n        }\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'newlist', '-100', '2']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'newlist']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'newlist', '0', '3']);\n        chai_1.expect(response).to.eql(['0', '1', '2']);\n    })",
              "err": {},
              "uuid": "6a96b7c5-d6d7-49de-b2ca-716f90f3a47c",
              "parentUUID": "ca5a6482-ef05-4ffb-bf6c-2a69adb141cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove the list when start > end or start > llen",
              "fullTitle": "lrem-command test should remove the list when start > end or start > llen",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exists', 'newlist']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'newlist', '10', '2']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'newlist']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "11d9ec3d-49a4-4eb9-a62a-dc5700359635",
              "parentUUID": "ca5a6482-ef05-4ffb-bf6c-2a69adb141cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should properly handle a negative endIndex",
              "fullTitle": "lrem-command test should properly handle a negative endIndex",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let i = 0; i < 7; i++) {\n            response = yield common_test_1.sendCommand(client, ['RPUSH', 'neglist', `${i}`]);\n            chai_1.expect(response).to.equal(i + 1);\n        }\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'neglist', '-100', '-3']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'neglist', '0', '100']);\n        chai_1.expect(response).to.eql(['0', '1', '2', '3', '4']);\n    })",
              "err": {},
              "uuid": "30a8a785-5593-409c-9c3d-9a27a030bfdf",
              "parentUUID": "ca5a6482-ef05-4ffb-bf6c-2a69adb141cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove the key when abs(endIndex) is > llen",
              "fullTitle": "lrem-command test should remove the key when abs(endIndex) is > llen",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'neglist', '-100', '-6']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'neglist']);\n        chai_1.expect(response).to.eql(0);\n    })",
              "err": {},
              "uuid": "bd1d7714-e779-46ef-a63f-316fee106c62",
              "parentUUID": "ca5a6482-ef05-4ffb-bf6c-2a69adb141cd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1dba7d60-557a-465a-89e9-a4c386243700",
            "b2fb0fe6-25c5-4c61-a0ad-18ba1f8799b0",
            "5019fc73-6639-4e7d-b6ba-529d306cbbf3",
            "639a54f7-5693-493b-8a50-9b7d8c10353e",
            "daa2e907-bde4-4612-98d2-4add084b8ea0",
            "4ec3a900-cf05-4f11-aa08-8412c9683b7f",
            "deccdbc0-ed93-4e3b-9f47-535b393a9598",
            "2a437c87-dc43-4a0b-aff7-f4d8e94c0e4e",
            "6a96b7c5-d6d7-49de-b2ca-716f90f3a47c",
            "11d9ec3d-49a4-4eb9-a62a-dc5700359635",
            "30a8a785-5593-409c-9c3d-9a27a030bfdf",
            "bd1d7714-e779-46ef-a63f-316fee106c62"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 46,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d3e94ca9-9959-4fbb-a4d5-deab082fbaa9",
          "title": "lset-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lset-command.test.ts",
          "file": "/test/resp/command/list/lset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lset-command test \"before all\" hook",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "40a25b52-1055-4e95-86f2-076688d50a5c",
              "parentUUID": "d3e94ca9-9959-4fbb-a4d5-deab082fbaa9",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lset-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "f268b24c-3dc5-4570-aa9c-2630deedb5e3",
              "parentUUID": "d3e94ca9-9959-4fbb-a4d5-deab082fbaa9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lset-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "a52918c8-6c93-43f9-a639-e145f85740a7",
              "parentUUID": "d3e94ca9-9959-4fbb-a4d5-deab082fbaa9",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lset-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "c6b77998-e60f-49f1-9975-41fd3d5d04e6",
              "parentUUID": "d3e94ca9-9959-4fbb-a4d5-deab082fbaa9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should fail when a key does not exist",
              "fullTitle": "lset-command test should fail when a key does not exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lset', 'no-key', 'negative one thousand', 'test']);\n        chai_1.expect(response).to.equal('ReplyError: ERR no such key');\n    })",
              "err": {},
              "uuid": "b4487833-e875-42b7-a554-66cd4fe2845b",
              "parentUUID": "d3e94ca9-9959-4fbb-a4d5-deab082fbaa9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should replace a valid index",
              "fullTitle": "lset-command test should replace a valid index",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', testkey, 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lset', testkey, '-1', 'z']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lrange', testkey, '0', '3']);\n        chai_1.expect(response).to.eql(['a', 'b', 'z']);\n    })",
              "err": {},
              "uuid": "f005b07f-9711-4c55-8b56-82486bc8aebd",
              "parentUUID": "d3e94ca9-9959-4fbb-a4d5-deab082fbaa9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should recognize invalid indexes",
              "fullTitle": "lset-command test should recognize invalid indexes",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lset', testkey, 'invalid', '3']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "0ac084a2-dd1e-4d1c-a317-bd324d94de8e",
              "parentUUID": "d3e94ca9-9959-4fbb-a4d5-deab082fbaa9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b4487833-e875-42b7-a554-66cd4fe2845b",
            "f005b07f-9711-4c55-8b56-82486bc8aebd",
            "0ac084a2-dd1e-4d1c-a317-bd324d94de8e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5bf4b23f-64d5-421a-b25a-95f62acfaccf",
          "title": "ltrim-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/ltrim-command.test.ts",
          "file": "/test/resp/command/list/ltrim-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "ltrim-command test \"before all\" hook",
              "timedOut": false,
              "duration": 41,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "28772870-5f40-4c62-a12e-350e6624a2db",
              "parentUUID": "5bf4b23f-64d5-421a-b25a-95f62acfaccf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "ltrim-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "911c5700-c34f-47a4-8545-eb7c9ff767d5",
              "parentUUID": "5bf4b23f-64d5-421a-b25a-95f62acfaccf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "ltrim-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "f983272c-5efa-4de4-b615-ab61d64eff7d",
              "parentUUID": "5bf4b23f-64d5-421a-b25a-95f62acfaccf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "ltrim-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "ad54fbb9-387d-411b-ba34-7e6b242ce2be",
              "parentUUID": "5bf4b23f-64d5-421a-b25a-95f62acfaccf",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report OK when the key does not exist",
              "fullTitle": "ltrim-command test should report OK when the key does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'no-key', '0', '100']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "5b9e1ebc-0d8e-46b7-b628-b4d7eb611933",
              "parentUUID": "5bf4b23f-64d5-421a-b25a-95f62acfaccf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should trim a list to the requested size or less",
              "fullTitle": "ltrim-command test should trim a list to the requested size or less",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'calibrate']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '3']);\n        chai_1.expect(response).to.eql(['hello', 'hello', 'calibrate', 'hello']);\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'mylist', '0', '100']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '3']);\n        chai_1.expect(response).to.eql(['hello', 'hello', 'calibrate', 'hello']);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'mylist', '1', '4']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '3']);\n        chai_1.expect(response).to.eql(['hello', 'calibrate', 'hello']);\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'mylist', '-2', '1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '1']);\n        chai_1.expect(response).to.eql(['calibrate']);\n    })",
              "err": {},
              "uuid": "f399e8a8-1acf-43c6-ab4c-9e0818d22e83",
              "parentUUID": "5bf4b23f-64d5-421a-b25a-95f62acfaccf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject an invalid start index",
              "fullTitle": "ltrim-command test should reject an invalid start index",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'testlist', 'wrong', '10']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "e22044e4-7328-423f-8aef-dad5f1e7828e",
              "parentUUID": "5bf4b23f-64d5-421a-b25a-95f62acfaccf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5b9e1ebc-0d8e-46b7-b628-b4d7eb611933",
            "f399e8a8-1acf-43c6-ab4c-9e0818d22e83",
            "e22044e4-7328-423f-8aef-dad5f1e7828e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f60c22d5-2806-4ae4-a364-f5fc0d618a89",
          "title": "rpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/rpop-command.test.ts",
          "file": "/test/resp/command/list/rpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rpop-command test \"before all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "e4bdbec6-e85f-4240-849a-3e393de24b4f",
              "parentUUID": "f60c22d5-2806-4ae4-a364-f5fc0d618a89",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "d2a8dd0a-8ef0-488d-b031-e459ac6ffcfb",
              "parentUUID": "f60c22d5-2806-4ae4-a364-f5fc0d618a89",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "c291c1d7-8267-46aa-9206-6aa0371458cf",
              "parentUUID": "f60c22d5-2806-4ae4-a364-f5fc0d618a89",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "b4410b24-d4e9-4860-82c0-5b97e5a1929e",
              "parentUUID": "f60c22d5-2806-4ae4-a364-f5fc0d618a89",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when rpop called on non-existent key",
              "fullTitle": "rpop-command test should report NIL when rpop called on non-existent key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpop', 'no-key']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['exists', 'no-key']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "1d458d05-97a9-468f-9abc-2b8e9e8e5c78",
              "parentUUID": "f60c22d5-2806-4ae4-a364-f5fc0d618a89",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d458d05-97a9-468f-9abc-2b8e9e8e5c78"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e5c6cb4f-a61f-44e0-9544-bede4aced852",
          "title": "rpoplpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/rpoplpush-command.test.ts",
          "file": "/test/resp/command/list/rpoplpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rpoplpush-command test \"before all\" hook",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "7627cff0-23c3-428d-a350-40eaba8eff7d",
              "parentUUID": "e5c6cb4f-a61f-44e0-9544-bede4aced852",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rpoplpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "02d734cb-dcc2-4032-b1dd-8cd03efb9faa",
              "parentUUID": "e5c6cb4f-a61f-44e0-9544-bede4aced852",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rpoplpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "bb89069b-8aed-488b-ba96-b582461dd517",
              "parentUUID": "e5c6cb4f-a61f-44e0-9544-bede4aced852",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rpoplpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "27785be2-15b8-497b-b44f-972a13a6c275",
              "parentUUID": "e5c6cb4f-a61f-44e0-9544-bede4aced852",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when destination does not exist",
              "fullTitle": "rpoplpush-command test should return NIL when destination does not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpoplpush', 'src', 'dst']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "05cdf97c-77bb-4645-9822-4398c28f6cb9",
              "parentUUID": "e5c6cb4f-a61f-44e0-9544-bede4aced852",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should rotate a list when src and dst are the same",
              "fullTitle": "rpoplpush-command test should rotate a list when src and dst are the same",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', 'src', 'a']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'src', 'b']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'src', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'src', '0', '3']);\n        chai_1.expect(response).to.eql(['a', 'b', 'c']);\n        response = yield common_test_1.sendCommand(client, ['rpoplpush', 'src', 'src']);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'src', '0', '3']);\n        chai_1.expect(response).to.eql(['c', 'a', 'b']);\n    })",
              "err": {},
              "uuid": "14e77d82-2e18-411a-b611-6dfd6ad1fb2f",
              "parentUUID": "e5c6cb4f-a61f-44e0-9544-bede4aced852",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create the target list if it does not exist",
              "fullTitle": "rpoplpush-command test should create the target list if it does not exist",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exists', 'dst']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['rpoplpush', 'src', 'dst']);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['exists', 'dst']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'src', '0', '3']);\n        chai_1.expect(response).to.eql(['c', 'a']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'dst', '0', '3']);\n        chai_1.expect(response).to.eql(['b']);\n    })",
              "err": {},
              "uuid": "8937cb81-a3ed-4850-9032-74a7796d9c16",
              "parentUUID": "e5c6cb4f-a61f-44e0-9544-bede4aced852",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "05cdf97c-77bb-4645-9822-4398c28f6cb9",
            "14e77d82-2e18-411a-b611-6dfd6ad1fb2f",
            "8937cb81-a3ed-4850-9032-74a7796d9c16"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b4ca01eb-556c-4b1f-a7b9-3ab5e2dbda89",
          "title": "rpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/rpush-command.test.ts",
          "file": "/test/resp/command/list/rpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rpush-command test \"before all\" hook",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "40b9da28-e90b-4a2e-8860-a1b694acdb5c",
              "parentUUID": "b4ca01eb-556c-4b1f-a7b9-3ab5e2dbda89",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "afb4a789-e0cd-45b4-a290-16df6774b31f",
              "parentUUID": "b4ca01eb-556c-4b1f-a7b9-3ab5e2dbda89",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "e26756dd-87d2-4fbb-8522-dfaef6f2e29a",
              "parentUUID": "b4ca01eb-556c-4b1f-a7b9-3ab5e2dbda89",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a0c34c1a-1f62-4727-a66d-0d477aa2b9f8",
              "parentUUID": "b4ca01eb-556c-4b1f-a7b9-3ab5e2dbda89",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ERR when attempting to rpush to a non-list key",
              "fullTitle": "rpush-command test should report ERR when attempting to rpush to a non-list key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['rpush', 'lkey', '0']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "56b065eb-be65-461d-a3ed-8a04250cce81",
              "parentUUID": "b4ca01eb-556c-4b1f-a7b9-3ab5e2dbda89",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "56b065eb-be65-461d-a3ed-8a04250cce81"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6af001cc-c9ab-4dba-9b93-61cd0b2a4b7a",
          "title": "multi command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/multi-command.test.ts",
          "file": "/test/resp/command/multi-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "multi command test \"before all\" hook",
              "timedOut": false,
              "duration": 42,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "fe1f168a-8794-45a1-9fc4-2c1218794571",
              "parentUUID": "6af001cc-c9ab-4dba-9b93-61cd0b2a4b7a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "multi command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "eba60726-dc5f-4b01-ad12-6b2057d3aa1e",
              "parentUUID": "6af001cc-c9ab-4dba-9b93-61cd0b2a4b7a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "multi command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "61476847-2ee2-4c7e-9a70-a738d9dc1c95",
              "parentUUID": "6af001cc-c9ab-4dba-9b93-61cd0b2a4b7a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "multi command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "440575bc-fb34-4f7a-bb4d-db0e6c859b79",
              "parentUUID": "6af001cc-c9ab-4dba-9b93-61cd0b2a4b7a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow nested MULTI invocations",
              "fullTitle": "multi command test should not allow nested MULTI invocations",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('ReplyError: ERR MULTI calls can not be nested');\n    })",
              "err": {},
              "uuid": "cf963cd2-bcea-4efb-aad7-2dcabb5037f6",
              "parentUUID": "6af001cc-c9ab-4dba-9b93-61cd0b2a4b7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect the DISCARD command",
              "fullTitle": "multi command test should respect the DISCARD command",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['discard']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "e043bea4-3f82-444b-9bc0-be4bc13916ef",
              "parentUUID": "6af001cc-c9ab-4dba-9b93-61cd0b2a4b7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow DISCARD without MULTI",
              "fullTitle": "multi command test should not allow DISCARD without MULTI",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['discard']);\n        chai_1.expect(response).to.equal('ReplyError: ERR DISCARD without MULTI');\n    })",
              "err": {},
              "uuid": "13a3bc82-250c-4b56-8c4e-043c6a356ee6",
              "parentUUID": "6af001cc-c9ab-4dba-9b93-61cd0b2a4b7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should continue to validate commands after MULTI",
              "fullTitle": "multi command test should continue to validate commands after MULTI",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['unknown', 'command']);\n        chai_1.expect(response).to.equal('ReplyError: ERR unknown command `unknown`, with args beginning with: `command`, ', `${response}`);\n        response = yield common_test_1.sendCommand(client, ['lpush', 'test', 'one', 'two', 'three']);\n        chai_1.expect(response).to.equal('QUEUED');\n    })",
              "err": {},
              "uuid": "7a8fa07c-c0d0-4632-8dcc-618329c7daad",
              "parentUUID": "6af001cc-c9ab-4dba-9b93-61cd0b2a4b7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should EXECABORT from a previous error",
              "fullTitle": "multi command test should EXECABORT from a previous error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exec']);\n        chai_1.expect(response).to.equal('ReplyError: EXECABORT Transaction discarded because of previous errors.');\n    })",
              "err": {},
              "uuid": "51c05e38-4b60-4ad1-b787-2288ce5da455",
              "parentUUID": "6af001cc-c9ab-4dba-9b93-61cd0b2a4b7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should queue a set of commands when there is no intervening error",
              "fullTitle": "multi command test should queue a set of commands when there is no intervening error",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'test', 'one', 'two', 'three']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['exec']);\n        chai_1.expect(response).to.eql([3]);\n    })",
              "err": {},
              "uuid": "de3685b0-b276-4966-b7ff-5ca192579715",
              "parentUUID": "6af001cc-c9ab-4dba-9b93-61cd0b2a4b7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reset transaction state after executing commands",
              "fullTitle": "multi command test should reset transaction state after executing commands",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['discard']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "dd646303-d720-441c-9974-61c44f1a6bae",
              "parentUUID": "6af001cc-c9ab-4dba-9b93-61cd0b2a4b7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the results of multiple commands in the order provided",
              "fullTitle": "multi command test should return the results of multiple commands in the order provided",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['brpoplpush', 'test', 'dest', '0']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['exec']);\n        chai_1.expect(response).to.eql(['three', 'two', 'one']);\n        response = yield common_test_1.sendCommand(client, ['exists', 'test']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'dest']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "207c8e1f-bcc7-4985-b91f-a0e439a47cac",
              "parentUUID": "6af001cc-c9ab-4dba-9b93-61cd0b2a4b7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate the behavior of brpoplpush",
              "fullTitle": "multi command test should validate the behavior of brpoplpush",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'test', 'one', 'two', 'three']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('three');\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('two');\n        response = yield common_test_1.sendCommand(client, ['brpoplpush', 'test', 'dest', '0']);\n        chai_1.expect(response).to.equal('one');\n    })",
              "err": {},
              "uuid": "049f1b4b-3b38-4bb5-8173-3a56f6f40c96",
              "parentUUID": "6af001cc-c9ab-4dba-9b93-61cd0b2a4b7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when EXEC issued without MULTI",
              "fullTitle": "multi command test should fail when EXEC issued without MULTI",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exec']);\n        chai_1.expect(response).to.equal('ReplyError: ERR EXEC without MULTI');\n    })",
              "err": {},
              "uuid": "1a44f144-e36a-4d28-bb66-8d32104a3051",
              "parentUUID": "6af001cc-c9ab-4dba-9b93-61cd0b2a4b7a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cf963cd2-bcea-4efb-aad7-2dcabb5037f6",
            "e043bea4-3f82-444b-9bc0-be4bc13916ef",
            "13a3bc82-250c-4b56-8c4e-043c6a356ee6",
            "7a8fa07c-c0d0-4632-8dcc-618329c7daad",
            "51c05e38-4b60-4ad1-b787-2288ce5da455",
            "de3685b0-b276-4966-b7ff-5ca192579715",
            "dd646303-d720-441c-9974-61c44f1a6bae",
            "207c8e1f-bcc7-4985-b91f-a0e439a47cac",
            "049f1b4b-3b38-4bb5-8173-3a56f6f40c96",
            "1a44f144-e36a-4d28-bb66-8d32104a3051"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 33,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "748f4779-7bd7-485b-a3aa-96d9424c7e17",
          "title": "script-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/script-command.test.ts",
          "file": "/test/resp/command/script-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "script-command test \"before all\" hook",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "947382e7-f393-4c5c-b1ca-8c61e7c65a3c",
              "parentUUID": "748f4779-7bd7-485b-a3aa-96d9424c7e17",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "script-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "14cb5df8-9e9f-4e91-a55b-11e32114a47a",
              "parentUUID": "748f4779-7bd7-485b-a3aa-96d9424c7e17",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "script-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "bab4d536-7667-447f-b5a5-a19487ad6214",
              "parentUUID": "748f4779-7bd7-485b-a3aa-96d9424c7e17",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "script-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "61720fac-84fa-49db-b787-fb9c2e49adab",
              "parentUUID": "748f4779-7bd7-485b-a3aa-96d9424c7e17",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should calcuclate the correct sha1 of a script and store the script",
              "fullTitle": "script-command test should calcuclate the correct sha1 of a script and store the script",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['script', 'exists', sha1]);\n        chai_1.expect(response).to.eql([0]);\n        // validate failure on unparseable script\n        response = yield common_test_1.sendCommand(client, ['script', 'load', code]);\n        chai_1.expect(response).to.match(/ReplyError: ERR .*/);\n        // validate success on parseable script\n        response = yield common_test_1.sendCommand(client, ['script', 'load', `${code}}`]);\n        chai_1.expect(response).to.equal(sha1);\n        // validate a script is persisted\n        response = yield common_test_1.sendCommand(client, ['script', 'exists', sha1]);\n        chai_1.expect(response).to.eql([1]);\n        // validate response to unknown sub command\n        response = yield common_test_1.sendCommand(client, ['script', 'test', sha1]);\n        chai_1.expect(response).to.equal('ReplyError: ERR Unknown subcommand or wrong number of arguments for \\'test\\'. Try SCRIPT HELP.');\n    })",
              "err": {},
              "uuid": "05e48c3d-28ca-4943-b181-3013d04a4a71",
              "parentUUID": "748f4779-7bd7-485b-a3aa-96d9424c7e17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should evaluate a loaded lua script using evalsha",
              "fullTitle": "script-command test should evaluate a loaded lua script using evalsha",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Validate that NOSCRIPT is triggered\n        response = yield common_test_1.sendCommand(client, ['evalsha', `${sha1}xx`, '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('ReplyError: NOSCRIPT No matching script. Please use EVAL.');\n        // Validate that param 1 cannot be negative\n        response = yield common_test_1.sendCommand(client, ['evalsha', sha1, '-2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('ReplyError: ERR Number of keys can\\'t be negative');\n        // Validate that param 1 cannot be text\n        response = yield common_test_1.sendCommand(client, ['evalsha', sha1, 'two', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "8087f481-4652-485b-8a99-fbed49f0b930",
              "parentUUID": "748f4779-7bd7-485b-a3aa-96d9424c7e17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should execute a simple script",
              "fullTitle": "script-command test should execute a simple script",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Validate that a simple script can be processed\n        response = yield common_test_1.sendCommand(client, ['EVAL', 'local val=\"Hello Compose\" return val', '0']);\n        chai_1.expect(response).to.equal('Hello Compose');\n    })",
              "err": {},
              "uuid": "9bcb34c6-a56f-4196-8cad-66d29ef02ea8",
              "parentUUID": "748f4779-7bd7-485b-a3aa-96d9424c7e17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create and process the ARGV table",
              "fullTitle": "script-command test should create and process the ARGV table",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return ARGV[2]', '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.eql('second');\n    })",
              "err": {},
              "uuid": "bb6b6cb9-c9f9-4e13-a0d3-740637b7c3e3",
              "parentUUID": "748f4779-7bd7-485b-a3aa-96d9424c7e17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create and process the KEYS table",
              "fullTitle": "script-command test should create and process the KEYS table",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return KEYS[1]', '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('key1');\n    })",
              "err": {},
              "uuid": "b9b3ca08-4937-4c00-a85e-726ad41858aa",
              "parentUUID": "748f4779-7bd7-485b-a3aa-96d9424c7e17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a NUMBER when required",
              "fullTitle": "script-command test should return a NUMBER when required",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return 123', '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal(123);\n    })",
              "err": {},
              "uuid": "1f2d53a6-bd3f-436e-91f4-f23d838c6d62",
              "parentUUID": "748f4779-7bd7-485b-a3aa-96d9424c7e17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NIL when there is no return value",
              "fullTitle": "script-command test should return NIL when there is no return value",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'print \"Hello World\"', '0']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "5ebd6826-cb23-47bd-b1e1-829ddf725973",
              "parentUUID": "748f4779-7bd7-485b-a3aa-96d9424c7e17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a TABLE when required",
              "fullTitle": "script-command test should return a TABLE when required",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, [`eval`, `return ARGV`, '2', 'key1', 'key2', 'first', 'second', 'third']);\n        chai_1.expect(response).to.eql(['first', 'second', 'third']);\n    })",
              "err": {},
              "uuid": "0af6bb4f-8e59-47e4-9ce2-233d48247869",
              "parentUUID": "748f4779-7bd7-485b-a3aa-96d9424c7e17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return items in order",
              "fullTitle": "script-command test should return items in order",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return {true, \"test\", false, 10, 10.2}', '0']);\n        chai_1.expect(response).to.eql([1, 'test', null, 10, 10]);\n    })",
              "err": {},
              "uuid": "7b50c7f5-fe18-44c7-9aee-73bba270be27",
              "parentUUID": "748f4779-7bd7-485b-a3aa-96d9424c7e17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return integer and nil for true and false, respectively",
              "fullTitle": "script-command test should return integer and nil for true and false, respectively",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return { true, false, false}', '0']);\n        chai_1.expect(response).to.eql([1, null, null]);\n    })",
              "err": {},
              "uuid": "0dd398ee-86fa-41a9-b46b-bb30538b34c0",
              "parentUUID": "748f4779-7bd7-485b-a3aa-96d9424c7e17",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to execute a representative BULL script",
              "fullTitle": "script-command test should be able to execute a representative BULL script",
              "timedOut": false,
              "duration": 85,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        const luaScriptPath = path.join(__dirname, '../../resources/bull.lua');\n        console.log(`trying to load ${luaScriptPath}`);\n        const luaScript = fs.readFileSync(luaScriptPath, 'utf8');\n        const args = ['6', 'bull:some_queue:wait', 'bull:some_queue:paused', 'bull:some_queue:meta-paused', 'bull:some_queue:id', 'bull:some_queue:delayed', 'bull:some_queue:priority', 'bull:some_queue:', '', 'S1234_last_first', '{\"trackid\":\"9405503699300066833313\",\"filingKey\":\"S1234_last_first\",\"name\":\"S1234_last_first\",\"message\":\"Waiting to start\"}', '{\"delay\":15,\"attempts\":1,\"timestamp\":1579142712160}', '1579142712160', '15', '1579142712175', '0', 'LPUSH', '9f187ecc-d502-4287-9f23-9978e6c2d67e'];\n        response = yield common_test_1.sendCommand(client, ['eval', luaScript, ...args]);\n        chai_1.expect(response).to.equal('1');\n        response = yield common_test_1.sendCommand(client, ['keys', '*']);\n        chai_1.expect(response.sort()).to.eql(['bull:some_queue:1', 'bull:some_queue:delayed', 'bull:some_queue:id']);\n        response = yield common_test_1.sendCommand(client, ['type', 'bull:some_queue:delayed']);\n        chai_1.expect(response).to.equal('zset');\n        response = yield common_test_1.sendCommand(client, ['type', 'bull:some_queue:id']);\n        chai_1.expect(response).to.equal('string');\n        response = yield common_test_1.sendCommand(client, ['type', 'bull:some_queue:1']);\n        chai_1.expect(response).to.equal('hash');\n        response = yield common_test_1.sendCommand(client, ['get', 'bull:some_queue:id']);\n        chai_1.expect(response).to.equal('1');\n    })",
              "err": {},
              "uuid": "0692f4ca-cafc-40d0-b57f-88bb1e76d2db",
              "parentUUID": "748f4779-7bd7-485b-a3aa-96d9424c7e17",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "05e48c3d-28ca-4943-b181-3013d04a4a71",
            "8087f481-4652-485b-8a99-fbed49f0b930",
            "9bcb34c6-a56f-4196-8cad-66d29ef02ea8",
            "bb6b6cb9-c9f9-4e13-a0d3-740637b7c3e3",
            "b9b3ca08-4937-4c00-a85e-726ad41858aa",
            "1f2d53a6-bd3f-436e-91f4-f23d838c6d62",
            "5ebd6826-cb23-47bd-b1e1-829ddf725973",
            "0af6bb4f-8e59-47e4-9ce2-233d48247869",
            "7b50c7f5-fe18-44c7-9aee-73bba270be27",
            "0dd398ee-86fa-41a9-b46b-bb30538b34c0",
            "0692f4ca-cafc-40d0-b57f-88bb1e76d2db"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 214,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "670193ab-4949-4143-8d54-f77b9451506a",
          "title": "publish/subscribe test",
          "fullFile": "/home/lane/git/redis/test/resp/command/server/pubsub-server.test.ts",
          "file": "/test/resp/command/server/pubsub-server.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "publish/subscribe test \"before all\" hook",
              "timedOut": false,
              "duration": 31,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "9de80922-79d5-4487-8a9b-5601070d582a",
              "parentUUID": "670193ab-4949-4143-8d54-f77b9451506a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "publish/subscribe test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "e6db9264-e9d2-4c41-8baa-672c9ab18a0c",
              "parentUUID": "670193ab-4949-4143-8d54-f77b9451506a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "publish/subscribe test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "876c6571-166a-489f-bfc4-32df0bb044b2",
              "parentUUID": "670193ab-4949-4143-8d54-f77b9451506a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "publish/subscribe test \"after each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "e47af817-4517-4afb-953b-c25cb2ac84d2",
              "parentUUID": "670193ab-4949-4143-8d54-f77b9451506a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return ZERO when a message is published to a channel without subscribers",
              "fullTitle": "publish/subscribe test should return ZERO when a message is published to a channel without subscribers",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['publish', 'channel', 'Hollow world!']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "9ef09040-3bdc-451e-a34d-4f3a6c8d2a19",
              "parentUUID": "670193ab-4949-4143-8d54-f77b9451506a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should unsubscribe from a channel that it is not subscribed to",
              "fullTitle": "publish/subscribe test should unsubscribe from a channel that it is not subscribed to",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Sound's weird, but this is observed behavior\n        response = yield common_test_1.sendCommand(client, ['unsubscribe', 'some channel']);\n        chai_1.expect(response).to.eql(['unsubscribe', 'some channel', 0]);\n    })",
              "err": {},
              "uuid": "c24f59e5-f0ae-40dc-b145-4721c4399f88",
              "parentUUID": "670193ab-4949-4143-8d54-f77b9451506a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should subscribe to an arbitrary channel",
              "fullTitle": "publish/subscribe test should subscribe to an arbitrary channel",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['subscribe', 'arbitrary channel']);\n        chai_1.expect(response).to.eql(['subscribe', 'arbitrary channel', 1]);\n    })",
              "err": {},
              "uuid": "93c18633-fa07-459e-a4d3-8d72659b6730",
              "parentUUID": "670193ab-4949-4143-8d54-f77b9451506a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report the number of currently subscribed channels",
              "fullTitle": "publish/subscribe test should report the number of currently subscribed channels",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['subscribe', 'another channel']);\n        chai_1.expect(response).to.eql(['subscribe', 'another channel', 2]);\n        response = yield common_test_1.sendCommand(client, ['unsubscribe', 'another channel']);\n        chai_1.expect(response).to.eql(['unsubscribe', 'another channel', 1]);\n        response = yield common_test_1.sendCommand(client, ['unsubscribe', 'arbitrary channel']);\n        chai_1.expect(response).to.eql(['unsubscribe', 'arbitrary channel', 0]);\n    })",
              "err": {},
              "uuid": "cb6a2a6d-0bb8-4718-9ec8-98c91fda766d",
              "parentUUID": "670193ab-4949-4143-8d54-f77b9451506a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should receive separate subscribe responses and then notifications on subscribed channels",
              "fullTitle": "publish/subscribe test should receive separate subscribe responses and then notifications on subscribed channels",
              "timedOut": false,
              "duration": 1516,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let counter = 0;\nconst newClient1 = new net.Socket();\nnewClient1.on('data', (data) => {\n    // console.log(`Counter is ${counter}`);\n    // console.log(`\\n***Listener ${counter} received ${data.toString('utf8')}\\n`);\n    switch (counter) {\n        case 0:\n            chai_1.expect(data.toString('utf8')).to.equal(`*3\\r\\n$9\\r\\nsubscribe\\r\\n$3\\r\\none\\r\\n:1\\r\\n*3\\r\\n$9\\r\\nsubscribe\\r\\n$3\\r\\ntwo\\r\\n:2\\r\\n*3\\r\\n$9\\r\\nsubscribe\\r\\n$5\\r\\nthree\\r\\n:3\\r\\n`);\n            break;\n        case 1:\n            chai_1.expect(data.toString('utf8')).to.equal(`*3\\r\\n$7\\r\\nmessage\\r\\n$3\\r\\ntwo\\r\\n$12\\r\\nmessage to 2\\r\\n`);\n            done();\n            break;\n    }\n    counter++;\n});\ncommon_test_1.sendCommand(newClient1, ['subscribe', 'one', 'two', 'three'])\n    .then((rsp) => {\n    //        console.log(`RESPONSE ${JSON.stringify(rsp)}`);\n    // Responses are sent in separate messages\n    chai_1.expect(rsp).to.eql(['subscribe', 'one', 1]);\n    const anotherClient = new net.Socket();\n    // wait a tick so that the published message is received separately\n    setTimeout(() => {\n        common_test_1.sendCommand(anotherClient, ['publish', 'two', 'message to 2'])\n            .then((rsp) => {\n            chai_1.expect(rsp).to.equal(1);\n        });\n    }, 1500);\n});",
              "err": {},
              "uuid": "3cc2056a-2667-48a8-972d-6c122e1a2b60",
              "parentUUID": "670193ab-4949-4143-8d54-f77b9451506a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9ef09040-3bdc-451e-a34d-4f3a6c8d2a19",
            "c24f59e5-f0ae-40dc-b145-4721c4399f88",
            "93c18633-fa07-459e-a4d3-8d72659b6730",
            "cb6a2a6d-0bb8-4718-9ec8-98c91fda766d",
            "3cc2056a-2667-48a8-972d-6c122e1a2b60"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1528,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "18545e9b-4693-49a7-b22d-cb0d1be0c8c0",
          "title": "resp-server test",
          "fullFile": "/home/lane/git/redis/test/resp/command/server/resp-server.test.ts",
          "file": "/test/resp/command/server/resp-server.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "resp-server test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "53a378b8-6bc7-43b2-93ac-70f612bfdba7",
              "parentUUID": "18545e9b-4693-49a7-b22d-cb0d1be0c8c0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "resp-server test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "baf27a2d-dd17-4784-8fa2-78f28ac987d4",
              "parentUUID": "18545e9b-4693-49a7-b22d-cb0d1be0c8c0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "8a72588f-8e4c-4a0d-b352-96d12728bd5f",
              "title": "server start and stop tests",
              "fullFile": "/home/lane/git/redis/test/resp/command/server/resp-server.test.ts",
              "file": "/test/resp/command/server/resp-server.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should instantiate",
                  "fullTitle": "resp-server test server start and stop tests should instantiate",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            respServer = new resp_server_1.RespServer();\n            chai_1.expect(respServer.constructor.name).to.equal('RespServer');\n        })",
                  "err": {},
                  "uuid": "176a23c2-a0a1-4932-abb8-5790553bfca3",
                  "parentUUID": "8a72588f-8e4c-4a0d-b352-96d12728bd5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit \"ready\" on startup",
                  "fullTitle": "resp-server test server start and stop tests should emit \"ready\" on startup",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
                  "err": {},
                  "uuid": "5d6752e3-72b5-427a-a540-88e6aeb58af4",
                  "parentUUID": "8a72588f-8e4c-4a0d-b352-96d12728bd5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit \"closed\" on shutdown",
                  "fullTitle": "resp-server test server start and stop tests should emit \"closed\" on shutdown",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer.on('closed', () => {\n    done();\n});\nrespServer.stop();",
                  "err": {},
                  "uuid": "304c25d7-6ebc-45a2-abd1-be32fa1d3e35",
                  "parentUUID": "8a72588f-8e4c-4a0d-b352-96d12728bd5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept connections on default ${env.REDIS_HOST}:${env.REDIS_PORT}",
                  "fullTitle": "resp-server test server start and stop tests should accept connections on default ${env.REDIS_HOST}:${env.REDIS_PORT}",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    const client = new net.Socket();\n    client.on('ready', (data) => {\n        respServer.on('closed', () => {\n            done();\n        });\n        respServer.stop();\n    });\n    client.on('connect', (data) => {\n    });\n    client.on('error', (err) => {\n        assert_1.fail(`Unexpected error during connection`, err.stack);\n    });\n    client.connect(Number(process.env.REDIS_PORT || 6379), process.env.REDIS_HOST || 'localhost', () => {\n    });\n});\nrespServer.start();",
                  "err": {},
                  "uuid": "15676a7c-7b29-454c-a120-fb29300639cd",
                  "parentUUID": "8a72588f-8e4c-4a0d-b352-96d12728bd5f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "176a23c2-a0a1-4932-abb8-5790553bfca3",
                "5d6752e3-72b5-427a-a540-88e6aeb58af4",
                "304c25d7-6ebc-45a2-abd1-be32fa1d3e35",
                "15676a7c-7b29-454c-a120-fb29300639cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b0d7d621-8ceb-468c-b49b-77f691072bd5",
              "title": "other server tests",
              "fullFile": "/home/lane/git/redis/test/resp/command/server/resp-server.test.ts",
              "file": "/test/resp/command/server/resp-server.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "resp-server test other server tests \"before all\" hook",
                  "timedOut": false,
                  "duration": 67,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    client = new net.Socket();\n    done();\n});\nrespServer.start();",
                  "err": {},
                  "uuid": "499cdfe3-6977-46c6-9dda-3b95a9a47e41",
                  "parentUUID": "b0d7d621-8ceb-468c-b49b-77f691072bd5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "resp-server test other server tests \"after all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            yield respServer.stop();\n        })",
                  "err": {},
                  "uuid": "0afbcee4-d70e-4de6-be94-b378a8461642",
                  "parentUUID": "b0d7d621-8ceb-468c-b49b-77f691072bd5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should respond properly to the \"ping\" command",
                  "fullTitle": "resp-server test other server tests should respond properly to the \"ping\" command",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['ping'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('PONG');\n    done();\n});",
                  "err": {},
                  "uuid": "9bcefd2f-6e0c-440c-8398-1a2ea8d84031",
                  "parentUUID": "b0d7d621-8ceb-468c-b49b-77f691072bd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond properly to the \"echo\" command",
                  "fullTitle": "resp-server test other server tests should respond properly to the \"echo\" command",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['echo', 'test'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('test');\n    done();\n});",
                  "err": {},
                  "uuid": "b1e20c9e-d13b-43fa-adf1-b5b718b125b7",
                  "parentUUID": "b0d7d621-8ceb-468c-b49b-77f691072bd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond with \"ERR\" when echo command has no parameters",
                  "fullTitle": "resp-server test other server tests should respond with \"ERR\" when echo command has no parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            // Note that 'ReplyError:' is supplied by the redis parser, NOT by the code under test\n            const response = yield common_test_1.sendCommand(client, ['echo']);\n            chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'echo\\' command');\n        })",
                  "err": {},
                  "uuid": "e5ce3122-61ef-4d70-85ac-dbad7e507e33",
                  "parentUUID": "b0d7d621-8ceb-468c-b49b-77f691072bd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond with \"ERR\" when echo command has two or more parameters",
                  "fullTitle": "resp-server test other server tests should respond with \"ERR\" when echo command has two or more parameters",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['echo', 'one', 'two'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'echo\\' command');\n    done();\n});",
                  "err": {},
                  "uuid": "520ddd0e-fc79-45f5-8068-0c9c576542da",
                  "parentUUID": "b0d7d621-8ceb-468c-b49b-77f691072bd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond to the \"time\" command with an array of two strings",
                  "fullTitle": "resp-server test other server tests should respond to the \"time\" command with an array of two strings",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Note: we use hrtime which should already do what we need so we don't validate\ncommon_test_1.sendCommand(client, ['time'])\n    .then((response) => {\n    chai_1.expect(response).to.be.an('array');\n    chai_1.expect(response.length).to.equal(2);\n    chai_1.expect(parseInt(response[0], 10)).to.be.greaterThan(0);\n    chai_1.expect(parseInt(response[1], 10)).to.be.greaterThan(0);\n    done();\n});",
                  "err": {},
                  "uuid": "3abe1436-7f04-4ee8-b0a9-eb886ec8dd41",
                  "parentUUID": "b0d7d621-8ceb-468c-b49b-77f691072bd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond with nulCommand when the command is not known",
                  "fullTitle": "resp-server test other server tests should respond with nulCommand when the command is not known",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['felix', 'the', 'cat'])\n    .then((response) => {\n    chai_1.expect(response).to.match(/^ReplyError: ERR unknown command.*/);\n    done();\n});",
                  "err": {},
                  "uuid": "06283c29-d7c8-4e4c-9604-d399333989d6",
                  "parentUUID": "b0d7d621-8ceb-468c-b49b-77f691072bd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should implement the info command",
                  "fullTitle": "resp-server test other server tests should implement the info command",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield common_test_1.sendCommand(client, ['info']);\n            chai_1.expect(response).to.match(/^# server\\r\\nredis_version:.*/im);\n        })",
                  "err": {},
                  "uuid": "69cb44d3-102a-42cc-bcd8-8242b66172e1",
                  "parentUUID": "b0d7d621-8ceb-468c-b49b-77f691072bd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should implement the SET command",
                  "fullTitle": "resp-server test other server tests should implement the SET command",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['SET', 'this', 'that'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    common_test_1.sendCommand(client, ['GET', 'this'])\n        .then((getresponse) => {\n        chai_1.expect(getresponse).to.equal('that');\n        done();\n    });\n});",
                  "err": {},
                  "uuid": "eeb68435-76a8-4273-b276-a062b6e35af8",
                  "parentUUID": "b0d7d621-8ceb-468c-b49b-77f691072bd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nil string when GET is invoked with unknown parameters",
                  "fullTitle": "resp-server test other server tests should return nil string when GET is invoked with unknown parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['GET', ' '])\n    .then((getresponse) => {\n    chai_1.expect(getresponse).to.equal(null);\n    done();\n});",
                  "err": {},
                  "uuid": "4f2159cc-6903-4cce-bdf0-04a056845753",
                  "parentUUID": "b0d7d621-8ceb-468c-b49b-77f691072bd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should implement the info command with a known parameter",
                  "fullTitle": "resp-server test other server tests should implement the info command with a known parameter",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['info', 'memory'])\n    .then((response) => {\n    chai_1.expect(response).to.match(/^# memory.*/mi);\n    done();\n});",
                  "err": {},
                  "uuid": "5f68479a-017e-4dec-82bb-ee09f24c1d9f",
                  "parentUUID": "b0d7d621-8ceb-468c-b49b-77f691072bd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not respond when info is called with an unknown paramter",
                  "fullTitle": "resp-server test other server tests should not respond when info is called with an unknown paramter",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield common_test_1.sendCommand(client, ['info', 'juicy']);\n            // Don't know how to send an empty - non-null string response yet\n            chai_1.expect(String(response).trim()).to.equal('');\n        })",
                  "err": {},
                  "uuid": "bf821794-1aab-4518-9239-3846c02b41ff",
                  "parentUUID": "b0d7d621-8ceb-468c-b49b-77f691072bd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should report the number of keys in the current database",
                  "fullTitle": "resp-server test other server tests should report the number of keys in the current database",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.be.a('number');\n            chai_1.expect(response).to.be.greaterThan(0);\n        })",
                  "err": {},
                  "uuid": "cc5d0b06-2c73-45fe-9a1a-8d25e35afd19",
                  "parentUUID": "b0d7d621-8ceb-468c-b49b-77f691072bd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support the \"select\" command",
                  "fullTitle": "resp-server test other server tests should support the \"select\" command",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['select', '12']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
                  "uuid": "55ccadc6-aefc-4b46-9374-894e7d567887",
                  "parentUUID": "b0d7d621-8ceb-468c-b49b-77f691072bd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow us to select an invalid database",
                  "fullTitle": "resp-server test other server tests should not allow us to select an invalid database",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['select', 'one']);\n            chai_1.expect(response).to.equal('ReplyError: ERR invalid DB index');\n            response = yield common_test_1.sendCommand(client, ['select', '-12']);\n            chai_1.expect(response).to.equal('ReplyError: ERR DB index is out of range');\n            response = yield common_test_1.sendCommand(client, ['select', '22']);\n            chai_1.expect(response).to.equal('ReplyError: ERR DB index is out of range');\n        })",
                  "err": {},
                  "uuid": "309af2c4-17a6-4ce0-92eb-332bdad41707",
                  "parentUUID": "b0d7d621-8ceb-468c-b49b-77f691072bd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond properly to the \"quit\" command",
                  "fullTitle": "resp-server test other server tests should respond properly to the \"quit\" command",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Note however that the server does not disconnect us.  That is the client's job\ncommon_test_1.sendCommand(client, ['quit'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    done();\n});",
                  "err": {},
                  "uuid": "f7d1f2c0-36a2-433e-a97d-7d5889fa50ee",
                  "parentUUID": "b0d7d621-8ceb-468c-b49b-77f691072bd5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9bcefd2f-6e0c-440c-8398-1a2ea8d84031",
                "b1e20c9e-d13b-43fa-adf1-b5b718b125b7",
                "e5ce3122-61ef-4d70-85ac-dbad7e507e33",
                "520ddd0e-fc79-45f5-8068-0c9c576542da",
                "3abe1436-7f04-4ee8-b0a9-eb886ec8dd41",
                "06283c29-d7c8-4e4c-9604-d399333989d6",
                "69cb44d3-102a-42cc-bcd8-8242b66172e1",
                "eeb68435-76a8-4273-b276-a062b6e35af8",
                "4f2159cc-6903-4cce-bdf0-04a056845753",
                "5f68479a-017e-4dec-82bb-ee09f24c1d9f",
                "bf821794-1aab-4518-9239-3846c02b41ff",
                "cc5d0b06-2c73-45fe-9a1a-8d25e35afd19",
                "55ccadc6-aefc-4b46-9374-894e7d567887",
                "309af2c4-17a6-4ce0-92eb-332bdad41707",
                "f7d1f2c0-36a2-433e-a97d-7d5889fa50ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4e439135-7acc-43b5-9035-f96d3ac1fd40",
          "title": "sdiff-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sdiff-command.test.ts",
          "file": "/test/resp/command/set/sdiff-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sdiff-command test \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "9beeed64-014d-44a7-827a-593b20b0a9f6",
              "parentUUID": "4e439135-7acc-43b5-9035-f96d3ac1fd40",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sdiff-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "57a52b45-8922-4eb2-b005-4683c1d7e526",
              "parentUUID": "4e439135-7acc-43b5-9035-f96d3ac1fd40",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sdiff-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "ec0217f2-9ed7-4578-8828-88778def2abe",
              "parentUUID": "4e439135-7acc-43b5-9035-f96d3ac1fd40",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sdiff-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "d54f85ed-092e-483b-a200-2b7ed29cb45d",
              "parentUUID": "4e439135-7acc-43b5-9035-f96d3ac1fd40",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return EMPTY ARRAY when the source set does not exist",
              "fullTitle": "sdiff-command test should return EMPTY ARRAY when the source set does not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'ary']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "368da4eb-5884-4f04-985a-5117dfccb5b3",
              "parentUUID": "4e439135-7acc-43b5-9035-f96d3ac1fd40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return all members of source set when the destination set does not exist",
              "fullTitle": "sdiff-command test should return all members of source set when the destination set does not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'key1', 'empty']);\n        // REDIS does not guarantee order of the set\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd']);\n    })",
              "err": {},
              "uuid": "be424b6b-0b6e-4866-8ec0-7efcac1850d2",
              "parentUUID": "4e439135-7acc-43b5-9035-f96d3ac1fd40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a proper DIFF of one or more sets",
              "fullTitle": "sdiff-command test should return a proper DIFF of one or more sets",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key3', 'a', 'c', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'key1', 'key2', 'key3']);\n        chai_1.expect(response).to.eql(['b', 'd']);\n    })",
              "err": {},
              "uuid": "b2e63676-6b43-4959-a263-82001ab54080",
              "parentUUID": "4e439135-7acc-43b5-9035-f96d3ac1fd40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should ignore non-list keys",
              "fullTitle": "sdiff-command test should ignore non-list keys",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'list', '1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '2', 'three']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'key1', 'key2', 'key3']);\n        chai_1.expect(response).to.eql(['b', 'd']);\n    })",
              "err": {},
              "uuid": "e6bb3a88-bec3-4c7c-b2a0-26da40b3fe01",
              "parentUUID": "4e439135-7acc-43b5-9035-f96d3ac1fd40",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "368da4eb-5884-4f04-985a-5117dfccb5b3",
            "be424b6b-0b6e-4866-8ec0-7efcac1850d2",
            "b2e63676-6b43-4959-a263-82001ab54080",
            "e6bb3a88-bec3-4c7c-b2a0-26da40b3fe01"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "412c35fe-25fc-443f-b2e2-d25d7803c798",
          "title": "set commands test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/set-commands.test.ts",
          "file": "/test/resp/command/set/set-commands.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "set commands test \"before all\" hook",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "d56b6720-1ae3-409d-a78a-f37c32c9f39e",
              "parentUUID": "412c35fe-25fc-443f-b2e2-d25d7803c798",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "set commands test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "5ccdc058-0e72-495c-a9a7-745707fe7965",
              "parentUUID": "412c35fe-25fc-443f-b2e2-d25d7803c798",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "set commands test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "3454c5c0-cca4-4a3b-ab04-2855a4156244",
              "parentUUID": "412c35fe-25fc-443f-b2e2-d25d7803c798",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "set commands test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "66a0cb71-7496-4a74-8de0-88797f4d892d",
              "parentUUID": "412c35fe-25fc-443f-b2e2-d25d7803c798",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return ZERO when certain commands are applied against key that doesn't exist",
              "fullTitle": "set commands test should return ZERO when certain commands are applied against key that doesn't exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['scard', 'doesnotexist']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['sismember', 'doesnotexist', 'test']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "56004d16-3814-4f14-b565-56620abceb34",
              "parentUUID": "412c35fe-25fc-443f-b2e2-d25d7803c798",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an appropriate error when a \"set\" command is applied to a non-set key",
              "fullTitle": "set commands test should throw an appropriate error when a \"set\" command is applied to a non-set key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['set', 'wrongtype', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sismember', 'wrongtype', 'set']);\n        chai_1.expect(response).to.equal(WRONG_TYPE);\n    })",
              "err": {},
              "uuid": "4a36b17f-f28d-438d-8900-39d4d7ccb7f4",
              "parentUUID": "412c35fe-25fc-443f-b2e2-d25d7803c798",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new key when sadd is called correctly",
              "fullTitle": "set commands test should create a new key when sadd is called correctly",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['sadd', 'skey', 'untest']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'skey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "73b72d24-7d49-4904-92bb-38a94ac38ede",
              "parentUUID": "412c35fe-25fc-443f-b2e2-d25d7803c798",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only report the number of added keys",
              "fullTitle": "set commands test should only report the number of added keys",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['sadd', 'skey', 'untest', 'test2']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'skey']);\n        chai_1.expect(response).to.be.an('array');\n        // Keys are returned in reverse order? - No.\n        // smembers can return a list in any order\n        chai_1.expect(response.length).to.equal(2);\n        chai_1.expect(response.indexOf('test2')).to.be.greaterThan(-1);\n        chai_1.expect(response.indexOf('untest')).to.be.greaterThan(-1);\n    })",
              "err": {},
              "uuid": "8ff39178-bc3a-4e9d-a51d-cef4946a345a",
              "parentUUID": "412c35fe-25fc-443f-b2e2-d25d7803c798",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "e6fbe600-1ae8-40bd-adf6-e03176ce6819",
              "title": "smove, sismember, and scard tests",
              "fullFile": "/home/lane/git/redis/test/resp/command/set/set-commands.test.ts",
              "file": "/test/resp/command/set/set-commands.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should do nothing when smove is called with a source key that does not exist",
                  "fullTitle": "set commands test smove, sismember, and scard tests should do nothing when smove is called with a source key that does not exist",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['smove', 'fromskey', 'toskey', 'nothing']);\n            chai_1.expect(response).to.equal(0);\n            response = yield common_test_1.sendCommand(client, ['exists', 'fromskey', 'toskey']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
                  "uuid": "daa587e3-8bd1-4e49-a08e-16a7859be986",
                  "parentUUID": "e6fbe600-1ae8-40bd-adf6-e03176ce6819",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should move a key from one set to another (and create the target if necessary)",
                  "fullTitle": "set commands test smove, sismember, and scard tests should move a key from one set to another (and create the target if necessary)",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['exists', 'tonewskey']);\n            chai_1.expect(response).to.equal(0);\n            response = yield common_test_1.sendCommand(client, ['smembers', 'tonewskey']);\n            chai_1.expect(response).to.eql([]);\n            response = yield common_test_1.sendCommand(client, ['sadd', uniqueKey, 'key1', 'key2', 'key3']);\n            chai_1.expect(response).to.equal(3);\n            response = yield common_test_1.sendCommand(client, ['smembers', uniqueKey]);\n            // key order is undefined in redis\n            chai_1.expect(response.length).to.equal(3);\n            chai_1.expect(response.indexOf('key3')).to.be.greaterThan(-1);\n            chai_1.expect(response.indexOf('key2')).to.be.greaterThan(-1);\n            chai_1.expect(response.indexOf('key1')).to.be.greaterThan(-1);\n            response = yield common_test_1.sendCommand(client, ['smove', uniqueKey, 'tonewskey', 'key2']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', 'tonewskey', 'key2']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['smembers', uniqueKey]);\n            // key order, again\n            chai_1.expect(response.length).to.equal(2);\n            chai_1.expect(response.indexOf('key3')).to.be.greaterThan(-1);\n            chai_1.expect(response.indexOf('key1')).to.be.greaterThan(-1);\n            response = yield common_test_1.sendCommand(client, ['smembers', 'tonewskey']);\n            chai_1.expect(response).to.eql(['key2']);\n        })",
                  "err": {},
                  "uuid": "fcc4a9e9-18c1-4fa5-9816-ee3ff2b02145",
                  "parentUUID": "e6fbe600-1ae8-40bd-adf6-e03176ce6819",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should report cardinality of a set",
                  "fullTitle": "set commands test smove, sismember, and scard tests should report cardinality of a set",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['scard', uniqueKey]);\n            chai_1.expect(response).to.equal(2);\n            response = yield common_test_1.sendCommand(client, ['scard', 'tonewskey']);\n            chai_1.expect(response).to.equal(1);\n        })",
                  "err": {},
                  "uuid": "10c35dae-4ec3-4e38-a49a-35d345e89a9a",
                  "parentUUID": "e6fbe600-1ae8-40bd-adf6-e03176ce6819",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should report ismember true/false",
                  "fullTitle": "set commands test smove, sismember, and scard tests should report ismember true/false",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['sismember', 'tonewskey', 'key2']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', 'tonewskey', 'key1']);\n            chai_1.expect(response).to.equal(0);\n            response = yield common_test_1.sendCommand(client, ['sismember', uniqueKey, 'key1']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', uniqueKey, 'key3']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', uniqueKey, 'key2']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
                  "uuid": "bd5c9f2b-be8e-42a5-b23f-9f57ea342ed8",
                  "parentUUID": "e6fbe600-1ae8-40bd-adf6-e03176ce6819",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only remove the source element if the destination element already exists",
                  "fullTitle": "set commands test smove, sismember, and scard tests should only remove the source element if the destination element already exists",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const newkey = `move-unique-${new Date().getTime()}`;\n            const newToKey = `move-new-to-key`;\n            let response = yield common_test_1.sendCommand(client, ['sadd', newkey, 'key1', 'key2', 'key3']);\n            chai_1.expect(response).to.equal(3);\n            response = yield common_test_1.sendCommand(client, ['sadd', newToKey, 'key1', 'key2', 'key3']);\n            chai_1.expect(response).to.equal(3);\n            response = yield common_test_1.sendCommand(client, ['smove', newkey, newToKey, 'key2']);\n            // Inconsistent with redis documentation?\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', newkey, 'key2']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
                  "uuid": "c47fc04f-c8cf-49b2-8630-9f8bc437b53e",
                  "parentUUID": "e6fbe600-1ae8-40bd-adf6-e03176ce6819",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "daa587e3-8bd1-4e49-a08e-16a7859be986",
                "fcc4a9e9-18c1-4fa5-9816-ee3ff2b02145",
                "10c35dae-4ec3-4e38-a49a-35d345e89a9a",
                "bd5c9f2b-be8e-42a5-b23f-9f57ea342ed8",
                "c47fc04f-c8cf-49b2-8630-9f8bc437b53e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "56004d16-3814-4f14-b565-56620abceb34",
            "4a36b17f-f28d-438d-8900-39d4d7ccb7f4",
            "73b72d24-7d49-4904-92bb-38a94ac38ede",
            "8ff39178-bc3a-4e9d-a51d-cef4946a345a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b66d42ed-940d-4125-9c4e-294a2892da74",
          "title": "sinter-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sinter-command.test.ts",
          "file": "/test/resp/command/set/sinter-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sinter-command test \"before all\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "8d9fced7-f41c-4eef-aaa8-0c4203a6a12c",
              "parentUUID": "b66d42ed-940d-4125-9c4e-294a2892da74",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sinter-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "d7c81194-846e-4a56-b080-018136b5a335",
              "parentUUID": "b66d42ed-940d-4125-9c4e-294a2892da74",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sinter-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "1422811e-aef3-45d2-b982-0ecaa7484326",
              "parentUUID": "b66d42ed-940d-4125-9c4e-294a2892da74",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sinter-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "e1fc347f-cc7c-4867-a8dd-c9e10f6af5f4",
              "parentUUID": "b66d42ed-940d-4125-9c4e-294a2892da74",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return EMPTY SET when the source set does not exist",
              "fullTitle": "sinter-command test should return EMPTY SET when the source set does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sinter', 'ary']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "8cf28247-8b5f-4d95-aec4-f8b030e53222",
              "parentUUID": "b66d42ed-940d-4125-9c4e-294a2892da74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return EMPTY SET when any other set does not exist",
              "fullTitle": "sinter-command test should return EMPTY SET when any other set does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'empty']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "61b86fc8-9aa7-44b7-b096-9b8fdff63791",
              "parentUUID": "b66d42ed-940d-4125-9c4e-294a2892da74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when one of the keys is not a set",
              "fullTitle": "sinter-command test should fail when one of the keys is not a set",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '1', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'zkey']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n        response = yield common_test_1.sendCommand(client, ['set', 'skey1', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'skey1']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "b0cbf7d9-0ed2-4a53-bd77-cb2940ee3a76",
              "parentUUID": "b66d42ed-940d-4125-9c4e-294a2892da74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the intersection of one or more sets",
              "fullTitle": "sinter-command test should return the intersection of one or more sets",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key3', 'a', 'c', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'key2', 'key3']);\n        chai_1.expect(response).to.eql(['c']);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'a']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key2', 'key1', 'key3']);\n        chai_1.expect(response.length).to.equal(2);\n        // Redis does not guarantee the order of a set\n        chai_1.expect(response.sort()).to.eql(['a', 'c']);\n    })",
              "err": {},
              "uuid": "5c6a4596-76fe-43df-bc38-d42465689287",
              "parentUUID": "b66d42ed-940d-4125-9c4e-294a2892da74",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8cf28247-8b5f-4d95-aec4-f8b030e53222",
            "61b86fc8-9aa7-44b7-b096-9b8fdff63791",
            "b0cbf7d9-0ed2-4a53-bd77-cb2940ee3a76",
            "5c6a4596-76fe-43df-bc38-d42465689287"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b37a2503-3175-4915-950c-ff22459af02a",
          "title": "sinterstore-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sinterstore-command.test.ts",
          "file": "/test/resp/command/set/sinterstore-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sinterstore-command test \"before all\" hook",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "63166baa-f8bb-4074-a89a-346aecc27431",
              "parentUUID": "b37a2503-3175-4915-950c-ff22459af02a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sinterstore-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "089099a2-45eb-49d0-aee3-432dddcf0b94",
              "parentUUID": "b37a2503-3175-4915-950c-ff22459af02a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sinterstore-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "751591b2-bf79-49fd-bdae-47ce24f00b89",
              "parentUUID": "b37a2503-3175-4915-950c-ff22459af02a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sinterstore-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "f55adb5a-336f-4d2f-8e9a-2c8732a5b5db",
              "parentUUID": "b37a2503-3175-4915-950c-ff22459af02a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require a minimum of two parameters",
              "fullTitle": "sinterstore-command test should require a minimum of two parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'ary']);\n        chai_1.expect(response).to.match(/ERR wrong number of arguments for \\'sinterstore\\' command/i);\n    })",
              "err": {},
              "uuid": "420c8b28-2dbe-49dd-bb14-92dabf8a9298",
              "parentUUID": "b37a2503-3175-4915-950c-ff22459af02a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return ZERO when the source set does not exist",
              "fullTitle": "sinterstore-command test should return ZERO when the source set does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'dest', 'src']);\n        chai_1.expect(response).to.eql(0);\n    })",
              "err": {},
              "uuid": "9c519454-dbec-4f63-bc4e-d9d899733da3",
              "parentUUID": "b37a2503-3175-4915-950c-ff22459af02a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overwrite the destination and return the number of keys copied",
              "fullTitle": "sinterstore-command test should overwrite the destination and return the number of keys copied",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c', 'd', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['set', 'key3', 'some text value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'key3', 'key1', 'key2']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'key3']);\n        chai_1.expect(response).to.eql(['c']);\n    })",
              "err": {},
              "uuid": "c11e6b89-8494-4988-8c54-db4369ce93bc",
              "parentUUID": "b37a2503-3175-4915-950c-ff22459af02a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when one of the keys is not a set",
              "fullTitle": "sinterstore-command test should fail when one of the keys is not a set",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '1', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'key1', 'zkey']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n        response = yield common_test_1.sendCommand(client, ['set', 'skey1', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'key1', 'skey1']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "08c62419-9e32-4147-b32c-0602ad8644e8",
              "parentUUID": "b37a2503-3175-4915-950c-ff22459af02a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "420c8b28-2dbe-49dd-bb14-92dabf8a9298",
            "9c519454-dbec-4f63-bc4e-d9d899733da3",
            "c11e6b89-8494-4988-8c54-db4369ce93bc",
            "08c62419-9e32-4147-b32c-0602ad8644e8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ba69787c-1386-468c-b872-93ae73c02a7b",
          "title": "srem-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/srem-command.test.ts",
          "file": "/test/resp/command/set/srem-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "srem-command test \"before all\" hook",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "066e41f1-b880-4edb-83bf-80ae13f3028e",
              "parentUUID": "ba69787c-1386-468c-b872-93ae73c02a7b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "srem-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "8eb619ef-894e-4fed-9b3e-0d335f2aba43",
              "parentUUID": "ba69787c-1386-468c-b872-93ae73c02a7b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "srem-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "06e0f749-fdf8-4e38-96a3-604cb501f7cb",
              "parentUUID": "ba69787c-1386-468c-b872-93ae73c02a7b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "srem-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "8831a36a-18b5-4f92-8861-de1a46cee588",
              "parentUUID": "ba69787c-1386-468c-b872-93ae73c02a7b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 0 when the set does not exist",
              "fullTitle": "srem-command test should return 0 when the set does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['srem', 'set', 'member']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "38d843ea-479d-4816-8aeb-2ebf98c256d7",
              "parentUUID": "ba69787c-1386-468c-b872-93ae73c02a7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return only the number of existing keys that are removed",
              "fullTitle": "srem-command test should return only the number of existing keys that are removed",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'set', 'key1', 'key2', 'key3', 'key4']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['srem', 'set', 'key2', 'not', 'here', 'today', 'key4']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'set']);\n        chai_1.expect(response.sort()).to.eql(['key1', 'key3']);\n    })",
              "err": {},
              "uuid": "4bfb208f-70d2-463c-9f1c-6795b059461c",
              "parentUUID": "ba69787c-1386-468c-b872-93ae73c02a7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove an empty set when all members are removed",
              "fullTitle": "srem-command test should remove an empty set when all members are removed",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['srem', 'set', 'key1', 'key3']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['exists', 'set']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "ad86dc72-4a82-4adc-bc49-2d9fde229c2f",
              "parentUUID": "ba69787c-1386-468c-b872-93ae73c02a7b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "38d843ea-479d-4816-8aeb-2ebf98c256d7",
            "4bfb208f-70d2-463c-9f1c-6795b059461c",
            "ad86dc72-4a82-4adc-bc49-2d9fde229c2f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c671f0ba-af5e-48b2-ada3-fcfa881622fb",
          "title": "sunion-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sunion-command.test.ts",
          "file": "/test/resp/command/set/sunion-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sunion-command test \"before all\" hook",
              "timedOut": false,
              "duration": 38,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "f4a99199-98da-4b58-aa1b-da418f385693",
              "parentUUID": "c671f0ba-af5e-48b2-ada3-fcfa881622fb",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sunion-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "7ef3b0d2-bad6-459d-9e40-fde052eac090",
              "parentUUID": "c671f0ba-af5e-48b2-ada3-fcfa881622fb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sunion-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "4f0fc753-4d69-432b-ad35-70f51914f209",
              "parentUUID": "c671f0ba-af5e-48b2-ada3-fcfa881622fb",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sunion-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "adc2c4d7-c209-45ac-84c6-326339f68f50",
              "parentUUID": "c671f0ba-af5e-48b2-ada3-fcfa881622fb",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return EMPTY SET when the source set does not exist",
              "fullTitle": "sunion-command test should return EMPTY SET when the source set does not exist",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sunion', 'ary']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "14c8f186-8721-4d43-ba5e-e52cea32f096",
              "parentUUID": "c671f0ba-af5e-48b2-ada3-fcfa881622fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the union of a single set",
              "fullTitle": "sunion-command test should return the union of a single set",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['sunion', 'key1']);\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd']);\n    })",
              "err": {},
              "uuid": "12d2d82b-9936-41ce-b712-56f534aad00a",
              "parentUUID": "c671f0ba-af5e-48b2-ada3-fcfa881622fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when sunion requested againt non-set keys",
              "fullTitle": "sunion-command test should fail when sunion requested againt non-set keys",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'string-key', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sunion', 'key1', 'string-key']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "6e4d7ce4-e728-4744-9115-88ef14e78c51",
              "parentUUID": "c671f0ba-af5e-48b2-ada3-fcfa881622fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the union of multiple sets",
              "fullTitle": "sunion-command test should return the union of multiple sets",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key3', 'a', 'c', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sunion', 'key1', 'key2', 'key3']);\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd', 'e']);\n    })",
              "err": {},
              "uuid": "1b1a49a0-9382-4d65-8507-1779986b9f38",
              "parentUUID": "c671f0ba-af5e-48b2-ada3-fcfa881622fb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "14c8f186-8721-4d43-ba5e-e52cea32f096",
            "12d2d82b-9936-41ce-b712-56f534aad00a",
            "6e4d7ce4-e728-4744-9115-88ef14e78c51",
            "1b1a49a0-9382-4d65-8507-1779986b9f38"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2b0b50b3-28e4-42e7-99ed-0ada6382c99a",
          "title": "sunionstore-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sunionstore-command.test.ts",
          "file": "/test/resp/command/set/sunionstore-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sunionstore-command test \"before all\" hook",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "77c71204-6f53-4c42-a3ce-f92987263fa2",
              "parentUUID": "2b0b50b3-28e4-42e7-99ed-0ada6382c99a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sunionstore-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "177a4524-25e3-4f55-97d7-f7f9aba72ace",
              "parentUUID": "2b0b50b3-28e4-42e7-99ed-0ada6382c99a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sunionstore-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "6a11ce2d-98b3-4142-974a-3be3369f6fb7",
              "parentUUID": "2b0b50b3-28e4-42e7-99ed-0ada6382c99a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sunionstore-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "f785fed2-8b77-4238-8827-0c750c53a5e8",
              "parentUUID": "2b0b50b3-28e4-42e7-99ed-0ada6382c99a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require a minimum of two parameters",
              "fullTitle": "sunionstore-command test should require a minimum of two parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sunionstore', 'ary']);\n        chai_1.expect(response).to.match(/ERR wrong number of arguments for \\'sunionstore\\' command/i);\n    })",
              "err": {},
              "uuid": "cc61a84e-8b78-423a-9b36-665fc2038c02",
              "parentUUID": "2b0b50b3-28e4-42e7-99ed-0ada6382c99a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return ZERO when the source set does not exist",
              "fullTitle": "sunionstore-command test should return ZERO when the source set does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sunionstore', 'dest', 'src']);\n        chai_1.expect(response).to.eql(0);\n    })",
              "err": {},
              "uuid": "e093a849-2f29-47b7-8fe0-5f26cbb2dff4",
              "parentUUID": "2b0b50b3-28e4-42e7-99ed-0ada6382c99a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overwrite the destination and return the number of keys copied",
              "fullTitle": "sunionstore-command test should overwrite the destination and return the number of keys copied",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c', 'd', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['set', 'key3', 'some text value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sunionstore', 'key3', 'key1', 'key2']);\n        chai_1.expect(response).to.equal(5);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'key3']);\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd', 'e']);\n    })",
              "err": {},
              "uuid": "57addc96-6657-4b1b-8dbc-adc4827464b1",
              "parentUUID": "2b0b50b3-28e4-42e7-99ed-0ada6382c99a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cc61a84e-8b78-423a-9b36-665fc2038c02",
            "e093a849-2f29-47b7-8fe0-5f26cbb2dff4",
            "57addc96-6657-4b1b-8dbc-adc4827464b1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "da1a3957-0948-426e-8326-f0ad9d8e327c",
          "title": "z-command tests",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/z-commands.test.ts",
          "file": "/test/resp/command/sset/z-commands.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "z-command tests \"before all\" hook",
              "timedOut": false,
              "duration": 95,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "7df5c484-fa58-4904-b815-92eb0243eff4",
              "parentUUID": "da1a3957-0948-426e-8326-f0ad9d8e327c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "z-command tests \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "819e6344-cf5d-4e83-b17f-dbbcccd26b4f",
              "parentUUID": "da1a3957-0948-426e-8326-f0ad9d8e327c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "z-command tests \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "b34e44f6-0bec-41df-8c5a-5b825178ca26",
              "parentUUID": "da1a3957-0948-426e-8326-f0ad9d8e327c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "z-command tests \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "2a52ae52-a819-4bae-a753-5558603af5e8",
              "parentUUID": "da1a3957-0948-426e-8326-f0ad9d8e327c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should support basic operations",
              "fullTitle": "z-command tests should support basic operations",
              "timedOut": false,
              "duration": 75,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueZkey = `key${new Date().getTime()}`;\n        let response = yield common_test_1.sendCommand(client, ['zrange', 'testkey', String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER)]);\n        chai_1.expect(response).to.eql([]);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'testkey', '14', '__proto__']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '8', '5a600e16']);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '9', '5a600e17']);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '10', '5a600e18']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zcard', uniqueZkey]);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql(['5a600e16', '8',\n            '5a600e17', '9',\n            '5a600e18', '10']);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '12', '5a600e17']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['zcount', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER)]);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER)]);\n        chai_1.expect(response.length).to.equal(3);\n        chai_1.expect(response).to.eql(['5a600e16', '5a600e18', '5a600e17']);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql(['5a600e16', '8', '5a600e18', '10', '5a600e17', '12']);\n        response = yield common_test_1.sendCommand(client, ['type', uniqueZkey]);\n        chai_1.expect(response).to.equal('zset');\n        response = yield common_test_1.sendCommand(client, ['zcount', uniqueZkey, '-Infinity', '10']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['zcount', uniqueZkey, 'Negative One', '10']);\n        chai_1.expect(response).to.equal('ReplyError: ERR min or max is not a float');\n        // report syntax error\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'with Scores']);\n        chai_1.expect(response).to.eql('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String('Number.MIN_SAFE_INTEGER'), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql('ReplyError: ERR value is not an integer or out of range');\n        // Remove members without removing keys\n        response = yield common_test_1.sendCommand(client, ['zrem', uniqueZkey, 'does not exist', '5a600e16', '5a600e18', '5a600e17']);\n        chai_1.expect(response).to.equal(3);\n        // Unexpectedly, redis removes the key when the last element is removed\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueZkey]);\n        console.log(`searched for ${uniqueZkey}`);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "61055a7c-4e11-4f23-9b8e-d004a6e295d5",
              "parentUUID": "da1a3957-0948-426e-8326-f0ad9d8e327c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should increase rank",
              "fullTitle": "z-command tests should increase rank",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueZkey = `incrkey${new Date().getTime()}`;\n        let response;\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '1', 'first']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '2', 'second']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '3', 'third']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '4', 'fourth']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, '2', 'first']);\n        chai_1.expect(response).to.equal('3');\n        // Validate zscore\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'first']);\n        // expect(response).to.equal('3');\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'second']);\n        // expect(response).to.equal('2');\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'third']);\n        // expect(response).to.equal('3');\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'fourth']);\n        // expect(response).to.equal('4');\n        //\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'first']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'second']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'third']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'fourth']);\n        chai_1.expect(response).to.equal(3);\n        // expect(response).to.match(/^ReplyError: ERR unknown command.*/);\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, '-20', 'fourth']);\n        chai_1.expect(response).to.equal('-16');\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, `-${Number.MIN_SAFE_INTEGER + 1}.${Number.MAX_SAFE_INTEGER}`, 'fourth']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not a valid float');\n        // Should create a key if it doesn't exist\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, '-20', 'fifth']);\n        chai_1.expect(response).to.equal('-20');\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql(['fifth', '-20', 'fourth', '-16', 'second', '2', 'first', '3', 'third', '3']);\n    })",
              "err": {},
              "uuid": "9748f163-096d-477c-b020-574968e43f58",
              "parentUUID": "da1a3957-0948-426e-8326-f0ad9d8e327c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "61055a7c-4e11-4f23-9b8e-d004a6e295d5",
            "9748f163-096d-477c-b020-574968e43f58"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 93,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1859af74-293f-434d-9d54-822684b2b59d",
          "title": "zadd command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zadd-command.test.ts",
          "file": "/test/resp/command/sset/zadd-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zadd command test \"before all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "75d1ac50-a913-491d-b667-59ba3df03578",
              "parentUUID": "1859af74-293f-434d-9d54-822684b2b59d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zadd command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "7fbc1763-366c-4997-89c2-c6335523f740",
              "parentUUID": "1859af74-293f-434d-9d54-822684b2b59d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zadd command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "b405636f-89d6-4038-aa85-6a903df99335",
              "parentUUID": "1859af74-293f-434d-9d54-822684b2b59d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zadd command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "9d263c91-e784-4866-b65a-c367a955cb4f",
              "parentUUID": "1859af74-293f-434d-9d54-822684b2b59d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require at least 3 parameters",
              "fullTitle": "zadd command test should require at least 3 parameters",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['zadd']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "45925217-879e-4a40-8780-a83cf66dc49d",
              "parentUUID": "1859af74-293f-434d-9d54-822684b2b59d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject even parameter counts",
              "fullTitle": "zadd command test should reject even parameter counts",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something', '456']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something', '456', 'another', '765']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something', '456', 'another', '765', 'test']);\n        // The \"something\" key should already exist so we only count 2 new fields\n        chai_1.expect(response).to.equal(2);\n    })",
              "err": {},
              "uuid": "203a6b1e-c6b3-46de-be74-92d21ef78cdb",
              "parentUUID": "1859af74-293f-434d-9d54-822684b2b59d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject an attempt to store non-floatish rankings",
              "fullTitle": "zadd command test should reject an attempt to store non-floatish rankings",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '__data__', 'something']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not a valid float');\n    })",
              "err": {},
              "uuid": "5335be6a-aa1a-415b-8f94-3068256cdcc7",
              "parentUUID": "1859af74-293f-434d-9d54-822684b2b59d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "45925217-879e-4a40-8780-a83cf66dc49d",
            "203a6b1e-c6b3-46de-be74-92d21ef78cdb",
            "5335be6a-aa1a-415b-8f94-3068256cdcc7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4520aaa9-c3d0-4eca-9c90-3ed271be0d3b",
          "title": "zrange-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zrange-command.test.ts",
          "file": "/test/resp/command/sset/zrange-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zrange-command test \"before all\" hook",
              "timedOut": false,
              "duration": 85,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "950eccdd-6536-472c-918a-344e64fdc259",
              "parentUUID": "4520aaa9-c3d0-4eca-9c90-3ed271be0d3b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zrange-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "5a4e4ff3-6de5-4dad-b715-cc66264731c6",
              "parentUUID": "4520aaa9-c3d0-4eca-9c90-3ed271be0d3b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zrange-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "9b72e382-332d-49a6-a403-3df4daef849c",
              "parentUUID": "4520aaa9-c3d0-4eca-9c90-3ed271be0d3b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zrange-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "ab2cfab9-f079-4ba7-a7be-51ef3b42f10d",
              "parentUUID": "4520aaa9-c3d0-4eca-9c90-3ed271be0d3b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should reproduce the redis documentation examples",
              "fullTitle": "zrange-command test should reproduce the redis documentation examples",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'one']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '2', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '3', 'three']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '0', '-1']);\n        chai_1.expect(response).to.eql(['one', 'two', 'three']);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '2', '3']);\n        chai_1.expect(response).to.eql(['three']);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '-2', '-1']);\n        chai_1.expect(response).to.eql(['two', 'three']);\n    })",
              "err": {},
              "uuid": "0fb776fe-9e46-4232-b4e8-ad46a53049cb",
              "parentUUID": "4520aaa9-c3d0-4eca-9c90-3ed271be0d3b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should also reproduce the second documented example",
              "fullTitle": "zrange-command test should also reproduce the second documented example",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '0', '1', 'withscores']);\n        chai_1.expect(response).to.eql(['one', '1', 'two', '2']);\n    })",
              "err": {},
              "uuid": "0355525f-5719-4051-a929-982ad3a06fb7",
              "parentUUID": "4520aaa9-c3d0-4eca-9c90-3ed271be0d3b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0fb776fe-9e46-4232-b4e8-ad46a53049cb",
            "0355525f-5719-4051-a929-982ad3a06fb7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ee14b136-ad0a-45dd-8870-461ad9458f6f",
          "title": "zrank-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zrank-command.test.ts",
          "file": "/test/resp/command/sset/zrank-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zrank-command test \"before all\" hook",
              "timedOut": false,
              "duration": 37,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "dda4e618-3d8b-41af-b65e-b3a0136c4b4a",
              "parentUUID": "ee14b136-ad0a-45dd-8870-461ad9458f6f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zrank-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "fc878a0a-b728-4148-9b13-38c2221b1334",
              "parentUUID": "ee14b136-ad0a-45dd-8870-461ad9458f6f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zrank-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "1ecb29f7-729a-4705-88ed-c18af6d5c470",
              "parentUUID": "ee14b136-ad0a-45dd-8870-461ad9458f6f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zrank-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "8791fa0a-1409-4acd-89d8-b91676e41a06",
              "parentUUID": "ee14b136-ad0a-45dd-8870-461ad9458f6f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when the ZSET does not exist",
              "fullTitle": "zrank-command test should return NIL when the ZSET does not exist",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrank', 'zset', 'member']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "561f1dba-f307-4e92-92a7-fa34fbe76915",
              "parentUUID": "ee14b136-ad0a-45dd-8870-461ad9458f6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NIL when the ZSET exists but the key does not",
              "fullTitle": "zrank-command test should return NIL when the ZSET exists but the key does not",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '23.3', 'member']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrank', 'zset', 'membre']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['exists', 'zset']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "77340895-6f06-44b3-97da-63792aa7b111",
              "parentUUID": "ee14b136-ad0a-45dd-8870-461ad9458f6f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "561f1dba-f307-4e92-92a7-fa34fbe76915",
            "77340895-6f06-44b3-97da-63792aa7b111"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "17e1dfc0-1693-47ad-972d-67e0055a8523",
          "title": "zrem-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zrem-command.test.ts",
          "file": "/test/resp/command/sset/zrem-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zrem-command test \"before all\" hook",
              "timedOut": false,
              "duration": 36,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "6e20c3b7-3922-4ec5-a2c9-92b22b882807",
              "parentUUID": "17e1dfc0-1693-47ad-972d-67e0055a8523",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zrem-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "1ad1aa04-c734-4028-a2d9-573d0ae9c809",
              "parentUUID": "17e1dfc0-1693-47ad-972d-67e0055a8523",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zrem-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "45302b87-71f1-42c4-9e73-1d31f26bdb54",
              "parentUUID": "17e1dfc0-1693-47ad-972d-67e0055a8523",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zrem-command test \"after each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "0dd76dd7-be3d-42ca-8124-f02f393daf83",
              "parentUUID": "17e1dfc0-1693-47ad-972d-67e0055a8523",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should remove a key from a sorted set",
              "fullTitle": "zrem-command test should remove a key from a sorted set",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'one']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '2', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '3', 'three']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrem', 'zset', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '0', '-1', 'withscores']);\n        chai_1.expect(response).to.eql(['one', '1', 'three', '3']);\n    })",
              "err": {},
              "uuid": "16ca1687-0b40-4cab-a7f6-6b6878bb7123",
              "parentUUID": "17e1dfc0-1693-47ad-972d-67e0055a8523",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "16ca1687-0b40-4cab-a7f6-6b6878bb7123"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "fedd1507-4d7d-429d-87a5-111bf3e72494",
          "title": "getset-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/getset-command.test.ts",
          "file": "/test/resp/command/string/getset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "getset-command test \"before all\" hook",
              "timedOut": false,
              "duration": 39,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "bde77ee7-29ab-419c-9c6a-19f8d2221b4c",
              "parentUUID": "fedd1507-4d7d-429d-87a5-111bf3e72494",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "getset-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "b918692e-2147-41bc-ab28-9023eeed0ccf",
              "parentUUID": "fedd1507-4d7d-429d-87a5-111bf3e72494",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "getset-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "d2142261-aa5b-4da3-adbf-3890409b7d05",
              "parentUUID": "fedd1507-4d7d-429d-87a5-111bf3e72494",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "getset-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "e5f17ee4-48aa-440a-ab64-5f002b61e713",
              "parentUUID": "fedd1507-4d7d-429d-87a5-111bf3e72494",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when the original key does not exist",
              "fullTitle": "getset-command test should report NIL when the original key does not exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['getset', uniqueKey, '0']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "c4205a4f-6d89-49d9-89ad-9a1959a6be7d",
              "parentUUID": "fedd1507-4d7d-429d-87a5-111bf3e72494",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report the previous value of the key",
              "fullTitle": "getset-command test should report the previous value of the key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['getset', uniqueKey, 'ninety nine']);\n        chai_1.expect(response).to.equal('0');\n        response = yield common_test_1.sendCommand(client, ['getset', uniqueKey, 'nothing']);\n        chai_1.expect(response).to.equal('ninety nine');\n    })",
              "err": {},
              "uuid": "dd1e4a46-3263-4863-ba4f-b4abbd20273f",
              "parentUUID": "fedd1507-4d7d-429d-87a5-111bf3e72494",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4205a4f-6d89-49d9-89ad-9a1959a6be7d",
            "dd1e4a46-3263-4863-ba4f-b4abbd20273f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "89738628-6788-41b6-9e31-50d91ebf3596",
          "title": "incr/decr command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/incr-command.test.ts",
          "file": "/test/resp/command/string/incr-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "incr/decr command test \"before all\" hook",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a millisecond TTL to validate incr respects TTL\n    common_test_1.sendCommand(new net.Socket(), ['set', 'ttlkey', '100', 'PX', '3'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
              "uuid": "90b67380-f4b0-4713-bbc8-26af0efeb905",
              "parentUUID": "89738628-6788-41b6-9e31-50d91ebf3596",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "incr/decr command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "cf052ba1-09bf-4b40-96e9-31442078e811",
              "parentUUID": "89738628-6788-41b6-9e31-50d91ebf3596",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "incr/decr command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "8edc6591-b2ca-4df9-a729-4c7a865eb67c",
              "parentUUID": "89738628-6788-41b6-9e31-50d91ebf3596",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "incr/decr command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a8cd07b0-02f6-4140-9181-4e3b0707c97d",
              "parentUUID": "89738628-6788-41b6-9e31-50d91ebf3596",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ONE when incr called against unknown key",
              "fullTitle": "incr/decr command test should report ONE when incr called against unknown key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['incr', 'incr-key']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "24c4cc7c-9bab-424a-938b-5c848608bb25",
              "parentUUID": "89738628-6788-41b6-9e31-50d91ebf3596",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incr/decr command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['get', 'incr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('1');\n    })",
              "err": {},
              "uuid": "c36e03e1-6e33-4f18-8bae-3a569162b43f",
              "parentUUID": "89738628-6788-41b6-9e31-50d91ebf3596",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incr/decr command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            response = yield common_test_1.sendCommand(new net.Socket(), ['set', 'incr-key', '9007199254740990']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(new net.Socket(), ['incr', 'incr-key']);\n            chai_1.expect(response).to.equal(Number.MAX_SAFE_INTEGER);\n            response = yield common_test_1.sendCommand(new net.Socket(), ['incr', 'incr-key']);\n            chai_1.expect(response).to.equal('ReplyError: ERR increment or decrement would overflow');\n        }\n    })",
              "err": {},
              "uuid": "199db496-281e-4fcb-9db3-12b05a697b84",
              "parentUUID": "89738628-6788-41b6-9e31-50d91ebf3596",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report -1 when decr called against unknown key",
              "fullTitle": "incr/decr command test should report -1 when decr called against unknown key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['decr', 'decr-key']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(-1);\n    })",
              "err": {},
              "uuid": "d2299673-64ff-45b5-993e-33dd5c4421f2",
              "parentUUID": "89738628-6788-41b6-9e31-50d91ebf3596",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incr/decr command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['get', 'decr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('-1');\n    })",
              "err": {},
              "uuid": "4d11511f-b42a-44b1-a467-880d88ed19c4",
              "parentUUID": "89738628-6788-41b6-9e31-50d91ebf3596",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incr/decr command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            let response = yield common_test_1.sendCommand(new net.Socket(), ['set', 'decr-key', '-9007199254740990']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(new net.Socket(), ['decr', 'decr-key']);\n            chai_1.expect(response).to.equal(Number.MIN_SAFE_INTEGER);\n            response = yield common_test_1.sendCommand(new net.Socket(), ['decr', 'decr-key']);\n            chai_1.expect(response).to.equal('ReplyError: ERR increment or decrement would overflow');\n        }\n    })",
              "err": {},
              "uuid": "8ed6ca18-0582-49ad-b9fa-1cc1f86aeb06",
              "parentUUID": "89738628-6788-41b6-9e31-50d91ebf3596",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect TTL",
              "fullTitle": "incr/decr command test should respect TTL",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['get', 'ttlkey']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "7efd3389-b393-452a-adfa-bce10483b042",
              "parentUUID": "89738628-6788-41b6-9e31-50d91ebf3596",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to increment a HASH value",
              "fullTitle": "incr/decr command test should fail to increment a HASH value",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `test-incr-${new Date().getTime()}`;\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['incr', uniqueKey]);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "7b8cd4e8-296b-415d-af6c-5fa768c79e4c",
              "parentUUID": "89738628-6788-41b6-9e31-50d91ebf3596",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "24c4cc7c-9bab-424a-938b-5c848608bb25",
            "c36e03e1-6e33-4f18-8bae-3a569162b43f",
            "199db496-281e-4fcb-9db3-12b05a697b84",
            "d2299673-64ff-45b5-993e-33dd5c4421f2",
            "4d11511f-b42a-44b1-a467-880d88ed19c4",
            "8ed6ca18-0582-49ad-b9fa-1cc1f86aeb06",
            "7efd3389-b393-452a-adfa-bce10483b042",
            "7b8cd4e8-296b-415d-af6c-5fa768c79e4c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 72,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "eecedca2-fc96-43a4-822e-ba1ea4f1dbe4",
          "title": "incrby/decrby command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/incrby-command.test.ts",
          "file": "/test/resp/command/string/incrby-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "incrby/decrby command test \"before all\" hook",
              "timedOut": false,
              "duration": 27,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a millisecond TTL to validate incrby respects TTL\n    common_test_1.sendCommand(client, ['set', 'ttlkey', '100', 'PX', '3'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
              "uuid": "8a567fe8-bc43-4a08-835a-15bb2a337625",
              "parentUUID": "eecedca2-fc96-43a4-822e-ba1ea4f1dbe4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "incrby/decrby command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "25cccc74-fef4-4ec4-b8c4-bc32a7abd3f3",
              "parentUUID": "eecedca2-fc96-43a4-822e-ba1ea4f1dbe4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "incrby/decrby command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "326a9cbd-b108-4bd1-8e6e-a8bd3895cb73",
              "parentUUID": "eecedca2-fc96-43a4-822e-ba1ea4f1dbe4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "incrby/decrby command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "71fea403-0b2a-4500-97d7-3cee797c7706",
              "parentUUID": "eecedca2-fc96-43a4-822e-ba1ea4f1dbe4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report the INCREMENT when incrby called against non-existing key",
              "fullTitle": "incrby/decrby command test should report the INCREMENT when incrby called against non-existing key",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['incrby', 'incr-key', '10']);\n        chai_1.expect(response).to.be.a('number');\n        // This is how redis behaves\n        chai_1.expect(response).to.equal(10);\n    })",
              "err": {},
              "uuid": "91ff7021-6a2f-490b-85d1-7f244325f890",
              "parentUUID": "eecedca2-fc96-43a4-822e-ba1ea4f1dbe4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incrby/decrby command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['get', 'incr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('10');\n    })",
              "err": {},
              "uuid": "cd4222f5-3580-43b5-bc71-a06d7d6d4375",
              "parentUUID": "eecedca2-fc96-43a4-822e-ba1ea4f1dbe4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incrby/decrby command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            response = yield common_test_1.sendCommand(client, ['set', 'incr-key', '9007199254740981']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['incrby', 'incr-key', '10']);\n            chai_1.expect(response).to.equal(Number.MAX_SAFE_INTEGER);\n            response = yield common_test_1.sendCommand(client, ['incrby', 'incr-key', '110']);\n            chai_1.expect(response).to.equal('ReplyError: ERR increment or decrement would overflow');\n        }\n    })",
              "err": {},
              "uuid": "8175ec8c-9a5d-4459-9a4b-1e2d634e0c7c",
              "parentUUID": "eecedca2-fc96-43a4-822e-ba1ea4f1dbe4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report the NEGATIVE increment when decrby called against unknown key",
              "fullTitle": "incrby/decrby command test should report the NEGATIVE increment when decrby called against unknown key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['decrby', 'decr-key', '12']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(-12);\n    })",
              "err": {},
              "uuid": "79eef511-6886-4cf0-a3b5-87d650f4b90e",
              "parentUUID": "eecedca2-fc96-43a4-822e-ba1ea4f1dbe4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support negative increment and positive decrement",
              "fullTitle": "incrby/decrby command test should support negative increment and positive decrement",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['incrby', 'negincr', '-12']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(-12);\n        response = yield common_test_1.sendCommand(client, ['decrby', 'negincr', '-24']);\n        chai_1.expect(response).to.equal(12);\n    })",
              "err": {},
              "uuid": "347795a7-d3b9-40fb-a72b-e13a39ae395a",
              "parentUUID": "eecedca2-fc96-43a4-822e-ba1ea4f1dbe4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incrby/decrby command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['get', 'decr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('-12');\n    })",
              "err": {},
              "uuid": "20322e41-c640-4549-9f90-5e3794640153",
              "parentUUID": "eecedca2-fc96-43a4-822e-ba1ea4f1dbe4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incrby/decrby command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            response = yield common_test_1.sendCommand(client, ['set', 'decr-key', '-9007199254740981']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['decrby', 'decr-key', '10']);\n            chai_1.expect(response).to.equal(Number.MIN_SAFE_INTEGER);\n            // This does not seem to be exact\n            // response = await sendCommand(client, ['decrby', 'decr-key', String(Number.MAX_SAFE_INTEGER)]);\n            // expect(response).to.equal('ReplyError: Error: increment or decrement would overflow');\n        }\n    })",
              "err": {},
              "uuid": "e32a1570-495d-4486-a289-90b6266812d9",
              "parentUUID": "eecedca2-fc96-43a4-822e-ba1ea4f1dbe4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect TTL",
              "fullTitle": "incrby/decrby command test should respect TTL",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['get', 'ttlkey']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "185846ed-9bdf-416f-b333-377b6a53fa05",
              "parentUUID": "eecedca2-fc96-43a4-822e-ba1ea4f1dbe4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to increment a HASH value",
              "fullTitle": "incrby/decrby command test should fail to increment a HASH value",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `test-incr-${new Date().getTime()}`;\n        let response = yield common_test_1.sendCommand(client, ['hset', uniqueKey, 'one', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['incrby', uniqueKey, '12']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "fe44f42e-fceb-4be6-a1f4-5151469d549e",
              "parentUUID": "eecedca2-fc96-43a4-822e-ba1ea4f1dbe4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "91ff7021-6a2f-490b-85d1-7f244325f890",
            "cd4222f5-3580-43b5-bc71-a06d7d6d4375",
            "8175ec8c-9a5d-4459-9a4b-1e2d634e0c7c",
            "79eef511-6886-4cf0-a3b5-87d650f4b90e",
            "347795a7-d3b9-40fb-a72b-e13a39ae395a",
            "20322e41-c640-4549-9f90-5e3794640153",
            "e32a1570-495d-4486-a289-90b6266812d9",
            "185846ed-9bdf-416f-b333-377b6a53fa05",
            "fe44f42e-fceb-4be6-a1f4-5151469d549e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3ef5e5cf-4134-48cf-860a-151daa0b860a",
          "title": "mget-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/mget-command.test.ts",
          "file": "/test/resp/command/string/mget-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "mget-command test \"before all\" hook",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "add034e5-2d9a-4aca-b5df-d1d2b2cd84c3",
              "parentUUID": "3ef5e5cf-4134-48cf-860a-151daa0b860a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "mget-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "ef5ba670-56ea-4b35-8638-25242d42e39d",
              "parentUUID": "3ef5e5cf-4134-48cf-860a-151daa0b860a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "mget-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "ba47eb0c-5955-4078-b986-3a62b18788ab",
              "parentUUID": "3ef5e5cf-4134-48cf-860a-151daa0b860a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "mget-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "2134d86f-e59c-4fcc-846d-c741ad88a97b",
              "parentUUID": "3ef5e5cf-4134-48cf-860a-151daa0b860a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when the key does not exist",
              "fullTitle": "mget-command test should return NIL when the key does not exist",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mget', 'zset', 'member']);\n        chai_1.expect(response).to.eql([null, null]);\n    })",
              "err": {},
              "uuid": "2dbd8e04-1019-4008-b68e-ff4300f95a55",
              "parentUUID": "3ef5e5cf-4134-48cf-860a-151daa0b860a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return multiple values for string keys as requested",
              "fullTitle": "mget-command test should return multiple values for string keys as requested",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mset', 'key1', '1', 'key2', '2', 'key3', '3']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['mget', 'key2', 'key1', 'noneya', 'key3']);\n        chai_1.expect(response).to.eql(['2', '1', null, '3']);\n    })",
              "err": {},
              "uuid": "0d7926a2-e61b-46f1-91cb-e141feefd241",
              "parentUUID": "3ef5e5cf-4134-48cf-860a-151daa0b860a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NIL for ZSET, LIST, and HASH types as well",
              "fullTitle": "mget-command test should return NIL for ZSET, LIST, and HASH types as well",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'member']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'list', 'value']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['hset', 'hash', 'field', 'value']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['mget', 'key2', 'key1', 'list', 'key3', 'hash', 'zset']);\n        chai_1.expect(response).to.eql(['2', '1', null, '3', null, null]);\n    })",
              "err": {},
              "uuid": "6aaf5287-f3ec-4595-95c9-ed9ab6e6d135",
              "parentUUID": "3ef5e5cf-4134-48cf-860a-151daa0b860a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2dbd8e04-1019-4008-b68e-ff4300f95a55",
            "0d7926a2-e61b-46f1-91cb-e141feefd241",
            "6aaf5287-f3ec-4595-95c9-ed9ab6e6d135"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a29ffa85-c470-471e-b11c-c19167e5e483",
          "title": "mset-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/mset-command.test.ts",
          "file": "/test/resp/command/string/mset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "mset-command test \"before all\" hook",
              "timedOut": false,
              "duration": 27,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "690f3a83-10eb-4136-868f-ddb7cdb81a94",
              "parentUUID": "a29ffa85-c470-471e-b11c-c19167e5e483",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "mset-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "7522f3ae-ccd6-457f-be02-0b9ff569d92b",
              "parentUUID": "a29ffa85-c470-471e-b11c-c19167e5e483",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "mset-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "fedf6ac7-b889-4263-85e2-1106fd266970",
              "parentUUID": "a29ffa85-c470-471e-b11c-c19167e5e483",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "mset-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "25ea5c68-87a6-4722-90a3-e8a9d2e90c31",
              "parentUUID": "a29ffa85-c470-471e-b11c-c19167e5e483",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create multiple keys at once",
              "fullTitle": "mset-command test should create multiple keys at once",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mset', 'key1', 'Hello', 'key2', 'world']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'key1']);\n        chai_1.expect(response).to.equal('Hello');\n        response = yield common_test_1.sendCommand(client, ['get', 'key2']);\n        chai_1.expect(response).to.equal('world');\n    })",
              "err": {},
              "uuid": "a750d7ba-9f32-41d0-85dc-97173698645d",
              "parentUUID": "a29ffa85-c470-471e-b11c-c19167e5e483",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only accept an even number of parameters",
              "fullTitle": "mset-command test should only accept an even number of parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['msEt', 'wrong', 'number', 'of']);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for MSET/i);\n    })",
              "err": {},
              "uuid": "453f9c6b-3a12-4c91-8514-1cbcb179b79b",
              "parentUUID": "a29ffa85-c470-471e-b11c-c19167e5e483",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a750d7ba-9f32-41d0-85dc-97173698645d",
            "453f9c6b-3a12-4c91-8514-1cbcb179b79b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "54f05714-6695-44a6-b118-7336532110f5",
          "title": "set-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/set-command.test.ts",
          "file": "/test/resp/command/string/set-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "set-command test \"before all\" hook",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "fe29a4da-98aa-4053-a966-ebbec2b9d555",
              "parentUUID": "54f05714-6695-44a6-b118-7336532110f5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "set-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "ca1e8005-ff99-4abf-af1b-b92451152b60",
              "parentUUID": "54f05714-6695-44a6-b118-7336532110f5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "set-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "5233c29b-5f58-48eb-a874-987dd889299e",
              "parentUUID": "54f05714-6695-44a6-b118-7336532110f5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "set-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "b992da18-7074-4319-8c7b-61c8165238bf",
              "parentUUID": "54f05714-6695-44a6-b118-7336532110f5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should allow us to set a several second ttl",
              "fullTitle": "set-command test should allow us to set a several second ttl",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // During local testing there are 8 milliseconds from put to get\n        response = yield common_test_1.sendCommand(client, ['set', 'TTLtest', 'key', 'EX', '1']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "c4d613da-e42b-4ab1-93e8-93dfce4aa979",
              "parentUUID": "54f05714-6695-44a6-b118-7336532110f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke NX after XX",
              "fullTitle": "set-command test should NOT allow SET to invoke NX after XX",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'XX', 'NX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "0d0cd301-2e54-4fa7-856f-fd33ad6d54d4",
              "parentUUID": "54f05714-6695-44a6-b118-7336532110f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke XX after NX",
              "fullTitle": "set-command test should NOT allow SET to invoke XX after NX",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'NX', 'XX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "3c6fc11e-c0bf-4245-9902-4d716ba1d5b9",
              "parentUUID": "54f05714-6695-44a6-b118-7336532110f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return nil when SET invoked with XX on a key that doesn't exist",
              "fullTitle": "set-command test should return nil when SET invoked with XX on a key that doesn't exist",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `TEST${new Date().getTime()}`;\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'key', 'XX']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "e1a0af46-793a-4f8b-8f4c-c85612a1a4de",
              "parentUUID": "54f05714-6695-44a6-b118-7336532110f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return OK when SET invoked with XX on a key that DOES exist",
              "fullTitle": "set-command test should return OK when SET invoked with XX on a key that DOES exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `TEST${new Date().getTime()}`;\n        // set the key with NX first to validate that functionality\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'key', 'NX']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'new value', 'XX']);\n        chai_1.expect(response).to.equal('OK');\n        // Now validate that the key is what we said last\n        response = yield common_test_1.sendCommand(client, ['get', uniqueKey]);\n        chai_1.expect(response).to.equal('new value');\n    })",
              "err": {},
              "uuid": "ec90ca45-716d-4683-a652-4b8516a90fc5",
              "parentUUID": "54f05714-6695-44a6-b118-7336532110f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke EX and PX simultaneously",
              "fullTitle": "set-command test should NOT allow SET to invoke EX and PX simultaneously",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Note: Our behavior is different from redis.  This error is 'wrong number of args'\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'EX', '100', 'PX', '100']);\n        chai_1.expect(response).to.match(/^ReplyError: ERR syntax error/);\n    })",
              "err": {},
              "uuid": "2f809a8e-2e04-4166-9cd8-18b0edfadcca",
              "parentUUID": "54f05714-6695-44a6-b118-7336532110f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow us to set a millisecond ttl",
              "fullTitle": "set-command test should allow us to set a millisecond ttl",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // During local teseting there are 8 milliseconds from put to get\n        response = yield common_test_1.sendCommand(client, ['set', 'MILLItest', 'key', 'PX', '1']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "c73ecb20-5076-42bb-a949-77cdb6d68f4d",
              "parentUUID": "54f05714-6695-44a6-b118-7336532110f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prove that the one second TTL has expired",
              "fullTitle": "set-command test should prove that the one second TTL has expired",
              "timedOut": false,
              "duration": 1002,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "setTimeout(() => {\n    common_test_1.sendCommand(client, ['get', 'TTLtest'])\n        .then((responseGet) => {\n        chai_1.expect(responseGet).to.equal(null);\n        done();\n    });\n}, 1000);",
              "err": {},
              "uuid": "a8edd46e-befe-4001-a38d-60c1c3365222",
              "parentUUID": "54f05714-6695-44a6-b118-7336532110f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not accept unknown parameters",
              "fullTitle": "set-command test should not accept unknown parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'Q']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "da76ad8a-69aa-4faa-ba7b-4c9a165294b6",
              "parentUUID": "54f05714-6695-44a6-b118-7336532110f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke PX after EX",
              "fullTitle": "set-command test should NOT allow SET to invoke PX after EX",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'EX', '100', 'PX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "79c423da-c1ab-4d91-9cc4-0573a693833b",
              "parentUUID": "54f05714-6695-44a6-b118-7336532110f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke EX after PX",
              "fullTitle": "set-command test should NOT allow SET to invoke EX after PX",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'PX', '100', 'EX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "e9acb365-94f0-48d4-b44a-d83bb1ecb908",
              "parentUUID": "54f05714-6695-44a6-b118-7336532110f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow a TTL less than 1ms",
              "fullTitle": "set-command test should not allow a TTL less than 1ms",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'MILLItest', 'key', 'PX', '0']);\n        chai_1.expect(response).to.equal('ReplyError: ERR invalid expire time in set');\n    })",
              "err": {},
              "uuid": "50f31ccf-a26e-4a09-baae-e01ab8fea0d2",
              "parentUUID": "54f05714-6695-44a6-b118-7336532110f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prove that the millisecond TTL has expired",
              "fullTitle": "set-command test should prove that the millisecond TTL has expired",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "setTimeout(() => {\n    common_test_1.sendCommand(client, ['get', 'MILLItest'])\n        .then((responseGet) => {\n        chai_1.expect(responseGet).to.equal(null);\n        done();\n    });\n}, 10);",
              "err": {},
              "uuid": "04f191b8-2153-480b-b69c-86dfb17c1f4b",
              "parentUUID": "54f05714-6695-44a6-b118-7336532110f5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c4d613da-e42b-4ab1-93e8-93dfce4aa979",
            "0d0cd301-2e54-4fa7-856f-fd33ad6d54d4",
            "3c6fc11e-c0bf-4245-9902-4d716ba1d5b9",
            "e1a0af46-793a-4f8b-8f4c-c85612a1a4de",
            "ec90ca45-716d-4683-a652-4b8516a90fc5",
            "2f809a8e-2e04-4166-9cd8-18b0edfadcca",
            "c73ecb20-5076-42bb-a949-77cdb6d68f4d",
            "a8edd46e-befe-4001-a38d-60c1c3365222",
            "da76ad8a-69aa-4faa-ba7b-4c9a165294b6",
            "79c423da-c1ab-4d91-9cc4-0573a693833b",
            "e9acb365-94f0-48d4-b44a-d83bb1ecb908",
            "50f31ccf-a26e-4a09-baae-e01ab8fea0d2",
            "04f191b8-2153-480b-b69c-86dfb17c1f4b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1044,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0e9d8eae-de94-4945-8761-f82e0d8fd53b",
          "title": "setnx-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/setnx-command.test.ts",
          "file": "/test/resp/command/string/setnx-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "setnx-command test \"before all\" hook",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "83ff135f-244a-4a6f-934f-11ce3da5e484",
              "parentUUID": "0e9d8eae-de94-4945-8761-f82e0d8fd53b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "setnx-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "3cf29010-46bc-4bf6-8fc5-0128eb143748",
              "parentUUID": "0e9d8eae-de94-4945-8761-f82e0d8fd53b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "setnx-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "e7d4d145-8129-40ff-8a95-6f0535618455",
              "parentUUID": "0e9d8eae-de94-4945-8761-f82e0d8fd53b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "setnx-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "17d9ce6e-1f20-483e-b479-0090effdc0fb",
              "parentUUID": "0e9d8eae-de94-4945-8761-f82e0d8fd53b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 1 when the key does not exist",
              "fullTitle": "setnx-command test should return 1 when the key does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['setnx', 'test', 'key']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "ded14e0b-0425-4cde-b7c3-7f10136c4b28",
              "parentUUID": "0e9d8eae-de94-4945-8761-f82e0d8fd53b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the key already exists",
              "fullTitle": "setnx-command test should return 0 when the key already exists",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['setnx', 'test', 'other']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['get', 'test']);\n        chai_1.expect(response).to.equal('key');\n    })",
              "err": {},
              "uuid": "ee65ad79-0256-4115-b1b1-e912bd4dc962",
              "parentUUID": "0e9d8eae-de94-4945-8761-f82e0d8fd53b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ded14e0b-0425-4cde-b7c3-7f10136c4b28",
            "ee65ad79-0256-4115-b1b1-e912bd4dc962"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1824e626-cd8a-461a-9582-f37a2afdb77a",
          "title": "data-type test",
          "fullFile": "/home/lane/git/redis/test/resp/data/data-type.test.ts",
          "file": "/test/resp/data/data-type.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "data-type test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "3fc01da6-4f71-4370-8b1e-31e30fa94bb2",
              "parentUUID": "1824e626-cd8a-461a-9582-f37a2afdb77a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "data-type test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "24da6c3f-d0af-41a9-a5d7-ddebef887040",
              "parentUUID": "1824e626-cd8a-461a-9582-f37a2afdb77a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "data-type test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "49d7010c-2ee8-4859-865c-836a9d4b03fd",
              "parentUUID": "1824e626-cd8a-461a-9582-f37a2afdb77a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should enumerate data-types",
              "fullTitle": "data-type test should enumerate data-types",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        chai_1.expect(data_type_1.DataType.NONE).to.equal('none');\n        chai_1.expect(data_type_1.DataType.STRING).to.equal('string');\n        chai_1.expect(data_type_1.DataType.LIST).to.equal('list');\n        chai_1.expect(data_type_1.DataType.SET).to.equal('set');\n        chai_1.expect(data_type_1.DataType.ZSET).to.equal('zset');\n        chai_1.expect(data_type_1.DataType.HASH).to.equal('hash');\n        chai_1.expect(Object.keys(data_type_1.DataType).length).to.equal(6);\n    })",
              "err": {},
              "uuid": "434376b6-4411-423b-96a1-75ce09480aa7",
              "parentUUID": "1824e626-cd8a-461a-9582-f37a2afdb77a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "434376b6-4411-423b-96a1-75ce09480aa7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4fd35dd9-1c27-4769-be6e-6692cae3b67b",
          "title": "sorted-set test",
          "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
          "file": "/test/resp/data/sorted-set.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "sorted-set test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();\nss = new sorted_set_1.SortedSet();\nz = new Z();",
              "err": {},
              "uuid": "1fd68bb6-96e5-4d40-9f03-6462d3a3de4f",
              "parentUUID": "4fd35dd9-1c27-4769-be6e-6692cae3b67b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sorted-set test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "925389bf-c9a3-4fae-9550-c541a341d5fa",
              "parentUUID": "4fd35dd9-1c27-4769-be6e-6692cae3b67b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sorted-set test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "6c6757bd-0754-429e-8f7f-643ae6b2ee1b",
              "parentUUID": "4fd35dd9-1c27-4769-be6e-6692cae3b67b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should instantiate",
              "fullTitle": "sorted-set test should instantiate",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        chai_1.expect(z.constructor.name).to.equal('Z');\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(ss.constructor.name).to.equal('SortedSet');\n    })",
              "err": {},
              "uuid": "aa86d455-9fa0-442e-a9f3-e2067ac0c803",
              "parentUUID": "4fd35dd9-1c27-4769-be6e-6692cae3b67b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add, get, and delete an entry",
              "fullTitle": "sorted-set test should add, get, and delete an entry",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', 1);\n        chai_1.expect(added).to.equal(null);\n        added = ss.add('test', 1);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(z.keys().length).to.equal(1);\n        chai_1.expect(ss.keys().length).to.equal(1);\n        let item = z.get('test');\n        chai_1.expect(item.constructor.name).to.equal('Number');\n        item = ss.get('test');\n        chai_1.expect(item.constructor.name).to.equal('Number');\n        z.del('test');\n        chai_1.expect(z.keys().length).to.equal(0);\n        ss.del('test');\n        chai_1.expect(ss.keys().length).to.equal(0);\n    })",
              "err": {},
              "uuid": "8021227a-4e33-46df-929f-ca48a337f8e1",
              "parentUUID": "4fd35dd9-1c27-4769-be6e-6692cae3b67b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw when attempting to add __proto__ key",
              "fullTitle": "sorted-set test should throw when attempting to add __proto__ key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(() => {\n            z.add('__proto__', 0);\n        }).to.throw();\n        // expect(() => {\n        //   ss.add('__proto__', 0)\n        // }).to.throw();\n    })",
              "err": {},
              "uuid": "6ac3bc29-4318-4f28-b9b1-ec2a6b8257b0",
              "parentUUID": "4fd35dd9-1c27-4769-be6e-6692cae3b67b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add an undefined or null score",
              "fullTitle": "sorted-set test should not add an undefined or null score",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', null);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(z.keys().length).to.equal(0);\n        added = z.add('test', undefined);\n        chai_1.expect(z.keys().length).to.equal(0);\n        // Typescript prevents adding null\n        // added = ss.add('test', null);\n        // expect(added).to.equal(null);\n        // expect(ss.keys().length).to.equal(0);\n        // added = ss.add('test', undefined);\n        // expect(z.keys().length).to.equal(0);\n    })",
              "err": {},
              "uuid": "fdeb9466-c7c5-47fc-a2e7-9234afaeb2e0",
              "parentUUID": "4fd35dd9-1c27-4769-be6e-6692cae3b67b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not duplicate key/value pairs",
              "fullTitle": "sorted-set test should not duplicate key/value pairs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', 123);\n        chai_1.expect(added).to.equal(null); // This is weird\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = z.add('test', 123);\n        chai_1.expect(added).to.equal(123); // and weirder\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = ss.add('test', 123);\n        chai_1.expect(added).to.equal(null); // This is weird\n        chai_1.expect(ss.keys().length).to.equal(1);\n        added = ss.add('test', 123);\n        chai_1.expect(added).to.equal(123); // and weirder\n        chai_1.expect(ss.keys().length).to.equal(1);\n    })",
              "err": {},
              "uuid": "5945323e-0a07-4f4d-ac1a-62e8098cbba1",
              "parentUUID": "4fd35dd9-1c27-4769-be6e-6692cae3b67b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the old rank when replacing a key",
              "fullTitle": "sorted-set test should return the old rank when replacing a key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', 123);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = z.add('test', 321);\n        chai_1.expect(added).to.equal(123);\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = z.get('test');\n        chai_1.expect(added).to.equal(321);\n        added = ss.add('test', 123);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(ss.keys().length).to.equal(1);\n        added = ss.add('test', 321);\n        chai_1.expect(added).to.equal(123);\n        chai_1.expect(ss.keys().length).to.equal(1);\n        added = ss.get('test');\n        chai_1.expect(added).to.equal(321);\n    })",
              "err": {},
              "uuid": "254e0059-7741-434c-bbb2-77e2f3a0eb01",
              "parentUUID": "4fd35dd9-1c27-4769-be6e-6692cae3b67b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a value when adding at least 32 values (I think - it is difficult to tell)",
              "fullTitle": "sorted-set test should return a value when adding at least 32 values (I think - it is difficult to tell)",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "1a59e274-a0a5-4dab-9963-c775a9acaed0",
              "parentUUID": "4fd35dd9-1c27-4769-be6e-6692cae3b67b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "fullTitle": "sorted-set test should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(z.add('Terminator', 8.0)).to.equal(null); // => null\n        chai_1.expect(z.add('District 9', 8.0)).to.equal(null); // => null\n        chai_1.expect(z.add('Ex Machina', 0.7)).to.equal(null); // => null\n        chai_1.expect(z.add('Ex Machina', 7.7)).to.equal(0.7); // => 0.7\n        // alias\n        chai_1.expect(z.set('The Matrix', 8.7)).to.equal(null); // => null\n        // average O(1)\n        chai_1.expect(z.has('Terminator')).to.equal(true); // => true\n        chai_1.expect(z.has('Blade Runner')).to.equal(false); // => false\n        // average O(1)\n        chai_1.expect(z.score('Ex Machina')).to.equal(7.7); // => 7.7\n        chai_1.expect(z.score('Blade Runner')).to.equal(null); // => null\n        // alias\n        chai_1.expect(z.get('The Matrix')).to.equal(8.7); // => 8.7\n        // average O(log(N))\n        chai_1.expect(z.rem('Ex Machina')).to.equal(7.7); // => 7.7\n        // average O(1)\n        chai_1.expect(z.rem('Ex Machina')).to.equal(null); // => null\n        // alias\n        chai_1.expect(z.del('Ex Machina')).to.equal(null); // => null\n        // average O(log(N)+M) where M is the number of elements between min and max\n        // This is not working as expected\n        chai_1.expect(z.rangeByScore(7, 8)).to.eql(['District 9', 'Terminator']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        chai_1.expect(z.rangeByScore(8)).to.eql(['District 9', 'Terminator', 'The Matrix']); // [8.0-∞)\n        // => ['District 9', 'Terminator', 'The Matrix']\n        chai_1.expect(z.rangeByScore(8, null, { withScores: true })).to.eql([['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]);\n        // => [['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]\n        // average O(log(N)+log(M)) where M as in rangeByScore\n        // Again - not as expected\n        chai_1.expect(z.count(7, 8)).to.equal(2); // => 3\n        // average O(log(N))\n        // Not working as expected\n        chai_1.expect(z.rank('Ex Machina')).to.equal(null); // => 0\n        // Not working as expected\n        chai_1.expect(z.rank('Terminator')).to.equal(1); // => 2\n        chai_1.expect(z.rank('Blade Runner')).to.equal(null); // => null\n        // average O(log(N)+M) where M as in range\n        // Not working as expected\n        chai_1.expect(z.range(0, 2)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Not working as expected\n        chai_1.expect(z.range(0, 2, { withScores: true })).to.eql([['District 9', 8], ['Terminator', 8], ['The Matrix', 8.7]]);\n        // => [['Ex Machina', 7.7],\n        //     ['District 9', 8],\n        //     ['Terminator', 8]]\n        chai_1.expect(z.range(-1)).to.eql(['The Matrix']); // => ['The Matrix']\n        // almost alias\n        // Not working as expected\n        chai_1.expect(z.slice(0, 3)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Set cardinality (number of elements)\n        // average O(1)\n        // Not working as expected\n        chai_1.expect(z.card()).to.equal(3); // => 4\n        // alias\n        // Not working as expected\n        chai_1.expect(z.length).to.equal(3); // => 4\n    })",
              "err": {},
              "uuid": "1672335d-0b33-46b7-a4cb-20dc9d09c122",
              "parentUUID": "4fd35dd9-1c27-4769-be6e-6692cae3b67b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "the rewrite should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "fullTitle": "sorted-set test the rewrite should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(ss.add('Terminator', 8.0)).to.equal(null); // => null\n        chai_1.expect(ss.add('District 9', 8.0)).to.equal(null); // => null\n        chai_1.expect(ss.add('Ex Machina', 0.7)).to.equal(null); // => null\n        chai_1.expect(ss.add('Ex Machina', 7.7)).to.equal(0.7); // => 0.7\n        // alias\n        chai_1.expect(ss.set('The Matrix', 8.7)).to.equal(null); // => null\n        // average O(1)\n        chai_1.expect(ss.has('Terminator')).to.equal(true); // => true\n        chai_1.expect(ss.has('Blade Runner')).to.equal(false); // => false\n        // average O(1)\n        chai_1.expect(ss.score('Ex Machina')).to.equal(7.7); // => 7.7\n        chai_1.expect(ss.score('Blade Runner')).to.equal(null); // => null\n        // alias\n        chai_1.expect(ss.get('The Matrix')).to.equal(8.7); // => 8.7\n        // average O(log(N))\n        chai_1.expect(ss.rem('Ex Machina')).to.equal(7.7); // => 7.7\n        // average O(1)\n        chai_1.expect(ss.rem('Ex Machina')).to.equal(null); // => null\n        // alias\n        chai_1.expect(ss.del('Ex Machina')).to.equal(null); // => null\n        // average O(log(N)+M) where M is the number of elements between min and max\n        // This is not working as expected\n        chai_1.expect(ss.rangeByScore(7, 8)).to.eql(['District 9', 'Terminator']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        chai_1.expect(ss.rangeByScore(8)).to.eql(['District 9', 'Terminator', 'The Matrix']); // [8.0-∞)\n        // => ['District 9', 'Terminator', 'The Matrix']\n        chai_1.expect(ss.rangeByScore(8, null, { withScores: true })).to.eql([['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]);\n        // => [['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]\n        // average O(log(N)+log(M)) where M as in rangeByScore\n        // Again - not as expected\n        chai_1.expect(ss.count(7, 8)).to.equal(2); // => 3\n        // average O(log(N))\n        // Not working as expected\n        chai_1.expect(ss.rank('Ex Machina')).to.equal(null); // => 0\n        // Not working as expected\n        chai_1.expect(ss.rank('Terminator')).to.equal(1); // => 2\n        chai_1.expect(ss.rank('Blade Runner')).to.equal(null); // => null\n        // average O(log(N)+M) where M as in range\n        // Not working as expected\n        chai_1.expect(ss.range(0, 2)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Not working as expected\n        chai_1.expect(ss.range(0, 2, { withScores: true })).to.eql([['District 9', 8], ['Terminator', 8], ['The Matrix', 8.7]]);\n        // => [['Ex Machina', 7.7],\n        //     ['District 9', 8],\n        //     ['Terminator', 8]]\n        chai_1.expect(ss.range(-1)).to.eql(['The Matrix']); // => ['The Matrix']\n        // almost alias\n        // Not working as expected\n        chai_1.expect(ss.slice(0, 3)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Set cardinality (number of elements)\n        // average O(1)\n        // Not working as expected\n        chai_1.expect(ss.card()).to.equal(3); // => 4\n        // alias\n        // Not working as expected\n        chai_1.expect(ss.length).to.equal(3); // => 4\n    })",
              "err": {},
              "uuid": "93aa77b2-401a-4952-8218-90d35d2e6131",
              "parentUUID": "4fd35dd9-1c27-4769-be6e-6692cae3b67b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "af41d3b8-e387-4f09-a7b2-5397e93cac53",
              "title": "skip map",
              "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
              "file": "/test/resp/data/sorted-set.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should support basic operations",
                  "fullTitle": "sorted-set test skip map should support basic operations",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var z = new Z();\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);\nchai_1.expect(z.range()).to.eql([]);\nchai_1.expect(z.rangeByScore()).to.eql([]);\nchai_1.expect(() => {\n    z.add('__proto__', 14);\n}).to.throw();\nz.add('5a600e16', 8);\nz.add('5a600e17', 9);\nchai_1.expect(z.add('5a600e18', 10)).to.equal(null);\nchai_1.expect(z.add('5a600e17', 12)).to.equal(9);\nchai_1.expect(z).to.have.length(3);\nchai_1.expect(z.toArray()).to.eql(['5a600e16', '5a600e18', '5a600e17']);\nchai_1.expect(z.toArray()).to.eql(z.range(0, -1));\nchai_1.expect(z.toArray()).to.eql(z.rangeByScore());\nchai_1.expect(z.has('5a600e16')).to.be.ok;\nchai_1.expect(z.has('5a600e17')).to.be.ok;\nchai_1.expect(z.has('5a600e18')).to.be.ok;\nchai_1.expect(z.has('5a600e19')).to.not.be.ok;\nchai_1.expect(z.score('5a600e16')).to.equal(8);\nchai_1.expect(z.score('5a600e17')).to.equal(12);\nchai_1.expect(z.score('5a600e18')).to.equal(10);\nchai_1.expect(z.score('5a600e19')).to.equal(null);\nchai_1.expect(z.rem('5a600e16')).to.equal(8);\nchai_1.expect(z).to.have.length(2);\nchai_1.expect(z.rem('5a600e16')).to.equal(null);\nchai_1.expect(z).to.have.length(2);\nchai_1.expect(z.has('5a600e16')).to.not.be.ok;\nchai_1.expect(z.toArray()).to.eql(['5a600e18', '5a600e17']);\nchai_1.expect(z.toArray({ withScores: true }))\n    .to.eql(z.range(0, -1, { withScores: true }));\nchai_1.expect(z.toArray()).to.eql(z.rangeByScore());\nz.add('5a600e16', 10);\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nchai_1.expect(z).to.have.length(9);\n// no change, so should be O(1)\nz.add('5a600e17', 12);\nchai_1.expect(z.rank('5a600e17')).to.equal(4);\nchai_1.expect(z).to.have.length(9);\nchai_1.expect(z.toArray()).to.eql([\n    '5a600e16',\n    '5a600e11',\n    '5a600e18',\n    '5a600e13',\n    '5a600e17',\n    '5a600e14',\n    '5a600e10',\n    '5a600e12',\n    '5a600e15',\n]);\nchai_1.expect(z.toArray()).to.eql(z.range(0, -1));\nchai_1.expect(z.toArray()).to.eql(z.rangeByScore());\nchai_1.expect(z.rangeByScore(14, 16, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n]);",
                  "err": {},
                  "uuid": "2d5faca1-f227-4cba-89ba-dda0446f9f0b",
                  "parentUUID": "af41d3b8-e387-4f09-a7b2-5397e93cac53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "f687c6fa-d841-488b-a1e0-281558ca7be1",
                  "title": "#add",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should implicitly delete",
                      "fullTitle": "sorted-set test skip map #add should implicitly delete",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.add('5a600e14', null)).to.equal(14);\nchai_1.expect(z.add('5a600e19', null)).to.equal(null);\nchai_1.expect(z).to.have.length(8);",
                      "err": {},
                      "uuid": "b96e9165-c67e-46aa-9277-22babd1a0a16",
                      "parentUUID": "f687c6fa-d841-488b-a1e0-281558ca7be1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b96e9165-c67e-46aa-9277-22babd1a0a16"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "6179100e-e929-4386-b4a2-fc4b2ec66619",
                  "title": "#empty",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should remove all elements",
                      "fullTitle": "sorted-set test skip map #empty should remove all elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nz.empty();\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "b5041f5b-acb7-43f7-9498-7d8be576dfd9",
                      "parentUUID": "6179100e-e929-4386-b4a2-fc4b2ec66619",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b5041f5b-acb7-43f7-9498-7d8be576dfd9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "31cbae5e-dbad-4689-a71d-f8d0e1629e8a",
                  "title": "#incrBy(increment, key)",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should increase rank",
                      "fullTitle": "sorted-set test skip map #incrBy(increment, key) should increase rank",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.add('second', 2);\nz.add('third', 3);\nz.add('fourth', 4);\nchai_1.expect(z.incrBy(2, 'first')).to.equal(3);\nchai_1.expect(z.rank('first')).to.equal(1);",
                      "err": {},
                      "uuid": "47fbd0e4-c0f7-4f1a-9542-0468cc7529fa",
                      "parentUUID": "31cbae5e-dbad-4689-a71d-f8d0e1629e8a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should create if not found",
                      "fullTitle": "sorted-set test skip map #incrBy(increment, key) should create if not found",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.incrBy(2, 'second');\nchai_1.expect(z.card()).to.equal(2);\nchai_1.expect(z.rank('second')).to.equal(1);",
                      "err": {},
                      "uuid": "ad274560-ed35-426d-90d1-0cf05a89c6d3",
                      "parentUUID": "31cbae5e-dbad-4689-a71d-f8d0e1629e8a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "47fbd0e4-c0f7-4f1a-9542-0468cc7529fa",
                    "ad274560-ed35-426d-90d1-0cf05a89c6d3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "1f460ffa-9855-4f2f-b6b8-bc9f51073d9c",
                  "title": "#keys",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the keys",
                      "fullTitle": "sorted-set test skip map #keys should return the keys",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.keys()).to.eql(['5a600e16', '5a600e11', '5a600e18', '5a600e13',\n    '5a600e17', '5a600e14', '5a600e10', '5a600e12', '5a600e15']);",
                      "err": {},
                      "uuid": "1fd418f2-7311-43b0-b584-4d3067baa1d3",
                      "parentUUID": "1f460ffa-9855-4f2f-b6b8-bc9f51073d9c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1fd418f2-7311-43b0-b584-4d3067baa1d3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "7201e68c-d150-499e-9273-ec8b6fbe8d06",
                  "title": "#rangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map #rangeByScore should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rangeByScore(14, null, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);\nchai_1.expect(z.rangeByScore(null, 10, { withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n]);\nchai_1.expect(z.rangeByScore(-Infinity, Infinity)).to.eql(z.toArray());\nchai_1.expect(z.rangeByScore(null, null)).to.eql(z.toArray());",
                      "err": {},
                      "uuid": "26f9ffa9-d538-4256-9b56-c5064fa58d1c",
                      "parentUUID": "7201e68c-d150-499e-9273-ec8b6fbe8d06",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "26f9ffa9-d538-4256-9b56-c5064fa58d1c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "9a56d703-9182-4e5e-af14-979da99c25b9",
                  "title": "#count",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should count elements",
                      "fullTitle": "sorted-set test skip map #count should count elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nchai_1.expect(z.count()).to.equal(0);\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nz.add('5a600e19', 14);\nz.add('5a600f00', 30.0);\nz.add('5a600f01', 30.5);\nz.add('5a600f02', 31.0);\nz.add('5a600f03', 31.5);\nz.add('5a600f04', 32.0);\nz.add('5a600f05', 32.0);\nz.add('5a600f06', 32.0);\nchai_1.expect(z.count()).to.eql(z.rangeByScore().length);\nchai_1.expect(z.count(8)).to.eql(z.rangeByScore(8).length);\nchai_1.expect(z.count(3, 7)).to.eql(z.rangeByScore(3, 7).length);\nchai_1.expect(z.count(5, 14)).to.eql(z.rangeByScore(5, 14).length);\nchai_1.expect(z.count(5, 5)).to.eql(z.rangeByScore(5, 5).length);\nchai_1.expect(z.count(5, 0)).to.eql(z.rangeByScore(5, 0).length);\nchai_1.expect(z.count(30, 32)).to.eql(z.rangeByScore(30, 32).length);\nchai_1.expect(z.count(40)).to.eql(z.rangeByScore(40).length);",
                      "err": {},
                      "uuid": "89621350-0728-43fd-bba7-72f66c382129",
                      "parentUUID": "9a56d703-9182-4e5e-af14-979da99c25b9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "89621350-0728-43fd-bba7-72f66c382129"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "acbe3baf-6679-4490-8ea6-5670de14f07f",
                  "title": "#range",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map #range should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.add('second', 2);\nz.add('third', 3);\nz.add('fourth', 4);\nvar array = ['first', 'second', 'third', 'fourth'];\nchai_1.expect(z.range()).to.eql(array);\nchai_1.expect(z.range(2)).to.eql(array.slice(2));\nchai_1.expect(z.range(8)).to.eql(array.slice(8));\nchai_1.expect(z.range(0, 2)).to.eql(array.slice(0, 3));\nchai_1.expect(z.range(-1)).to.eql(['fourth']);\nchai_1.expect(z.range(-4)).to.eql(array);\nchai_1.expect(z.range(-4, -2)).to.eql(array.slice(0, 3));\nchai_1.expect(z.range(-4, z.length + 1000))\n    .to.eql(array.slice(-4, z.length + 1000));",
                      "err": {},
                      "uuid": "ec85e2b8-755a-4639-b3da-7b812fea494f",
                      "parentUUID": "acbe3baf-6679-4490-8ea6-5670de14f07f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should support withScores",
                      "fullTitle": "sorted-set test skip map #range should support withScores",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.add('second', 2);\nchai_1.expect(z.range(0, 0, { withScores: true }))\n    .to.eql([['first', 1]]);",
                      "err": {},
                      "uuid": "111e5ac3-d7b4-4223-9c75-47e0c556105f",
                      "parentUUID": "acbe3baf-6679-4490-8ea6-5670de14f07f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ec85e2b8-755a-4639-b3da-7b812fea494f",
                    "111e5ac3-d7b4-4223-9c75-47e0c556105f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "23cea01c-825b-4e5d-a8b3-893bd3b87296",
                  "title": "#intersect",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should intersect two sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect two sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = new Z(), b = new Z();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nchai_1.expect(Z.intersect(a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e19', '5a600e1c', '5a600e15', '5a600e1b']);\nchai_1.expect(Z.intersect(b, a)).to.eql(['5a600e1b', '5a600e14',\n    '5a600e1c', '5a600e15', '5a600e19', '5a600e10', '5a600e17']);",
                      "err": {},
                      "uuid": "dcae7954-504e-4748-b03e-1e1c93d5bad2",
                      "parentUUID": "23cea01c-825b-4e5d-a8b3-893bd3b87296",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect three sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect three sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = new Z(), b = new Z(), c = new Z();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nchai_1.expect(Z.intersect(c, a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e1c']);\nchai_1.expect(Z.intersect(c, a, b)).to.eql(c.intersect(a, b));",
                      "err": {},
                      "uuid": "77c48808-8a45-470e-a386-34edad808ea0",
                      "parentUUID": "23cea01c-825b-4e5d-a8b3-893bd3b87296",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect four sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect four sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = new Z();\nvar b = new Z();\nvar c = new Z();\nvar d = new Z();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nd.add('5a600e1c', 400);\nd.add('5a600e17', 500);\nd.add('5a600e1f', 600);\nd.add('5a600e20', 700);\nchai_1.expect(Z.intersect(d, c, a, b)).to.eql(['5a600e17', '5a600e1c']);\nchai_1.expect(Z.intersect(d, c, a, b)).to.eql(d.intersect(c, a, b));",
                      "err": {},
                      "uuid": "fa3d035c-afa7-45d6-9bb3-223c395cb622",
                      "parentUUID": "23cea01c-825b-4e5d-a8b3-893bd3b87296",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dcae7954-504e-4748-b03e-1e1c93d5bad2",
                    "77c48808-8a45-470e-a386-34edad808ea0",
                    "fa3d035c-afa7-45d6-9bb3-223c395cb622"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "0788afaf-5b87-42d9-a31e-9c93eb2783ef",
                  "title": "#rank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should get the correct rank",
                      "fullTitle": "sorted-set test skip map #rank should get the correct rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rank('5a600e12')).to.equal(7);\nchai_1.expect(z.rank('5a600e13')).to.equal(3);\nchai_1.expect(z.rank('5a600e16')).to.equal(0);\nchai_1.expect(z.rank('5a600e15')).to.equal(8);\nchai_1.expect(z.rank('not in set')).to.equal(null);",
                      "err": {},
                      "uuid": "2aafeec5-3440-4d69-8721-be13b17e941e",
                      "parentUUID": "0788afaf-5b87-42d9-a31e-9c93eb2783ef",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2aafeec5-3440-4d69-8721-be13b17e941e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "4ce055a8-e177-4c14-9cb5-c43654fcdf33",
                  "title": "#rem",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should delete special elements",
                      "fullTitle": "sorted-set test skip map #rem should delete special elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rem('5a600e15')).to.equal(19);\nchai_1.expect(z).to.have.length(8);\nchai_1.expect(z.rem('5a600e16')).to.equal(3);\nchai_1.expect(z).to.have.length(7);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "bd744cb9-e24a-471b-9ec8-d2ec636228c1",
                      "parentUUID": "4ce055a8-e177-4c14-9cb5-c43654fcdf33",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should delete many elements",
                      "fullTitle": "sorted-set test skip map #rem should delete many elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rem('5a600e11')).to.equal(6);\nchai_1.expect(z.rem('5a600e13')).to.equal(11);\nchai_1.expect(z.rem('5a600e14')).to.equal(14);\nchai_1.expect(z.rem('5a600e15')).to.equal(19);\nchai_1.expect(z.rem('5a600e16')).to.equal(3);\nchai_1.expect(z.rem('5a600e17')).to.equal(12);\nchai_1.expect(z.length).to.equal(3);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e18', 10],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "d33637f3-eb41-4f77-b137-965441b416c5",
                      "parentUUID": "4ce055a8-e177-4c14-9cb5-c43654fcdf33",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bd744cb9-e24a-471b-9ec8-d2ec636228c1",
                    "d33637f3-eb41-4f77-b137-965441b416c5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "3e625a75-30c0-4685-aad7-254c720b05a1",
                  "title": "#remRangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a range of elements",
                      "fullTitle": "sorted-set test skip map #remRangeByScore should strip out a range of elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByScore(4, 14)).to.equal(5);\nchai_1.expect(z).to.have.length(4);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "88f8c213-9cde-4ba6-a7c1-b1eebee830fc",
                      "parentUUID": "3e625a75-30c0-4685-aad7-254c720b05a1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all the elements",
                      "fullTitle": "sorted-set test skip map #remRangeByScore should strip out all the elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByScore(3, 19)).to.equal(9);\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "92c9411a-840e-4910-a4bf-4884dd4e90e6",
                      "parentUUID": "3e625a75-30c0-4685-aad7-254c720b05a1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "88f8c213-9cde-4ba6-a7c1-b1eebee830fc",
                    "92c9411a-840e-4910-a4bf-4884dd4e90e6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "38d70545-7257-479b-bd77-227e2997484f",
                  "title": "#remRangeByRank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a slice of elements",
                      "fullTitle": "sorted-set test skip map #remRangeByRank should strip out a slice of elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByRank(1, 6)).to.equal(5);\nchai_1.expect(z).to.have.length(4);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "c68f8848-9788-45ed-aa7c-c95eca3dc208",
                      "parentUUID": "38d70545-7257-479b-bd77-227e2997484f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all elements",
                      "fullTitle": "sorted-set test skip map #remRangeByRank should strip out all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByRank(0, 9)).to.equal(9);\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "318a5749-ed9f-4a11-9324-303f7de9eb04",
                      "parentUUID": "38d70545-7257-479b-bd77-227e2997484f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c68f8848-9788-45ed-aa7c-c95eca3dc208",
                    "318a5749-ed9f-4a11-9324-303f7de9eb04"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "e2acbe62-16c9-4a31-9431-a1a0836732e2",
                  "title": "#values",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the values",
                      "fullTitle": "sorted-set test skip map #values should return the values",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', -1);\nz.add('third', 5);\nz.add('second', 3);\nchai_1.expect(z.values()).to.eql([-1, 3, 5]);",
                      "err": {},
                      "uuid": "dadfea65-8c3e-4d7a-8947-e6835bb9eff4",
                      "parentUUID": "e2acbe62-16c9-4a31-9431-a1a0836732e2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dadfea65-8c3e-4d7a-8947-e6835bb9eff4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "c52b5e76-d734-4896-b1a7-a28b89f7767c",
                  "title": "unique",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should ensure values are unique",
                      "fullTitle": "sorted-set test skip map unique should ensure values are unique",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z({ unique: true });\nassert.equal(z.keys().length, 0, 'Expected an empty SortedSet');\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(() => {\n    z.add('5a600e19', 11);\n}).to.throw(/unique/);\n// quick exit test\nchai_1.expect(() => {\n    z.add('5a600dff', z._head.next[z._level - 1].next.value);\n}).to.throw(/unique/);\n// this test ensures the key < key check doesn't come into play\nchai_1.expect(() => {\n    z.add('5a600dff', 11);\n}).to.throw(/unique/);\nchai_1.expect(() => {\n    z.add('5a600e18', 10);\n}).to.not.throw();\nchai_1.expect(z).to.have.length(9);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "9a9c26db-a0e2-4164-879e-4bb1aae43ee4",
                      "parentUUID": "c52b5e76-d734-4896-b1a7-a28b89f7767c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert keys if constraint broken during update",
                      "fullTitle": "sorted-set test skip map unique should revert keys if constraint broken during update",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z({ unique: true });\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(() => {\n    z.add('5a600e13', 14);\n}).to.throw(/unique/);\nchai_1.expect(z).to.have.length(9);\nchai_1.expect(z.score('5a600e13')).to.equal(11);",
                      "err": {},
                      "uuid": "b5190802-b5d0-44e0-8b09-2c019fb1ac48",
                      "parentUUID": "c52b5e76-d734-4896-b1a7-a28b89f7767c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9a9c26db-a0e2-4164-879e-4bb1aae43ee4",
                    "b5190802-b5d0-44e0-8b09-2c019fb1ac48"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "2d5faca1-f227-4cba-89ba-dda0446f9f0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "677a790f-0319-4381-8f63-12da6c430423",
              "title": "skip map rewrite",
              "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
              "file": "/test/resp/data/sorted-set.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should support basic operations",
                  "fullTitle": "sorted-set test skip map rewrite should support basic operations",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let ss = new sorted_set_1.SortedSet();\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);\nchai_1.expect(ss.range()).to.eql([]);\nchai_1.expect(ss.rangeByScore()).to.eql([]);\n// expect(() => {\n//   ss.add('__proto__', 14);\n// }).to.throw();\nss.add('5a600e16', 8);\nss.add('5a600e17', 9);\nchai_1.expect(ss.add('5a600e18', 10)).to.equal(null);\nchai_1.expect(ss.add('5a600e17', 12)).to.equal(9);\nchai_1.expect(ss).to.have.length(3);\nchai_1.expect(ss.toArray()).to.eql(['5a600e16', '5a600e18', '5a600e17']);\nchai_1.expect(ss.toArray()).to.eql(ss.range(0, -1));\nchai_1.expect(ss.toArray()).to.eql(ss.rangeByScore());\nchai_1.expect(ss.has('5a600e16')).to.be.ok;\nchai_1.expect(ss.has('5a600e17')).to.be.ok;\nchai_1.expect(ss.has('5a600e18')).to.be.ok;\nchai_1.expect(ss.has('5a600e19')).to.not.be.ok;\nchai_1.expect(ss.score('5a600e16')).to.equal(8);\nchai_1.expect(ss.score('5a600e17')).to.equal(12);\nchai_1.expect(ss.score('5a600e18')).to.equal(10);\nchai_1.expect(ss.score('5a600e19')).to.equal(null);\nchai_1.expect(ss.rem('5a600e16')).to.equal(8);\nchai_1.expect(ss).to.have.length(2);\nchai_1.expect(ss.rem('5a600e16')).to.equal(null);\nchai_1.expect(ss).to.have.length(2);\nchai_1.expect(ss.has('5a600e16')).to.not.be.ok;\nchai_1.expect(ss.toArray()).to.eql(['5a600e18', '5a600e17']);\nchai_1.expect(ss.toArray({ withScores: true }))\n    .to.eql(ss.range(0, -1, { withScores: true }));\nchai_1.expect(ss.toArray()).to.eql(ss.rangeByScore());\nss.add('5a600e16', 10);\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nchai_1.expect(ss).to.have.length(9);\n// no change, so should be O(1)\nss.add('5a600e17', 12);\nchai_1.expect(ss.rank('5a600e17')).to.equal(4);\nchai_1.expect(ss).to.have.length(9);\nchai_1.expect(ss.toArray()).to.eql([\n    '5a600e16',\n    '5a600e11',\n    '5a600e18',\n    '5a600e13',\n    '5a600e17',\n    '5a600e14',\n    '5a600e10',\n    '5a600e12',\n    '5a600e15',\n]);\nchai_1.expect(ss.toArray()).to.eql(ss.range(0, -1));\nchai_1.expect(ss.toArray()).to.eql(ss.rangeByScore());\nchai_1.expect(ss.rangeByScore(14, 16, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n]);",
                  "err": {},
                  "uuid": "5528a53f-7430-40ee-b67e-d9f9577194c0",
                  "parentUUID": "677a790f-0319-4381-8f63-12da6c430423",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "03a9c045-0e40-412d-ae76-7fa380e097a9",
                  "title": "#add",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should implicitly delete",
                      "fullTitle": "sorted-set test skip map rewrite #add should implicitly delete",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.add('5a600e14', null)).to.equal(14);\nchai_1.expect(ss.add('5a600e19', null)).to.equal(null);\nchai_1.expect(ss).to.have.length(8);",
                      "err": {},
                      "uuid": "f15982e9-05b1-4068-ac11-0bccf724912c",
                      "parentUUID": "03a9c045-0e40-412d-ae76-7fa380e097a9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f15982e9-05b1-4068-ac11-0bccf724912c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "6169869f-6c86-4c84-8363-a70c62638dee",
                  "title": "#empty",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should remove all elements",
                      "fullTitle": "sorted-set test skip map rewrite #empty should remove all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nss.empty();\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "40b47b61-3a7f-4e8f-8faa-4c2ebe3da377",
                      "parentUUID": "6169869f-6c86-4c84-8363-a70c62638dee",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "40b47b61-3a7f-4e8f-8faa-4c2ebe3da377"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "d8959d69-bf7b-44e3-9b12-1363b66f20ce",
                  "title": "#incrBy(increment, key)",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should increase rank",
                      "fullTitle": "sorted-set test skip map rewrite #incrBy(increment, key) should increase rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.add('second', 2);\nss.add('third', 3);\nss.add('fourth', 4);\nchai_1.expect(ss.incrBy(2, 'first')).to.equal(3);\nchai_1.expect(ss.rank('first')).to.equal(1);",
                      "err": {},
                      "uuid": "c483cf15-da73-4988-9d3b-3d061b4fb576",
                      "parentUUID": "d8959d69-bf7b-44e3-9b12-1363b66f20ce",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should create if not found",
                      "fullTitle": "sorted-set test skip map rewrite #incrBy(increment, key) should create if not found",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.incrBy(2, 'second');\nchai_1.expect(ss.card()).to.equal(2);\nchai_1.expect(ss.rank('second')).to.equal(1);",
                      "err": {},
                      "uuid": "e2332445-43cb-4c28-84d6-9fd4b7aed8c9",
                      "parentUUID": "d8959d69-bf7b-44e3-9b12-1363b66f20ce",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c483cf15-da73-4988-9d3b-3d061b4fb576",
                    "e2332445-43cb-4c28-84d6-9fd4b7aed8c9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "f7f2b51d-25f8-47da-a952-26dda876c513",
                  "title": "#keys",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the keys",
                      "fullTitle": "sorted-set test skip map rewrite #keys should return the keys",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.keys()).to.eql(['5a600e16', '5a600e11', '5a600e18', '5a600e13',\n    '5a600e17', '5a600e14', '5a600e10', '5a600e12', '5a600e15']);",
                      "err": {},
                      "uuid": "85ed9ea9-9c70-4561-8588-93046e75fb8e",
                      "parentUUID": "f7f2b51d-25f8-47da-a952-26dda876c513",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "85ed9ea9-9c70-4561-8588-93046e75fb8e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "20ae858e-d1c6-4bd4-8fac-0d49a58c043b",
                  "title": "#rangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map rewrite #rangeByScore should support special ranges",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rangeByScore(14, null, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);\nchai_1.expect(ss.rangeByScore(null, 10, { withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n]);\nchai_1.expect(ss.rangeByScore(-Infinity, Infinity)).to.eql(ss.toArray());\nchai_1.expect(ss.rangeByScore(null, null)).to.eql(ss.toArray());",
                      "err": {},
                      "uuid": "5a032da6-0783-4b14-abab-536521afca65",
                      "parentUUID": "20ae858e-d1c6-4bd4-8fac-0d49a58c043b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5a032da6-0783-4b14-abab-536521afca65"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "cc00d667-656e-41e3-ab40-374bc7010dd0",
                  "title": "#count",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should count elements",
                      "fullTitle": "sorted-set test skip map rewrite #count should count elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nchai_1.expect(ss.count()).to.equal(0);\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nss.add('5a600e19', 14);\nss.add('5a600f00', 30.0);\nss.add('5a600f01', 30.5);\nss.add('5a600f02', 31.0);\nss.add('5a600f03', 31.5);\nss.add('5a600f04', 32.0);\nss.add('5a600f05', 32.0);\nss.add('5a600f06', 32.0);\nchai_1.expect(ss.count()).to.eql(ss.rangeByScore().length);\nchai_1.expect(ss.count(8)).to.eql(ss.rangeByScore(8).length);\nchai_1.expect(ss.count(3, 7)).to.eql(ss.rangeByScore(3, 7).length);\nchai_1.expect(ss.count(5, 14)).to.eql(ss.rangeByScore(5, 14).length);\nchai_1.expect(ss.count(5, 5)).to.eql(ss.rangeByScore(5, 5).length);\nchai_1.expect(ss.count(5, 0)).to.eql(ss.rangeByScore(5, 0).length);\nchai_1.expect(ss.count(30, 32)).to.eql(ss.rangeByScore(30, 32).length);\nchai_1.expect(ss.count(40)).to.eql(ss.rangeByScore(40).length);",
                      "err": {},
                      "uuid": "ab02bd29-5711-4d5a-92c4-22213bf45ccf",
                      "parentUUID": "cc00d667-656e-41e3-ab40-374bc7010dd0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ab02bd29-5711-4d5a-92c4-22213bf45ccf"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "032ad0a0-a19d-4db0-a5cc-7bbb548de99b",
                  "title": "#range",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map rewrite #range should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.add('second', 2);\nss.add('third', 3);\nss.add('fourth', 4);\nlet array = ['first', 'second', 'third', 'fourth'];\nchai_1.expect(ss.range()).to.eql(array);\nchai_1.expect(ss.range(2)).to.eql(array.slice(2));\nchai_1.expect(ss.range(8)).to.eql(array.slice(8));\nchai_1.expect(ss.range(0, 2)).to.eql(array.slice(0, 3));\nchai_1.expect(ss.range(-1)).to.eql(['fourth']);\nchai_1.expect(ss.range(-4)).to.eql(array);\nchai_1.expect(ss.range(-4, -2)).to.eql(array.slice(0, 3));\nchai_1.expect(ss.range(-4, ss.length + 1000))\n    .to.eql(array.slice(-4, ss.length + 1000));",
                      "err": {},
                      "uuid": "0a7b979f-f9ad-41d1-9356-334e7e42fd95",
                      "parentUUID": "032ad0a0-a19d-4db0-a5cc-7bbb548de99b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should support withScores",
                      "fullTitle": "sorted-set test skip map rewrite #range should support withScores",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.add('second', 2);\nchai_1.expect(ss.range(0, 0, { withScores: true }))\n    .to.eql([['first', 1]]);",
                      "err": {},
                      "uuid": "7931ce1f-44d6-4a13-b211-8e858a0e9915",
                      "parentUUID": "032ad0a0-a19d-4db0-a5cc-7bbb548de99b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0a7b979f-f9ad-41d1-9356-334e7e42fd95",
                    "7931ce1f-44d6-4a13-b211-8e858a0e9915"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "8151b3ea-3a99-49c5-9066-a7234a5aa137",
                  "title": "#intersect",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should intersect two sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect two sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nchai_1.expect(sorted_set_1.SortedSet.intersect(a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e19', '5a600e1c', '5a600e15', '5a600e1b']);\nchai_1.expect(sorted_set_1.SortedSet.intersect(b, a)).to.eql(['5a600e1b', '5a600e14',\n    '5a600e1c', '5a600e15', '5a600e19', '5a600e10', '5a600e17']);",
                      "err": {},
                      "uuid": "3b2870c8-2e5f-4452-a200-b2459e5291b1",
                      "parentUUID": "8151b3ea-3a99-49c5-9066-a7234a5aa137",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect three sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect three sets",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet(), c = new sorted_set_1.SortedSet();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nchai_1.expect(sorted_set_1.SortedSet.intersect(c, a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e1c']);\n// expect(SortedSet.intersect(c, a, b)).to.eql(c.intersect(a, b));",
                      "err": {},
                      "uuid": "e7f63d2f-0b32-4d28-a33d-f20edb118b1a",
                      "parentUUID": "8151b3ea-3a99-49c5-9066-a7234a5aa137",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect four sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect four sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let a = new sorted_set_1.SortedSet();\nlet b = new sorted_set_1.SortedSet();\nlet c = new sorted_set_1.SortedSet();\nlet d = new sorted_set_1.SortedSet();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nd.add('5a600e1c', 400);\nd.add('5a600e17', 500);\nd.add('5a600e1f', 600);\nd.add('5a600e20', 700);\nchai_1.expect(sorted_set_1.SortedSet.intersect(d, c, a, b)).to.eql(['5a600e17', '5a600e1c']);\n// expect(SortedSet.intersect(d, c, a, b)).to.eql(d.intersect(c, a, b));",
                      "err": {},
                      "uuid": "6d48b62d-af33-4323-9e3d-15f7ab96e805",
                      "parentUUID": "8151b3ea-3a99-49c5-9066-a7234a5aa137",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3b2870c8-2e5f-4452-a200-b2459e5291b1",
                    "e7f63d2f-0b32-4d28-a33d-f20edb118b1a",
                    "6d48b62d-af33-4323-9e3d-15f7ab96e805"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "ec775360-2b32-4140-8a0a-8bc322b1e41d",
                  "title": "#rank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should get the correct rank",
                      "fullTitle": "sorted-set test skip map rewrite #rank should get the correct rank",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rank('5a600e12')).to.equal(7);\nchai_1.expect(ss.rank('5a600e13')).to.equal(3);\nchai_1.expect(ss.rank('5a600e16')).to.equal(0);\nchai_1.expect(ss.rank('5a600e15')).to.equal(8);\nchai_1.expect(ss.rank('not in set')).to.equal(null);",
                      "err": {},
                      "uuid": "2f890330-cb59-43c5-bf10-f014654a01bc",
                      "parentUUID": "ec775360-2b32-4140-8a0a-8bc322b1e41d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2f890330-cb59-43c5-bf10-f014654a01bc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "b7778865-016d-4312-a12b-05262b023ac8",
                  "title": "#rem",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should delete special elements",
                      "fullTitle": "sorted-set test skip map rewrite #rem should delete special elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rem('5a600e15')).to.equal(19);\nchai_1.expect(ss).to.have.length(8);\nchai_1.expect(ss.rem('5a600e16')).to.equal(3);\nchai_1.expect(ss).to.have.length(7);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "56e483e4-dacb-4ed4-8cb3-9644dfd4aa47",
                      "parentUUID": "b7778865-016d-4312-a12b-05262b023ac8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should delete many elements",
                      "fullTitle": "sorted-set test skip map rewrite #rem should delete many elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rem('5a600e11')).to.equal(6);\nchai_1.expect(ss.rem('5a600e13')).to.equal(11);\nchai_1.expect(ss.rem('5a600e14')).to.equal(14);\nchai_1.expect(ss.rem('5a600e15')).to.equal(19);\nchai_1.expect(ss.rem('5a600e16')).to.equal(3);\nchai_1.expect(ss.rem('5a600e17')).to.equal(12);\nchai_1.expect(ss.length).to.equal(3);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e18', 10],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "eb34587a-c03a-4b5c-be56-516a73ae2da4",
                      "parentUUID": "b7778865-016d-4312-a12b-05262b023ac8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "56e483e4-dacb-4ed4-8cb3-9644dfd4aa47",
                    "eb34587a-c03a-4b5c-be56-516a73ae2da4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "03f37cfd-21a1-40ff-b0db-4e7c61ae07ae",
                  "title": "#remRangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a range of elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByScore should strip out a range of elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByScore(4, 14)).to.equal(5);\nchai_1.expect(ss).to.have.length(4);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "2a4adfd7-5a0c-43b1-9045-dff831cbbd04",
                      "parentUUID": "03f37cfd-21a1-40ff-b0db-4e7c61ae07ae",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all the elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByScore should strip out all the elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByScore(3, 19)).to.equal(9);\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "c1fa58a2-fd3f-4162-a4fe-98a606969571",
                      "parentUUID": "03f37cfd-21a1-40ff-b0db-4e7c61ae07ae",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2a4adfd7-5a0c-43b1-9045-dff831cbbd04",
                    "c1fa58a2-fd3f-4162-a4fe-98a606969571"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "b7bb6d81-869b-4f29-8237-e710954dd17d",
                  "title": "#remRangeByRank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a slice of elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByRank should strip out a slice of elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByRank(1, 6)).to.equal(5);\nchai_1.expect(ss).to.have.length(4);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "87c9a22d-53d3-4b2a-94a4-071f83dbac6d",
                      "parentUUID": "b7bb6d81-869b-4f29-8237-e710954dd17d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByRank should strip out all elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByRank(0, 9)).to.equal(9);\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "99edd46b-b0ba-417e-852b-e1594e0ea0d8",
                      "parentUUID": "b7bb6d81-869b-4f29-8237-e710954dd17d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "87c9a22d-53d3-4b2a-94a4-071f83dbac6d",
                    "99edd46b-b0ba-417e-852b-e1594e0ea0d8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "e2480cf4-aed7-4d80-a17b-17c783e1407f",
                  "title": "#values",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the values",
                      "fullTitle": "sorted-set test skip map rewrite #values should return the values",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', -1);\nss.add('third', 5);\nss.add('second', 3);\nchai_1.expect(ss.values()).to.eql([-1, 3, 5]);",
                      "err": {},
                      "uuid": "f3a6a471-67df-488d-9932-1286d450b621",
                      "parentUUID": "e2480cf4-aed7-4d80-a17b-17c783e1407f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f3a6a471-67df-488d-9932-1286d450b621"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "f0c8d40b-fd2f-4dc7-8e8d-fc5a2107b10f",
                  "title": "unique rewrite",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should ensure values are unique",
                      "fullTitle": "sorted-set test skip map rewrite unique rewrite should ensure values are unique",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const options = { unique: true };\nlet ss = new sorted_set_1.SortedSet(options);\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(() => {\n    ss.add('5a600e19', 11);\n}).to.throw(/unique/);\n// quick exit test\nchai_1.expect(() => {\n    ss.add('5a600dff', ss._head.next[ss._level - 1].next.value);\n}).to.throw(/unique/);\n// this test ensures the key < key check doesn't come into play\nchai_1.expect(() => {\n    ss.add('5a600dff', 11);\n}).to.throw(/unique/);\nchai_1.expect(() => {\n    ss.add('5a600e18', 10);\n}).to.not.throw();\nchai_1.expect(ss).to.have.length(9);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "215de708-706a-46f0-b1ec-8e10a43fa64b",
                      "parentUUID": "f0c8d40b-fd2f-4dc7-8e8d-fc5a2107b10f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert keys if constraint broken during update",
                      "fullTitle": "sorted-set test skip map rewrite unique rewrite should revert keys if constraint broken during update",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet({ unique: true });\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(() => {\n    ss.add('5a600e13', 14);\n}).to.throw(/unique/);\nchai_1.expect(ss).to.have.length(9);\nchai_1.expect(ss.score('5a600e13')).to.equal(11);",
                      "err": {},
                      "uuid": "0bf93cd4-d68e-42aa-b467-9c46474dd9e7",
                      "parentUUID": "f0c8d40b-fd2f-4dc7-8e8d-fc5a2107b10f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "215de708-706a-46f0-b1ec-8e10a43fa64b",
                    "0bf93cd4-d68e-42aa-b467-9c46474dd9e7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "5528a53f-7430-40ee-b67e-d9f9577194c0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "aa86d455-9fa0-442e-a9f3-e2067ac0c803",
            "8021227a-4e33-46df-929f-ca48a337f8e1",
            "6ac3bc29-4318-4f28-b9b1-ec2a6b8257b0",
            "fdeb9466-c7c5-47fc-a2e7-9234afaeb2e0",
            "5945323e-0a07-4f4d-ac1a-62e8098cbba1",
            "254e0059-7741-434c-bbb2-77e2f3a0eb01",
            "1672335d-0b33-46b7-a4cb-20dc9d09c122",
            "93aa77b2-401a-4952-8218-90d35d2e6131"
          ],
          "failures": [],
          "pending": [
            "1a59e274-a0a5-4dab-9963-c775a9acaed0"
          ],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "reportDir": "docs/mochawesome"
      },
      "version": "4.1.0"
    }
  }
}