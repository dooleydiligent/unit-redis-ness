{
  "stats": {
    "suites": 38,
    "tests": 107,
    "passes": 104,
    "pending": 3,
    "failures": 0,
    "start": "2023-12-10T17:01:32.203Z",
    "end": "2023-12-10T17:01:32.662Z",
    "duration": 459,
    "testsRegistered": 107,
    "passPercent": 100,
    "pendingPercent": 2.803738317757009,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "791ea602-8a81-4b40-97fe-ba1c28f3326a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "done();",
          "err": {},
          "uuid": "747523e9-a5a5-43a9-bdd9-1f4d486c9ca8",
          "parentUUID": "791ea602-8a81-4b40-97fe-ba1c28f3326a",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "__awaiter(void 0, void 0, void 0, function* () {\n})",
          "err": {},
          "uuid": "84c4706a-e102-425d-bc99-52157ea9b20c",
          "parentUUID": "791ea602-8a81-4b40-97fe-ba1c28f3326a",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "36161cff-e603-4579-ab13-dbb3494b6029",
          "title": "client command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/client-command.test.ts",
          "file": "/test/resp/command/client-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"client command test\"",
              "fullTitle": "client command test \"before all\" hook in \"client command test\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on(\"ready\", () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "70e63736-04bf-43b2-8fce-102cb2e4b35e",
              "parentUUID": "36161cff-e603-4579-ab13-dbb3494b6029",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"client command test\"",
              "fullTitle": "client command test \"before each\" hook in \"client command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "907004c6-a0bb-478b-a65f-2dca0c1c33a7",
              "parentUUID": "36161cff-e603-4579-ab13-dbb3494b6029",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"client command test\"",
              "fullTitle": "client command test \"after all\" hook in \"client command test\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "39017a8d-a1fe-49bf-87b6-f9fb1606b15b",
              "parentUUID": "36161cff-e603-4579-ab13-dbb3494b6029",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"client command test\"",
              "fullTitle": "client command test \"after each\" hook in \"client command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "752a775c-9dcc-4285-bd65-876c5211a6f5",
              "parentUUID": "36161cff-e603-4579-ab13-dbb3494b6029",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow more than 3 parameters",
              "fullTitle": "client command test should not allow more than 3 parameters",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"one\",\n            \"two\",\n            \"three\",\n            \"four\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR Unknown subcommand or wrong number of arguments for 'one'. Try CLIENT HELP\");\n    })",
              "err": {},
              "uuid": "43475a42-692f-47af-99fa-e06370d09020",
              "parentUUID": "36161cff-e603-4579-ab13-dbb3494b6029",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail predictably when an unknown subcommand is passed",
              "fullTitle": "client command test should fail predictably when an unknown subcommand is passed",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"whatever\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(util.format(DEFAULT_ERROR, \"whatever\"));\n    })",
              "err": {},
              "uuid": "31f2dc8c-ce3b-4392-bfaf-f1785c8842f2",
              "parentUUID": "36161cff-e603-4579-ab13-dbb3494b6029",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a NIL name when called with \"GETNAME\" subcommand",
              "fullTitle": "client command test should return a NIL name when called with \"GETNAME\" subcommand",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"getname\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "80a24d7b-df7d-4030-9b9c-020fa369524a",
              "parentUUID": "36161cff-e603-4579-ab13-dbb3494b6029",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail predictably when \"GETNAME\" is called with too many parameters",
              "fullTitle": "client command test should fail predictably when \"GETNAME\" is called with too many parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"getname\",\n            \"extra\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(util.format(DEFAULT_ERROR, \"getname\"));\n    })",
              "err": {},
              "uuid": "a51fef2e-85ae-4de8-a8e4-71d122c1fab1",
              "parentUUID": "36161cff-e603-4579-ab13-dbb3494b6029",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with \"OK\" when \"setname\" is called with a valid name",
              "fullTitle": "client command test should respond with \"OK\" when \"setname\" is called with a valid name",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"setname\",\n            \"whatever\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"getname\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"whatever\");\n    })",
              "err": {},
              "uuid": "f266d3fc-5c50-4855-bd8b-308545b1c326",
              "parentUUID": "36161cff-e603-4579-ab13-dbb3494b6029",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should persist the value for \"setname\" across tests",
              "fullTitle": "client command test should persist the value for \"setname\" across tests",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"getname\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"whatever\");\n    })",
              "err": {},
              "uuid": "1e350ade-4307-4d3e-8ef0-788648153d11",
              "parentUUID": "36161cff-e603-4579-ab13-dbb3494b6029",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"setname\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"setname\" called with too many parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"setname\",\n            \"test\",\n            \"two\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(util.format(DEFAULT_ERROR, \"setname\"));\n    })",
              "err": {},
              "uuid": "410b3822-aa15-43df-a078-13c4115526f7",
              "parentUUID": "36161cff-e603-4579-ab13-dbb3494b6029",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow whitespace in \"setname\" subcommand",
              "fullTitle": "client command test should not allow whitespace in \"setname\" subcommand",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"setname\",\n            \"te\\nst\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR Client names cannot contain spaces, newlines or special characters.\");\n    })",
              "err": {},
              "uuid": "0848f918-69ea-4899-aafa-25d2cc767d89",
              "parentUUID": "36161cff-e603-4579-ab13-dbb3494b6029",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the server-assigned client id",
              "fullTitle": "client command test should return the server-assigned client id",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"id\"\n        ]);\n        (0, chai_1.expect)(response).to.be.a(\"number\");\n        (0, chai_1.expect)(String(response).length).to.be.greaterThan(0);\n    })",
              "err": {},
              "uuid": "c5780456-ed59-45c9-8f2a-0365898fc90b",
              "parentUUID": "36161cff-e603-4579-ab13-dbb3494b6029",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"id\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"id\" called with too many parameters",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"id\",\n            \"test\",\n            \"two\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(util.format(DEFAULT_ERROR, \"id\"));\n    })",
              "err": {},
              "uuid": "fce902e2-a54e-48ac-8b01-7e5c52c757e9",
              "parentUUID": "36161cff-e603-4579-ab13-dbb3494b6029",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a bunch of information when client \"list\" subcommand is invoked",
              "fullTitle": "client command test should return a bunch of information when client \"list\" subcommand is invoked",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"list\"\n        ]);\n        (0, chai_1.expect)(response).to.be.a(\"string\");\n        (0, chai_1.expect)(response.length).to.be.greaterThan(0);\n        (0, chai_1.expect)(response).to.match(/ name=whatever /);\n        (0, chai_1.expect)(response).to.match(/\\bdb=0\\b/);\n    })",
              "err": {},
              "uuid": "54e359a5-7cd3-4e90-bbb9-f0a849ca8ac6",
              "parentUUID": "36161cff-e603-4579-ab13-dbb3494b6029",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"list\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"list\" called with too many parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield (0, common_test_1.sendCommand)(client, [\n            \"client\",\n            \"list\",\n            \"test\",\n            \"two\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR syntax error\");\n    })",
              "err": {},
              "uuid": "d8934a57-4cde-47b1-9c76-dae00feadc99",
              "parentUUID": "36161cff-e603-4579-ab13-dbb3494b6029",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "43475a42-692f-47af-99fa-e06370d09020",
            "31f2dc8c-ce3b-4392-bfaf-f1785c8842f2",
            "80a24d7b-df7d-4030-9b9c-020fa369524a",
            "a51fef2e-85ae-4de8-a8e4-71d122c1fab1",
            "f266d3fc-5c50-4855-bd8b-308545b1c326",
            "1e350ade-4307-4d3e-8ef0-788648153d11",
            "410b3822-aa15-43df-a078-13c4115526f7",
            "0848f918-69ea-4899-aafa-25d2cc767d89",
            "c5780456-ed59-45c9-8f2a-0365898fc90b",
            "fce902e2-a54e-48ac-8b01-7e5c52c757e9",
            "54e359a5-7cd3-4e90-bbb9-f0a849ca8ac6",
            "d8934a57-4cde-47b1-9c76-dae00feadc99"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 46,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ff5ccd43-6d17-4bcb-b5ad-03bd6f9c06d6",
          "title": "multi command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/multi-command.test.ts",
          "file": "/test/resp/command/multi-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"multi command test\"",
              "fullTitle": "multi command test \"before all\" hook in \"multi command test\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on(\"ready\", () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "c92ac261-54c5-4cac-b166-e88478d8024d",
              "parentUUID": "ff5ccd43-6d17-4bcb-b5ad-03bd6f9c06d6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"multi command test\"",
              "fullTitle": "multi command test \"before each\" hook in \"multi command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "40aeb74a-f1ef-4d50-bb78-89fc61b73cff",
              "parentUUID": "ff5ccd43-6d17-4bcb-b5ad-03bd6f9c06d6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"multi command test\"",
              "fullTitle": "multi command test \"after all\" hook in \"multi command test\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "a97754e7-d8eb-4805-a22c-0b74d735a060",
              "parentUUID": "ff5ccd43-6d17-4bcb-b5ad-03bd6f9c06d6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"multi command test\"",
              "fullTitle": "multi command test \"after each\" hook in \"multi command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "fd3a7215-0e07-4411-9d82-2f82e606b7d9",
              "parentUUID": "ff5ccd43-6d17-4bcb-b5ad-03bd6f9c06d6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow nested MULTI invocations",
              "fullTitle": "multi command test should not allow nested MULTI invocations",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"multi\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\"multi\"]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR MULTI calls can not be nested\");\n    })",
              "err": {},
              "uuid": "577973a7-5222-4d1c-bebd-dfe6c1f76476",
              "parentUUID": "ff5ccd43-6d17-4bcb-b5ad-03bd6f9c06d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect the DISCARD command",
              "fullTitle": "multi command test should respect the DISCARD command",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"discard\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n    })",
              "err": {},
              "uuid": "6b70e89f-6f2d-4885-b380-d095ca723254",
              "parentUUID": "ff5ccd43-6d17-4bcb-b5ad-03bd6f9c06d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow DISCARD without MULTI",
              "fullTitle": "multi command test should not allow DISCARD without MULTI",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"discard\"]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR DISCARD without MULTI\");\n    })",
              "err": {},
              "uuid": "b7e43b26-6cae-42a7-a413-48c8bd187f75",
              "parentUUID": "ff5ccd43-6d17-4bcb-b5ad-03bd6f9c06d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should continue to validate commands after MULTI",
              "fullTitle": "multi command test should continue to validate commands after MULTI",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"multi\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"unknown\",\n            \"command\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR unknown command `unknown`, with args beginning with: `command`, \", `${response}`);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpush\",\n            \"test\",\n            \"one\",\n            \"two\",\n            \"three\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"QUEUED\");\n    })",
              "err": {},
              "uuid": "e3b59f8f-ce61-40ba-96f8-fd387f741d13",
              "parentUUID": "ff5ccd43-6d17-4bcb-b5ad-03bd6f9c06d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should EXECABORT from a previous error",
              "fullTitle": "multi command test should EXECABORT from a previous error",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"exec\"]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: EXECABORT Transaction discarded because of previous errors.\");\n    })",
              "err": {},
              "uuid": "0574b492-b682-47e5-bc6c-159d38fc05ff",
              "parentUUID": "ff5ccd43-6d17-4bcb-b5ad-03bd6f9c06d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should queue a set of commands when there is no intervening error",
              "fullTitle": "multi command test should queue a set of commands when there is no intervening error",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"multi\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpush\",\n            \"test\",\n            \"one\",\n            \"two\",\n            \"three\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"QUEUED\");\n        response = yield (0, common_test_1.sendCommand)(client, [\"exec\"]);\n        (0, chai_1.expect)(response).to.eql([3]);\n    })",
              "err": {},
              "uuid": "c2290281-08c2-42af-a820-ecb7443a4719",
              "parentUUID": "ff5ccd43-6d17-4bcb-b5ad-03bd6f9c06d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reset transaction state after executing commands",
              "fullTitle": "multi command test should reset transaction state after executing commands",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"multi\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\"discard\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n    })",
              "err": {},
              "uuid": "3dfbe896-17a2-462b-95dd-14d4c202c6c3",
              "parentUUID": "ff5ccd43-6d17-4bcb-b5ad-03bd6f9c06d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the results of multiple commands in the order provided",
              "fullTitle": "multi command test should return the results of multiple commands in the order provided",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"multi\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpop\",\n            \"test\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"QUEUED\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpop\",\n            \"test\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"QUEUED\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"brpoplpush\",\n            \"test\",\n            \"dest\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"QUEUED\");\n        response = yield (0, common_test_1.sendCommand)(client, [\"exec\"]);\n        (0, chai_1.expect)(response).to.eql([\n            \"three\",\n            \"two\",\n            \"one\"\n        ]);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"exists\",\n            \"test\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(0);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"exists\",\n            \"dest\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "28bfcc38-3885-4475-bdcc-c078cdc8df98",
              "parentUUID": "ff5ccd43-6d17-4bcb-b5ad-03bd6f9c06d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate the behavior of brpoplpush",
              "fullTitle": "multi command test should validate the behavior of brpoplpush",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"flushall\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpush\",\n            \"test\",\n            \"one\",\n            \"two\",\n            \"three\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(3);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpop\",\n            \"test\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"three\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"lpop\",\n            \"test\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"two\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"brpoplpush\",\n            \"test\",\n            \"dest\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"one\");\n    })",
              "err": {},
              "uuid": "ba114d44-0f35-4341-9c9b-8da1b0d18993",
              "parentUUID": "ff5ccd43-6d17-4bcb-b5ad-03bd6f9c06d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when EXEC issued without MULTI",
              "fullTitle": "multi command test should fail when EXEC issued without MULTI",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"exec\"]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR EXEC without MULTI\");\n    })",
              "err": {},
              "uuid": "78db57be-fa91-4f13-9018-d11f6ae37786",
              "parentUUID": "ff5ccd43-6d17-4bcb-b5ad-03bd6f9c06d6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "577973a7-5222-4d1c-bebd-dfe6c1f76476",
            "6b70e89f-6f2d-4885-b380-d095ca723254",
            "b7e43b26-6cae-42a7-a413-48c8bd187f75",
            "e3b59f8f-ce61-40ba-96f8-fd387f741d13",
            "0574b492-b682-47e5-bc6c-159d38fc05ff",
            "c2290281-08c2-42af-a820-ecb7443a4719",
            "3dfbe896-17a2-462b-95dd-14d4c202c6c3",
            "28bfcc38-3885-4475-bdcc-c078cdc8df98",
            "ba114d44-0f35-4341-9c9b-8da1b0d18993",
            "78db57be-fa91-4f13-9018-d11f6ae37786"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 37,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
          "title": "script-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/script-command.test.ts",
          "file": "/test/resp/command/script-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"script-command test\"",
              "fullTitle": "script-command test \"before all\" hook in \"script-command test\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on(\"ready\", () => __awaiter(void 0, void 0, void 0, function* () {\n    yield (0, common_test_1.sendCommand)(client, [\"flushall\"]);\n    yield (0, common_test_1.sendCommand)(client, [\n        \"select\",\n        \"0\"\n    ]);\n    yield (0, common_test_1.sendCommand)(client, [\n        \"script\",\n        \"flush\"\n    ]);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "129b1a4e-f34e-4cab-9ec9-6fc1aa1b5f31",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"script-command test\"",
              "fullTitle": "script-command test \"before each\" hook in \"script-command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "2cd3ecf8-fe28-4abf-939e-dab0eb8b78e0",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"script-command test\"",
              "fullTitle": "script-command test \"after all\" hook in \"script-command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "070e464c-85fd-42b0-bf24-f0e21f3c412d",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"script-command test\"",
              "fullTitle": "script-command test \"after each\" hook in \"script-command test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "81cb538e-3e4e-4c3a-ae51-f2a66988b063",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should calcuclate the correct sha1 of a script and store the script",
              "fullTitle": "script-command test should calcuclate the correct sha1 of a script and store the script",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"script\",\n            \"exists\",\n            sha1\n        ]);\n        (0, chai_1.expect)(response).to.eql([0]);\n        // Validate failure on unparseable script\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"script\",\n            \"load\",\n            code\n        ]);\n        (0, chai_1.expect)(response).to.match(/ReplyError: ERR .*/);\n        // Validate success on parseable script\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"script\",\n            \"load\",\n            `${code}}`\n        ]);\n        (0, chai_1.expect)(response).to.equal(sha1);\n        // Validate a script is persisted\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"script\",\n            \"exists\",\n            sha1\n        ]);\n        (0, chai_1.expect)(response).to.eql([1]);\n        // Validate response to unknown sub command\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"script\",\n            \"test\",\n            sha1\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR Unknown subcommand or wrong number of arguments for 'test'. Try SCRIPT HELP.\");\n    })",
              "err": {},
              "uuid": "f38712b4-f6ae-4282-ac26-3d82a70044bb",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should evaluate a loaded lua script using evalsha",
              "fullTitle": "script-command test should evaluate a loaded lua script using evalsha",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Validate that NOSCRIPT is triggered\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"evalsha\",\n            `${sha1}xx`,\n            \"2\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: NOSCRIPT No matching script. Please use EVAL.\");\n        // Validate that param 1 cannot be negative\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"evalsha\",\n            sha1,\n            \"-2\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR Number of keys can't be negative\");\n        // Validate that param 1 cannot be text\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"evalsha\",\n            sha1,\n            \"two\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR value is not an integer or out of range\");\n    })",
              "err": {},
              "uuid": "68296c5f-80af-41b8-bd83-6ddf31f76a58",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should execute a simple script",
              "fullTitle": "script-command test should execute a simple script",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Validate that a simple script can be processed\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"EVAL\",\n            \"local val=\\\"Hello Compose\\\" return val\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"Hello Compose\");\n    })",
              "err": {},
              "uuid": "fa5bbb47-4d0f-4760-9658-4ff0d4adaf91",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create and process the ARGV table",
              "fullTitle": "script-command test should create and process the ARGV table",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return ARGV[2]\",\n            \"2\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\"\n        ]);\n        (0, chai_1.expect)(response).to.eql(\"second\");\n    })",
              "err": {},
              "uuid": "ddb4edc8-1444-4dac-bad2-b881286432ea",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create and process the KEYS table",
              "fullTitle": "script-command test should create and process the KEYS table",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return KEYS[1]\",\n            \"2\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(\"key1\");\n    })",
              "err": {},
              "uuid": "dfa2604c-0b84-4ff4-9ab9-a6e3479317e6",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a NUMBER when required",
              "fullTitle": "script-command test should return a NUMBER when required",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return 123\",\n            \"2\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(123);\n    })",
              "err": {},
              "uuid": "1ade0507-1f38-4de5-b2e0-11d41ca8b47b",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NIL when there is no return value",
              "fullTitle": "script-command test should return NIL when there is no return value",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"print \\\"Hello World\\\"\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "2e796cbc-f7d5-4191-bf94-be16178738f8",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a TABLE when required",
              "fullTitle": "script-command test should return a TABLE when required",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return ARGV\",\n            \"2\",\n            \"key1\",\n            \"key2\",\n            \"first\",\n            \"second\",\n            \"third\"\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            \"first\",\n            \"second\",\n            \"third\"\n        ]);\n    })",
              "err": {},
              "uuid": "f35c392a-4e78-427e-ab16-56c0bf77af99",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return items in order",
              "fullTitle": "script-command test should return items in order",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return {true, \\\"test\\\", false, 10, 10.2}\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            1,\n            \"test\",\n            null,\n            10,\n            10\n        ]);\n    })",
              "err": {},
              "uuid": "5ee673a8-a5ee-4841-a41b-3c7852b33b06",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return integer and nil for true and false, respectively",
              "fullTitle": "script-command test should return integer and nil for true and false, respectively",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return { true, false, false}\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            1,\n            null,\n            null\n        ]);\n    })",
              "err": {},
              "uuid": "c27d2dce-06e0-4e8c-9299-8142ff7b7b79",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to execute a representative BULL script",
              "fullTitle": "script-command test should be able to execute a representative BULL script",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "f2cbd588-a0ca-45bc-a8a9-0710175e71a8",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when we attempt to EVAL an invalid script",
              "fullTitle": "script-command test should fail when we attempt to EVAL an invalid script",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"-- Invalid\\r\\nscript\"\n        ]);\n        // Validated against redis\n        (0, chai_1.expect)(response).to.equal(\"ReplyError: ERR wrong number of arguments for 'eval' command\");\n    })",
              "err": {},
              "uuid": "56a06dbb-15a4-476b-ae79-3318573bd894",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to return a NULL value from a lua script",
              "fullTitle": "script-command test should be able to return a NULL value from a lua script",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = nil return val\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "83e64adf-c1f3-42cc-9e28-a3e15c39fa09",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return table values after the first NIL is encountered and return integers not floats",
              "fullTitle": "script-command test should not return table values after the first NIL is encountered and return integers not floats",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "9fcea2c6-9e6c-4893-84d0-16c6fc99ed90",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a table with embedded calls to redis",
              "fullTitle": "script-command test should return a table with embedded calls to redis",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"flushall\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"hset\",\n            embeddedkey,\n            \"one\",\n            \"1\",\n            \"two\",\n            \"2\",\n            \"three\",\n            \"3\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(3);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"hgetall\",\n            embeddedkey\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            \"one\",\n            \"1\",\n            \"two\",\n            \"2\",\n            \"three\",\n            \"3\"\n        ]);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            `local j = redis.call(\"HGETALL\", \"${embeddedkey}\") return { j, \"SAMPLE\" }`,\n            \"0\"\n        ]);\n        // Validated with redis\n        (0, chai_1.expect)(response).to.eql([\n            \"SAMPLE\",\n            [\n                \"one\",\n                \"1\",\n                \"two\",\n                \"2\",\n                \"three\",\n                \"3\"\n            ]\n        ]);\n    })",
              "err": {},
              "uuid": "a5754bf0-d550-4119-b887-21b3fd776069",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support the unpack lua command",
              "fullTitle": "script-command test should support the unpack lua command",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\"flushall\"]);\n        (0, chai_1.expect)(response).to.equal(\"OK\");\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"hset\",\n            embeddedkey,\n            \"one\",\n            \"1\",\n            \"two\",\n            \"2\",\n            \"three\",\n            \"3\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(3);\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            `return { unpack(redis.call(\"hgetall\", \"${embeddedkey}\")) }`,\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            \"one\",\n            \"1\",\n            \"two\",\n            \"2\",\n            \"three\",\n            \"3\"\n        ]);\n    })",
              "err": {},
              "uuid": "a37716eb-3a53-428b-ac23-7b2bb2a51c04",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert values properly",
              "fullTitle": "script-command test should convert values properly",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return {1,2,{3,'Hello World!'}}\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            1,\n            2,\n            [\n                3,\n                \"Hello World!\"\n            ]\n        ]);\n    })",
              "err": {},
              "uuid": "f9395b30-8ab7-4265-9aeb-605663c9d78e",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return embedded tables from embedded calls",
              "fullTitle": "script-command test should return embedded tables from embedded calls",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"return {1,2,{3,bit.bxor(5,3)}}\",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.eql([\n            1,\n            2,\n            [\n                3,\n                6\n            ]\n        ]);\n    })",
              "err": {},
              "uuid": "5eee01b9-6f9b-42fc-b500-cc2dcab0f2a4",
              "parentUUID": "aed9fbfc-e144-4cd9-b298-e4a1820108bc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f38712b4-f6ae-4282-ac26-3d82a70044bb",
            "68296c5f-80af-41b8-bd83-6ddf31f76a58",
            "fa5bbb47-4d0f-4760-9658-4ff0d4adaf91",
            "ddb4edc8-1444-4dac-bad2-b881286432ea",
            "dfa2604c-0b84-4ff4-9ab9-a6e3479317e6",
            "1ade0507-1f38-4de5-b2e0-11d41ca8b47b",
            "2e796cbc-f7d5-4191-bf94-be16178738f8",
            "f35c392a-4e78-427e-ab16-56c0bf77af99",
            "5ee673a8-a5ee-4841-a41b-3c7852b33b06",
            "c27d2dce-06e0-4e8c-9299-8142ff7b7b79",
            "56a06dbb-15a4-476b-ae79-3318573bd894",
            "83e64adf-c1f3-42cc-9e28-a3e15c39fa09",
            "a5754bf0-d550-4119-b887-21b3fd776069",
            "a37716eb-3a53-428b-ac23-7b2bb2a51c04",
            "f9395b30-8ab7-4265-9aeb-605663c9d78e",
            "5eee01b9-6f9b-42fc-b500-cc2dcab0f2a4"
          ],
          "failures": [],
          "pending": [
            "f2cbd588-a0ca-45bc-a8a9-0710175e71a8",
            "9fcea2c6-9e6c-4893-84d0-16c6fc99ed90"
          ],
          "skipped": [],
          "duration": 181,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c00b683d-5c3a-4ca5-bc39-341ece0dcacf",
          "title": "data-type test",
          "fullFile": "/home/lane/git/redis/test/resp/data/data-type.test.ts",
          "file": "/test/resp/data/data-type.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"data-type test\"",
              "fullTitle": "data-type test \"before each\" hook in \"data-type test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "8efa5e95-c251-4972-bd1e-131b43ba4120",
              "parentUUID": "c00b683d-5c3a-4ca5-bc39-341ece0dcacf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"data-type test\"",
              "fullTitle": "data-type test \"after all\" hook in \"data-type test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "925dc4b6-7014-4733-a114-bdba82c7c58f",
              "parentUUID": "c00b683d-5c3a-4ca5-bc39-341ece0dcacf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"data-type test\"",
              "fullTitle": "data-type test \"after each\" hook in \"data-type test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "ec0b9ecf-f69c-41e9-9bf1-f04860e8db73",
              "parentUUID": "c00b683d-5c3a-4ca5-bc39-341ece0dcacf",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should enumerate data-types",
              "fullTitle": "data-type test should enumerate data-types",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        (0, chai_1.expect)(data_type_1.DataType.NONE).to.equal(\"none\");\n        (0, chai_1.expect)(data_type_1.DataType.STRING).to.equal(\"string\");\n        (0, chai_1.expect)(data_type_1.DataType.LIST).to.equal(\"list\");\n        (0, chai_1.expect)(data_type_1.DataType.SET).to.equal(\"set\");\n        (0, chai_1.expect)(data_type_1.DataType.ZSET).to.equal(\"zset\");\n        (0, chai_1.expect)(data_type_1.DataType.HASH).to.equal(\"hash\");\n        (0, chai_1.expect)(Object.keys(data_type_1.DataType).length).to.equal(6);\n    })",
              "err": {},
              "uuid": "bec43970-7ed3-4b4a-965f-3395f4d25c14",
              "parentUUID": "c00b683d-5c3a-4ca5-bc39-341ece0dcacf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bec43970-7ed3-4b4a-965f-3395f4d25c14"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "be1ab9ec-e8d9-47a7-824b-a4d35b7132f4",
          "title": "sorted-set test",
          "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
          "file": "/test/resp/data/sorted-set.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"sorted-set test\"",
              "fullTitle": "sorted-set test \"before each\" hook in \"sorted-set test\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();\nss = new sorted_set_1.SortedSet();\nz = new Z();",
              "err": {},
              "uuid": "78436d2b-a3ff-4f6b-9a14-6ddbd2e3ba0a",
              "parentUUID": "be1ab9ec-e8d9-47a7-824b-a4d35b7132f4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"sorted-set test\"",
              "fullTitle": "sorted-set test \"after all\" hook in \"sorted-set test\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "ebdcbfc3-c630-4132-bfad-3925181659d9",
              "parentUUID": "be1ab9ec-e8d9-47a7-824b-a4d35b7132f4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"sorted-set test\"",
              "fullTitle": "sorted-set test \"after each\" hook in \"sorted-set test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "813c67ab-27df-41e4-91e1-5bb389362d5a",
              "parentUUID": "be1ab9ec-e8d9-47a7-824b-a4d35b7132f4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should instantiate",
              "fullTitle": "sorted-set test should instantiate",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        (0, chai_1.expect)(z.constructor.name).to.equal(\"Z\");\n        ss = new sorted_set_1.SortedSet();\n        (0, chai_1.expect)(ss.constructor.name).to.equal(\"SortedSet\");\n    })",
              "err": {},
              "uuid": "d5ea1249-5499-44b5-9084-8699dd00de37",
              "parentUUID": "be1ab9ec-e8d9-47a7-824b-a4d35b7132f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add, get, and delete an entry",
              "fullTitle": "sorted-set test should add, get, and delete an entry",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add(\"test\", 1);\n        (0, chai_1.expect)(added).to.equal(null);\n        added = ss.add(\"test\", 1);\n        (0, chai_1.expect)(added).to.equal(null);\n        (0, chai_1.expect)(z.keys().length).to.equal(1);\n        (0, chai_1.expect)(ss.keys().length).to.equal(1);\n        let item = z.get(\"test\");\n        (0, chai_1.expect)(item.constructor.name).to.equal(\"Number\");\n        item = ss.get(\"test\");\n        (0, chai_1.expect)(item.constructor.name).to.equal(\"Number\");\n        z.del(\"test\");\n        (0, chai_1.expect)(z.keys().length).to.equal(0);\n        ss.del(\"test\");\n        (0, chai_1.expect)(ss.keys().length).to.equal(0);\n    })",
              "err": {},
              "uuid": "37847d96-a91c-4a64-8c4d-28c56c8da18d",
              "parentUUID": "be1ab9ec-e8d9-47a7-824b-a4d35b7132f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw when attempting to add __proto__ key",
              "fullTitle": "sorted-set test should throw when attempting to add __proto__ key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        (0, chai_1.expect)(() => {\n            z.add(\"__proto__\", 0);\n        }).to.throw();\n        /*\n         * Expect(() => {\n         *   ss.add('__proto__', 0)\n         * }).to.throw();\n         */\n    })",
              "err": {},
              "uuid": "d9fbdc1e-d2ef-4207-8592-9e3c71453109",
              "parentUUID": "be1ab9ec-e8d9-47a7-824b-a4d35b7132f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add an undefined or null score",
              "fullTitle": "sorted-set test should not add an undefined or null score",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add(\"test\", null);\n        (0, chai_1.expect)(added).to.equal(null);\n        (0, chai_1.expect)(z.keys().length).to.equal(0);\n        added = z.add(\"test\", undefined);\n        (0, chai_1.expect)(z.keys().length).to.equal(0);\n        /*\n         * Typescript prevents adding null\n         * added = ss.add('test', null);\n         * expect(added).to.equal(null);\n         * expect(ss.keys().length).to.equal(0);\n         * added = ss.add('test', undefined);\n         * expect(z.keys().length).to.equal(0);\n         */\n    })",
              "err": {},
              "uuid": "6ddbaf68-6f7b-474f-ad8c-50d8be8a0a83",
              "parentUUID": "be1ab9ec-e8d9-47a7-824b-a4d35b7132f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not duplicate key/value pairs",
              "fullTitle": "sorted-set test should not duplicate key/value pairs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add(\"test\", 123);\n        (0, chai_1.expect)(added).to.equal(null); // This is weird\n        (0, chai_1.expect)(z.keys().length).to.equal(1);\n        added = z.add(\"test\", 123);\n        (0, chai_1.expect)(added).to.equal(123); // And weirder\n        (0, chai_1.expect)(z.keys().length).to.equal(1);\n        added = ss.add(\"test\", 123);\n        (0, chai_1.expect)(added).to.equal(null); // This is weird\n        (0, chai_1.expect)(ss.keys().length).to.equal(1);\n        added = ss.add(\"test\", 123);\n        (0, chai_1.expect)(added).to.equal(123); // And weirder\n        (0, chai_1.expect)(ss.keys().length).to.equal(1);\n    })",
              "err": {},
              "uuid": "c85f45a1-8a4d-42f9-b03f-fbd75575b9b4",
              "parentUUID": "be1ab9ec-e8d9-47a7-824b-a4d35b7132f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the old rank when replacing a key",
              "fullTitle": "sorted-set test should return the old rank when replacing a key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add(\"test\", 123);\n        (0, chai_1.expect)(added).to.equal(null);\n        (0, chai_1.expect)(z.keys().length).to.equal(1);\n        added = z.add(\"test\", 321);\n        (0, chai_1.expect)(added).to.equal(123);\n        (0, chai_1.expect)(z.keys().length).to.equal(1);\n        added = z.get(\"test\");\n        (0, chai_1.expect)(added).to.equal(321);\n        added = ss.add(\"test\", 123);\n        (0, chai_1.expect)(added).to.equal(null);\n        (0, chai_1.expect)(ss.keys().length).to.equal(1);\n        added = ss.add(\"test\", 321);\n        (0, chai_1.expect)(added).to.equal(123);\n        (0, chai_1.expect)(ss.keys().length).to.equal(1);\n        added = ss.get(\"test\");\n        (0, chai_1.expect)(added).to.equal(321);\n    })",
              "err": {},
              "uuid": "c64998c5-df89-456a-89b2-c8c6d2d0f7af",
              "parentUUID": "be1ab9ec-e8d9-47a7-824b-a4d35b7132f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a value when adding at least 32 values (I think - it is difficult to tell)",
              "fullTitle": "sorted-set test should return a value when adding at least 32 values (I think - it is difficult to tell)",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "a2893711-f5f6-40ca-a44d-71c07121b53b",
              "parentUUID": "be1ab9ec-e8d9-47a7-824b-a4d35b7132f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "fullTitle": "sorted-set test should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        (0, chai_1.expect)(z.add(\"Terminator\", 8.0)).to.equal(null); // => null\n        (0, chai_1.expect)(z.add(\"District 9\", 8.0)).to.equal(null); // => null\n        (0, chai_1.expect)(z.add(\"Ex Machina\", 0.7)).to.equal(null); // => null\n        (0, chai_1.expect)(z.add(\"Ex Machina\", 7.7)).to.equal(0.7); // => 0.7\n        // Alias\n        (0, chai_1.expect)(z.set(\"The Matrix\", 8.7)).to.equal(null); // => null\n        // Average O(1)\n        (0, chai_1.expect)(z.has(\"Terminator\")).to.equal(true); // => true\n        (0, chai_1.expect)(z.has(\"Blade Runner\")).to.equal(false); // => false\n        // Average O(1)\n        (0, chai_1.expect)(z.score(\"Ex Machina\")).to.equal(7.7); // => 7.7\n        (0, chai_1.expect)(z.score(\"Blade Runner\")).to.equal(null); // => null\n        // Alias\n        (0, chai_1.expect)(z.get(\"The Matrix\")).to.equal(8.7); // => 8.7\n        // Average O(log(N))\n        (0, chai_1.expect)(z.rem(\"Ex Machina\")).to.equal(7.7); // => 7.7\n        // Average O(1)\n        (0, chai_1.expect)(z.rem(\"Ex Machina\")).to.equal(null); // => null\n        // Alias\n        (0, chai_1.expect)(z.del(\"Ex Machina\")).to.equal(null); // => null\n        /*\n         * Average O(log(N)+M) where M is the number of elements between min and max\n         * This is not working as expected\n         */\n        (0, chai_1.expect)(z.rangeByScore(7, 8)).to.eql([\n            \"District 9\",\n            \"Terminator\"\n        ]);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        (0, chai_1.expect)(z.rangeByScore(8)).to.eql([\n            \"District 9\",\n            \"Terminator\",\n            \"The Matrix\"\n        ]); // [8.0-∞)\n        // => ['District 9', 'Terminator', 'The Matrix']\n        (0, chai_1.expect)(z.rangeByScore(8, null, { \"withScores\": true })).to.eql([\n            [\n                \"District 9\",\n                8.0\n            ],\n            [\n                \"Terminator\",\n                8.0\n            ],\n            [\n                \"The Matrix\",\n                8.7\n            ]\n        ]);\n        // => [['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]\n        /*\n         * Average O(log(N)+log(M)) where M as in rangeByScore\n         * Again - not as expected\n         */\n        (0, chai_1.expect)(z.count(7, 8)).to.equal(2); // => 3\n        /*\n         * Average O(log(N))\n         * Not working as expected\n         */\n        (0, chai_1.expect)(z.rank(\"Ex Machina\")).to.equal(null); // => 0\n        // Not working as expected\n        (0, chai_1.expect)(z.rank(\"Terminator\")).to.equal(1); // => 2\n        (0, chai_1.expect)(z.rank(\"Blade Runner\")).to.equal(null); // => null\n        /*\n         * Average O(log(N)+M) where M as in range\n         * Not working as expected\n         */\n        (0, chai_1.expect)(z.range(0, 2)).to.eql([\n            \"District 9\",\n            \"Terminator\",\n            \"The Matrix\"\n        ]);\n        /*\n         * => ['Ex Machina', 'District 9', 'Terminator']\n         * Not working as expected\n         */\n        (0, chai_1.expect)(z.range(0, 2, { \"withScores\": true })).to.eql([\n            [\n                \"District 9\",\n                8\n            ],\n            [\n                \"Terminator\",\n                8\n            ],\n            [\n                \"The Matrix\",\n                8.7\n            ]\n        ]);\n        /*\n         * => [['Ex Machina', 7.7],\n         *     ['District 9', 8],\n         *     ['Terminator', 8]]\n         */\n        (0, chai_1.expect)(z.range(-1)).to.eql([\"The Matrix\"]); // => ['The Matrix']\n        /*\n         * Almost alias\n         * Not working as expected\n         */\n        (0, chai_1.expect)(z.slice(0, 3)).to.eql([\n            \"District 9\",\n            \"Terminator\",\n            \"The Matrix\"\n        ]);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        /*\n         * Set cardinality (number of elements)\n         * Average O(1)\n         * Not working as expected\n         */\n        (0, chai_1.expect)(z.card()).to.equal(3); // => 4\n        /*\n         * Alias\n         * Not working as expected\n         */\n        (0, chai_1.expect)(z.length).to.equal(3); // => 4\n    })",
              "err": {},
              "uuid": "cec49767-6b04-4d83-94df-68a31c76c7d8",
              "parentUUID": "be1ab9ec-e8d9-47a7-824b-a4d35b7132f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "the rewrite should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "fullTitle": "sorted-set test the rewrite should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        (0, chai_1.expect)(ss.add(\"Terminator\", 8.0)).to.equal(null); // => null\n        (0, chai_1.expect)(ss.add(\"District 9\", 8.0)).to.equal(null); // => null\n        (0, chai_1.expect)(ss.add(\"Ex Machina\", 0.7)).to.equal(null); // => null\n        (0, chai_1.expect)(ss.add(\"Ex Machina\", 7.7)).to.equal(0.7); // => 0.7\n        // Alias\n        (0, chai_1.expect)(ss.set(\"The Matrix\", 8.7)).to.equal(null); // => null\n        // Average O(1)\n        (0, chai_1.expect)(ss.has(\"Terminator\")).to.equal(true); // => true\n        (0, chai_1.expect)(ss.has(\"Blade Runner\")).to.equal(false); // => false\n        // Average O(1)\n        (0, chai_1.expect)(ss.score(\"Ex Machina\")).to.equal(7.7); // => 7.7\n        (0, chai_1.expect)(ss.score(\"Blade Runner\")).to.equal(null); // => null\n        // Alias\n        (0, chai_1.expect)(ss.get(\"The Matrix\")).to.equal(8.7); // => 8.7\n        // Average O(log(N))\n        (0, chai_1.expect)(ss.rem(\"Ex Machina\")).to.equal(7.7); // => 7.7\n        // Average O(1)\n        (0, chai_1.expect)(ss.rem(\"Ex Machina\")).to.equal(null); // => null\n        // Alias\n        (0, chai_1.expect)(ss.del(\"Ex Machina\")).to.equal(null); // => null\n        /*\n         * Average O(log(N)+M) where M is the number of elements between min and max\n         * This is not working as expected\n         */\n        (0, chai_1.expect)(ss.rangeByScore(7, 8)).to.eql([\n            \"District 9\",\n            \"Terminator\"\n        ]);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        (0, chai_1.expect)(ss.rangeByScore(8)).to.eql([\n            \"District 9\",\n            \"Terminator\",\n            \"The Matrix\"\n        ]); // [8.0-∞)\n        // => ['District 9', 'Terminator', 'The Matrix']\n        (0, chai_1.expect)(ss.rangeByScore(8, null, { \"withScores\": true })).to.eql([\n            [\n                \"District 9\",\n                8.0\n            ],\n            [\n                \"Terminator\",\n                8.0\n            ],\n            [\n                \"The Matrix\",\n                8.7\n            ]\n        ]);\n        // => [['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]\n        /*\n         * Average O(log(N)+log(M)) where M as in rangeByScore\n         * Again - not as expected\n         */\n        (0, chai_1.expect)(ss.count(7, 8)).to.equal(2); // => 3\n        /*\n         * Average O(log(N))\n         * Not working as expected\n         */\n        (0, chai_1.expect)(ss.rank(\"Ex Machina\")).to.equal(null); // => 0\n        // Not working as expected\n        (0, chai_1.expect)(ss.rank(\"Terminator\")).to.equal(1); // => 2\n        (0, chai_1.expect)(ss.rank(\"Blade Runner\")).to.equal(null); // => null\n        /*\n         * Average O(log(N)+M) where M as in range\n         * Not working as expected\n         */\n        (0, chai_1.expect)(ss.range(0, 2)).to.eql([\n            \"District 9\",\n            \"Terminator\",\n            \"The Matrix\"\n        ]);\n        /*\n         * => ['Ex Machina', 'District 9', 'Terminator']\n         * Not working as expected\n         */\n        (0, chai_1.expect)(ss.range(0, 2, { \"withScores\": true })).to.eql([\n            [\n                \"District 9\",\n                8\n            ],\n            [\n                \"Terminator\",\n                8\n            ],\n            [\n                \"The Matrix\",\n                8.7\n            ]\n        ]);\n        /*\n         * => [['Ex Machina', 7.7],\n         *     ['District 9', 8],\n         *     ['Terminator', 8]]\n         */\n        (0, chai_1.expect)(ss.range(-1)).to.eql([\"The Matrix\"]); // => ['The Matrix']\n        /*\n         * Almost alias\n         * Not working as expected\n         */\n        (0, chai_1.expect)(ss.slice(0, 3)).to.eql([\n            \"District 9\",\n            \"Terminator\",\n            \"The Matrix\"\n        ]);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        /*\n         * Set cardinality (number of elements)\n         * Average O(1)\n         * Not working as expected\n         */\n        (0, chai_1.expect)(ss.card()).to.equal(3); // => 4\n        /*\n         * Alias\n         * Not working as expected\n         */\n        (0, chai_1.expect)(ss.length).to.equal(3); // => 4\n    })",
              "err": {},
              "uuid": "c0c917f6-f833-43e2-9a36-419dc9bfc50d",
              "parentUUID": "be1ab9ec-e8d9-47a7-824b-a4d35b7132f4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "0d0ff2f7-1154-4c41-b39c-9de22decbe1f",
              "title": "skip map",
              "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
              "file": "/test/resp/data/sorted-set.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should support basic operations",
                  "fullTitle": "sorted-set test skip map should support basic operations",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const z = new Z();\n(0, chai_1.expect)(z).to.have.length(0);\n(0, chai_1.expect)(z.toArray()).to.eql([]);\n(0, chai_1.expect)(z.range()).to.eql([]);\n(0, chai_1.expect)(z.rangeByScore()).to.eql([]);\n(0, chai_1.expect)(() => {\n    z.add(\"__proto__\", 14);\n}).to.throw();\nz.add(\"5a600e16\", 8);\nz.add(\"5a600e17\", 9);\n(0, chai_1.expect)(z.add(\"5a600e18\", 10)).to.equal(null);\n(0, chai_1.expect)(z.add(\"5a600e17\", 12)).to.equal(9);\n(0, chai_1.expect)(z).to.have.length(3);\n(0, chai_1.expect)(z.toArray()).to.eql([\n    \"5a600e16\",\n    \"5a600e18\",\n    \"5a600e17\"\n]);\n(0, chai_1.expect)(z.toArray()).to.eql(z.range(0, -1));\n(0, chai_1.expect)(z.toArray()).to.eql(z.rangeByScore());\n(0, chai_1.expect)(z.has(\"5a600e16\")).to.be.ok;\n(0, chai_1.expect)(z.has(\"5a600e17\")).to.be.ok;\n(0, chai_1.expect)(z.has(\"5a600e18\")).to.be.ok;\n(0, chai_1.expect)(z.has(\"5a600e19\")).to.not.be.ok;\n(0, chai_1.expect)(z.score(\"5a600e16\")).to.equal(8);\n(0, chai_1.expect)(z.score(\"5a600e17\")).to.equal(12);\n(0, chai_1.expect)(z.score(\"5a600e18\")).to.equal(10);\n(0, chai_1.expect)(z.score(\"5a600e19\")).to.equal(null);\n(0, chai_1.expect)(z.rem(\"5a600e16\")).to.equal(8);\n(0, chai_1.expect)(z).to.have.length(2);\n(0, chai_1.expect)(z.rem(\"5a600e16\")).to.equal(null);\n(0, chai_1.expect)(z).to.have.length(2);\n(0, chai_1.expect)(z.has(\"5a600e16\")).to.not.be.ok;\n(0, chai_1.expect)(z.toArray()).to.eql([\n    \"5a600e18\",\n    \"5a600e17\"\n]);\n(0, chai_1.expect)(z.toArray({ \"withScores\": true })).\n    to.eql(z.range(0, -1, { \"withScores\": true }));\n(0, chai_1.expect)(z.toArray()).to.eql(z.rangeByScore());\nz.add(\"5a600e16\", 10);\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\n(0, chai_1.expect)(z).to.have.length(9);\n// No change, so should be O(1)\nz.add(\"5a600e17\", 12);\n(0, chai_1.expect)(z.rank(\"5a600e17\")).to.equal(4);\n(0, chai_1.expect)(z).to.have.length(9);\n(0, chai_1.expect)(z.toArray()).to.eql([\n    \"5a600e16\",\n    \"5a600e11\",\n    \"5a600e18\",\n    \"5a600e13\",\n    \"5a600e17\",\n    \"5a600e14\",\n    \"5a600e10\",\n    \"5a600e12\",\n    \"5a600e15\"\n]);\n(0, chai_1.expect)(z.toArray()).to.eql(z.range(0, -1));\n(0, chai_1.expect)(z.toArray()).to.eql(z.rangeByScore());\n(0, chai_1.expect)(z.rangeByScore(14, 16, { \"withScores\": true })).to.eql([\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ]\n]);",
                  "err": {},
                  "uuid": "b8b00e1b-c7b2-40bf-8990-60c62cc0ae18",
                  "parentUUID": "0d0ff2f7-1154-4c41-b39c-9de22decbe1f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "d6296a5a-7140-4e46-b7f8-04792b62f115",
                  "title": "#add",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should implicitly delete",
                      "fullTitle": "sorted-set test skip map #add should implicitly delete",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.add(\"5a600e14\", null)).to.equal(14);\n(0, chai_1.expect)(z.add(\"5a600e19\", null)).to.equal(null);\n(0, chai_1.expect)(z).to.have.length(8);",
                      "err": {},
                      "uuid": "07b69286-e43b-44cd-a6ca-f8e55c54a40e",
                      "parentUUID": "d6296a5a-7140-4e46-b7f8-04792b62f115",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "07b69286-e43b-44cd-a6ca-f8e55c54a40e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "cf15f34c-05ff-4a34-a259-96e377caefb7",
                  "title": "#empty",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should remove all elements",
                      "fullTitle": "sorted-set test skip map #empty should remove all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\nz.empty();\n(0, chai_1.expect)(z).to.have.length(0);\n(0, chai_1.expect)(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "7292b826-ea53-4ccd-bc8f-c0bc15c82fec",
                      "parentUUID": "cf15f34c-05ff-4a34-a259-96e377caefb7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7292b826-ea53-4ccd-bc8f-c0bc15c82fec"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "b9e8130e-26b3-40a1-a45c-b30291d327af",
                  "title": "#incrBy(increment, key)",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should increase rank",
                      "fullTitle": "sorted-set test skip map #incrBy(increment, key) should increase rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"first\", 1);\nz.add(\"second\", 2);\nz.add(\"third\", 3);\nz.add(\"fourth\", 4);\n(0, chai_1.expect)(z.incrBy(2, \"first\")).to.equal(3);\n(0, chai_1.expect)(z.rank(\"first\")).to.equal(1);",
                      "err": {},
                      "uuid": "7e65297e-2b49-473f-bb01-e3ba6971b1aa",
                      "parentUUID": "b9e8130e-26b3-40a1-a45c-b30291d327af",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should create if not found",
                      "fullTitle": "sorted-set test skip map #incrBy(increment, key) should create if not found",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"first\", 1);\nz.incrBy(2, \"second\");\n(0, chai_1.expect)(z.card()).to.equal(2);\n(0, chai_1.expect)(z.rank(\"second\")).to.equal(1);",
                      "err": {},
                      "uuid": "de316bfb-baf6-44c6-b2c8-367c247b53d9",
                      "parentUUID": "b9e8130e-26b3-40a1-a45c-b30291d327af",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7e65297e-2b49-473f-bb01-e3ba6971b1aa",
                    "de316bfb-baf6-44c6-b2c8-367c247b53d9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "82b050f5-8b42-4812-b2a1-088711e14b82",
                  "title": "#keys",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the keys",
                      "fullTitle": "sorted-set test skip map #keys should return the keys",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.keys()).to.eql([\n    \"5a600e16\",\n    \"5a600e11\",\n    \"5a600e18\",\n    \"5a600e13\",\n    \"5a600e17\",\n    \"5a600e14\",\n    \"5a600e10\",\n    \"5a600e12\",\n    \"5a600e15\"\n]);",
                      "err": {},
                      "uuid": "ab3e7c58-19bc-4132-b1fd-a8333dd7f993",
                      "parentUUID": "82b050f5-8b42-4812-b2a1-088711e14b82",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ab3e7c58-19bc-4132-b1fd-a8333dd7f993"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "be6a3e52-3247-469b-a2d3-4c9d3136f051",
                  "title": "#rangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map #rangeByScore should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.rangeByScore(14, null, { \"withScores\": true })).to.eql([\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);\n(0, chai_1.expect)(z.rangeByScore(null, 10, { \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e11\",\n        6\n    ],\n    [\n        \"5a600e18\",\n        10\n    ]\n]);\n(0, chai_1.expect)(z.rangeByScore(-Infinity, Infinity)).to.eql(z.toArray());\n(0, chai_1.expect)(z.rangeByScore(null, null)).to.eql(z.toArray());",
                      "err": {},
                      "uuid": "437d95c9-a8bb-469d-9d0f-7bf2261ddf80",
                      "parentUUID": "be6a3e52-3247-469b-a2d3-4c9d3136f051",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "437d95c9-a8bb-469d-9d0f-7bf2261ddf80"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "128df039-9c3b-4c3d-aed7-92f6e71c1fd7",
                  "title": "#count",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should count elements",
                      "fullTitle": "sorted-set test skip map #count should count elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\n(0, chai_1.expect)(z.count()).to.equal(0);\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\nz.add(\"5a600e19\", 14);\nz.add(\"5a600f00\", 30.0);\nz.add(\"5a600f01\", 30.5);\nz.add(\"5a600f02\", 31.0);\nz.add(\"5a600f03\", 31.5);\nz.add(\"5a600f04\", 32.0);\nz.add(\"5a600f05\", 32.0);\nz.add(\"5a600f06\", 32.0);\n(0, chai_1.expect)(z.count()).to.eql(z.rangeByScore().length);\n(0, chai_1.expect)(z.count(8)).to.eql(z.rangeByScore(8).length);\n(0, chai_1.expect)(z.count(3, 7)).to.eql(z.rangeByScore(3, 7).length);\n(0, chai_1.expect)(z.count(5, 14)).to.eql(z.rangeByScore(5, 14).length);\n(0, chai_1.expect)(z.count(5, 5)).to.eql(z.rangeByScore(5, 5).length);\n(0, chai_1.expect)(z.count(5, 0)).to.eql(z.rangeByScore(5, 0).length);\n(0, chai_1.expect)(z.count(30, 32)).to.eql(z.rangeByScore(30, 32).length);\n(0, chai_1.expect)(z.count(40)).to.eql(z.rangeByScore(40).length);",
                      "err": {},
                      "uuid": "346add19-149b-461d-b207-ccecbaf5e56f",
                      "parentUUID": "128df039-9c3b-4c3d-aed7-92f6e71c1fd7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "346add19-149b-461d-b207-ccecbaf5e56f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "c97051bd-47dd-434d-90c7-ba998e981f1a",
                  "title": "#range",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map #range should support special ranges",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"first\", 1);\nz.add(\"second\", 2);\nz.add(\"third\", 3);\nz.add(\"fourth\", 4);\nconst array = [\n    \"first\",\n    \"second\",\n    \"third\",\n    \"fourth\"\n];\n(0, chai_1.expect)(z.range()).to.eql(array);\n(0, chai_1.expect)(z.range(2)).to.eql(array.slice(2));\n(0, chai_1.expect)(z.range(8)).to.eql(array.slice(8));\n(0, chai_1.expect)(z.range(0, 2)).to.eql(array.slice(0, 3));\n(0, chai_1.expect)(z.range(-1)).to.eql([\"fourth\"]);\n(0, chai_1.expect)(z.range(-4)).to.eql(array);\n(0, chai_1.expect)(z.range(-4, -2)).to.eql(array.slice(0, 3));\n(0, chai_1.expect)(z.range(-4, z.length + 1000)).\n    to.eql(array.slice(-4, z.length + 1000));",
                      "err": {},
                      "uuid": "0b4af8e7-bc4b-4b0c-92af-a1ac0743b92e",
                      "parentUUID": "c97051bd-47dd-434d-90c7-ba998e981f1a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should support withScores",
                      "fullTitle": "sorted-set test skip map #range should support withScores",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"first\", 1);\nz.add(\"second\", 2);\n(0, chai_1.expect)(z.range(0, 0, { \"withScores\": true })).\n    to.eql([\n    [\n        \"first\",\n        1\n    ]\n]);",
                      "err": {},
                      "uuid": "918f50b9-e87a-4e8f-945b-63c740a35616",
                      "parentUUID": "c97051bd-47dd-434d-90c7-ba998e981f1a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0b4af8e7-bc4b-4b0c-92af-a1ac0743b92e",
                    "918f50b9-e87a-4e8f-945b-63c740a35616"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "e705d1b6-0d4b-4b72-b38a-3a6ee9a21569",
                  "title": "#intersect",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should intersect two sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect two sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const a = new Z(), b = new Z();\na.add(\"5a600e10\", 16);\na.add(\"5a600e12\", 10);\na.add(\"5a600e14\", 9);\na.add(\"5a600e15\", 14);\na.add(\"5a600e17\", 20);\na.add(\"5a600e18\", 13);\na.add(\"5a600e19\", 15);\na.add(\"5a600e1a\", 19);\na.add(\"5a600e1b\", 7);\na.add(\"5a600e1c\", 13);\na.add(\"5a600e1e\", 10);\nb.add(\"5a600e10\", 0);\nb.add(\"5a600e11\", 15);\nb.add(\"5a600e13\", 5);\nb.add(\"5a600e14\", 3);\nb.add(\"5a600e15\", 14);\nb.add(\"5a600e17\", 12);\nb.add(\"5a600e19\", 12);\nb.add(\"5a600e1b\", 16);\nb.add(\"5a600e1c\", 12);\nb.add(\"5a600e1d\", 17);\nb.add(\"5a600e1f\", 3);\n(0, chai_1.expect)(Z.intersect(a, b)).to.eql([\n    \"5a600e10\",\n    \"5a600e14\",\n    \"5a600e17\",\n    \"5a600e19\",\n    \"5a600e1c\",\n    \"5a600e15\",\n    \"5a600e1b\"\n]);\n(0, chai_1.expect)(Z.intersect(b, a)).to.eql([\n    \"5a600e1b\",\n    \"5a600e14\",\n    \"5a600e1c\",\n    \"5a600e15\",\n    \"5a600e19\",\n    \"5a600e10\",\n    \"5a600e17\"\n]);",
                      "err": {},
                      "uuid": "acc06497-ada4-478d-b765-1f4d63f372f5",
                      "parentUUID": "e705d1b6-0d4b-4b72-b38a-3a6ee9a21569",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect three sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect three sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const a = new Z(), b = new Z(), c = new Z();\na.add(\"5a600e10\", 16);\na.add(\"5a600e12\", 10);\na.add(\"5a600e14\", 9);\na.add(\"5a600e15\", 14);\na.add(\"5a600e17\", 20);\na.add(\"5a600e18\", 13);\na.add(\"5a600e19\", 15);\na.add(\"5a600e1a\", 19);\na.add(\"5a600e1b\", 7);\na.add(\"5a600e1c\", 13);\na.add(\"5a600e1e\", 10);\nb.add(\"5a600e10\", 0);\nb.add(\"5a600e11\", 15);\nb.add(\"5a600e13\", 5);\nb.add(\"5a600e14\", 3);\nb.add(\"5a600e15\", 14);\nb.add(\"5a600e17\", 12);\nb.add(\"5a600e19\", 12);\nb.add(\"5a600e1b\", 16);\nb.add(\"5a600e1c\", 12);\nb.add(\"5a600e1d\", 17);\nb.add(\"5a600e1f\", 3);\nc.add(\"5a600e10\", 7);\nc.add(\"5a600e12\", 20);\nc.add(\"5a600e13\", 9);\nc.add(\"5a600e14\", 19);\nc.add(\"5a600e16\", 19);\nc.add(\"5a600e17\", 1);\nc.add(\"5a600e18\", 18);\nc.add(\"5a600e1a\", 6);\nc.add(\"5a600e1c\", 15);\nc.add(\"5a600e1f\", 4);\n(0, chai_1.expect)(Z.intersect(c, a, b)).to.eql([\n    \"5a600e10\",\n    \"5a600e14\",\n    \"5a600e17\",\n    \"5a600e1c\"\n]);\n(0, chai_1.expect)(Z.intersect(c, a, b)).to.eql(c.intersect(a, b));",
                      "err": {},
                      "uuid": "42de07d7-5e92-46fe-8893-951944ddf028",
                      "parentUUID": "e705d1b6-0d4b-4b72-b38a-3a6ee9a21569",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect four sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect four sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const a = new Z(), b = new Z(), c = new Z(), d = new Z();\na.add(\"5a600e10\", 16);\na.add(\"5a600e12\", 10);\na.add(\"5a600e14\", 9);\na.add(\"5a600e15\", 14);\na.add(\"5a600e17\", 20);\na.add(\"5a600e18\", 13);\na.add(\"5a600e19\", 15);\na.add(\"5a600e1a\", 19);\na.add(\"5a600e1b\", 7);\na.add(\"5a600e1c\", 13);\na.add(\"5a600e1e\", 10);\nb.add(\"5a600e10\", 0);\nb.add(\"5a600e11\", 15);\nb.add(\"5a600e13\", 5);\nb.add(\"5a600e14\", 3);\nb.add(\"5a600e15\", 14);\nb.add(\"5a600e17\", 12);\nb.add(\"5a600e19\", 12);\nb.add(\"5a600e1b\", 16);\nb.add(\"5a600e1c\", 12);\nb.add(\"5a600e1d\", 17);\nb.add(\"5a600e1f\", 3);\nc.add(\"5a600e10\", 7);\nc.add(\"5a600e12\", 20);\nc.add(\"5a600e13\", 9);\nc.add(\"5a600e14\", 19);\nc.add(\"5a600e16\", 19);\nc.add(\"5a600e17\", 1);\nc.add(\"5a600e18\", 18);\nc.add(\"5a600e1a\", 6);\nc.add(\"5a600e1c\", 15);\nc.add(\"5a600e1f\", 4);\nd.add(\"5a600e1c\", 400);\nd.add(\"5a600e17\", 500);\nd.add(\"5a600e1f\", 600);\nd.add(\"5a600e20\", 700);\n(0, chai_1.expect)(Z.intersect(d, c, a, b)).to.eql([\n    \"5a600e17\",\n    \"5a600e1c\"\n]);\n(0, chai_1.expect)(Z.intersect(d, c, a, b)).to.eql(d.intersect(c, a, b));",
                      "err": {},
                      "uuid": "d79c8763-6a2c-4346-8be1-777126cdb0a9",
                      "parentUUID": "e705d1b6-0d4b-4b72-b38a-3a6ee9a21569",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "acc06497-ada4-478d-b765-1f4d63f372f5",
                    "42de07d7-5e92-46fe-8893-951944ddf028",
                    "d79c8763-6a2c-4346-8be1-777126cdb0a9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "b50118be-1d51-482c-afbd-be7b349f9bb7",
                  "title": "#rank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should get the correct rank",
                      "fullTitle": "sorted-set test skip map #rank should get the correct rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.rank(\"5a600e12\")).to.equal(7);\n(0, chai_1.expect)(z.rank(\"5a600e13\")).to.equal(3);\n(0, chai_1.expect)(z.rank(\"5a600e16\")).to.equal(0);\n(0, chai_1.expect)(z.rank(\"5a600e15\")).to.equal(8);\n(0, chai_1.expect)(z.rank(\"not in set\")).to.equal(null);",
                      "err": {},
                      "uuid": "851e7318-5112-4dcb-87ae-e56610bd44c0",
                      "parentUUID": "b50118be-1d51-482c-afbd-be7b349f9bb7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "851e7318-5112-4dcb-87ae-e56610bd44c0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "848f9625-71c8-4411-aac2-a14873fc6990",
                  "title": "#rem",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should delete special elements",
                      "fullTitle": "sorted-set test skip map #rem should delete special elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.rem(\"5a600e15\")).to.equal(19);\n(0, chai_1.expect)(z).to.have.length(8);\n(0, chai_1.expect)(z.rem(\"5a600e16\")).to.equal(3);\n(0, chai_1.expect)(z).to.have.length(7);\n(0, chai_1.expect)(z.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e11\",\n        6\n    ],\n    [\n        \"5a600e18\",\n        10\n    ],\n    [\n        \"5a600e13\",\n        11\n    ],\n    [\n        \"5a600e17\",\n        12\n    ],\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ]\n]);",
                      "err": {},
                      "uuid": "22d3ec5c-bfbb-4008-82c2-cc1eb152df22",
                      "parentUUID": "848f9625-71c8-4411-aac2-a14873fc6990",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should delete many elements",
                      "fullTitle": "sorted-set test skip map #rem should delete many elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.rem(\"5a600e11\")).to.equal(6);\n(0, chai_1.expect)(z.rem(\"5a600e13\")).to.equal(11);\n(0, chai_1.expect)(z.rem(\"5a600e14\")).to.equal(14);\n(0, chai_1.expect)(z.rem(\"5a600e15\")).to.equal(19);\n(0, chai_1.expect)(z.rem(\"5a600e16\")).to.equal(3);\n(0, chai_1.expect)(z.rem(\"5a600e17\")).to.equal(12);\n(0, chai_1.expect)(z.length).to.equal(3);\n(0, chai_1.expect)(z.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e18\",\n        10\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ]\n]);",
                      "err": {},
                      "uuid": "7efa8561-3e4e-47ae-9530-9a01267c2feb",
                      "parentUUID": "848f9625-71c8-4411-aac2-a14873fc6990",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "22d3ec5c-bfbb-4008-82c2-cc1eb152df22",
                    "7efa8561-3e4e-47ae-9530-9a01267c2feb"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "b608cd8a-9797-47e4-a28d-5f7d1c7e6b37",
                  "title": "#remRangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a range of elements",
                      "fullTitle": "sorted-set test skip map #remRangeByScore should strip out a range of elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.remRangeByScore(4, 14)).to.equal(5);\n(0, chai_1.expect)(z).to.have.length(4);\n(0, chai_1.expect)(z.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);",
                      "err": {},
                      "uuid": "b0aa5b89-ae09-4e6c-a314-50af3e268821",
                      "parentUUID": "b608cd8a-9797-47e4-a28d-5f7d1c7e6b37",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all the elements",
                      "fullTitle": "sorted-set test skip map #remRangeByScore should strip out all the elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.remRangeByScore(3, 19)).to.equal(9);\n(0, chai_1.expect)(z).to.have.length(0);\n(0, chai_1.expect)(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "20934962-3260-4e0f-a195-e786009dcdc4",
                      "parentUUID": "b608cd8a-9797-47e4-a28d-5f7d1c7e6b37",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b0aa5b89-ae09-4e6c-a314-50af3e268821",
                    "20934962-3260-4e0f-a195-e786009dcdc4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "45c40869-f681-4431-ae04-95515016834b",
                  "title": "#remRangeByRank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a slice of elements",
                      "fullTitle": "sorted-set test skip map #remRangeByRank should strip out a slice of elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.remRangeByRank(1, 6)).to.equal(5);\n(0, chai_1.expect)(z).to.have.length(4);\n(0, chai_1.expect)(z.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);",
                      "err": {},
                      "uuid": "284ef549-6341-4a39-a2ea-ceeb06d2ec25",
                      "parentUUID": "45c40869-f681-4431-ae04-95515016834b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all elements",
                      "fullTitle": "sorted-set test skip map #remRangeByRank should strip out all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(z.remRangeByRank(0, 9)).to.equal(9);\n(0, chai_1.expect)(z).to.have.length(0);\n(0, chai_1.expect)(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "93b44dd4-c609-4e58-8894-c96c9eb8e3ff",
                      "parentUUID": "45c40869-f681-4431-ae04-95515016834b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "284ef549-6341-4a39-a2ea-ceeb06d2ec25",
                    "93b44dd4-c609-4e58-8894-c96c9eb8e3ff"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "f4fa601a-2c53-4bc1-b809-55f399dc9db4",
                  "title": "#values",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the values",
                      "fullTitle": "sorted-set test skip map #values should return the values",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z();\nz.add(\"first\", -1);\nz.add(\"third\", 5);\nz.add(\"second\", 3);\n(0, chai_1.expect)(z.values()).to.eql([\n    -1,\n    3,\n    5\n]);",
                      "err": {},
                      "uuid": "6e314bd5-1883-4e3b-bb9c-e9f436377c8d",
                      "parentUUID": "f4fa601a-2c53-4bc1-b809-55f399dc9db4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6e314bd5-1883-4e3b-bb9c-e9f436377c8d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "de3d859e-1886-4d99-96e3-082481d82333",
                  "title": "unique",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should ensure values are unique",
                      "fullTitle": "sorted-set test skip map unique should ensure values are unique",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z({ \"unique\": true });\nassert.equal(z.keys().length, 0, \"Expected an empty SortedSet\");\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(() => {\n    z.add(\"5a600e19\", 11);\n}).to.throw(/unique/);\n// Quick exit test\n(0, chai_1.expect)(() => {\n    z.add(\"5a600dff\", z._head.next[z._level - 1].next.value);\n}).to.throw(/unique/);\n// This test ensures the key < key check doesn't come into play\n(0, chai_1.expect)(() => {\n    z.add(\"5a600dff\", 11);\n}).to.throw(/unique/);\n(0, chai_1.expect)(() => {\n    z.add(\"5a600e18\", 10);\n}).to.not.throw();\n(0, chai_1.expect)(z).to.have.length(9);\n(0, chai_1.expect)(z.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e11\",\n        6\n    ],\n    [\n        \"5a600e18\",\n        10\n    ],\n    [\n        \"5a600e13\",\n        11\n    ],\n    [\n        \"5a600e17\",\n        12\n    ],\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);",
                      "err": {},
                      "uuid": "b8580f72-c71d-4acd-b3c8-aaface196d5d",
                      "parentUUID": "de3d859e-1886-4d99-96e3-082481d82333",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert keys if constraint broken during update",
                      "fullTitle": "sorted-set test skip map unique should revert keys if constraint broken during update",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const z = new Z({ \"unique\": true });\nz.add(\"5a600e10\", 16);\nz.add(\"5a600e11\", 6);\nz.add(\"5a600e12\", 17);\nz.add(\"5a600e13\", 11);\nz.add(\"5a600e14\", 14);\nz.add(\"5a600e15\", 19);\nz.add(\"5a600e16\", 3);\nz.add(\"5a600e17\", 12);\nz.add(\"5a600e18\", 10);\n(0, chai_1.expect)(() => {\n    z.add(\"5a600e13\", 14);\n}).to.throw(/unique/);\n(0, chai_1.expect)(z).to.have.length(9);\n(0, chai_1.expect)(z.score(\"5a600e13\")).to.equal(11);",
                      "err": {},
                      "uuid": "2cb33ac4-e2bb-4f73-81a2-f2bc085f2552",
                      "parentUUID": "de3d859e-1886-4d99-96e3-082481d82333",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b8580f72-c71d-4acd-b3c8-aaface196d5d",
                    "2cb33ac4-e2bb-4f73-81a2-f2bc085f2552"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "b8b00e1b-c7b2-40bf-8990-60c62cc0ae18"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3d651060-6eed-474e-a520-a5cbf3b5e10b",
              "title": "skip map rewrite",
              "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
              "file": "/test/resp/data/sorted-set.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should support basic operations",
                  "fullTitle": "sorted-set test skip map rewrite should support basic operations",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ss = new sorted_set_1.SortedSet();\n(0, chai_1.expect)(ss).to.have.length(0);\n(0, chai_1.expect)(ss.toArray()).to.eql([]);\n(0, chai_1.expect)(ss.range()).to.eql([]);\n(0, chai_1.expect)(ss.rangeByScore()).to.eql([]);\n/*\n * Expect(() => {\n *   Ss.add('__proto__', 14);\n * }).to.throw();\n */\nss.add(\"5a600e16\", 8);\nss.add(\"5a600e17\", 9);\n(0, chai_1.expect)(ss.add(\"5a600e18\", 10)).to.equal(null);\n(0, chai_1.expect)(ss.add(\"5a600e17\", 12)).to.equal(9);\n(0, chai_1.expect)(ss).to.have.length(3);\n(0, chai_1.expect)(ss.toArray()).to.eql([\n    \"5a600e16\",\n    \"5a600e18\",\n    \"5a600e17\"\n]);\n(0, chai_1.expect)(ss.toArray()).to.eql(ss.range(0, -1));\n(0, chai_1.expect)(ss.toArray()).to.eql(ss.rangeByScore());\n(0, chai_1.expect)(ss.has(\"5a600e16\")).to.be.ok;\n(0, chai_1.expect)(ss.has(\"5a600e17\")).to.be.ok;\n(0, chai_1.expect)(ss.has(\"5a600e18\")).to.be.ok;\n(0, chai_1.expect)(ss.has(\"5a600e19\")).to.not.be.ok;\n(0, chai_1.expect)(ss.score(\"5a600e16\")).to.equal(8);\n(0, chai_1.expect)(ss.score(\"5a600e17\")).to.equal(12);\n(0, chai_1.expect)(ss.score(\"5a600e18\")).to.equal(10);\n(0, chai_1.expect)(ss.score(\"5a600e19\")).to.equal(null);\n(0, chai_1.expect)(ss.rem(\"5a600e16\")).to.equal(8);\n(0, chai_1.expect)(ss).to.have.length(2);\n(0, chai_1.expect)(ss.rem(\"5a600e16\")).to.equal(null);\n(0, chai_1.expect)(ss).to.have.length(2);\n(0, chai_1.expect)(ss.has(\"5a600e16\")).to.not.be.ok;\n(0, chai_1.expect)(ss.toArray()).to.eql([\n    \"5a600e18\",\n    \"5a600e17\"\n]);\n(0, chai_1.expect)(ss.toArray({ \"withScores\": true })).\n    to.eql(ss.range(0, -1, { \"withScores\": true }));\n(0, chai_1.expect)(ss.toArray()).to.eql(ss.rangeByScore());\nss.add(\"5a600e16\", 10);\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\n(0, chai_1.expect)(ss).to.have.length(9);\n// No change, so should be O(1)\nss.add(\"5a600e17\", 12);\n(0, chai_1.expect)(ss.rank(\"5a600e17\")).to.equal(4);\n(0, chai_1.expect)(ss).to.have.length(9);\n(0, chai_1.expect)(ss.toArray()).to.eql([\n    \"5a600e16\",\n    \"5a600e11\",\n    \"5a600e18\",\n    \"5a600e13\",\n    \"5a600e17\",\n    \"5a600e14\",\n    \"5a600e10\",\n    \"5a600e12\",\n    \"5a600e15\"\n]);\n(0, chai_1.expect)(ss.toArray()).to.eql(ss.range(0, -1));\n(0, chai_1.expect)(ss.toArray()).to.eql(ss.rangeByScore());\n(0, chai_1.expect)(ss.rangeByScore(14, 16, { \"withScores\": true })).to.eql([\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ]\n]);",
                  "err": {},
                  "uuid": "a9c18d0d-4cf5-425e-b448-81c424471f8b",
                  "parentUUID": "3d651060-6eed-474e-a520-a5cbf3b5e10b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "16e02e30-89d6-4870-92cb-1d72528c1acf",
                  "title": "#add",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should implicitly delete",
                      "fullTitle": "sorted-set test skip map rewrite #add should implicitly delete",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.add(\"5a600e14\", null)).to.equal(14);\n(0, chai_1.expect)(ss.add(\"5a600e19\", null)).to.equal(null);\n(0, chai_1.expect)(ss).to.have.length(8);",
                      "err": {},
                      "uuid": "1a602b5c-fb3b-4051-9984-9bc0d5d5e08e",
                      "parentUUID": "16e02e30-89d6-4870-92cb-1d72528c1acf",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1a602b5c-fb3b-4051-9984-9bc0d5d5e08e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "b63e4bb2-223e-4ada-ac24-048b363339f3",
                  "title": "#empty",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should remove all elements",
                      "fullTitle": "sorted-set test skip map rewrite #empty should remove all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\nss.empty();\n(0, chai_1.expect)(ss).to.have.length(0);\n(0, chai_1.expect)(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "464a702a-9c94-4b72-a0cd-a8bf8113d55a",
                      "parentUUID": "b63e4bb2-223e-4ada-ac24-048b363339f3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "464a702a-9c94-4b72-a0cd-a8bf8113d55a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "9230d54c-fa63-456c-8d2c-fcf771cde9d3",
                  "title": "#incrBy(increment, key)",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should increase rank",
                      "fullTitle": "sorted-set test skip map rewrite #incrBy(increment, key) should increase rank",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"first\", 1);\nss.add(\"second\", 2);\nss.add(\"third\", 3);\nss.add(\"fourth\", 4);\n(0, chai_1.expect)(ss.incrBy(2, \"first\")).to.equal(3);\n(0, chai_1.expect)(ss.rank(\"first\")).to.equal(1);",
                      "err": {},
                      "uuid": "f9af6962-6bf6-4d14-914c-c8781b1b96ef",
                      "parentUUID": "9230d54c-fa63-456c-8d2c-fcf771cde9d3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should create if not found",
                      "fullTitle": "sorted-set test skip map rewrite #incrBy(increment, key) should create if not found",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"first\", 1);\nss.incrBy(2, \"second\");\n(0, chai_1.expect)(ss.card()).to.equal(2);\n(0, chai_1.expect)(ss.rank(\"second\")).to.equal(1);",
                      "err": {},
                      "uuid": "28fc4f1f-39af-436d-b567-2bef2e2187e3",
                      "parentUUID": "9230d54c-fa63-456c-8d2c-fcf771cde9d3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f9af6962-6bf6-4d14-914c-c8781b1b96ef",
                    "28fc4f1f-39af-436d-b567-2bef2e2187e3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a789da6f-5f41-46b1-a814-0009d2f70df7",
                  "title": "#keys",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the keys",
                      "fullTitle": "sorted-set test skip map rewrite #keys should return the keys",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.keys()).to.eql([\n    \"5a600e16\",\n    \"5a600e11\",\n    \"5a600e18\",\n    \"5a600e13\",\n    \"5a600e17\",\n    \"5a600e14\",\n    \"5a600e10\",\n    \"5a600e12\",\n    \"5a600e15\"\n]);",
                      "err": {},
                      "uuid": "2393e4fe-4f4b-4c1c-82cd-9529c0021b2d",
                      "parentUUID": "a789da6f-5f41-46b1-a814-0009d2f70df7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2393e4fe-4f4b-4c1c-82cd-9529c0021b2d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "70425c48-c49b-42f5-a752-2bea491326e0",
                  "title": "#rangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map rewrite #rangeByScore should support special ranges",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.rangeByScore(14, null, { \"withScores\": true })).to.eql([\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);\n(0, chai_1.expect)(ss.rangeByScore(null, 10, { \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e11\",\n        6\n    ],\n    [\n        \"5a600e18\",\n        10\n    ]\n]);\n(0, chai_1.expect)(ss.rangeByScore(-Infinity, Infinity)).to.eql(ss.toArray());\n(0, chai_1.expect)(ss.rangeByScore(null, null)).to.eql(ss.toArray());",
                      "err": {},
                      "uuid": "8ec98c6d-b3d0-490e-aa6e-1f33dd0af4c9",
                      "parentUUID": "70425c48-c49b-42f5-a752-2bea491326e0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8ec98c6d-b3d0-490e-aa6e-1f33dd0af4c9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "98973029-3720-49da-98ec-8459f8163cfb",
                  "title": "#count",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should count elements",
                      "fullTitle": "sorted-set test skip map rewrite #count should count elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\n(0, chai_1.expect)(ss.count()).to.equal(0);\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\nss.add(\"5a600e19\", 14);\nss.add(\"5a600f00\", 30.0);\nss.add(\"5a600f01\", 30.5);\nss.add(\"5a600f02\", 31.0);\nss.add(\"5a600f03\", 31.5);\nss.add(\"5a600f04\", 32.0);\nss.add(\"5a600f05\", 32.0);\nss.add(\"5a600f06\", 32.0);\n(0, chai_1.expect)(ss.count()).to.eql(ss.rangeByScore().length);\n(0, chai_1.expect)(ss.count(8)).to.eql(ss.rangeByScore(8).length);\n(0, chai_1.expect)(ss.count(3, 7)).to.eql(ss.rangeByScore(3, 7).length);\n(0, chai_1.expect)(ss.count(5, 14)).to.eql(ss.rangeByScore(5, 14).length);\n(0, chai_1.expect)(ss.count(5, 5)).to.eql(ss.rangeByScore(5, 5).length);\n(0, chai_1.expect)(ss.count(5, 0)).to.eql(ss.rangeByScore(5, 0).length);\n(0, chai_1.expect)(ss.count(30, 32)).to.eql(ss.rangeByScore(30, 32).length);\n(0, chai_1.expect)(ss.count(40)).to.eql(ss.rangeByScore(40).length);",
                      "err": {},
                      "uuid": "241b521d-269e-4fce-b542-d4bc4fa985b3",
                      "parentUUID": "98973029-3720-49da-98ec-8459f8163cfb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "241b521d-269e-4fce-b542-d4bc4fa985b3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "2c93f749-1190-42c7-8ad5-0e741b73cff6",
                  "title": "#range",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map rewrite #range should support special ranges",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"first\", 1);\nss.add(\"second\", 2);\nss.add(\"third\", 3);\nss.add(\"fourth\", 4);\nconst array = [\n    \"first\",\n    \"second\",\n    \"third\",\n    \"fourth\"\n];\n(0, chai_1.expect)(ss.range()).to.eql(array);\n(0, chai_1.expect)(ss.range(2)).to.eql(array.slice(2));\n(0, chai_1.expect)(ss.range(8)).to.eql(array.slice(8));\n(0, chai_1.expect)(ss.range(0, 2)).to.eql(array.slice(0, 3));\n(0, chai_1.expect)(ss.range(-1)).to.eql([\"fourth\"]);\n(0, chai_1.expect)(ss.range(-4)).to.eql(array);\n(0, chai_1.expect)(ss.range(-4, -2)).to.eql(array.slice(0, 3));\n(0, chai_1.expect)(ss.range(-4, ss.length + 1000)).\n    to.eql(array.slice(-4, ss.length + 1000));",
                      "err": {},
                      "uuid": "2b1e0167-317d-422c-a06b-4b9cc9036b68",
                      "parentUUID": "2c93f749-1190-42c7-8ad5-0e741b73cff6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should support withScores",
                      "fullTitle": "sorted-set test skip map rewrite #range should support withScores",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"first\", 1);\nss.add(\"second\", 2);\n(0, chai_1.expect)(ss.range(0, 0, { \"withScores\": true })).\n    to.eql([\n    [\n        \"first\",\n        1\n    ]\n]);",
                      "err": {},
                      "uuid": "c37f8f9a-1c05-4ac3-8798-a73484f4fff3",
                      "parentUUID": "2c93f749-1190-42c7-8ad5-0e741b73cff6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2b1e0167-317d-422c-a06b-4b9cc9036b68",
                    "c37f8f9a-1c05-4ac3-8798-a73484f4fff3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "949d5e86-79bd-49d6-bf36-ad219eaf27d1",
                  "title": "#intersect",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should intersect two sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect two sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet();\na.add(\"5a600e10\", 16);\na.add(\"5a600e12\", 10);\na.add(\"5a600e14\", 9);\na.add(\"5a600e15\", 14);\na.add(\"5a600e17\", 20);\na.add(\"5a600e18\", 13);\na.add(\"5a600e19\", 15);\na.add(\"5a600e1a\", 19);\na.add(\"5a600e1b\", 7);\na.add(\"5a600e1c\", 13);\na.add(\"5a600e1e\", 10);\nb.add(\"5a600e10\", 0);\nb.add(\"5a600e11\", 15);\nb.add(\"5a600e13\", 5);\nb.add(\"5a600e14\", 3);\nb.add(\"5a600e15\", 14);\nb.add(\"5a600e17\", 12);\nb.add(\"5a600e19\", 12);\nb.add(\"5a600e1b\", 16);\nb.add(\"5a600e1c\", 12);\nb.add(\"5a600e1d\", 17);\nb.add(\"5a600e1f\", 3);\n(0, chai_1.expect)(sorted_set_1.SortedSet.intersect(a, b)).to.eql([\n    \"5a600e10\",\n    \"5a600e14\",\n    \"5a600e17\",\n    \"5a600e19\",\n    \"5a600e1c\",\n    \"5a600e15\",\n    \"5a600e1b\"\n]);\n(0, chai_1.expect)(sorted_set_1.SortedSet.intersect(b, a)).to.eql([\n    \"5a600e1b\",\n    \"5a600e14\",\n    \"5a600e1c\",\n    \"5a600e15\",\n    \"5a600e19\",\n    \"5a600e10\",\n    \"5a600e17\"\n]);",
                      "err": {},
                      "uuid": "ec200f6e-bfdc-4ad0-a515-17ffacfb38bd",
                      "parentUUID": "949d5e86-79bd-49d6-bf36-ad219eaf27d1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect three sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect three sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet(), c = new sorted_set_1.SortedSet();\na.add(\"5a600e10\", 16);\na.add(\"5a600e12\", 10);\na.add(\"5a600e14\", 9);\na.add(\"5a600e15\", 14);\na.add(\"5a600e17\", 20);\na.add(\"5a600e18\", 13);\na.add(\"5a600e19\", 15);\na.add(\"5a600e1a\", 19);\na.add(\"5a600e1b\", 7);\na.add(\"5a600e1c\", 13);\na.add(\"5a600e1e\", 10);\nb.add(\"5a600e10\", 0);\nb.add(\"5a600e11\", 15);\nb.add(\"5a600e13\", 5);\nb.add(\"5a600e14\", 3);\nb.add(\"5a600e15\", 14);\nb.add(\"5a600e17\", 12);\nb.add(\"5a600e19\", 12);\nb.add(\"5a600e1b\", 16);\nb.add(\"5a600e1c\", 12);\nb.add(\"5a600e1d\", 17);\nb.add(\"5a600e1f\", 3);\nc.add(\"5a600e10\", 7);\nc.add(\"5a600e12\", 20);\nc.add(\"5a600e13\", 9);\nc.add(\"5a600e14\", 19);\nc.add(\"5a600e16\", 19);\nc.add(\"5a600e17\", 1);\nc.add(\"5a600e18\", 18);\nc.add(\"5a600e1a\", 6);\nc.add(\"5a600e1c\", 15);\nc.add(\"5a600e1f\", 4);\n(0, chai_1.expect)(sorted_set_1.SortedSet.intersect(c, a, b)).to.eql([\n    \"5a600e10\",\n    \"5a600e14\",\n    \"5a600e17\",\n    \"5a600e1c\"\n]);\n// Expect(SortedSet.intersect(c, a, b)).to.eql(c.intersect(a, b));",
                      "err": {},
                      "uuid": "aad28a4b-df4b-4e6e-9777-c2e5895d8b26",
                      "parentUUID": "949d5e86-79bd-49d6-bf36-ad219eaf27d1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect four sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect four sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet(), c = new sorted_set_1.SortedSet(), d = new sorted_set_1.SortedSet();\na.add(\"5a600e10\", 16);\na.add(\"5a600e12\", 10);\na.add(\"5a600e14\", 9);\na.add(\"5a600e15\", 14);\na.add(\"5a600e17\", 20);\na.add(\"5a600e18\", 13);\na.add(\"5a600e19\", 15);\na.add(\"5a600e1a\", 19);\na.add(\"5a600e1b\", 7);\na.add(\"5a600e1c\", 13);\na.add(\"5a600e1e\", 10);\nb.add(\"5a600e10\", 0);\nb.add(\"5a600e11\", 15);\nb.add(\"5a600e13\", 5);\nb.add(\"5a600e14\", 3);\nb.add(\"5a600e15\", 14);\nb.add(\"5a600e17\", 12);\nb.add(\"5a600e19\", 12);\nb.add(\"5a600e1b\", 16);\nb.add(\"5a600e1c\", 12);\nb.add(\"5a600e1d\", 17);\nb.add(\"5a600e1f\", 3);\nc.add(\"5a600e10\", 7);\nc.add(\"5a600e12\", 20);\nc.add(\"5a600e13\", 9);\nc.add(\"5a600e14\", 19);\nc.add(\"5a600e16\", 19);\nc.add(\"5a600e17\", 1);\nc.add(\"5a600e18\", 18);\nc.add(\"5a600e1a\", 6);\nc.add(\"5a600e1c\", 15);\nc.add(\"5a600e1f\", 4);\nd.add(\"5a600e1c\", 400);\nd.add(\"5a600e17\", 500);\nd.add(\"5a600e1f\", 600);\nd.add(\"5a600e20\", 700);\n(0, chai_1.expect)(sorted_set_1.SortedSet.intersect(d, c, a, b)).to.eql([\n    \"5a600e17\",\n    \"5a600e1c\"\n]);\n// Expect(SortedSet.intersect(d, c, a, b)).to.eql(d.intersect(c, a, b));",
                      "err": {},
                      "uuid": "ccffd287-4bf3-4d61-88af-b4ca4224e27d",
                      "parentUUID": "949d5e86-79bd-49d6-bf36-ad219eaf27d1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ec200f6e-bfdc-4ad0-a515-17ffacfb38bd",
                    "aad28a4b-df4b-4e6e-9777-c2e5895d8b26",
                    "ccffd287-4bf3-4d61-88af-b4ca4224e27d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "294ff41e-2846-4a6b-acfe-e6a22383812e",
                  "title": "#rank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should get the correct rank",
                      "fullTitle": "sorted-set test skip map rewrite #rank should get the correct rank",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.rank(\"5a600e12\")).to.equal(7);\n(0, chai_1.expect)(ss.rank(\"5a600e13\")).to.equal(3);\n(0, chai_1.expect)(ss.rank(\"5a600e16\")).to.equal(0);\n(0, chai_1.expect)(ss.rank(\"5a600e15\")).to.equal(8);\n(0, chai_1.expect)(ss.rank(\"not in set\")).to.equal(null);",
                      "err": {},
                      "uuid": "66d74415-1a5c-45b2-8f21-b5794a09e9b7",
                      "parentUUID": "294ff41e-2846-4a6b-acfe-e6a22383812e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "66d74415-1a5c-45b2-8f21-b5794a09e9b7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "efd1039f-6f09-44ed-be7d-da017ca3cb10",
                  "title": "#rem",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should delete special elements",
                      "fullTitle": "sorted-set test skip map rewrite #rem should delete special elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.rem(\"5a600e15\")).to.equal(19);\n(0, chai_1.expect)(ss).to.have.length(8);\n(0, chai_1.expect)(ss.rem(\"5a600e16\")).to.equal(3);\n(0, chai_1.expect)(ss).to.have.length(7);\n(0, chai_1.expect)(ss.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e11\",\n        6\n    ],\n    [\n        \"5a600e18\",\n        10\n    ],\n    [\n        \"5a600e13\",\n        11\n    ],\n    [\n        \"5a600e17\",\n        12\n    ],\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ]\n]);",
                      "err": {},
                      "uuid": "026ec261-ff4b-4df3-bdbd-aab92a18af07",
                      "parentUUID": "efd1039f-6f09-44ed-be7d-da017ca3cb10",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should delete many elements",
                      "fullTitle": "sorted-set test skip map rewrite #rem should delete many elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.rem(\"5a600e11\")).to.equal(6);\n(0, chai_1.expect)(ss.rem(\"5a600e13\")).to.equal(11);\n(0, chai_1.expect)(ss.rem(\"5a600e14\")).to.equal(14);\n(0, chai_1.expect)(ss.rem(\"5a600e15\")).to.equal(19);\n(0, chai_1.expect)(ss.rem(\"5a600e16\")).to.equal(3);\n(0, chai_1.expect)(ss.rem(\"5a600e17\")).to.equal(12);\n(0, chai_1.expect)(ss.length).to.equal(3);\n(0, chai_1.expect)(ss.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e18\",\n        10\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ]\n]);",
                      "err": {},
                      "uuid": "ced16ae8-b433-4133-a4c2-f8da60add367",
                      "parentUUID": "efd1039f-6f09-44ed-be7d-da017ca3cb10",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "026ec261-ff4b-4df3-bdbd-aab92a18af07",
                    "ced16ae8-b433-4133-a4c2-f8da60add367"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "5d622a37-33bb-4d71-8eb6-826f757e85ff",
                  "title": "#remRangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a range of elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByScore should strip out a range of elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.remRangeByScore(4, 14)).to.equal(5);\n(0, chai_1.expect)(ss).to.have.length(4);\n(0, chai_1.expect)(ss.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);",
                      "err": {},
                      "uuid": "7c3bcffb-06b5-4bb3-81f9-7d4f72d8e21d",
                      "parentUUID": "5d622a37-33bb-4d71-8eb6-826f757e85ff",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all the elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByScore should strip out all the elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.remRangeByScore(3, 19)).to.equal(9);\n(0, chai_1.expect)(ss).to.have.length(0);\n(0, chai_1.expect)(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "579a79df-22f0-4c2b-a98a-079cbdcc77d7",
                      "parentUUID": "5d622a37-33bb-4d71-8eb6-826f757e85ff",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7c3bcffb-06b5-4bb3-81f9-7d4f72d8e21d",
                    "579a79df-22f0-4c2b-a98a-079cbdcc77d7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "db8f5dfc-b841-4ed4-a15e-819fb08c81cd",
                  "title": "#remRangeByRank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a slice of elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByRank should strip out a slice of elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.remRangeByRank(1, 6)).to.equal(5);\n(0, chai_1.expect)(ss).to.have.length(4);\n(0, chai_1.expect)(ss.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);",
                      "err": {},
                      "uuid": "f67c3ce9-316a-4ddc-84d4-0a429e8e33f1",
                      "parentUUID": "db8f5dfc-b841-4ed4-a15e-819fb08c81cd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByRank should strip out all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(ss.remRangeByRank(0, 9)).to.equal(9);\n(0, chai_1.expect)(ss).to.have.length(0);\n(0, chai_1.expect)(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "1a74feaa-036e-4d6c-b180-24c7cc1afad2",
                      "parentUUID": "db8f5dfc-b841-4ed4-a15e-819fb08c81cd",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f67c3ce9-316a-4ddc-84d4-0a429e8e33f1",
                    "1a74feaa-036e-4d6c-b180-24c7cc1afad2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "d46963b9-b5aa-4f12-be1b-1bd0e948a39d",
                  "title": "#values",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the values",
                      "fullTitle": "sorted-set test skip map rewrite #values should return the values",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet();\nss.add(\"first\", -1);\nss.add(\"third\", 5);\nss.add(\"second\", 3);\n(0, chai_1.expect)(ss.values()).to.eql([\n    -1,\n    3,\n    5\n]);",
                      "err": {},
                      "uuid": "fb5e7da8-565e-4c59-8626-78be7ebaece4",
                      "parentUUID": "d46963b9-b5aa-4f12-be1b-1bd0e948a39d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fb5e7da8-565e-4c59-8626-78be7ebaece4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "dcab0db4-fd41-4ffa-bcbd-45fac482834a",
                  "title": "unique rewrite",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should ensure values are unique",
                      "fullTitle": "sorted-set test skip map rewrite unique rewrite should ensure values are unique",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const options = { \"unique\": true }, ss = new sorted_set_1.SortedSet(options);\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(() => {\n    ss.add(\"5a600e19\", 11);\n}).to.throw(/unique/);\n// Quick exit test\n(0, chai_1.expect)(() => {\n    ss.add(\"5a600dff\", ss._head.next[ss._level - 1].next.value);\n}).to.throw(/unique/);\n// This test ensures the key < key check doesn't come into play\n(0, chai_1.expect)(() => {\n    ss.add(\"5a600dff\", 11);\n}).to.throw(/unique/);\n(0, chai_1.expect)(() => {\n    ss.add(\"5a600e18\", 10);\n}).to.not.throw();\n(0, chai_1.expect)(ss).to.have.length(9);\n(0, chai_1.expect)(ss.toArray({ \"withScores\": true })).to.eql([\n    [\n        \"5a600e16\",\n        3\n    ],\n    [\n        \"5a600e11\",\n        6\n    ],\n    [\n        \"5a600e18\",\n        10\n    ],\n    [\n        \"5a600e13\",\n        11\n    ],\n    [\n        \"5a600e17\",\n        12\n    ],\n    [\n        \"5a600e14\",\n        14\n    ],\n    [\n        \"5a600e10\",\n        16\n    ],\n    [\n        \"5a600e12\",\n        17\n    ],\n    [\n        \"5a600e15\",\n        19\n    ]\n]);",
                      "err": {},
                      "uuid": "e47dcfd3-7e06-4085-9107-103c87e89128",
                      "parentUUID": "dcab0db4-fd41-4ffa-bcbd-45fac482834a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert keys if constraint broken during update",
                      "fullTitle": "sorted-set test skip map rewrite unique rewrite should revert keys if constraint broken during update",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ss = new sorted_set_1.SortedSet({ \"unique\": true });\nss.add(\"5a600e10\", 16);\nss.add(\"5a600e11\", 6);\nss.add(\"5a600e12\", 17);\nss.add(\"5a600e13\", 11);\nss.add(\"5a600e14\", 14);\nss.add(\"5a600e15\", 19);\nss.add(\"5a600e16\", 3);\nss.add(\"5a600e17\", 12);\nss.add(\"5a600e18\", 10);\n(0, chai_1.expect)(() => {\n    ss.add(\"5a600e13\", 14);\n}).to.throw(/unique/);\n(0, chai_1.expect)(ss).to.have.length(9);\n(0, chai_1.expect)(ss.score(\"5a600e13\")).to.equal(11);",
                      "err": {},
                      "uuid": "79eca4be-c195-4bcf-8c65-f290a644a564",
                      "parentUUID": "dcab0db4-fd41-4ffa-bcbd-45fac482834a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e47dcfd3-7e06-4085-9107-103c87e89128",
                    "79eca4be-c195-4bcf-8c65-f290a644a564"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [
                "a9c18d0d-4cf5-425e-b448-81c424471f8b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "d5ea1249-5499-44b5-9084-8699dd00de37",
            "37847d96-a91c-4a64-8c4d-28c56c8da18d",
            "d9fbdc1e-d2ef-4207-8592-9e3c71453109",
            "6ddbaf68-6f7b-474f-ad8c-50d8be8a0a83",
            "c85f45a1-8a4d-42f9-b03f-fbd75575b9b4",
            "c64998c5-df89-456a-89b2-c8c6d2d0f7af",
            "cec49767-6b04-4d83-94df-68a31c76c7d8",
            "c0c917f6-f833-43e2-9a36-419dc9bfc50d"
          ],
          "failures": [],
          "pending": [
            "a2893711-f5f6-40ca-a44d-71c07121b53b"
          ],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "001ea17f-3326-4aab-a873-37d6d78c8136",
          "title": "lua-bit test",
          "fullFile": "/home/lane/git/redis/test/lua/lua-bit.test.ts",
          "file": "/test/lua/lua-bit.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"lua-bit test\"",
              "fullTitle": "lua-bit test \"before all\" hook in \"lua-bit test\"",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on(\"ready\", () => __awaiter(void 0, void 0, void 0, function* () {\n    yield (0, common_test_1.sendCommand)(client, [\"flushall\"]);\n    yield (0, common_test_1.sendCommand)(client, [\n        \"select\",\n        \"0\"\n    ]);\n    yield (0, common_test_1.sendCommand)(client, [\n        \"script\",\n        \"flush\"\n    ]);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "9142fcb1-c186-41cc-a1d4-72043cfbf720",
              "parentUUID": "001ea17f-3326-4aab-a873-37d6d78c8136",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"lua-bit test\"",
              "fullTitle": "lua-bit test \"before each\" hook in \"lua-bit test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "fbe59d75-9a54-48d3-a252-1eac5503dac7",
              "parentUUID": "001ea17f-3326-4aab-a873-37d6d78c8136",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"lua-bit test\"",
              "fullTitle": "lua-bit test \"after all\" hook in \"lua-bit test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "467acaab-44eb-4120-acda-3d857a6749e9",
              "parentUUID": "001ea17f-3326-4aab-a873-37d6d78c8136",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"lua-bit test\"",
              "fullTitle": "lua-bit test \"after each\" hook in \"lua-bit test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "21af2159-2816-4c61-af51-1b579268a59e",
              "parentUUID": "001ea17f-3326-4aab-a873-37d6d78c8136",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should leverage the LUA bit library for bit AND op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit AND op",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = bit.band(5, 1) return val \",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "016aea54-1a9a-47da-8328-1f91008c43af",
              "parentUUID": "001ea17f-3326-4aab-a873-37d6d78c8136",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit OR op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit OR op",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = bit.bor(5, 1) return val \",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(5);\n    })",
              "err": {},
              "uuid": "6813d3f0-c952-491f-b7cc-107a701db3b1",
              "parentUUID": "001ea17f-3326-4aab-a873-37d6d78c8136",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit XOR op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit XOR op",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = bit.bxor(5, 1) return val \",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(4);\n    })",
              "err": {},
              "uuid": "a70119a6-8944-4d76-98eb-17e116ab9560",
              "parentUUID": "001ea17f-3326-4aab-a873-37d6d78c8136",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit NOT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit NOT op",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = bit.bnot(5) return val \",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(-6);\n    })",
              "err": {},
              "uuid": "e7f7f4dc-6d5b-470c-87ee-568a57af3ade",
              "parentUUID": "001ea17f-3326-4aab-a873-37d6d78c8136",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit LSHIFT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit LSHIFT op",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = bit.lshift(5, 1) return val \",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(10);\n    })",
              "err": {},
              "uuid": "843fc033-33b3-4580-8843-7db69d213dd4",
              "parentUUID": "001ea17f-3326-4aab-a873-37d6d78c8136",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit RSHIFT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit RSHIFT op",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield (0, common_test_1.sendCommand)(new net.Socket(), [\n            \"info\",\n            \"server\"\n        ]);\n        // Only run this test if this is unit-redis-ness\n        if (!(/redis_version:5/gim).test(response)) {\n            response = yield (0, common_test_1.sendCommand)(client, [\n                \"eval\",\n                \"local val = bit.rshift(-5, 1) return val \",\n                \"0\"\n            ]);\n            (0, chai_1.expect)(response).to.equal(-3);\n        }\n    })",
              "err": {},
              "uuid": "e63f9c6a-b717-4789-8e5a-1405bfcec225",
              "parentUUID": "001ea17f-3326-4aab-a873-37d6d78c8136",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit ARSHIFT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit ARSHIFT op",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield (0, common_test_1.sendCommand)(client, [\n            \"eval\",\n            \"local val = bit.arshift(5, 1) return val \",\n            \"0\"\n        ]);\n        (0, chai_1.expect)(response).to.equal(2);\n    })",
              "err": {},
              "uuid": "7c2c9970-40b9-4cc4-a90f-7da0fce8ea71",
              "parentUUID": "001ea17f-3326-4aab-a873-37d6d78c8136",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "016aea54-1a9a-47da-8328-1f91008c43af",
            "6813d3f0-c952-491f-b7cc-107a701db3b1",
            "a70119a6-8944-4d76-98eb-17e116ab9560",
            "e7f7f4dc-6d5b-470c-87ee-568a57af3ade",
            "843fc033-33b3-4580-8843-7db69d213dd4",
            "e63f9c6a-b717-4789-8e5a-1405bfcec225",
            "7c2c9970-40b9-4cc4-a90f-7da0fce8ea71"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 43,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a52f6b05-97dd-4043-9694-ae5e1d56b381",
          "title": "dictionary test",
          "fullFile": "/home/lane/git/redis/test/dictionary.test.ts",
          "file": "/test/dictionary.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"dictionary test\"",
              "fullTitle": "dictionary test \"before each\" hook in \"dictionary test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dictionary = new dictionary_1.Dictionary();\nsinon.createSandbox();",
              "err": {},
              "uuid": "1f7f3387-a23f-435d-8eff-885ccb37f5b2",
              "parentUUID": "a52f6b05-97dd-4043-9694-ae5e1d56b381",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"dictionary test\"",
              "fullTitle": "dictionary test \"after all\" hook in \"dictionary test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "6e0d4e70-2c01-4242-a8e1-6f60200c84a3",
              "parentUUID": "a52f6b05-97dd-4043-9694-ae5e1d56b381",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"dictionary test\"",
              "fullTitle": "dictionary test \"after each\" hook in \"dictionary test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "53c7ebca-7b5d-4179-8722-3353604f97f5",
              "parentUUID": "a52f6b05-97dd-4043-9694-ae5e1d56b381",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should construct",
              "fullTitle": "dictionary test should construct",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        (0, chai_1.expect)(dictionary.constructor.name).to.equal(\"Dictionary\");\n    })",
              "err": {},
              "uuid": "ff75112f-105d-4386-9674-20db911023d8",
              "parentUUID": "a52f6b05-97dd-4043-9694-ae5e1d56b381",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should implement basic put/get/remove/size/clear/contains/exists/keys/values functionality",
              "fullTitle": "dictionary test should implement basic put/get/remove/size/clear/contains/exists/keys/values functionality",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dictionary.put(\"item\", \"one\");\n(0, chai_1.expect)(dictionary.exists(\"item\")).to.equal(true);\n(0, chai_1.expect)(dictionary.exists(\"one\")).to.equal(false);\n(0, chai_1.expect)(dictionary.get(\"item\")).to.equal(\"one\");\n(0, chai_1.expect)(dictionary.size()).to.equal(1);\n(0, chai_1.expect)(dictionary.contains(\"one\")).to.equal(true);\n(0, chai_1.expect)(dictionary.keys().length).to.equal(1);\n(0, chai_1.expect)(dictionary.values().length).to.equal(1);\ndictionary.put(\"item\", \"two\");\n(0, chai_1.expect)(dictionary.get(\"item\")).to.equal(\"two\");\ndictionary.put(\"one\", { \"embedded\": true });\ndictionary.remove(\"three\");\n(0, chai_1.expect)(dictionary.size()).to.equal(2);\nlet foundTwo = false;\nfor (const each of dictionary) {\n    if (!foundTwo) {\n        (0, chai_1.expect)(each).to.equal(\"two\");\n        foundTwo = true;\n    }\n    else {\n        (0, chai_1.expect)(each).to.eql({ \"embedded\": true });\n    }\n}\ndictionary.remove(\"item\");\n(0, chai_1.expect)(dictionary.size()).to.equal(1);\ndictionary.clear();\n(0, chai_1.expect)(dictionary.size()).to.equal(0);",
              "err": {},
              "uuid": "a7b879cc-01a7-4f3d-8ef5-311242131380",
              "parentUUID": "a52f6b05-97dd-4043-9694-ae5e1d56b381",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ff75112f-105d-4386-9674-20db911023d8",
            "a7b879cc-01a7-4f3d-8ef5-311242131380"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2416c9d1-4dc2-4287-a473-da1ec9c19328",
          "title": "logger test",
          "fullFile": "/home/lane/git/redis/test/logger.test.ts",
          "file": "/test/logger.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"logger test\"",
              "fullTitle": "logger test \"before each\" hook in \"logger test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "af11f12b-bc20-4439-8d91-1ddfb28429ce",
              "parentUUID": "2416c9d1-4dc2-4287-a473-da1ec9c19328",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"logger test\"",
              "fullTitle": "logger test \"after all\" hook in \"logger test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "f667df94-3f23-4409-88da-24bca8d6e805",
              "parentUUID": "2416c9d1-4dc2-4287-a473-da1ec9c19328",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"logger test\"",
              "fullTitle": "logger test \"after each\" hook in \"logger test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "04a7414a-21ae-4a63-9f5a-1e32f809b484",
              "parentUUID": "2416c9d1-4dc2-4287-a473-da1ec9c19328",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should construct",
              "fullTitle": "logger test should construct",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        logger = new logger_1.Logger(module.id);\n        (0, chai_1.expect)(logger.constructor.name).to.equal(\"Logger\");\n        logger.info(\"This is an info message\");\n        logger.warn(\"This is a warning message\");\n        logger.debug(\"This is an invisible debug message\");\n    })",
              "err": {},
              "uuid": "ad8bc9a4-6ef3-4492-b4e5-0faa4b11031b",
              "parentUUID": "2416c9d1-4dc2-4287-a473-da1ec9c19328",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not construct when initialized with an empty string",
              "fullTitle": "logger test should not construct when initialized with an empty string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, chai_1.expect)(() => {\n    logger = new logger_1.Logger(\"\");\n}).to.throw();",
              "err": {},
              "uuid": "e96eeb32-7041-45ce-850c-77527e827dc5",
              "parentUUID": "2416c9d1-4dc2-4287-a473-da1ec9c19328",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ad8bc9a4-6ef3-4492-b4e5-0faa4b11031b",
            "e96eeb32-7041-45ce-850c-77527e827dc5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "docs/mochawesome"
      },
      "version": "6.2.0"
    }
  }
}