{
  "stats": {
    "suites": 89,
    "tests": 287,
    "passes": 286,
    "pending": 1,
    "failures": 0,
    "start": "2020-01-16T02:00:40.329Z",
    "end": "2020-01-16T02:00:51.121Z",
    "duration": 10792,
    "testsRegistered": 287,
    "passPercent": 100,
    "pendingPercent": 0.34843205574912894,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "82634815-1823-4907-957f-5ed6c5346e35",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook",
          "fullTitle": "\"before all\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "done();",
          "err": {},
          "uuid": "1c94693e-66ed-4dc1-a2ab-a98ce3c9f804",
          "parentUUID": "82634815-1823-4907-957f-5ed6c5346e35",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook",
          "fullTitle": "\"after all\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "__awaiter(void 0, void 0, void 0, function* () {\n})",
          "err": {},
          "uuid": "5be4aabf-01d1-456a-99fa-4e47ae5dca26",
          "parentUUID": "82634815-1823-4907-957f-5ed6c5346e35",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "4370ce05-771b-4954-9025-0cdc103c2657",
          "title": "dictionary test",
          "fullFile": "/home/lane/git/redis/test/dictionary.test.ts",
          "file": "/test/dictionary.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "dictionary test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dictionary = new dictionary_1.Dictionary();\nsinon.createSandbox();",
              "err": {},
              "uuid": "6427aa14-cb52-46a2-aeca-faba74595fc1",
              "parentUUID": "4370ce05-771b-4954-9025-0cdc103c2657",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "dictionary test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "da8343e6-8f72-472a-8ab7-2ec53acafd9b",
              "parentUUID": "4370ce05-771b-4954-9025-0cdc103c2657",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "dictionary test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "7d662e41-d1d5-4384-9605-5d1e9055604e",
              "parentUUID": "4370ce05-771b-4954-9025-0cdc103c2657",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should construct",
              "fullTitle": "dictionary test should construct",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        chai_1.expect(dictionary.constructor.name).to.equal('Dictionary');\n    })",
              "err": {},
              "uuid": "59b4e8e6-ff8f-4f81-8aa6-b0fbd83f3200",
              "parentUUID": "4370ce05-771b-4954-9025-0cdc103c2657",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should implement basic put/get/remove/size/clear/contains/exists/keys/values functionality",
              "fullTitle": "dictionary test should implement basic put/get/remove/size/clear/contains/exists/keys/values functionality",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dictionary.put('item', 'one');\nchai_1.expect(dictionary.exists('item')).to.equal(true);\nchai_1.expect(dictionary.exists('one')).to.equal(false);\nchai_1.expect(dictionary.get('item')).to.equal('one');\nchai_1.expect(dictionary.size()).to.equal(1);\nchai_1.expect(dictionary.contains('one')).to.equal(true);\nchai_1.expect(dictionary.keys().length).to.equal(1);\nchai_1.expect(dictionary.values().length).to.equal(1);\ndictionary.put('item', 'two');\nchai_1.expect(dictionary.get('item')).to.equal('two');\ndictionary.put('one', { embedded: true });\ndictionary.remove('three');\nchai_1.expect(dictionary.size()).to.equal(2);\nlet foundTwo = false;\nfor (const each of dictionary) {\n    if (!foundTwo) {\n        chai_1.expect(each).to.equal('two');\n        foundTwo = true;\n    }\n    else {\n        chai_1.expect(each).to.eql({ embedded: true });\n    }\n}\ndictionary.remove('item');\nchai_1.expect(dictionary.size()).to.equal(1);\ndictionary.clear();\nchai_1.expect(dictionary.size()).to.equal(0);",
              "err": {},
              "uuid": "373899e3-79d4-447e-9768-2e3e88247394",
              "parentUUID": "4370ce05-771b-4954-9025-0cdc103c2657",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "59b4e8e6-ff8f-4f81-8aa6-b0fbd83f3200",
            "373899e3-79d4-447e-9768-2e3e88247394"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "174dde86-fb3d-463c-a520-adaf6584bd00",
          "title": "logger test",
          "fullFile": "/home/lane/git/redis/test/logger.test.ts",
          "file": "/test/logger.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "logger test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "16b02dfc-8cc0-4805-907e-fb95de8cadf4",
              "parentUUID": "174dde86-fb3d-463c-a520-adaf6584bd00",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "logger test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "2b821252-65d8-4c3f-b721-1baaaad6592d",
              "parentUUID": "174dde86-fb3d-463c-a520-adaf6584bd00",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "logger test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "d69160fb-9013-44a3-bd2e-16217f3b378c",
              "parentUUID": "174dde86-fb3d-463c-a520-adaf6584bd00",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should construct",
              "fullTitle": "logger test should construct",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        logger = new logger_1.Logger(module.id);\n        chai_1.expect(logger.constructor.name).to.equal('Logger');\n        logger.info(`This is an info message`);\n        logger.warn('This is a warning message');\n        logger.debug(`This is an invisible debug message`);\n    })",
              "err": {},
              "uuid": "74b1dac5-ade3-433f-88ee-a59955f680e7",
              "parentUUID": "174dde86-fb3d-463c-a520-adaf6584bd00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not construct when initialized with an empty string",
              "fullTitle": "logger test should not construct when initialized with an empty string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(() => {\n    logger = new logger_1.Logger('');\n}).to.throw();",
              "err": {},
              "uuid": "f51654f3-133e-4b74-806b-b219af0b802b",
              "parentUUID": "174dde86-fb3d-463c-a520-adaf6584bd00",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "74b1dac5-ade3-433f-88ee-a59955f680e7",
            "f51654f3-133e-4b74-806b-b219af0b802b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7e29b4bc-5ce2-4887-b914-5d4228960b89",
          "title": "client command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/client-command.test.ts",
          "file": "/test/resp/command/client-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "client command test \"before all\" hook",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "7e3a3f13-a39f-4247-9213-bec68e6e675d",
              "parentUUID": "7e29b4bc-5ce2-4887-b914-5d4228960b89",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "client command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "fbb2a127-6db8-4f02-b091-71c9d4f7dc2f",
              "parentUUID": "7e29b4bc-5ce2-4887-b914-5d4228960b89",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "client command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "2fd655e4-9e87-4426-9f3b-ed02ef3345f7",
              "parentUUID": "7e29b4bc-5ce2-4887-b914-5d4228960b89",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "client command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "4f95e9da-4902-4669-a035-568967b5f053",
              "parentUUID": "7e29b4bc-5ce2-4887-b914-5d4228960b89",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow more than 3 parameters",
              "fullTitle": "client command test should not allow more than 3 parameters",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'one', 'two', 'three', 'four']);\n        chai_1.expect(response).to.equal('ReplyError: ERR Unknown subcommand or wrong number of arguments for \\'one\\'. Try CLIENT HELP');\n    })",
              "err": {},
              "uuid": "5233d23b-831e-4fbb-aa40-84349ec78235",
              "parentUUID": "7e29b4bc-5ce2-4887-b914-5d4228960b89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail predictably when an unknown subcommand is passed",
              "fullTitle": "client command test should fail predictably when an unknown subcommand is passed",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'whatever']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'whatever'));\n    })",
              "err": {},
              "uuid": "b5aac22e-1684-4d86-a2b7-1e2d7415ac67",
              "parentUUID": "7e29b4bc-5ce2-4887-b914-5d4228960b89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a NIL name when called with \"GETNAME\" subcommand",
              "fullTitle": "client command test should return a NIL name when called with \"GETNAME\" subcommand",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'getname']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "97739cc9-74b8-41e9-8653-96e5b8bc0610",
              "parentUUID": "7e29b4bc-5ce2-4887-b914-5d4228960b89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail predictably when \"GETNAME\" is called with too many parameters",
              "fullTitle": "client command test should fail predictably when \"GETNAME\" is called with too many parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'getname', 'extra']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'getname'));\n    })",
              "err": {},
              "uuid": "bb20fc97-2249-4c85-8638-de92b7706f99",
              "parentUUID": "7e29b4bc-5ce2-4887-b914-5d4228960b89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with \"OK\" when \"setname\" is called with a valid name",
              "fullTitle": "client command test should respond with \"OK\" when \"setname\" is called with a valid name",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['client', 'setname', 'whatever']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['client', 'getname']);\n        chai_1.expect(response).to.equal('whatever');\n    })",
              "err": {},
              "uuid": "37eec02f-a608-46aa-8af2-5365c013c13f",
              "parentUUID": "7e29b4bc-5ce2-4887-b914-5d4228960b89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should persist the value for \"setname\" across tests",
              "fullTitle": "client command test should persist the value for \"setname\" across tests",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'getname']);\n        chai_1.expect(response).to.equal('whatever');\n    })",
              "err": {},
              "uuid": "ac727244-4353-42cf-b75c-60c64b297659",
              "parentUUID": "7e29b4bc-5ce2-4887-b914-5d4228960b89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"setname\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"setname\" called with too many parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'setname', 'test', 'two']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'setname'));\n    })",
              "err": {},
              "uuid": "e7839c65-1ed8-42ea-bfcc-820ee1ec7e8f",
              "parentUUID": "7e29b4bc-5ce2-4887-b914-5d4228960b89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow whitespace in \"setname\" subcommand",
              "fullTitle": "client command test should not allow whitespace in \"setname\" subcommand",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'setname', 'te\\nst']);\n        chai_1.expect(response).to.equal(`ReplyError: ERR Client names cannot contain spaces, newlines or special characters.`);\n    })",
              "err": {},
              "uuid": "96916724-161c-4ef2-8561-f557c500ffb8",
              "parentUUID": "7e29b4bc-5ce2-4887-b914-5d4228960b89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the server-assigned client id",
              "fullTitle": "client command test should return the server-assigned client id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'id']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(String(response).length).to.be.greaterThan(0);\n    })",
              "err": {},
              "uuid": "09e4f39e-2b0a-42de-8848-e014752f6b43",
              "parentUUID": "7e29b4bc-5ce2-4887-b914-5d4228960b89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"id\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"id\" called with too many parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'id', 'test', 'two']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'id'));\n    })",
              "err": {},
              "uuid": "2d9c1f2c-ed59-4cbd-bc66-f52c921bae11",
              "parentUUID": "7e29b4bc-5ce2-4887-b914-5d4228960b89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a bunch of information when client \"list\" subcommand is invoked",
              "fullTitle": "client command test should return a bunch of information when client \"list\" subcommand is invoked",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'list']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response.length).to.be.greaterThan(0);\n        chai_1.expect(response).to.match(/ name=whatever /);\n        chai_1.expect(response).to.match(/\\bdb=0\\b/);\n    })",
              "err": {},
              "uuid": "8b3c5350-3569-4f9c-b653-acfd0c4b3716",
              "parentUUID": "7e29b4bc-5ce2-4887-b914-5d4228960b89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"list\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"list\" called with too many parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'list', 'test', 'two']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "26373643-3fe2-4e22-ad08-11feb660c9b2",
              "parentUUID": "7e29b4bc-5ce2-4887-b914-5d4228960b89",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5233d23b-831e-4fbb-aa40-84349ec78235",
            "b5aac22e-1684-4d86-a2b7-1e2d7415ac67",
            "97739cc9-74b8-41e9-8653-96e5b8bc0610",
            "bb20fc97-2249-4c85-8638-de92b7706f99",
            "37eec02f-a608-46aa-8af2-5365c013c13f",
            "ac727244-4353-42cf-b75c-60c64b297659",
            "e7839c65-1ed8-42ea-bfcc-820ee1ec7e8f",
            "96916724-161c-4ef2-8561-f557c500ffb8",
            "09e4f39e-2b0a-42de-8848-e014752f6b43",
            "2d9c1f2c-ed59-4cbd-bc66-f52c921bae11",
            "8b3c5350-3569-4f9c-b653-acfd0c4b3716",
            "26373643-3fe2-4e22-ad08-11feb660c9b2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 37,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e88f3a6b-3f48-440c-9df2-b452289ab646",
          "title": "flushall-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/db/flushall-command.test.ts",
          "file": "/test/resp/command/db/flushall-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "flushall-command test \"before all\" hook",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "09c7e8e7-be6b-4b36-a875-2ae727d2e958",
              "parentUUID": "e88f3a6b-3f48-440c-9df2-b452289ab646",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "flushall-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "d4f88b36-ccbd-4b4a-9f2b-775280202c27",
              "parentUUID": "e88f3a6b-3f48-440c-9df2-b452289ab646",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "flushall-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "aa4a82ed-f3c6-4728-b92c-ed75add368a0",
              "parentUUID": "e88f3a6b-3f48-440c-9df2-b452289ab646",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "flushall-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "c59f72f1-331b-41ad-a25f-39b22d4fcb8b",
              "parentUUID": "e88f3a6b-3f48-440c-9df2-b452289ab646",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should remove all keys from all databases",
              "fullTitle": "flushall-command test should remove all keys from all databases",
              "timedOut": false,
              "duration": 87,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let db = 0; db < 16; db++) {\n            response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['set', 'dbid', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            console.log(`DB: ${db}: dbsize: ${response}`);\n            chai_1.expect(response).to.equal(1);\n        }\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        for (let db = 0; db < 16; db++) {\n            response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.equal(0);\n        }\n    })",
              "err": {},
              "uuid": "f915e7a9-6809-4cdf-ae6b-bcedca38eca0",
              "parentUUID": "e88f3a6b-3f48-440c-9df2-b452289ab646",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f915e7a9-6809-4cdf-ae6b-bcedca38eca0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 87,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1c5ef99f-cbb9-41f9-859d-d3cdbb04d11f",
          "title": "flushdb-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/db/flushdb-command.test.ts",
          "file": "/test/resp/command/db/flushdb-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "flushdb-command test \"before all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "5cd50fbf-4fc9-40e9-96ca-b9a4ad5865fd",
              "parentUUID": "1c5ef99f-cbb9-41f9-859d-d3cdbb04d11f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "flushdb-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "4c883996-8d41-4ce4-8570-f768c7cec6c5",
              "parentUUID": "1c5ef99f-cbb9-41f9-859d-d3cdbb04d11f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "flushdb-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "bedc3165-3e6a-4600-94d0-fe4032943584",
              "parentUUID": "1c5ef99f-cbb9-41f9-859d-d3cdbb04d11f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "flushdb-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "39230390-36e5-41b3-8e8f-c8a59a3e82ac",
              "parentUUID": "1c5ef99f-cbb9-41f9-859d-d3cdbb04d11f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should remove all keys from only the currently selected databases",
              "fullTitle": "flushdb-command test should remove all keys from only the currently selected databases",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let db = 0; db < 16; db++) {\n            response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['set', 'dbid', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.equal(1);\n        }\n        for (let db = 0; db < 16; db++) {\n            if (db !== 14) {\n                response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n                chai_1.expect(response).to.equal('OK');\n                response = yield common_test_1.sendCommand(client, ['flushdb']);\n                chai_1.expect(response).to.equal('OK');\n                response = yield common_test_1.sendCommand(client, ['exists', 'dbid']);\n                chai_1.expect(response).to.equal(0);\n                response = yield common_test_1.sendCommand(client, ['dbsize']);\n                chai_1.expect(response).to.equal(0);\n            }\n        }\n        response = yield common_test_1.sendCommand(client, ['select', '14']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'dbid']);\n        chai_1.expect(response).to.equal('14');\n        response = yield common_test_1.sendCommand(client, ['dbsize']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "5e0dd3de-a37a-42b5-b01f-afbf336dc87f",
              "parentUUID": "1c5ef99f-cbb9-41f9-859d-d3cdbb04d11f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5e0dd3de-a37a-42b5-b01f-afbf336dc87f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 95,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "74be91a6-64d3-4a7f-97bf-0e1c325deb1c",
          "title": "hget command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/hash/hget-command.test.ts",
          "file": "/test/resp/command/hash/hget-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "hget command test \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "b6590b09-7b6b-46c3-9bf9-e28112d05e66",
              "parentUUID": "74be91a6-64d3-4a7f-97bf-0e1c325deb1c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "hget command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "a9d2a91b-c19a-404d-85d5-be3526e92f91",
              "parentUUID": "74be91a6-64d3-4a7f-97bf-0e1c325deb1c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "hget command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "f79f035d-16c6-4324-beed-a7062e2b0e29",
              "parentUUID": "74be91a6-64d3-4a7f-97bf-0e1c325deb1c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "hget command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a978ba4f-e454-4e9a-9c50-85527d96e079",
              "parentUUID": "74be91a6-64d3-4a7f-97bf-0e1c325deb1c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require exactly 2 parameters",
              "fullTitle": "hget command test should require exactly 2 parameters",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['hget', 'test'])\n    .then((response1) => {\n    chai_1.expect(response1).to.equal('ReplyError: ERR wrong number of arguments for \\'hget\\' command');\n    common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'one', 'two'])\n        .then((response2) => {\n        chai_1.expect(response2).to.equal('ReplyError: ERR wrong number of arguments for \\'hget\\' command');\n        common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'one'])\n            .then((response3) => {\n            chai_1.expect(response3).to.equal(null);\n            done();\n        });\n    });\n});",
              "err": {},
              "uuid": "e70a150b-8ac5-4471-acb3-b624a6077ad8",
              "parentUUID": "74be91a6-64d3-4a7f-97bf-0e1c325deb1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a value after it has be set",
              "fullTitle": "hget command test should get a value after it has be set",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['hset', 'test', 'one', 'two'])\n    .then(() => {\n    common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'one'])\n        .then((response) => {\n        chai_1.expect(response).to.equal('two');\n        done();\n    });\n});",
              "err": {},
              "uuid": "279f37b3-0c7f-4074-b8ea-68c726750129",
              "parentUUID": "74be91a6-64d3-4a7f-97bf-0e1c325deb1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return nil string when the key exists but the field does not",
              "fullTitle": "hget command test should return nil string when the key exists but the field does not",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'two'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(null);\n    done();\n});",
              "err": {},
              "uuid": "f43c8694-6b6d-452c-83a6-643b1f7c10a0",
              "parentUUID": "74be91a6-64d3-4a7f-97bf-0e1c325deb1c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e70a150b-8ac5-4471-acb3-b624a6077ad8",
            "279f37b3-0c7f-4074-b8ea-68c726750129",
            "f43c8694-6b6d-452c-83a6-643b1f7c10a0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ecc3ac69-807b-44e5-8ac7-0af0a31b5873",
          "title": "hset command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/hash/hset-command.test.ts",
          "file": "/test/resp/command/hash/hset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "hset command test \"before all\" hook",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(new net.Socket(), ['flushall']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "cdd9ee88-72de-48f7-abde-d7ac48d8aedb",
              "parentUUID": "ecc3ac69-807b-44e5-8ac7-0af0a31b5873",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "hset command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "f8037d23-1882-44e2-acb5-a7e5107fc957",
              "parentUUID": "ecc3ac69-807b-44e5-8ac7-0af0a31b5873",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "hset command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "c7b11fee-8994-4d5e-b4f0-1e0fa89f3c51",
              "parentUUID": "ecc3ac69-807b-44e5-8ac7-0af0a31b5873",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "hset command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "3538ab10-5719-40d3-a25c-52e080a585c3",
              "parentUUID": "ecc3ac69-807b-44e5-8ac7-0af0a31b5873",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require a minimum of 3 parameters",
              "fullTitle": "hset command test should require a minimum of 3 parameters",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = safeId();\n        chai_1.expect(uniqueKey).not.to.equal(lastId);\n        lastId = uniqueKey;\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey]);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for \\'hset\\' command/i);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one']);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for \\'hm?set\\' command/i);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'two']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "1f9dd252-6a44-40db-bfb7-59f3f2476ed8",
              "parentUUID": "ecc3ac69-807b-44e5-8ac7-0af0a31b5873",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only accept an odd number of parameters",
              "fullTitle": "hset command test should only accept an odd number of parameters",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = safeId();\n        chai_1.expect(uniqueKey).not.to.equal(lastId);\n        lastId = uniqueKey;\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one2', 'two', 'fail']);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for hm?set/i);\n    })",
              "err": {},
              "uuid": "065eb7e9-13b8-40d7-a793-a8430eb28fc5",
              "parentUUID": "ecc3ac69-807b-44e5-8ac7-0af0a31b5873",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only report added fields",
              "fullTitle": "hset command test should only report added fields",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = safeId();\n        chai_1.expect(uniqueKey).not.to.equal(lastId);\n        lastId = uniqueKey;\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'six']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'anothervalue']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hget', uniqueKey, 'one']);\n        chai_1.expect(response).to.equal('anothervalue');\n    })",
              "err": {},
              "uuid": "441db9e7-c193-44b8-9c04-0e1030e43df9",
              "parentUUID": "ecc3ac69-807b-44e5-8ac7-0af0a31b5873",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1f9dd252-6a44-40db-bfb7-59f3f2476ed8",
            "065eb7e9-13b8-40d7-a793-a8430eb28fc5",
            "441db9e7-c193-44b8-9c04-0e1030e43df9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b0600b24-4ff3-4547-b9aa-54617b14299a",
          "title": "del-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/del-command.test.ts",
          "file": "/test/resp/command/key/del-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "del-command test \"before all\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "95e6062b-6524-4748-b66d-e84e51a98d60",
              "parentUUID": "b0600b24-4ff3-4547-b9aa-54617b14299a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "del-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "9a68d57a-1f2d-47e9-bebc-0d14b27521c5",
              "parentUUID": "b0600b24-4ff3-4547-b9aa-54617b14299a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "del-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "689d2c6d-f3c6-49af-a8d4-aa777c59f2d6",
              "parentUUID": "b0600b24-4ff3-4547-b9aa-54617b14299a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "del-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "2a96c23f-10a1-45ba-918c-15b280086a02",
              "parentUUID": "b0600b24-4ff3-4547-b9aa-54617b14299a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when called with no keys present",
              "fullTitle": "del-command test should report ZERO when called with no keys present",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['del', 'key1', 'key2', 'key3'])\n    .then((response) => {\n    chai_1.expect(response).to.be.a('number');\n    chai_1.expect(response).to.equal(0);\n    done();\n});",
              "err": {},
              "uuid": "30fbf3f2-d68a-4eba-8b6d-fda945c21dbe",
              "parentUUID": "b0600b24-4ff3-4547-b9aa-54617b14299a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report the number of keys actually removed",
              "fullTitle": "del-command test should report the number of keys actually removed",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const client = new net.Socket();\ncommon_test_1.sendCommand(client, ['set', 'key1', 'data'])\n    .then(() => {\n    common_test_1.sendCommand(client, ['set', 'key2', 'data'])\n        .then(() => {\n        common_test_1.sendCommand(client, ['set', 'key3', 'data'])\n            .then(() => {\n            common_test_1.sendCommand(client, ['del', 'key1', 'key3'])\n                .then((response) => {\n                chai_1.expect(response).to.equal(2);\n                done();\n            });\n        });\n    });\n});",
              "err": {},
              "uuid": "2c10a15e-73b7-4c19-a9ed-877e7727f652",
              "parentUUID": "b0600b24-4ff3-4547-b9aa-54617b14299a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have retained key2 from the previous test",
              "fullTitle": "del-command test should have retained key2 from the previous test",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['del', 'key2'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n    done();\n});",
              "err": {},
              "uuid": "68db930c-6cbe-4af6-8500-651d302b743f",
              "parentUUID": "b0600b24-4ff3-4547-b9aa-54617b14299a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "30fbf3f2-d68a-4eba-8b6d-fda945c21dbe",
            "2c10a15e-73b7-4c19-a9ed-877e7727f652",
            "68db930c-6cbe-4af6-8500-651d302b743f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f944a854-1083-49ca-9157-7ca2de510bdc",
          "title": "exists-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/exists-command.test.ts",
          "file": "/test/resp/command/key/exists-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "exists-command test \"before all\" hook",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a millisecond TTL to validate exists respects TTL\n    common_test_1.sendCommand(new net.Socket(), ['set', 'ttlkey', 'value', 'PX', '3'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
              "uuid": "17cf118e-b971-45d1-99d9-6ea1045a74cf",
              "parentUUID": "f944a854-1083-49ca-9157-7ca2de510bdc",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "exists-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "e5f3a333-c83a-491d-ad1b-34d653ccffc1",
              "parentUUID": "f944a854-1083-49ca-9157-7ca2de510bdc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "exists-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "f3662874-9abc-4f03-b1bf-0014b8f2fb0b",
              "parentUUID": "f944a854-1083-49ca-9157-7ca2de510bdc",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "exists-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "69494081-4018-45f2-a6fa-8e455900a823",
              "parentUUID": "f944a854-1083-49ca-9157-7ca2de510bdc",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when none of the specified keys exist",
              "fullTitle": "exists-command test should report ZERO when none of the specified keys exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['exists', 'key1', 'key2', 'key3'])\n    .then((response) => {\n    chai_1.expect(response).to.be.a('number');\n    chai_1.expect(response).to.equal(0);\n    done();\n});",
              "err": {},
              "uuid": "538c15e3-1ca7-4900-84a5-340aa5039a31",
              "parentUUID": "f944a854-1083-49ca-9157-7ca2de510bdc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require at least ONE parameter",
              "fullTitle": "exists-command test should require at least ONE parameter",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['exists'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'exists\\' command');\n    done();\n});",
              "err": {},
              "uuid": "6015c0d8-120d-4d36-b778-79ccd3c1d0ce",
              "parentUUID": "f944a854-1083-49ca-9157-7ca2de510bdc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report GREATER THAN ZERO when checking for the same existing key multiple times",
              "fullTitle": "exists-command test should report GREATER THAN ZERO when checking for the same existing key multiple times",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['set', 'key', 'value'])\n    .then(() => {\n    common_test_1.sendCommand(new net.Socket(), ['exists', 'key', 'key', 'unknownkey', 'another', 'another'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(2);\n        done();\n    });\n});",
              "err": {},
              "uuid": "d4973fed-bb27-46f7-8277-73574dc78417",
              "parentUUID": "f944a854-1083-49ca-9157-7ca2de510bdc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect the TTL value on a key",
              "fullTitle": "exists-command test should respect the TTL value on a key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['exists', 'ttlkey'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(0);\n    done();\n});",
              "err": {},
              "uuid": "01bd3c04-3d46-472a-b790-b2d043a16a17",
              "parentUUID": "f944a854-1083-49ca-9157-7ca2de510bdc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "538c15e3-1ca7-4900-84a5-340aa5039a31",
            "6015c0d8-120d-4d36-b778-79ccd3c1d0ce",
            "d4973fed-bb27-46f7-8277-73574dc78417",
            "01bd3c04-3d46-472a-b790-b2d043a16a17"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7f7d7278-d09e-4dff-9db1-57c41434e386",
          "title": "expire-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/expire-command.test.ts",
          "file": "/test/resp/command/key/expire-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "expire-command test \"before all\" hook",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "03e37ff0-e34f-4a1c-8b74-c86594e87238",
              "parentUUID": "7f7d7278-d09e-4dff-9db1-57c41434e386",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "expire-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "4d50d1e1-0979-4af0-ad38-a20090ad4c57",
              "parentUUID": "7f7d7278-d09e-4dff-9db1-57c41434e386",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "expire-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "c1076fb5-fe21-4dd7-97d8-0af8776521a4",
              "parentUUID": "7f7d7278-d09e-4dff-9db1-57c41434e386",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "expire-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "7b127f7b-0f8e-4305-8f91-11906fa8bda0",
              "parentUUID": "7f7d7278-d09e-4dff-9db1-57c41434e386",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when expire called on non-existent key",
              "fullTitle": "expire-command test should report ZERO when expire called on non-existent key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['expire', 'no-key', '1000']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "995e0df2-52ef-4ad6-86f1-07fee0d23ead",
              "parentUUID": "7f7d7278-d09e-4dff-9db1-57c41434e386",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require an integer value for the ttl parameter",
              "fullTitle": "expire-command test should require an integer value for the ttl parameter",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'mykey', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', '10.2']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', 'ten']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "264b6f77-b515-4972-9367-8ca4748f0d79",
              "parentUUID": "7f7d7278-d09e-4dff-9db1-57c41434e386",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set the requested ttl on a key",
              "fullTitle": "expire-command test should set the requested ttl on a key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', '10000']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "8a581d92-4458-4376-807b-4c7ab850d414",
              "parentUUID": "7f7d7278-d09e-4dff-9db1-57c41434e386",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should expire a key when we set a negative ttl",
              "fullTitle": "expire-command test should expire a key when we set a negative ttl",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Note that this is not consistent with documentation\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', '-1']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "7e105ca7-f50c-4fd0-8921-36402d3d13d1",
              "parentUUID": "7f7d7278-d09e-4dff-9db1-57c41434e386",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should work with ZKEYs (and other key types - as yet untested)",
              "fullTitle": "expire-command test should work with ZKEYs (and other key types - as yet untested)",
              "timedOut": false,
              "duration": 2012,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['zadd', 'zkey', '1', 'member'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n    common_test_1.sendCommand(client, ['exists', 'zkey'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(1);\n        common_test_1.sendCommand(client, ['expire', 'zkey', '1'])\n            .then((response) => {\n            chai_1.expect(response).to.equal(1);\n            setTimeout(() => {\n                common_test_1.sendCommand(client, ['exists', 'zkey'])\n                    .then((response) => {\n                    chai_1.expect(response).to.equal(0, `Unexpected response ${response} should be ZERO`);\n                    done();\n                });\n            }, 2000);\n        });\n    });\n});",
              "err": {},
              "uuid": "9cc4d12e-2568-418c-b8f4-359dca754ad4",
              "parentUUID": "7f7d7278-d09e-4dff-9db1-57c41434e386",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should survive the RENAME operation",
              "fullTitle": "expire-command test should survive the RENAME operation",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'rename-test', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['expire', 'rename-test', '1']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rename', 'rename-test', 'new-name']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'new-name']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'rename-test']);\n        chai_1.expect(response).to.equal(0);\n        yield setTimeout(() => __awaiter(void 0, void 0, void 0, function* () {\n            response = yield common_test_1.sendCommand(client, ['exists', 'new-name']);\n            chai_1.expect(response).to.equal(0);\n        }), 2000);\n    })",
              "err": {},
              "uuid": "d4d068cb-5eaf-44f1-8d4a-cfe4c9af7a97",
              "parentUUID": "7f7d7278-d09e-4dff-9db1-57c41434e386",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "995e0df2-52ef-4ad6-86f1-07fee0d23ead",
            "264b6f77-b515-4972-9367-8ca4748f0d79",
            "8a581d92-4458-4376-807b-4c7ab850d414",
            "7e105ca7-f50c-4fd0-8921-36402d3d13d1",
            "9cc4d12e-2568-418c-b8f4-359dca754ad4",
            "d4d068cb-5eaf-44f1-8d4a-cfe4c9af7a97"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2029,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "97241ae5-9b26-400f-8cb9-23b57b50b443",
          "title": "keys-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/keys-command.test.ts",
          "file": "/test/resp/command/key/keys-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "keys-command test \"before all\" hook",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "d10af740-ddbe-4622-b6c8-6a8084117873",
              "parentUUID": "97241ae5-9b26-400f-8cb9-23b57b50b443",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "keys-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "8ba9e22b-61f0-4a95-a938-b14163d5383b",
              "parentUUID": "97241ae5-9b26-400f-8cb9-23b57b50b443",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "keys-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "a3f36162-953e-48f7-b883-48af01bb1a88",
              "parentUUID": "97241ae5-9b26-400f-8cb9-23b57b50b443",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "keys-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a8d098e3-7379-4be3-8d1a-c5889ac8462e",
              "parentUUID": "97241ae5-9b26-400f-8cb9-23b57b50b443",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should retrieve keys by glob patterns",
              "fullTitle": "keys-command test should retrieve keys by glob patterns",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mset', 'firstname', 'Jack', 'lastname', 'Stuntman', 'age', '35']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['keys', '*name*']);\n        chai_1.expect(response.sort()).to.eql(['firstname', 'lastname']);\n        response = yield common_test_1.sendCommand(client, ['keys', 'a??']);\n        chai_1.expect(response).to.eql(['age']);\n        response = yield common_test_1.sendCommand(client, ['keys', '*']);\n        // NOTE: There does not appear to be a guarantee of order\n        chai_1.expect(response.sort()).to.eql(['age', 'firstname', 'lastname']);\n    })",
              "err": {},
              "uuid": "986df2db-a1fc-4e62-ba39-8f2a60eb5d86",
              "parentUUID": "97241ae5-9b26-400f-8cb9-23b57b50b443",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "986df2db-a1fc-4e62-ba39-8f2a60eb5d86"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "51d848e7-cf41-4885-99d3-a6fda7f50b3c",
          "title": "move-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/move-command.test.ts",
          "file": "/test/resp/command/key/move-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "move-command test \"before all\" hook",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "1cc55ab8-2382-4618-91ce-27c9bddaaa84",
              "parentUUID": "51d848e7-cf41-4885-99d3-a6fda7f50b3c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "move-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "2e4f7fec-0527-49fc-ae3e-56f14571f5ea",
              "parentUUID": "51d848e7-cf41-4885-99d3-a6fda7f50b3c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "move-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "28bb1d1f-7ea8-4cd7-a13c-01022c55241e",
              "parentUUID": "51d848e7-cf41-4885-99d3-a6fda7f50b3c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "move-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "1e628a1a-d9ab-451a-b80c-165b486b5840",
              "parentUUID": "51d848e7-cf41-4885-99d3-a6fda7f50b3c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow target and source db to be the same",
              "fullTitle": "move-command test should not allow target and source db to be the same",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Even if source key does not exist\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, '0']);\n        chai_1.expect(response).to.equal('ReplyError: ERR source and destination objects are the same');\n    })",
              "err": {},
              "uuid": "00644cdc-20a6-4cf5-9bb6-215b988d0ddb",
              "parentUUID": "51d848e7-cf41-4885-99d3-a6fda7f50b3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should also report ZERO when the target key already exists",
              "fullTitle": "move-command test should also report ZERO when the target key already exists",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'database ZERO']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, '0']);\n        chai_1.expect(response).to.equal('ReplyError: ERR source and destination objects are the same');\n    })",
              "err": {},
              "uuid": "23a58cfa-44c4-48c8-8103-0e0601f4e51a",
              "parentUUID": "51d848e7-cf41-4885-99d3-a6fda7f50b3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should move a key from one database to another otherwise",
              "fullTitle": "move-command test should move a key from one database to another otherwise",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, '14']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['select', '14']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "dc7ad54b-8d65-4131-a614-c236bf46f633",
              "parentUUID": "51d848e7-cf41-4885-99d3-a6fda7f50b3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report error when target database is invalid and key exists",
              "fullTitle": "move-command test should report error when target database is invalid and key exists",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Database 14 is already selected\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, 'InvalidDb']);\n        chai_1.expect(response).to.equal('ReplyError: ERR index out of range');\n    })",
              "err": {},
              "uuid": "3a9f7c46-1350-4c74-bae0-fc02cf002a3e",
              "parentUUID": "51d848e7-cf41-4885-99d3-a6fda7f50b3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the key does not exist in the current db",
              "fullTitle": "move-command test should return 0 when the key does not exist in the current db",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushdb']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['dbsize']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['move', 'nokey', '3']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "3e328356-3fdd-4299-aa47-32d9ad5e8a5a",
              "parentUUID": "51d848e7-cf41-4885-99d3-a6fda7f50b3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the key exists in both source and target db",
              "fullTitle": "move-command test should return 0 when the key exists in both source and target db",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['select', '0']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['set', 'nokey', 'db0']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'nokey']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['select', '1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'nokey']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['set', 'nokey', 'db1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['move', 'nokey', '0']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['get', 'nokey']);\n        chai_1.expect(response).to.equal('db1');\n        response = yield common_test_1.sendCommand(client, ['select', '0']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'nokey']);\n        chai_1.expect(response).to.equal('db0');\n    })",
              "err": {},
              "uuid": "d81b2b85-f984-406b-8dda-2f9c55a2d193",
              "parentUUID": "51d848e7-cf41-4885-99d3-a6fda7f50b3c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00644cdc-20a6-4cf5-9bb6-215b988d0ddb",
            "23a58cfa-44c4-48c8-8103-0e0601f4e51a",
            "dc7ad54b-8d65-4131-a614-c236bf46f633",
            "3a9f7c46-1350-4c74-bae0-fc02cf002a3e",
            "3e328356-3fdd-4299-aa47-32d9ad5e8a5a",
            "d81b2b85-f984-406b-8dda-2f9c55a2d193"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 30,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c4088c7a-f95b-4553-a86d-5e5176a4cf09",
          "title": "randomkey-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/randomkey-command.test.ts",
          "file": "/test/resp/command/key/randomkey-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "randomkey-command test \"before all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "698d8e1b-91b6-4b22-b277-eabf28fcdb6c",
              "parentUUID": "c4088c7a-f95b-4553-a86d-5e5176a4cf09",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "randomkey-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "337e1159-42d5-4ef5-8226-468592306909",
              "parentUUID": "c4088c7a-f95b-4553-a86d-5e5176a4cf09",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "randomkey-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "80c44e4f-2330-44db-9dca-6f7824250a5e",
              "parentUUID": "c4088c7a-f95b-4553-a86d-5e5176a4cf09",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "randomkey-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "49eb5df9-190c-4e97-bbe2-809cda786a6a",
              "parentUUID": "c4088c7a-f95b-4553-a86d-5e5176a4cf09",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when the database is empty",
              "fullTitle": "randomkey-command test should return NIL when the database is empty",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushdb']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['randomkey']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "7c9a7cec-027b-4f5f-a60c-2b39124bf48f",
              "parentUUID": "c4088c7a-f95b-4553-a86d-5e5176a4cf09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return list, zkey, hash, and string keys without preference",
              "fullTitle": "randomkey-command test should return list, zkey, hash, and string keys without preference",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const results = [];\n        response = yield common_test_1.sendCommand(client, ['hset', 'hash', 'field', 'value']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lpush', 'list', 'element']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'member']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['set', 'string', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        for (let i = 0; i < 15; i++) {\n            response = yield common_test_1.sendCommand(client, ['randomkey']);\n            chai_1.expect(response).to.be.a('string');\n            response = yield common_test_1.sendCommand(client, ['type', response]);\n            chai_1.expect(response).to.be.a('string');\n            if (results.indexOf(response) === -1) {\n                results.push(response);\n            }\n            if (results.length === 4) {\n                break;\n            }\n        }\n        chai_1.expect(results.length).to.be.greaterThan(1);\n    })",
              "err": {},
              "uuid": "76611aa9-d73f-468d-845d-dd838c167b1d",
              "parentUUID": "c4088c7a-f95b-4553-a86d-5e5176a4cf09",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7c9a7cec-027b-4f5f-a60c-2b39124bf48f",
            "76611aa9-d73f-468d-845d-dd838c167b1d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8d87bac0-c6e7-4701-a665-c58137835af3",
          "title": "rename-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/rename-command.test.ts",
          "file": "/test/resp/command/key/rename-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rename-command test \"before all\" hook",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "e232d5c8-aaf0-41f5-9378-aea0009a0689",
              "parentUUID": "8d87bac0-c6e7-4701-a665-c58137835af3",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rename-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "1a32c223-550b-4509-a2a7-8141cb433985",
              "parentUUID": "8d87bac0-c6e7-4701-a665-c58137835af3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rename-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "a902b15e-6a5c-4b40-88e2-bc4e742e60c3",
              "parentUUID": "8d87bac0-c6e7-4701-a665-c58137835af3",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rename-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "6941bf90-6f0e-41f7-8a4f-4e09fddafd3f",
              "parentUUID": "8d87bac0-c6e7-4701-a665-c58137835af3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report an error when the key does not exist",
              "fullTitle": "rename-command test should report an error when the key does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rename', 'mykey', 'my-otherkey']);\n        chai_1.expect(response).to.equal('ReplyError: ERR no such key');\n    })",
              "err": {},
              "uuid": "bdfe6959-f58f-4595-97c0-f719a09f8e8c",
              "parentUUID": "8d87bac0-c6e7-4701-a665-c58137835af3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should rename a key",
              "fullTitle": "rename-command test should rename a key",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'mykey', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['rename', 'mykey', 'my-otherkey']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'my-otherkey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "872bac51-0368-493e-b1b9-addc1e3e50e4",
              "parentUUID": "8d87bac0-c6e7-4701-a665-c58137835af3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overwrite an existing key without notice",
              "fullTitle": "rename-command test should overwrite an existing key without notice",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'myoriginalkey', 'something']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['rename', 'my-otherkey', 'myoriginalkey']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'myoriginalkey']);\n        chai_1.expect(response).to.equal('value');\n    })",
              "err": {},
              "uuid": "b8eb160a-8b4c-4af9-8259-2017d2bf5a20",
              "parentUUID": "8d87bac0-c6e7-4701-a665-c58137835af3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bdfe6959-f58f-4595-97c0-f719a09f8e8c",
            "872bac51-0368-493e-b1b9-addc1e3e50e4",
            "b8eb160a-8b4c-4af9-8259-2017d2bf5a20"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6bba61ba-537f-429e-a943-741cc5e5ef4f",
          "title": "renamenx-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/renamenx-command.test.ts",
          "file": "/test/resp/command/key/renamenx-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "renamenx-command test \"before all\" hook",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "473211ca-194d-4c80-9e50-f301a6e126e3",
              "parentUUID": "6bba61ba-537f-429e-a943-741cc5e5ef4f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "renamenx-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "b33a1a0a-8bd5-48f3-a9e1-2a0a65af21a9",
              "parentUUID": "6bba61ba-537f-429e-a943-741cc5e5ef4f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "renamenx-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "2289be7d-cb65-4abb-a672-44f9f8317a6b",
              "parentUUID": "6bba61ba-537f-429e-a943-741cc5e5ef4f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "renamenx-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "649a192f-778e-4291-8cf7-104af9abd00e",
              "parentUUID": "6bba61ba-537f-429e-a943-741cc5e5ef4f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report an error when the key does not exist",
              "fullTitle": "renamenx-command test should report an error when the key does not exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['renamenx', 'mykey', 'my-otherkey']);\n        chai_1.expect(response).to.equal('ReplyError: ERR no such key');\n    })",
              "err": {},
              "uuid": "c9886bf6-d3f6-40e3-9b62-9196d78434f8",
              "parentUUID": "6bba61ba-537f-429e-a943-741cc5e5ef4f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when attempting renamenx with source = destination",
              "fullTitle": "renamenx-command test should return 0 when attempting renamenx with source = destination",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'key', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['renamenx', 'key', 'key']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'key']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "acf8d676-7f5f-4e08-9b0d-68a923c160e1",
              "parentUUID": "6bba61ba-537f-429e-a943-741cc5e5ef4f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should rename a key when requested",
              "fullTitle": "renamenx-command test should rename a key when requested",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['renamenx', 'key', 'newkey']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'key']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'newkey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "1579d552-9084-4dbd-8108-0f31b30642a1",
              "parentUUID": "6bba61ba-537f-429e-a943-741cc5e5ef4f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c9886bf6-d3f6-40e3-9b62-9196d78434f8",
            "acf8d676-7f5f-4e08-9b0d-68a923c160e1",
            "1579d552-9084-4dbd-8108-0f31b30642a1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7d416a4a-b90a-441e-89c1-10eed9138c1c",
          "title": "ttl-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/ttl-command.test.ts",
          "file": "/test/resp/command/key/ttl-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "ttl-command test \"before all\" hook",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a couple - second TTL to validate exists respects TTL\n    common_test_1.sendCommand(new net.Socket(), ['set', 'ttlkey', 'value', 'EX', '30'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
              "uuid": "32879313-adbe-43e4-a823-5b62da4c8dc3",
              "parentUUID": "7d416a4a-b90a-441e-89c1-10eed9138c1c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "ttl-command test \"before each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "9d0e31f8-4aef-4e38-a529-16c36d151178",
              "parentUUID": "7d416a4a-b90a-441e-89c1-10eed9138c1c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "ttl-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "5788a302-cc0a-48bb-becc-8babf232b2d8",
              "parentUUID": "7d416a4a-b90a-441e-89c1-10eed9138c1c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "ttl-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "ef5305b4-07d5-4f3c-8877-0036029356e7",
              "parentUUID": "7d416a4a-b90a-441e-89c1-10eed9138c1c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report -2 when the key does not exist",
              "fullTitle": "ttl-command test should report -2 when the key does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ttl', 'nokey']);\n        chai_1.expect(response).to.equal(-2);\n    })",
              "err": {},
              "uuid": "594bd7ce-9a13-4895-88cc-d8e67533ecc1",
              "parentUUID": "7d416a4a-b90a-441e-89c1-10eed9138c1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return -1 when the key exists but does not have a ttl",
              "fullTitle": "ttl-command test should return -1 when the key exists but does not have a ttl",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'newkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['ttl', 'newkey']);\n        chai_1.expect(response).to.equal(-1);\n    })",
              "err": {},
              "uuid": "c4584fad-0976-4239-99e3-2c4eac987a37",
              "parentUUID": "7d416a4a-b90a-441e-89c1-10eed9138c1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the current ttl in seconds when available",
              "fullTitle": "ttl-command test should return the current ttl in seconds when available",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ttl', 'ttlkey']);\n        chai_1.expect(response).to.be.greaterThan(0);\n        chai_1.expect(response).to.be.lessThan(31);\n    })",
              "err": {},
              "uuid": "8b395ef5-af81-4aa9-83ee-8a5e1f995be4",
              "parentUUID": "7d416a4a-b90a-441e-89c1-10eed9138c1c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "594bd7ce-9a13-4895-88cc-d8e67533ecc1",
            "c4584fad-0976-4239-99e3-2c4eac987a37",
            "8b395ef5-af81-4aa9-83ee-8a5e1f995be4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e9459922-3ec0-4cc3-ae74-50914571ced5",
          "title": "type-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/type-command.test.ts",
          "file": "/test/resp/command/key/type-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "type-command test \"before all\" hook",
              "timedOut": false,
              "duration": 29,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "309be12d-0495-4d14-bd00-9a19372c7e8c",
              "parentUUID": "e9459922-3ec0-4cc3-ae74-50914571ced5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "type-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "24dcae18-f880-4cec-b52c-d02f817d0101",
              "parentUUID": "e9459922-3ec0-4cc3-ae74-50914571ced5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "type-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "1cd3b75c-4122-4079-9e2e-f9c2bd687f1b",
              "parentUUID": "e9459922-3ec0-4cc3-ae74-50914571ced5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "type-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "3df43be7-b5a3-4944-987d-05e086b2aab2",
              "parentUUID": "e9459922-3ec0-4cc3-ae74-50914571ced5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report the type of key",
              "fullTitle": "type-command test should report the type of key",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['set', 'string-key', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['type', 'string-key']);\n        chai_1.expect(response).to.equal('string');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'list-key', 'test']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['type', 'list-key']);\n        chai_1.expect(response).to.equal('list');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'set-key', 'test']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['type', 'set-key']);\n        chai_1.expect(response).to.equal('set');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['type', 'zkey']);\n        chai_1.expect(response).to.equal('zset');\n        response = yield common_test_1.sendCommand(client, ['type', 'never']);\n        chai_1.expect(response).to.equal('none');\n    })",
              "err": {},
              "uuid": "df027d45-a571-4c3c-960c-b776e97a76c7",
              "parentUUID": "e9459922-3ec0-4cc3-ae74-50914571ced5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "df027d45-a571-4c3c-960c-b776e97a76c7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4abeb279-0a4d-47e6-bf8b-778b1937c43a",
          "title": "blpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/blpop-command.test.ts",
          "file": "/test/resp/command/list/blpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "blpop-command test \"before all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "4d37671e-0d12-4f45-8db1-3ebb2ea165dd",
              "parentUUID": "4abeb279-0a4d-47e6-bf8b-778b1937c43a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "blpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "b6b06d6b-d549-4c97-a7d9-9342da967a57",
              "parentUUID": "4abeb279-0a4d-47e6-bf8b-778b1937c43a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "blpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "cc2a41a1-b6bf-47bd-8ce6-8c00af01c6ec",
              "parentUUID": "4abeb279-0a4d-47e6-bf8b-778b1937c43a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "blpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "2feff2fa-1bb0-484b-9c5a-2571e116316a",
              "parentUUID": "4abeb279-0a4d-47e6-bf8b-778b1937c43a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when timeout > 0 and list does not exist",
              "fullTitle": "blpop-command test should return NIL when timeout > 0 and list does not exist",
              "timedOut": false,
              "duration": 1005,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['blpop', 'no-key', '1']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "a2b6ee77-27ca-41a0-b6a3-291dbead1125",
              "parentUUID": "4abeb279-0a4d-47e6-bf8b-778b1937c43a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should wait for a list to exist and return the list name and value",
              "fullTitle": "blpop-command test should wait for a list to exist and return the list name and value",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['blpop', 'no-key', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['no-key', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'no-key', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "5039ff24-ed14-4b84-b9e3-6e03835f23d1",
              "parentUUID": "4abeb279-0a4d-47e6-bf8b-778b1937c43a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the list name and HEAD value",
              "fullTitle": "blpop-command test should return the list name and HEAD value",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['blpop', 'no-key2', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['no-key2', 'first']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'no-key2', 'third', 'second', 'first'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n});",
              "err": {},
              "uuid": "288e2657-ca76-4bdb-971a-31cbe4692a54",
              "parentUUID": "4abeb279-0a4d-47e6-bf8b-778b1937c43a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support blocking lpop against multiple lists in one call",
              "fullTitle": "blpop-command test should support blocking lpop against multiple lists in one call",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['blpop', 'list1', 'list2', 'list3', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['list2', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'list2', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "6818bef6-044f-4e4b-ad9b-ba27e38e2fbf",
              "parentUUID": "4abeb279-0a4d-47e6-bf8b-778b1937c43a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the pushd value when it already exists even if a timeout is set",
              "fullTitle": "blpop-command test should return the pushd value when it already exists even if a timeout is set",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueKey = `poplpush${new Date().getTime()}`;\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', uniqueKey, 'third', 'second', 'first'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n    common_test_1.sendCommand(client, ['blpop', uniqueKey, '0'])\n        .then((response) => {\n        chai_1.expect(response).to.eql([uniqueKey, 'first']);\n        done();\n    });\n});",
              "err": {},
              "uuid": "3debf178-d9db-4614-b787-78147b4b023e",
              "parentUUID": "4abeb279-0a4d-47e6-bf8b-778b1937c43a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a2b6ee77-27ca-41a0-b6a3-291dbead1125",
            "5039ff24-ed14-4b84-b9e3-6e03835f23d1",
            "288e2657-ca76-4bdb-971a-31cbe4692a54",
            "6818bef6-044f-4e4b-ad9b-ba27e38e2fbf",
            "3debf178-d9db-4614-b787-78147b4b023e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1041,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "fd5a542f-0e24-4d23-aa1a-ab238abafc49",
          "title": "brpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/brpop-command.test.ts",
          "file": "/test/resp/command/list/brpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "brpop-command test \"before all\" hook",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "c081e1f6-ab93-41a1-a62f-811fb57dba94",
              "parentUUID": "fd5a542f-0e24-4d23-aa1a-ab238abafc49",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "brpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "11249413-0a47-491a-b42f-f5fab5cc1997",
              "parentUUID": "fd5a542f-0e24-4d23-aa1a-ab238abafc49",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "brpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "2b92a6d0-87cf-4c57-b0d9-be7c59aed097",
              "parentUUID": "fd5a542f-0e24-4d23-aa1a-ab238abafc49",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "brpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "5df7fbe1-39c0-4439-b9d6-a4b7f798e402",
              "parentUUID": "fd5a542f-0e24-4d23-aa1a-ab238abafc49",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when timeout > 0 and list does not exist",
              "fullTitle": "brpop-command test should return NIL when timeout > 0 and list does not exist",
              "timedOut": false,
              "duration": 1007,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['brpop', 'no-key', '1']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "e985fc7e-f6e1-4f20-94d6-088a506c038a",
              "parentUUID": "fd5a542f-0e24-4d23-aa1a-ab238abafc49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should wait for a list to exist and return the list name and value",
              "fullTitle": "brpop-command test should wait for a list to exist and return the list name and value",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['brpop', 'no-key', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['no-key', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'no-key', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "f4ace7b3-a288-49dd-ada4-9e11ae2a243f",
              "parentUUID": "fd5a542f-0e24-4d23-aa1a-ab238abafc49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the list name and TAIL value",
              "fullTitle": "brpop-command test should return the list name and TAIL value",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['flushall'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    common_test_1.sendCommand(client, ['brpop', 'no-key2', '0'])\n        .then((response) => {\n        chai_1.expect(response).to.eql(['no-key2', 'first']);\n        done();\n    });\n    common_test_1.sendCommand(new net.Socket(), ['rpush', 'no-key2', 'third', 'second', 'first'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(3);\n    });\n});",
              "err": {},
              "uuid": "957d5bd0-6751-4547-8a53-26f4dad9decd",
              "parentUUID": "fd5a542f-0e24-4d23-aa1a-ab238abafc49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support blocking rpop against multiple lists in one call",
              "fullTitle": "brpop-command test should support blocking rpop against multiple lists in one call",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['brpop', 'list1', 'list2', 'list3', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['list3', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'list3', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "17b0c8f3-f573-4ace-82d2-f2846634d8af",
              "parentUUID": "fd5a542f-0e24-4d23-aa1a-ab238abafc49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the pushd value when it already exists even if a timeout is set",
              "fullTitle": "brpop-command test should return the pushd value when it already exists even if a timeout is set",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueKey = `poprpush${new Date().getTime()}`;\ncommon_test_1.sendCommand(new net.Socket(), ['rpush', uniqueKey, 'third', 'second', 'first'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n    common_test_1.sendCommand(client, ['brpop', uniqueKey, '0'])\n        .then((response) => {\n        chai_1.expect(response).to.eql([uniqueKey, 'first']);\n        done();\n    });\n});",
              "err": {},
              "uuid": "72bd80bb-b910-438a-a2f6-4da013d33655",
              "parentUUID": "fd5a542f-0e24-4d23-aa1a-ab238abafc49",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e985fc7e-f6e1-4f20-94d6-088a506c038a",
            "f4ace7b3-a288-49dd-ada4-9e11ae2a243f",
            "957d5bd0-6751-4547-8a53-26f4dad9decd",
            "17b0c8f3-f573-4ace-82d2-f2846634d8af",
            "72bd80bb-b910-438a-a2f6-4da013d33655"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1040,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ca18f36c-140a-456a-bc85-728c75bebaad",
          "title": "brpoplpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/brpoplpush-command.test.ts",
          "file": "/test/resp/command/list/brpoplpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "brpoplpush-command test \"before all\" hook",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "bd8452b9-199e-4721-a371-eb3267be2711",
              "parentUUID": "ca18f36c-140a-456a-bc85-728c75bebaad",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "brpoplpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        sinon.createSandbox();\n        yield common_test_1.sendCommand(client, ['flushall']);\n        yield common_test_1.sendCommand(client, ['select', '0']);\n    })",
              "err": {},
              "uuid": "bd1d1144-28eb-41da-8468-89626f036281",
              "parentUUID": "ca18f36c-140a-456a-bc85-728c75bebaad",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "brpoplpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "71e56b14-4439-4260-8e17-ec23e10a65aa",
              "parentUUID": "ca18f36c-140a-456a-bc85-728c75bebaad",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "brpoplpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "acc26686-e53b-4118-abdc-bdf64734e699",
              "parentUUID": "ca18f36c-140a-456a-bc85-728c75bebaad",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when destination does not exist and timeout expires",
              "fullTitle": "brpoplpush-command test should return NIL when destination does not exist and timeout expires",
              "timedOut": false,
              "duration": 2009,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['brpoplpush', 'src', 'dst', '2']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "923fb89c-b3bc-475f-b717-bef53a8b8b13",
              "parentUUID": "ca18f36c-140a-456a-bc85-728c75bebaad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the poplpushed value when lpush is called",
              "fullTitle": "brpoplpush-command test should return the poplpushed value when lpush is called",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['brpoplpush', 'poplpushkey', 'poplpopkey', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('value1');\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'poplpushkey', 'value1', 'value2', 'value3'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n});",
              "err": {},
              "uuid": "f72ef45e-70e7-48d7-afc3-992d5fd9e7a4",
              "parentUUID": "ca18f36c-140a-456a-bc85-728c75bebaad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the pushd value when it already exists even if a timeout is set",
              "fullTitle": "brpoplpush-command test should return the pushd value when it already exists even if a timeout is set",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueKey = `poplpush${new Date().getTime()}`;\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', uniqueKey, 'value1', 'value2', 'value3'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n    common_test_1.sendCommand(client, ['brpoplpush', uniqueKey, 'poplpopkey', '0'])\n        .then((response) => {\n        chai_1.expect(response).to.equal('value1');\n        done();\n    });\n});",
              "err": {},
              "uuid": "b3347204-d96f-4461-be4f-82b92915ece6",
              "parentUUID": "ca18f36c-140a-456a-bc85-728c75bebaad",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "923fb89c-b3bc-475f-b717-bef53a8b8b13",
            "f72ef45e-70e7-48d7-afc3-992d5fd9e7a4",
            "b3347204-d96f-4461-be4f-82b92915ece6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2015,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9c99a62d-f9ff-4ec9-a9fb-0d32090b17c8",
          "title": "lindex-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lindex-command.test.ts",
          "file": "/test/resp/command/list/lindex-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lindex-command test \"before all\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "483794cc-6a24-4ef6-9392-d8ae507468fa",
              "parentUUID": "9c99a62d-f9ff-4ec9-a9fb-0d32090b17c8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lindex-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "31aa6f04-8125-403c-997d-b47b463bf35a",
              "parentUUID": "9c99a62d-f9ff-4ec9-a9fb-0d32090b17c8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lindex-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "4cb34a31-4854-4ea0-94cd-669aa8714f18",
              "parentUUID": "9c99a62d-f9ff-4ec9-a9fb-0d32090b17c8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lindex-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "906ce123-c5e9-4ada-ac97-61a3dc684067",
              "parentUUID": "9c99a62d-f9ff-4ec9-a9fb-0d32090b17c8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when lindex called with invalid index on non-existent key",
              "fullTitle": "lindex-command test should report NIL when lindex called with invalid index on non-existent key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lindex', 'no-key', 'negative one thousand']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "17a7ed91-d825-4083-ac6b-fd8314791156",
              "parentUUID": "9c99a62d-f9ff-4ec9-a9fb-0d32090b17c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report ERR when attempting to get lindex of non-list key",
              "fullTitle": "lindex-command test should report ERR when attempting to get lindex of non-list key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lindex', 'lkey', '0']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "e491408c-801f-4c82-aee5-259937830e66",
              "parentUUID": "9c99a62d-f9ff-4ec9-a9fb-0d32090b17c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the correct key at an index",
              "fullTitle": "lindex-command test should return the correct key at an index",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `lkey-${new Date().getTime()}`;\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '0']);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '1']);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-1']);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-100']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, 'two']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, 'a1', 'b2', 'c3']);\n        chai_1.expect(response).to.equal(6);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-6']);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-7']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '100']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "931927d8-dad7-4e0a-afd2-3a8856a6fd73",
              "parentUUID": "9c99a62d-f9ff-4ec9-a9fb-0d32090b17c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "17a7ed91-d825-4083-ac6b-fd8314791156",
            "e491408c-801f-4c82-aee5-259937830e66",
            "931927d8-dad7-4e0a-afd2-3a8856a6fd73"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6520e804-bf33-4d0a-b172-bcd071c77cc2",
          "title": "llen-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/llen-command.test.ts",
          "file": "/test/resp/command/list/llen-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "llen-command test \"before all\" hook",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "e8bea165-c743-418d-9e91-4547371c65e8",
              "parentUUID": "6520e804-bf33-4d0a-b172-bcd071c77cc2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "llen-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "d9977fdf-1d57-452b-9959-c89d089f48cc",
              "parentUUID": "6520e804-bf33-4d0a-b172-bcd071c77cc2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "llen-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "5247ee8c-56fc-446b-8cda-195b722e34d6",
              "parentUUID": "6520e804-bf33-4d0a-b172-bcd071c77cc2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "llen-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "57c1d96f-0ed1-4143-ad29-def6f0bb4ef8",
              "parentUUID": "6520e804-bf33-4d0a-b172-bcd071c77cc2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report 0 when llen called on non-existent key",
              "fullTitle": "llen-command test should report 0 when llen called on non-existent key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['llen', 'no-key']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "f58dfa87-b4d8-4280-891e-5a8478b360f4",
              "parentUUID": "6520e804-bf33-4d0a-b172-bcd071c77cc2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report WRONGTYPE when attempting to get llen of non-list key",
              "fullTitle": "llen-command test should report WRONGTYPE when attempting to get llen of non-list key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'lkey']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "96de23c1-f1cf-45b6-9b8c-02e23a03774c",
              "parentUUID": "6520e804-bf33-4d0a-b172-bcd071c77cc2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the correct list length",
              "fullTitle": "llen-command test should return the correct list length",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `lkey-${new Date().getTime()}`;\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal(null);\n        // The list goes away when the last element is popped\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, '-6']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "0c072e5a-d945-4b7e-9a48-c876985387e4",
              "parentUUID": "6520e804-bf33-4d0a-b172-bcd071c77cc2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f58dfa87-b4d8-4280-891e-5a8478b360f4",
            "96de23c1-f1cf-45b6-9b8c-02e23a03774c",
            "0c072e5a-d945-4b7e-9a48-c876985387e4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "52050a91-4c20-499e-8bc6-bdeac9ee42bc",
          "title": "lpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lpop-command.test.ts",
          "file": "/test/resp/command/list/lpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lpop-command test \"before all\" hook",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "7e4cdb6b-24d3-4f3d-8155-7a0c444ea86d",
              "parentUUID": "52050a91-4c20-499e-8bc6-bdeac9ee42bc",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "1c47c014-fa9e-489e-b502-6472b6b9452a",
              "parentUUID": "52050a91-4c20-499e-8bc6-bdeac9ee42bc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "beaa9d18-90e3-4922-bd4f-508ad0f79c6a",
              "parentUUID": "52050a91-4c20-499e-8bc6-bdeac9ee42bc",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "93fd59b2-b5e8-4128-87ae-53503669731a",
              "parentUUID": "52050a91-4c20-499e-8bc6-bdeac9ee42bc",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when lpop called on non-existent key",
              "fullTitle": "lpop-command test should report NIL when lpop called on non-existent key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lpop', 'no-key']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['exists', 'no-key']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "c494c2f1-a7d7-45d0-8d05-3a5ae3552cf7",
              "parentUUID": "52050a91-4c20-499e-8bc6-bdeac9ee42bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return values from the left side of a list",
              "fullTitle": "lpop-command test should return values from the left side of a list",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', testKey, 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('d');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal(null);\n        // The list goes away when the last element is removed\n        response = yield common_test_1.sendCommand(client, ['exists', testKey]);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "4676bd9a-a406-4b9b-982c-a6c7a0632140",
              "parentUUID": "52050a91-4c20-499e-8bc6-bdeac9ee42bc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c494c2f1-a7d7-45d0-8d05-3a5ae3552cf7",
            "4676bd9a-a406-4b9b-982c-a6c7a0632140"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "194fbb42-4476-4c6b-bcb1-39768221cfcf",
          "title": "lpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lpush-command.test.ts",
          "file": "/test/resp/command/list/lpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lpush-command test \"before all\" hook",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "12a2e339-6661-408a-b92e-4bbc5a1126c9",
              "parentUUID": "194fbb42-4476-4c6b-bcb1-39768221cfcf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "85b7b7be-e5cd-40b0-aaf0-9bf2dc2abe06",
              "parentUUID": "194fbb42-4476-4c6b-bcb1-39768221cfcf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "5c392b86-b2e5-42da-b72c-6981b13f1b3a",
              "parentUUID": "194fbb42-4476-4c6b-bcb1-39768221cfcf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "b80f7545-806f-4631-bb95-0ad8f5e323d5",
              "parentUUID": "194fbb42-4476-4c6b-bcb1-39768221cfcf",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ERR when attempting to lpush to a non-list key",
              "fullTitle": "lpush-command test should report ERR when attempting to lpush to a non-list key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'lkey', '0']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "5ecaa516-5b8f-4414-a482-f51b091f0bf5",
              "parentUUID": "194fbb42-4476-4c6b-bcb1-39768221cfcf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a list if it doesn't already exist",
              "fullTitle": "lpush-command test should create a list if it doesn't already exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exists', testKey]);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['lpush', testKey, 'a', 'b', 'c']);\n        // The list is now 'c', 'b', 'a'\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['exists', testKey]);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "6a203c59-4ff9-4c53-94de-993f927a9b12",
              "parentUUID": "194fbb42-4476-4c6b-bcb1-39768221cfcf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the list in a predicatble order",
              "fullTitle": "lpush-command test should have created the list in a predicatble order",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lindex', testKey, '1']);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['llen', testKey]);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpop', testKey]);\n        chai_1.expect(response).to.equal('a');\n    })",
              "err": {},
              "uuid": "98cbea60-974f-4807-b7a9-abbcf792ca3f",
              "parentUUID": "194fbb42-4476-4c6b-bcb1-39768221cfcf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5ecaa516-5b8f-4414-a482-f51b091f0bf5",
            "6a203c59-4ff9-4c53-94de-993f927a9b12",
            "98cbea60-974f-4807-b7a9-abbcf792ca3f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6f52def7-92c9-4e1a-b430-6537cd671f7f",
          "title": "lrange-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lrange-command.test.ts",
          "file": "/test/resp/command/list/lrange-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lrange-command test \"before all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "e54409ad-70fd-4511-845f-8de52879b5ad",
              "parentUUID": "6f52def7-92c9-4e1a-b430-6537cd671f7f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lrange-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "1978c708-d022-400f-baad-a20175acbd01",
              "parentUUID": "6f52def7-92c9-4e1a-b430-6537cd671f7f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lrange-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "b294588a-b6d8-45c7-9b64-330f333f57cc",
              "parentUUID": "6f52def7-92c9-4e1a-b430-6537cd671f7f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lrange-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "8d45d531-cf64-4774-af8f-c0479503fc41",
              "parentUUID": "6f52def7-92c9-4e1a-b430-6537cd671f7f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "return an empty list when the key does not exist",
              "fullTitle": "lrange-command test return an empty list when the key does not exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', '0', '100']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "2d4f86f5-3d5e-4541-883d-bdeed0a2305a",
              "parentUUID": "6f52def7-92c9-4e1a-b430-6537cd671f7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report an error when start or stop index are invalid",
              "fullTitle": "lrange-command test should report an error when start or stop index are invalid",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', 'negative one', '-2']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', '0', 'negative two']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', '-1', '-100']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "3e9dedc2-47ff-40d0-87cc-d410b081fd11",
              "parentUUID": "6f52def7-92c9-4e1a-b430-6537cd671f7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return predictable results",
              "fullTitle": "lrange-command test should return predictable results",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', 'newlist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'newlist', 'world']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'newlist', '0', '-1']);\n        chai_1.expect(response).to.eql(['hello', 'world']);\n    })",
              "err": {},
              "uuid": "603c911c-8bcb-4e60-be17-5f3113593971",
              "parentUUID": "6f52def7-92c9-4e1a-b430-6537cd671f7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reproduce the results from the redis documentation",
              "fullTitle": "lrange-command test should reproduce the results from the redis documentation",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', 'doclist', 'one']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'doclist', 'two']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'doclist', 'three']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '0', '0']);\n        chai_1.expect(response).to.eql(['one']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '-3', '2']);\n        chai_1.expect(response).to.eql(['one', 'two', 'three']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '-100', '100']);\n        chai_1.expect(response).to.eql(['one', 'two', 'three']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '5', '10']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "f2ff3ee5-4345-40bd-b6c4-eef32444d578",
              "parentUUID": "6f52def7-92c9-4e1a-b430-6537cd671f7f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d4f86f5-3d5e-4541-883d-bdeed0a2305a",
            "3e9dedc2-47ff-40d0-87cc-d410b081fd11",
            "603c911c-8bcb-4e60-be17-5f3113593971",
            "f2ff3ee5-4345-40bd-b6c4-eef32444d578"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "01e202c8-bd6f-45b8-8d3f-e5e2215e9e1e",
          "title": "lrem-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lrem-command.test.ts",
          "file": "/test/resp/command/list/lrem-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lrem-command test \"before all\" hook",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "f1830baf-f666-4b79-bc7f-98fa4ccb097a",
              "parentUUID": "01e202c8-bd6f-45b8-8d3f-e5e2215e9e1e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lrem-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "7d0e5eb3-5082-4bd4-9846-1ce152bede06",
              "parentUUID": "01e202c8-bd6f-45b8-8d3f-e5e2215e9e1e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lrem-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "9f75bb69-408b-4234-8dcd-1732782f2469",
              "parentUUID": "01e202c8-bd6f-45b8-8d3f-e5e2215e9e1e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lrem-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "c8d34a84-a8a8-40c8-99b8-0d44bae29913",
              "parentUUID": "01e202c8-bd6f-45b8-8d3f-e5e2215e9e1e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should NOT report 0 when lrem called with invalid non-existent key",
              "fullTitle": "lrem-command test should NOT report 0 when lrem called with invalid non-existent key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'no-key', 'negative one thousand', 'test']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "357e0458-20da-4a6e-a5a1-5c329608e0ed",
              "parentUUID": "01e202c8-bd6f-45b8-8d3f-e5e2215e9e1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report ERR when lrem called against existing key with invalid count argument",
              "fullTitle": "lrem-command test should report ERR when lrem called against existing key with invalid count argument",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lpush', 'lrem', 'akey']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'lrem', 'negative one thousand', 'test']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "7d677adb-487b-47b6-a917-410ce4dbde29",
              "parentUUID": "01e202c8-bd6f-45b8-8d3f-e5e2215e9e1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report 0 when lrem called with valid arguments and non-existing element",
              "fullTitle": "lrem-command test should report 0 when lrem called with valid arguments and non-existing element",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'lrem', '0', 'does not exist']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "d6e8dabe-d1cc-4dfa-89ec-2441687f8995",
              "parentUUID": "01e202c8-bd6f-45b8-8d3f-e5e2215e9e1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should use negative index counters",
              "fullTitle": "lrem-command test should use negative index counters",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'foo']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '-2', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '-1']);\n        chai_1.expect(response).to.eql(['hello', 'foo']);\n    })",
              "err": {},
              "uuid": "946f7305-e660-4b3f-b081-586f42849ffd",
              "parentUUID": "01e202c8-bd6f-45b8-8d3f-e5e2215e9e1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a ZERO result when the key does not exist",
              "fullTitle": "lrem-command test should return a ZERO result when the key does not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'otherlist', '1', 'test']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "e70de842-6492-4f59-ac49-d114770c1d19",
              "parentUUID": "01e202c8-bd6f-45b8-8d3f-e5e2215e9e1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove every matchin element when count is 0",
              "fullTitle": "lrem-command test should remove every matchin element when count is 0",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushdb']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'foo']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '0', 'hello']);\n        chai_1.expect(response).to.equal(3);\n    })",
              "err": {},
              "uuid": "249052ac-1688-475c-bc56-4de0191ef02e",
              "parentUUID": "01e202c8-bd6f-45b8-8d3f-e5e2215e9e1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove the list when all elements are gone",
              "fullTitle": "lrem-command test should remove the list when all elements are gone",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '0', 'foo']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mylist']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "a34b0f1a-b365-4c28-b3ad-e1a0d8e1646f",
              "parentUUID": "01e202c8-bd6f-45b8-8d3f-e5e2215e9e1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove only the number of requested elements when count > 0",
              "fullTitle": "lrem-command test should remove only the number of requested elements when count > 0",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'calibrate']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '1', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '2']);\n        chai_1.expect(response).to.eql(['hello', 'calibrate', 'hello']);\n    })",
              "err": {},
              "uuid": "4a2c6a34-ca1d-4ba3-93cb-064d22509ba1",
              "parentUUID": "01e202c8-bd6f-45b8-8d3f-e5e2215e9e1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should default to startIndex ZERO when it is less than ZERO",
              "fullTitle": "lrem-command test should default to startIndex ZERO when it is less than ZERO",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let i = 0; i < 10; i++) {\n            response = yield common_test_1.sendCommand(client, ['RPUSH', 'newlist', `${i}`]);\n            chai_1.expect(response).to.equal(i + 1);\n        }\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'newlist', '-100', '2']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'newlist']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'newlist', '0', '3']);\n        chai_1.expect(response).to.eql(['0', '1', '2']);\n    })",
              "err": {},
              "uuid": "d619b7a7-ba2a-4336-8bb4-ca0ec06f81a2",
              "parentUUID": "01e202c8-bd6f-45b8-8d3f-e5e2215e9e1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove the list when start > end or start > llen",
              "fullTitle": "lrem-command test should remove the list when start > end or start > llen",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exists', 'newlist']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'newlist', '10', '2']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'newlist']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "552c72ed-ec5a-48e7-8191-25668f14ad63",
              "parentUUID": "01e202c8-bd6f-45b8-8d3f-e5e2215e9e1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should properly handle a negative endIndex",
              "fullTitle": "lrem-command test should properly handle a negative endIndex",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let i = 0; i < 7; i++) {\n            response = yield common_test_1.sendCommand(client, ['RPUSH', 'neglist', `${i}`]);\n            chai_1.expect(response).to.equal(i + 1);\n        }\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'neglist', '-100', '-3']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'neglist', '0', '100']);\n        chai_1.expect(response).to.eql(['0', '1', '2', '3', '4']);\n    })",
              "err": {},
              "uuid": "5ea8c494-c8b8-4927-a774-6f81bb9f9cb6",
              "parentUUID": "01e202c8-bd6f-45b8-8d3f-e5e2215e9e1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove the key when abs(endIndex) is > llen",
              "fullTitle": "lrem-command test should remove the key when abs(endIndex) is > llen",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'neglist', '-100', '-6']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'neglist']);\n        chai_1.expect(response).to.eql(0);\n    })",
              "err": {},
              "uuid": "bd5b356c-e765-4c9c-8a8f-5622a4b91a01",
              "parentUUID": "01e202c8-bd6f-45b8-8d3f-e5e2215e9e1e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "357e0458-20da-4a6e-a5a1-5c329608e0ed",
            "7d677adb-487b-47b6-a917-410ce4dbde29",
            "d6e8dabe-d1cc-4dfa-89ec-2441687f8995",
            "946f7305-e660-4b3f-b081-586f42849ffd",
            "e70de842-6492-4f59-ac49-d114770c1d19",
            "249052ac-1688-475c-bc56-4de0191ef02e",
            "a34b0f1a-b365-4c28-b3ad-e1a0d8e1646f",
            "4a2c6a34-ca1d-4ba3-93cb-064d22509ba1",
            "d619b7a7-ba2a-4336-8bb4-ca0ec06f81a2",
            "552c72ed-ec5a-48e7-8191-25668f14ad63",
            "5ea8c494-c8b8-4927-a774-6f81bb9f9cb6",
            "bd5b356c-e765-4c9c-8a8f-5622a4b91a01"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 66,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "668a8f48-884a-481b-87c8-6af0c4a1e900",
          "title": "lset-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lset-command.test.ts",
          "file": "/test/resp/command/list/lset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lset-command test \"before all\" hook",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "40348485-dd41-4ea9-9fb1-fe00b0ae3f18",
              "parentUUID": "668a8f48-884a-481b-87c8-6af0c4a1e900",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lset-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "eeaa6b0a-2990-40cf-b08d-237ee31ec200",
              "parentUUID": "668a8f48-884a-481b-87c8-6af0c4a1e900",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lset-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "b0b415b3-3bd3-4320-ab0f-79fbb7b89c04",
              "parentUUID": "668a8f48-884a-481b-87c8-6af0c4a1e900",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lset-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "3d15733b-5722-4cf6-bdfa-37316897edb1",
              "parentUUID": "668a8f48-884a-481b-87c8-6af0c4a1e900",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should fail when a key does not exist",
              "fullTitle": "lset-command test should fail when a key does not exist",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lset', 'no-key', 'negative one thousand', 'test']);\n        chai_1.expect(response).to.equal('ReplyError: ERR no such key');\n    })",
              "err": {},
              "uuid": "62d25794-b0e8-467f-bd56-9419eb1926be",
              "parentUUID": "668a8f48-884a-481b-87c8-6af0c4a1e900",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should replace a valid index",
              "fullTitle": "lset-command test should replace a valid index",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', testkey, 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lset', testkey, '-1', 'z']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lrange', testkey, '0', '3']);\n        chai_1.expect(response).to.eql(['a', 'b', 'z']);\n    })",
              "err": {},
              "uuid": "81619159-a9a9-4ecc-af82-a66e68bc54c6",
              "parentUUID": "668a8f48-884a-481b-87c8-6af0c4a1e900",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should recognize invalid indexes",
              "fullTitle": "lset-command test should recognize invalid indexes",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lset', testkey, 'invalid', '3']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "f5c30800-c827-4d41-98c1-d81ad99c227d",
              "parentUUID": "668a8f48-884a-481b-87c8-6af0c4a1e900",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "62d25794-b0e8-467f-bd56-9419eb1926be",
            "81619159-a9a9-4ecc-af82-a66e68bc54c6",
            "f5c30800-c827-4d41-98c1-d81ad99c227d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0ec02d04-3f9c-4aea-8f92-56035836ef0c",
          "title": "ltrim-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/ltrim-command.test.ts",
          "file": "/test/resp/command/list/ltrim-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "ltrim-command test \"before all\" hook",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "082e2137-db58-4599-9f0c-37508805a7a4",
              "parentUUID": "0ec02d04-3f9c-4aea-8f92-56035836ef0c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "ltrim-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "d050259b-f13d-457b-959f-5af64792e64e",
              "parentUUID": "0ec02d04-3f9c-4aea-8f92-56035836ef0c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "ltrim-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "40074b95-f7fc-4231-a148-0c1f4c4d699a",
              "parentUUID": "0ec02d04-3f9c-4aea-8f92-56035836ef0c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "ltrim-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "76c7fa0a-17a9-4cca-a9a0-e050a2bc4e97",
              "parentUUID": "0ec02d04-3f9c-4aea-8f92-56035836ef0c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report OK when the key does not exist",
              "fullTitle": "ltrim-command test should report OK when the key does not exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'no-key', '0', '100']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "59b6d3a0-3e64-4bf1-a30f-592a12128fa4",
              "parentUUID": "0ec02d04-3f9c-4aea-8f92-56035836ef0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should trim a list to the requested size or less",
              "fullTitle": "ltrim-command test should trim a list to the requested size or less",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'calibrate']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '3']);\n        chai_1.expect(response).to.eql(['hello', 'hello', 'calibrate', 'hello']);\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'mylist', '0', '100']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '3']);\n        chai_1.expect(response).to.eql(['hello', 'hello', 'calibrate', 'hello']);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'mylist', '1', '4']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '3']);\n        chai_1.expect(response).to.eql(['hello', 'calibrate', 'hello']);\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'mylist', '-2', '1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '1']);\n        chai_1.expect(response).to.eql(['calibrate']);\n    })",
              "err": {},
              "uuid": "db538c16-24a7-45ba-b3f8-554677866c07",
              "parentUUID": "0ec02d04-3f9c-4aea-8f92-56035836ef0c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject an invalid start index",
              "fullTitle": "ltrim-command test should reject an invalid start index",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'testlist', 'wrong', '10']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "368f3f13-1ac9-4438-b615-d760b0e5c3d4",
              "parentUUID": "0ec02d04-3f9c-4aea-8f92-56035836ef0c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "59b6d3a0-3e64-4bf1-a30f-592a12128fa4",
            "db538c16-24a7-45ba-b3f8-554677866c07",
            "368f3f13-1ac9-4438-b615-d760b0e5c3d4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d6c0cf39-e668-4bcb-b977-89b17135bcab",
          "title": "rpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/rpop-command.test.ts",
          "file": "/test/resp/command/list/rpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rpop-command test \"before all\" hook",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "a0c4ab79-864c-4f83-bfce-6aa9e326a2c1",
              "parentUUID": "d6c0cf39-e668-4bcb-b977-89b17135bcab",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "8035e7a6-736a-41aa-a7bc-5b55f983de47",
              "parentUUID": "d6c0cf39-e668-4bcb-b977-89b17135bcab",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "3dfb49eb-24fe-4708-a5aa-e6213b801248",
              "parentUUID": "d6c0cf39-e668-4bcb-b977-89b17135bcab",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "45991e7f-b087-4c78-a7b2-69d065d05999",
              "parentUUID": "d6c0cf39-e668-4bcb-b977-89b17135bcab",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when rpop called on non-existent key",
              "fullTitle": "rpop-command test should report NIL when rpop called on non-existent key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpop', 'no-key']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['exists', 'no-key']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "a0472ed8-fcb8-4d3e-8985-72f52dc552e1",
              "parentUUID": "d6c0cf39-e668-4bcb-b977-89b17135bcab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a0472ed8-fcb8-4d3e-8985-72f52dc552e1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "210a0b06-0bcc-4bf0-b56e-742a41fab5a2",
          "title": "rpoplpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/rpoplpush-command.test.ts",
          "file": "/test/resp/command/list/rpoplpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rpoplpush-command test \"before all\" hook",
              "timedOut": false,
              "duration": 30,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "af202e6f-4e0d-421d-9593-0d0dcfd8e253",
              "parentUUID": "210a0b06-0bcc-4bf0-b56e-742a41fab5a2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rpoplpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "a115a6b3-b82a-4bc3-88a9-b622fba11bd1",
              "parentUUID": "210a0b06-0bcc-4bf0-b56e-742a41fab5a2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rpoplpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "a811e089-bc6f-4fef-9732-de7f032ff3b1",
              "parentUUID": "210a0b06-0bcc-4bf0-b56e-742a41fab5a2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rpoplpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "84c76b6f-2d1f-4e43-9dcf-b192fbe3ccc7",
              "parentUUID": "210a0b06-0bcc-4bf0-b56e-742a41fab5a2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when destination does not exist",
              "fullTitle": "rpoplpush-command test should return NIL when destination does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpoplpush', 'src', 'dst']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "3e1b1852-c5c2-43a9-a12f-2a5a27199867",
              "parentUUID": "210a0b06-0bcc-4bf0-b56e-742a41fab5a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should rotate a list when src and dst are the same",
              "fullTitle": "rpoplpush-command test should rotate a list when src and dst are the same",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', 'src', 'a']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'src', 'b']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'src', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'src', '0', '3']);\n        chai_1.expect(response).to.eql(['a', 'b', 'c']);\n        response = yield common_test_1.sendCommand(client, ['rpoplpush', 'src', 'src']);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'src', '0', '3']);\n        chai_1.expect(response).to.eql(['c', 'a', 'b']);\n    })",
              "err": {},
              "uuid": "4930b2bf-6d69-4307-b83c-4952291427cb",
              "parentUUID": "210a0b06-0bcc-4bf0-b56e-742a41fab5a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create the target list if it does not exist",
              "fullTitle": "rpoplpush-command test should create the target list if it does not exist",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exists', 'dst']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['rpoplpush', 'src', 'dst']);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['exists', 'dst']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'src', '0', '3']);\n        chai_1.expect(response).to.eql(['c', 'a']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'dst', '0', '3']);\n        chai_1.expect(response).to.eql(['b']);\n    })",
              "err": {},
              "uuid": "23633017-5319-4faa-8465-b58511c17014",
              "parentUUID": "210a0b06-0bcc-4bf0-b56e-742a41fab5a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3e1b1852-c5c2-43a9-a12f-2a5a27199867",
            "4930b2bf-6d69-4307-b83c-4952291427cb",
            "23633017-5319-4faa-8465-b58511c17014"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b3ba7116-2668-43bc-9b2f-b9d45719fa1d",
          "title": "rpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/rpush-command.test.ts",
          "file": "/test/resp/command/list/rpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rpush-command test \"before all\" hook",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "9968a6c7-a7d9-4856-a085-09e579b16c15",
              "parentUUID": "b3ba7116-2668-43bc-9b2f-b9d45719fa1d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "9b5a1793-283a-4c06-8a17-bd652553f11d",
              "parentUUID": "b3ba7116-2668-43bc-9b2f-b9d45719fa1d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "627e4571-5c1c-4cf4-adb3-7440f84f5de9",
              "parentUUID": "b3ba7116-2668-43bc-9b2f-b9d45719fa1d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "d8b8c2d1-379c-40b3-b087-93bb913f4b70",
              "parentUUID": "b3ba7116-2668-43bc-9b2f-b9d45719fa1d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ERR when attempting to rpush to a non-list key",
              "fullTitle": "rpush-command test should report ERR when attempting to rpush to a non-list key",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['rpush', 'lkey', '0']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "f877f56b-be4c-493a-8a48-8c0b204adef0",
              "parentUUID": "b3ba7116-2668-43bc-9b2f-b9d45719fa1d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f877f56b-be4c-493a-8a48-8c0b204adef0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7db28b1d-aeef-49f0-9af8-03eb6909d5f2",
          "title": "multi command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/multi-command.test.ts",
          "file": "/test/resp/command/multi-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "multi command test \"before all\" hook",
              "timedOut": false,
              "duration": 29,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "7cbcbedb-e92f-4e59-a660-e791f5346ffa",
              "parentUUID": "7db28b1d-aeef-49f0-9af8-03eb6909d5f2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "multi command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "eba204bb-4cbf-4525-958f-4a14d07331d2",
              "parentUUID": "7db28b1d-aeef-49f0-9af8-03eb6909d5f2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "multi command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "8d9fbd4f-b279-4db4-95d3-8813d03da01d",
              "parentUUID": "7db28b1d-aeef-49f0-9af8-03eb6909d5f2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "multi command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "27ddaf28-c5f6-4ca8-9e12-6f6a6ade6a8e",
              "parentUUID": "7db28b1d-aeef-49f0-9af8-03eb6909d5f2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow nested MULTI invocations",
              "fullTitle": "multi command test should not allow nested MULTI invocations",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('ReplyError: ERR MULTI calls can not be nested');\n    })",
              "err": {},
              "uuid": "9ed1d843-0f45-44a1-8dc1-9af0e525df6f",
              "parentUUID": "7db28b1d-aeef-49f0-9af8-03eb6909d5f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect the DISCARD command",
              "fullTitle": "multi command test should respect the DISCARD command",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['discard']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "fad5d510-f910-4a41-8ec7-d90de08a1e40",
              "parentUUID": "7db28b1d-aeef-49f0-9af8-03eb6909d5f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow DISCARD without MULTI",
              "fullTitle": "multi command test should not allow DISCARD without MULTI",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['discard']);\n        chai_1.expect(response).to.equal('ReplyError: ERR DISCARD without MULTI');\n    })",
              "err": {},
              "uuid": "aafcdf13-29d8-4f70-a441-8b03b5903891",
              "parentUUID": "7db28b1d-aeef-49f0-9af8-03eb6909d5f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should continue to validate commands after MULTI",
              "fullTitle": "multi command test should continue to validate commands after MULTI",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['unknown', 'command']);\n        chai_1.expect(response).to.equal('ReplyError: ERR unknown command `unknown`, with args beginning with: `command`, ', `${response}`);\n        response = yield common_test_1.sendCommand(client, ['lpush', 'test', 'one', 'two', 'three']);\n        chai_1.expect(response).to.equal('QUEUED');\n    })",
              "err": {},
              "uuid": "28310a15-38bd-4896-b02a-645c9bf2c1c7",
              "parentUUID": "7db28b1d-aeef-49f0-9af8-03eb6909d5f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should EXECABORT from a previous error",
              "fullTitle": "multi command test should EXECABORT from a previous error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exec']);\n        chai_1.expect(response).to.equal('ReplyError: EXECABORT Transaction discarded because of previous errors.');\n    })",
              "err": {},
              "uuid": "95e1eeb7-5440-4bc5-bd58-6aa74a33e0e4",
              "parentUUID": "7db28b1d-aeef-49f0-9af8-03eb6909d5f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should queue a set of commands when there is no intervening error",
              "fullTitle": "multi command test should queue a set of commands when there is no intervening error",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'test', 'one', 'two', 'three']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['exec']);\n        chai_1.expect(response).to.eql([3]);\n    })",
              "err": {},
              "uuid": "475887ac-f52b-4bfc-9207-61a1ee9fd945",
              "parentUUID": "7db28b1d-aeef-49f0-9af8-03eb6909d5f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reset transaction state after executing commands",
              "fullTitle": "multi command test should reset transaction state after executing commands",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['discard']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "1e49cd5d-74fa-4a40-b8df-0a19906352be",
              "parentUUID": "7db28b1d-aeef-49f0-9af8-03eb6909d5f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the results of multiple commands in the order provided",
              "fullTitle": "multi command test should return the results of multiple commands in the order provided",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['brpoplpush', 'test', 'dest', '0']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['exec']);\n        chai_1.expect(response).to.eql(['three', 'two', 'one']);\n        response = yield common_test_1.sendCommand(client, ['exists', 'test']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'dest']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "fc72fe66-e755-4ef8-978b-9736a205bc82",
              "parentUUID": "7db28b1d-aeef-49f0-9af8-03eb6909d5f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate the behavior of brpoplpush",
              "fullTitle": "multi command test should validate the behavior of brpoplpush",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'test', 'one', 'two', 'three']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('three');\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('two');\n        response = yield common_test_1.sendCommand(client, ['brpoplpush', 'test', 'dest', '0']);\n        chai_1.expect(response).to.equal('one');\n    })",
              "err": {},
              "uuid": "0168682e-3f61-47f7-b8db-4828c5e8d5b9",
              "parentUUID": "7db28b1d-aeef-49f0-9af8-03eb6909d5f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when EXEC issued without MULTI",
              "fullTitle": "multi command test should fail when EXEC issued without MULTI",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exec']);\n        chai_1.expect(response).to.equal('ReplyError: ERR EXEC without MULTI');\n    })",
              "err": {},
              "uuid": "c441af53-7ef9-4430-bf57-d0911545eb77",
              "parentUUID": "7db28b1d-aeef-49f0-9af8-03eb6909d5f2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9ed1d843-0f45-44a1-8dc1-9af0e525df6f",
            "fad5d510-f910-4a41-8ec7-d90de08a1e40",
            "aafcdf13-29d8-4f70-a441-8b03b5903891",
            "28310a15-38bd-4896-b02a-645c9bf2c1c7",
            "95e1eeb7-5440-4bc5-bd58-6aa74a33e0e4",
            "475887ac-f52b-4bfc-9207-61a1ee9fd945",
            "1e49cd5d-74fa-4a40-b8df-0a19906352be",
            "fc72fe66-e755-4ef8-978b-9736a205bc82",
            "0168682e-3f61-47f7-b8db-4828c5e8d5b9",
            "c441af53-7ef9-4430-bf57-d0911545eb77"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ee51b6ac-38d2-413e-a9b2-006da2967d19",
          "title": "script-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/script-command.test.ts",
          "file": "/test/resp/command/script-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "script-command test \"before all\" hook",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "1b1a96a0-0559-46a4-bb4a-b9d3ed526150",
              "parentUUID": "ee51b6ac-38d2-413e-a9b2-006da2967d19",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "script-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "707539cd-3f74-4d99-91e8-0c2043b030f3",
              "parentUUID": "ee51b6ac-38d2-413e-a9b2-006da2967d19",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "script-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "b820a066-e5e5-480e-ae88-501aef344910",
              "parentUUID": "ee51b6ac-38d2-413e-a9b2-006da2967d19",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "script-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "255868b2-1633-4efe-8d97-18d0c57b602d",
              "parentUUID": "ee51b6ac-38d2-413e-a9b2-006da2967d19",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should calcuclate the correct sha1 of a script and store the script",
              "fullTitle": "script-command test should calcuclate the correct sha1 of a script and store the script",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['script', 'exists', sha1]);\n        chai_1.expect(response).to.eql([0]);\n        // validate failure on unparseable script\n        response = yield common_test_1.sendCommand(client, ['script', 'load', code]);\n        chai_1.expect(response).to.match(/ReplyError: ERR .*/);\n        // validate success on parseable script\n        response = yield common_test_1.sendCommand(client, ['script', 'load', `${code}}`]);\n        chai_1.expect(response).to.equal(sha1);\n        // validate a script is persisted\n        response = yield common_test_1.sendCommand(client, ['script', 'exists', sha1]);\n        chai_1.expect(response).to.eql([1]);\n        // validate response to unknown sub command\n        response = yield common_test_1.sendCommand(client, ['script', 'test', sha1]);\n        chai_1.expect(response).to.equal('ReplyError: ERR Unknown subcommand or wrong number of arguments for \\'test\\'. Try SCRIPT HELP.');\n    })",
              "err": {},
              "uuid": "f0269556-7cc4-4046-b430-8c616898d586",
              "parentUUID": "ee51b6ac-38d2-413e-a9b2-006da2967d19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should evaluate a loaded lua script using evalsha",
              "fullTitle": "script-command test should evaluate a loaded lua script using evalsha",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Validate that NOSCRIPT is triggered\n        response = yield common_test_1.sendCommand(client, ['evalsha', `${sha1}xx`, '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('ReplyError: NOSCRIPT No matching script. Please use EVAL.');\n        // Validate that param 1 cannot be negative\n        response = yield common_test_1.sendCommand(client, ['evalsha', sha1, '-2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('ReplyError: ERR Number of keys can\\'t be negative');\n        // Validate that param 1 cannot be text\n        response = yield common_test_1.sendCommand(client, ['evalsha', sha1, 'two', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "611da065-668e-4878-b3d3-570119e47048",
              "parentUUID": "ee51b6ac-38d2-413e-a9b2-006da2967d19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should execute a simple script",
              "fullTitle": "script-command test should execute a simple script",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Validate that a simple script can be processed\n        response = yield common_test_1.sendCommand(client, ['EVAL', 'local val=\"Hello Compose\" return val', '0']);\n        chai_1.expect(response).to.equal('Hello Compose');\n    })",
              "err": {},
              "uuid": "80561a81-903c-44cf-aa3c-e215bb3554b6",
              "parentUUID": "ee51b6ac-38d2-413e-a9b2-006da2967d19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create and process the ARGV table",
              "fullTitle": "script-command test should create and process the ARGV table",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return ARGV[2]', '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.eql('second');\n    })",
              "err": {},
              "uuid": "00542480-f23d-43d7-a29f-47e2b78f9e1c",
              "parentUUID": "ee51b6ac-38d2-413e-a9b2-006da2967d19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create and process the KEYS table",
              "fullTitle": "script-command test should create and process the KEYS table",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return KEYS[1]', '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('key1');\n    })",
              "err": {},
              "uuid": "c4dbda56-9bd5-4c1c-94af-b0f89c68977f",
              "parentUUID": "ee51b6ac-38d2-413e-a9b2-006da2967d19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a NUMBER when required",
              "fullTitle": "script-command test should return a NUMBER when required",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return 123', '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal(123);\n    })",
              "err": {},
              "uuid": "153f3175-6fac-4903-963c-374cb1132370",
              "parentUUID": "ee51b6ac-38d2-413e-a9b2-006da2967d19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NIL when there is no return value",
              "fullTitle": "script-command test should return NIL when there is no return value",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'print \"Hello World\"', '0']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "2fc9fed1-ff8f-4bd9-9e31-d4718ab9348c",
              "parentUUID": "ee51b6ac-38d2-413e-a9b2-006da2967d19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a TABLE when required",
              "fullTitle": "script-command test should return a TABLE when required",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, [`eval`, `return ARGV`, '2', 'key1', 'key2', 'first', 'second', 'third']);\n        chai_1.expect(response).to.eql(['first', 'second', 'third']);\n    })",
              "err": {},
              "uuid": "bf77c3f1-464e-4eab-9d55-6004e07a3454",
              "parentUUID": "ee51b6ac-38d2-413e-a9b2-006da2967d19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return items in order",
              "fullTitle": "script-command test should return items in order",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return {true, \"test\", false, 10, 10.2}', '0']);\n        chai_1.expect(response).to.eql([1, 'test', null, 10, 10]);\n    })",
              "err": {},
              "uuid": "fd1d1e93-58a2-4a17-af7a-65e8e3fba673",
              "parentUUID": "ee51b6ac-38d2-413e-a9b2-006da2967d19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return integer and nil for true and false, respectively",
              "fullTitle": "script-command test should return integer and nil for true and false, respectively",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return { true, false, false}', '0']);\n        chai_1.expect(response).to.eql([1, null, null]);\n    })",
              "err": {},
              "uuid": "d35acc4f-7ee5-4e4a-bb55-c9795e912203",
              "parentUUID": "ee51b6ac-38d2-413e-a9b2-006da2967d19",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f0269556-7cc4-4046-b430-8c616898d586",
            "611da065-668e-4878-b3d3-570119e47048",
            "80561a81-903c-44cf-aa3c-e215bb3554b6",
            "00542480-f23d-43d7-a29f-47e2b78f9e1c",
            "c4dbda56-9bd5-4c1c-94af-b0f89c68977f",
            "153f3175-6fac-4903-963c-374cb1132370",
            "2fc9fed1-ff8f-4bd9-9e31-d4718ab9348c",
            "bf77c3f1-464e-4eab-9d55-6004e07a3454",
            "fd1d1e93-58a2-4a17-af7a-65e8e3fba673",
            "d35acc4f-7ee5-4e4a-bb55-c9795e912203"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 127,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9269003b-da2d-4c82-a6fe-8d4778dedb72",
          "title": "publish/subscribe test",
          "fullFile": "/home/lane/git/redis/test/resp/command/server/pubsub-server.test.ts",
          "file": "/test/resp/command/server/pubsub-server.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "publish/subscribe test \"before all\" hook",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "ae5cbbf0-cf02-4570-a0ef-b0a633331f6e",
              "parentUUID": "9269003b-da2d-4c82-a6fe-8d4778dedb72",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "publish/subscribe test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "22cfa457-f374-4807-940a-47b86e914adf",
              "parentUUID": "9269003b-da2d-4c82-a6fe-8d4778dedb72",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "publish/subscribe test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "2b51b21b-8824-4aec-907b-ce013d14c799",
              "parentUUID": "9269003b-da2d-4c82-a6fe-8d4778dedb72",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "publish/subscribe test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "69f86b1c-a9a0-4611-b1e1-7a043582641d",
              "parentUUID": "9269003b-da2d-4c82-a6fe-8d4778dedb72",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return ZERO when a message is published to a channel without subscribers",
              "fullTitle": "publish/subscribe test should return ZERO when a message is published to a channel without subscribers",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['publish', 'channel', 'Hollow world!']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "2e1d2eda-8ec1-44f7-8343-78da4a92f5be",
              "parentUUID": "9269003b-da2d-4c82-a6fe-8d4778dedb72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should unsubscribe from a channel that it is not subscribed to",
              "fullTitle": "publish/subscribe test should unsubscribe from a channel that it is not subscribed to",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Sound's weird, but this is observed behavior\n        response = yield common_test_1.sendCommand(client, ['unsubscribe', 'some channel']);\n        chai_1.expect(response).to.eql(['unsubscribe', 'some channel', 0]);\n    })",
              "err": {},
              "uuid": "8e37500e-f93b-4602-93bf-d966b15586c2",
              "parentUUID": "9269003b-da2d-4c82-a6fe-8d4778dedb72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should subscribe to an arbitrary channel",
              "fullTitle": "publish/subscribe test should subscribe to an arbitrary channel",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['subscribe', 'arbitrary channel']);\n        chai_1.expect(response).to.eql(['subscribe', 'arbitrary channel', 1]);\n    })",
              "err": {},
              "uuid": "9298628c-2171-4d8b-a8fb-78319cd2be8d",
              "parentUUID": "9269003b-da2d-4c82-a6fe-8d4778dedb72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report the number of currently subscribed channels",
              "fullTitle": "publish/subscribe test should report the number of currently subscribed channels",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['subscribe', 'another channel']);\n        chai_1.expect(response).to.eql(['subscribe', 'another channel', 2]);\n        response = yield common_test_1.sendCommand(client, ['unsubscribe', 'another channel']);\n        chai_1.expect(response).to.eql(['unsubscribe', 'another channel', 1]);\n        response = yield common_test_1.sendCommand(client, ['unsubscribe', 'arbitrary channel']);\n        chai_1.expect(response).to.eql(['unsubscribe', 'arbitrary channel', 0]);\n    })",
              "err": {},
              "uuid": "e9bb654e-d382-40aa-a340-3d922d20ce0e",
              "parentUUID": "9269003b-da2d-4c82-a6fe-8d4778dedb72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should receive separate subscribe responses and then notifications on subscribed channels",
              "fullTitle": "publish/subscribe test should receive separate subscribe responses and then notifications on subscribed channels",
              "timedOut": false,
              "duration": 1509,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let counter = 0;\nconst newClient1 = new net.Socket();\nnewClient1.on('data', (data) => {\n    // console.log(`Counter is ${counter}`);\n    // console.log(`\\n***Listener ${counter} received ${data.toString('utf8')}\\n`);\n    switch (counter) {\n        case 0:\n            chai_1.expect(data.toString('utf8')).to.equal(`*3\\r\\n$9\\r\\nsubscribe\\r\\n$3\\r\\none\\r\\n:1\\r\\n*3\\r\\n$9\\r\\nsubscribe\\r\\n$3\\r\\ntwo\\r\\n:2\\r\\n*3\\r\\n$9\\r\\nsubscribe\\r\\n$5\\r\\nthree\\r\\n:3\\r\\n`);\n            break;\n        case 1:\n            chai_1.expect(data.toString('utf8')).to.equal(`*3\\r\\n$7\\r\\nmessage\\r\\n$3\\r\\ntwo\\r\\n$12\\r\\nmessage to 2\\r\\n`);\n            done();\n            break;\n    }\n    counter++;\n});\ncommon_test_1.sendCommand(newClient1, ['subscribe', 'one', 'two', 'three'])\n    .then((rsp) => {\n    //        console.log(`RESPONSE ${JSON.stringify(rsp)}`);\n    // Responses are sent in separate messages\n    chai_1.expect(rsp).to.eql(['subscribe', 'one', 1]);\n    const anotherClient = new net.Socket();\n    // wait a tick so that the published message is received separately\n    setTimeout(() => {\n        common_test_1.sendCommand(anotherClient, ['publish', 'two', 'message to 2'])\n            .then((rsp) => {\n            chai_1.expect(rsp).to.equal(1);\n        });\n    }, 1500);\n});",
              "err": {},
              "uuid": "85f916ba-3d8b-4991-91ff-4fbbcdcf29ce",
              "parentUUID": "9269003b-da2d-4c82-a6fe-8d4778dedb72",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2e1d2eda-8ec1-44f7-8343-78da4a92f5be",
            "8e37500e-f93b-4602-93bf-d966b15586c2",
            "9298628c-2171-4d8b-a8fb-78319cd2be8d",
            "e9bb654e-d382-40aa-a340-3d922d20ce0e",
            "85f916ba-3d8b-4991-91ff-4fbbcdcf29ce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1517,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "92e04892-fcea-4dac-977a-6a2ba6d1b18d",
          "title": "resp-server test",
          "fullFile": "/home/lane/git/redis/test/resp/command/server/resp-server.test.ts",
          "file": "/test/resp/command/server/resp-server.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "resp-server test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "b0277186-bab5-42b9-97ff-ce7b9be7ccb9",
              "parentUUID": "92e04892-fcea-4dac-977a-6a2ba6d1b18d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "resp-server test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "6893d9c6-bd27-457b-967b-3589f1cfbd53",
              "parentUUID": "92e04892-fcea-4dac-977a-6a2ba6d1b18d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "6f4b6268-c18d-4400-89a5-c1e8f92f3054",
              "title": "server start and stop tests",
              "fullFile": "/home/lane/git/redis/test/resp/command/server/resp-server.test.ts",
              "file": "/test/resp/command/server/resp-server.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should instantiate",
                  "fullTitle": "resp-server test server start and stop tests should instantiate",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            respServer = new resp_server_1.RespServer();\n            chai_1.expect(respServer.constructor.name).to.equal('RespServer');\n        })",
                  "err": {},
                  "uuid": "5931f7f8-582c-4403-931c-89a928c97b3c",
                  "parentUUID": "6f4b6268-c18d-4400-89a5-c1e8f92f3054",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit \"ready\" on startup",
                  "fullTitle": "resp-server test server start and stop tests should emit \"ready\" on startup",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
                  "err": {},
                  "uuid": "7a8853e5-8517-47af-a622-bc57df586f88",
                  "parentUUID": "6f4b6268-c18d-4400-89a5-c1e8f92f3054",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit \"closed\" on shutdown",
                  "fullTitle": "resp-server test server start and stop tests should emit \"closed\" on shutdown",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer.on('closed', () => {\n    done();\n});\nrespServer.stop();",
                  "err": {},
                  "uuid": "510c83bc-3a9c-4dfd-9e1d-80d5ac50a656",
                  "parentUUID": "6f4b6268-c18d-4400-89a5-c1e8f92f3054",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept connections on default ${env.REDIS_HOST}:${env.REDIS_PORT}",
                  "fullTitle": "resp-server test server start and stop tests should accept connections on default ${env.REDIS_HOST}:${env.REDIS_PORT}",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    const client = new net.Socket();\n    client.on('ready', (data) => {\n        respServer.on('closed', () => {\n            done();\n        });\n        respServer.stop();\n    });\n    client.on('connect', (data) => {\n    });\n    client.on('error', (err) => {\n        assert_1.fail(`Unexpected error during connection`, err.stack);\n    });\n    client.connect(Number(process.env.REDIS_PORT || 6379), process.env.REDIS_HOST || 'localhost', () => {\n    });\n});\nrespServer.start();",
                  "err": {},
                  "uuid": "c44b3ea5-c74f-41e7-bef9-88fd0ea592b9",
                  "parentUUID": "6f4b6268-c18d-4400-89a5-c1e8f92f3054",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5931f7f8-582c-4403-931c-89a928c97b3c",
                "7a8853e5-8517-47af-a622-bc57df586f88",
                "510c83bc-3a9c-4dfd-9e1d-80d5ac50a656",
                "c44b3ea5-c74f-41e7-bef9-88fd0ea592b9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "be860caf-ce7f-4a07-9b54-50b1afab5b7d",
              "title": "other server tests",
              "fullFile": "/home/lane/git/redis/test/resp/command/server/resp-server.test.ts",
              "file": "/test/resp/command/server/resp-server.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "resp-server test other server tests \"before all\" hook",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    client = new net.Socket();\n    done();\n});\nrespServer.start();",
                  "err": {},
                  "uuid": "1311588e-75de-4c04-955a-bf2ed3bad254",
                  "parentUUID": "be860caf-ce7f-4a07-9b54-50b1afab5b7d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "resp-server test other server tests \"after all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            yield respServer.stop();\n        })",
                  "err": {},
                  "uuid": "5a9565ec-8d8b-496b-8e3c-b691434dbffb",
                  "parentUUID": "be860caf-ce7f-4a07-9b54-50b1afab5b7d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should respond properly to the \"ping\" command",
                  "fullTitle": "resp-server test other server tests should respond properly to the \"ping\" command",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['ping'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('PONG');\n    done();\n});",
                  "err": {},
                  "uuid": "42937e44-6d0f-4884-bcd3-45df03e3ac52",
                  "parentUUID": "be860caf-ce7f-4a07-9b54-50b1afab5b7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond properly to the \"echo\" command",
                  "fullTitle": "resp-server test other server tests should respond properly to the \"echo\" command",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['echo', 'test'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('test');\n    done();\n});",
                  "err": {},
                  "uuid": "392ebf63-3673-46ab-b7c1-0709875cd2f6",
                  "parentUUID": "be860caf-ce7f-4a07-9b54-50b1afab5b7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond with \"ERR\" when echo command has no parameters",
                  "fullTitle": "resp-server test other server tests should respond with \"ERR\" when echo command has no parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            // Note that 'ReplyError:' is supplied by the redis parser, NOT by the code under test\n            const response = yield common_test_1.sendCommand(client, ['echo']);\n            chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'echo\\' command');\n        })",
                  "err": {},
                  "uuid": "84dfc01c-38d4-4da1-b85d-f1f732a4259d",
                  "parentUUID": "be860caf-ce7f-4a07-9b54-50b1afab5b7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond with \"ERR\" when echo command has two or more parameters",
                  "fullTitle": "resp-server test other server tests should respond with \"ERR\" when echo command has two or more parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['echo', 'one', 'two'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'echo\\' command');\n    done();\n});",
                  "err": {},
                  "uuid": "8c8f51ac-191c-4639-88f4-9bf14a8f942a",
                  "parentUUID": "be860caf-ce7f-4a07-9b54-50b1afab5b7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond to the \"time\" command with an array of two strings",
                  "fullTitle": "resp-server test other server tests should respond to the \"time\" command with an array of two strings",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Note: we use hrtime which should already do what we need so we don't validate\ncommon_test_1.sendCommand(client, ['time'])\n    .then((response) => {\n    chai_1.expect(response).to.be.an('array');\n    chai_1.expect(response.length).to.equal(2);\n    chai_1.expect(parseInt(response[0], 10)).to.be.greaterThan(0);\n    chai_1.expect(parseInt(response[1], 10)).to.be.greaterThan(0);\n    done();\n});",
                  "err": {},
                  "uuid": "4cce874f-69b7-41c4-a558-ad9306e61041",
                  "parentUUID": "be860caf-ce7f-4a07-9b54-50b1afab5b7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond with nulCommand when the command is not known",
                  "fullTitle": "resp-server test other server tests should respond with nulCommand when the command is not known",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['felix', 'the', 'cat'])\n    .then((response) => {\n    chai_1.expect(response).to.match(/^ReplyError: ERR unknown command.*/);\n    done();\n});",
                  "err": {},
                  "uuid": "6b94689a-8e76-42dd-bd30-96cfb2491599",
                  "parentUUID": "be860caf-ce7f-4a07-9b54-50b1afab5b7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should implement the info command",
                  "fullTitle": "resp-server test other server tests should implement the info command",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield common_test_1.sendCommand(client, ['info']);\n            chai_1.expect(response).to.match(/^# server\\r\\nredis_version:.*/im);\n        })",
                  "err": {},
                  "uuid": "1e7f8243-fcc1-4ba3-b963-6f9ae5cf0fee",
                  "parentUUID": "be860caf-ce7f-4a07-9b54-50b1afab5b7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should implement the SET command",
                  "fullTitle": "resp-server test other server tests should implement the SET command",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['SET', 'this', 'that'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    common_test_1.sendCommand(client, ['GET', 'this'])\n        .then((getresponse) => {\n        chai_1.expect(getresponse).to.equal('that');\n        done();\n    });\n});",
                  "err": {},
                  "uuid": "dc40bfd0-8d88-4bf7-99fd-af236a5877f6",
                  "parentUUID": "be860caf-ce7f-4a07-9b54-50b1afab5b7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nil string when GET is invoked with unknown parameters",
                  "fullTitle": "resp-server test other server tests should return nil string when GET is invoked with unknown parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['GET', ' '])\n    .then((getresponse) => {\n    chai_1.expect(getresponse).to.equal(null);\n    done();\n});",
                  "err": {},
                  "uuid": "4ab81ce6-0cf3-4ed9-b7c8-df4dacf6bc93",
                  "parentUUID": "be860caf-ce7f-4a07-9b54-50b1afab5b7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should implement the info command with a known parameter",
                  "fullTitle": "resp-server test other server tests should implement the info command with a known parameter",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['info', 'memory'])\n    .then((response) => {\n    chai_1.expect(response).to.match(/^# memory.*/mi);\n    done();\n});",
                  "err": {},
                  "uuid": "328236dd-f2fc-4895-911c-df39c34abf0d",
                  "parentUUID": "be860caf-ce7f-4a07-9b54-50b1afab5b7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not respond when info is called with an unknown paramter",
                  "fullTitle": "resp-server test other server tests should not respond when info is called with an unknown paramter",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield common_test_1.sendCommand(client, ['info', 'juicy']);\n            // Don't know how to send an empty - non-null string response yet\n            chai_1.expect(String(response).trim()).to.equal('');\n        })",
                  "err": {},
                  "uuid": "80f97446-7b20-4604-9bc6-7bda5e9f803e",
                  "parentUUID": "be860caf-ce7f-4a07-9b54-50b1afab5b7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should report the number of keys in the current database",
                  "fullTitle": "resp-server test other server tests should report the number of keys in the current database",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.be.a('number');\n            chai_1.expect(response).to.be.greaterThan(0);\n        })",
                  "err": {},
                  "uuid": "d394f560-51fe-4d88-bf7a-2aefd043ebca",
                  "parentUUID": "be860caf-ce7f-4a07-9b54-50b1afab5b7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support the \"select\" command",
                  "fullTitle": "resp-server test other server tests should support the \"select\" command",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['select', '12']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
                  "uuid": "a35a867f-5dd9-4932-83fd-adaa1266ee71",
                  "parentUUID": "be860caf-ce7f-4a07-9b54-50b1afab5b7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow us to select an invalid database",
                  "fullTitle": "resp-server test other server tests should not allow us to select an invalid database",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['select', 'one']);\n            chai_1.expect(response).to.equal('ReplyError: ERR invalid DB index');\n            response = yield common_test_1.sendCommand(client, ['select', '-12']);\n            chai_1.expect(response).to.equal('ReplyError: ERR DB index is out of range');\n            response = yield common_test_1.sendCommand(client, ['select', '22']);\n            chai_1.expect(response).to.equal('ReplyError: ERR DB index is out of range');\n        })",
                  "err": {},
                  "uuid": "3a645dfd-583e-494c-8e8e-f226e45f0dcb",
                  "parentUUID": "be860caf-ce7f-4a07-9b54-50b1afab5b7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond properly to the \"quit\" command",
                  "fullTitle": "resp-server test other server tests should respond properly to the \"quit\" command",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Note however that the server does not disconnect us.  That is the client's job\ncommon_test_1.sendCommand(client, ['quit'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    done();\n});",
                  "err": {},
                  "uuid": "dd531493-f1e8-4333-8e60-6d7920eb9e0f",
                  "parentUUID": "be860caf-ce7f-4a07-9b54-50b1afab5b7d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42937e44-6d0f-4884-bcd3-45df03e3ac52",
                "392ebf63-3673-46ab-b7c1-0709875cd2f6",
                "84dfc01c-38d4-4da1-b85d-f1f732a4259d",
                "8c8f51ac-191c-4639-88f4-9bf14a8f942a",
                "4cce874f-69b7-41c4-a558-ad9306e61041",
                "6b94689a-8e76-42dd-bd30-96cfb2491599",
                "1e7f8243-fcc1-4ba3-b963-6f9ae5cf0fee",
                "dc40bfd0-8d88-4bf7-99fd-af236a5877f6",
                "4ab81ce6-0cf3-4ed9-b7c8-df4dacf6bc93",
                "328236dd-f2fc-4895-911c-df39c34abf0d",
                "80f97446-7b20-4604-9bc6-7bda5e9f803e",
                "d394f560-51fe-4d88-bf7a-2aefd043ebca",
                "a35a867f-5dd9-4932-83fd-adaa1266ee71",
                "3a645dfd-583e-494c-8e8e-f226e45f0dcb",
                "dd531493-f1e8-4333-8e60-6d7920eb9e0f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6ad45969-6305-40cd-ad1e-06693b806e4e",
          "title": "sdiff-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sdiff-command.test.ts",
          "file": "/test/resp/command/set/sdiff-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sdiff-command test \"before all\" hook",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "b8453035-7e9a-4401-a1b3-8d3b160df5c8",
              "parentUUID": "6ad45969-6305-40cd-ad1e-06693b806e4e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sdiff-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "b6c4ffda-a25e-4268-8846-c69e0114d60e",
              "parentUUID": "6ad45969-6305-40cd-ad1e-06693b806e4e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sdiff-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "684a214a-024c-477c-bbc8-c217106037b8",
              "parentUUID": "6ad45969-6305-40cd-ad1e-06693b806e4e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sdiff-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "01ee2122-2f00-48e3-813c-f7f9643d25c7",
              "parentUUID": "6ad45969-6305-40cd-ad1e-06693b806e4e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return EMPTY ARRAY when the source set does not exist",
              "fullTitle": "sdiff-command test should return EMPTY ARRAY when the source set does not exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'ary']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "dc9abed5-83f2-4130-beb1-718f8ad5762d",
              "parentUUID": "6ad45969-6305-40cd-ad1e-06693b806e4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return all members of source set when the destination set does not exist",
              "fullTitle": "sdiff-command test should return all members of source set when the destination set does not exist",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'key1', 'empty']);\n        // REDIS does not guarantee order of the set\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd']);\n    })",
              "err": {},
              "uuid": "2f874068-0c44-462f-9ec0-97656c8a867d",
              "parentUUID": "6ad45969-6305-40cd-ad1e-06693b806e4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a proper DIFF of one or more sets",
              "fullTitle": "sdiff-command test should return a proper DIFF of one or more sets",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key3', 'a', 'c', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'key1', 'key2', 'key3']);\n        chai_1.expect(response).to.eql(['b', 'd']);\n    })",
              "err": {},
              "uuid": "8b84e49b-99ca-420b-8289-69fc3d906c74",
              "parentUUID": "6ad45969-6305-40cd-ad1e-06693b806e4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should ignore non-list keys",
              "fullTitle": "sdiff-command test should ignore non-list keys",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'list', '1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '2', 'three']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'key1', 'key2', 'key3']);\n        chai_1.expect(response).to.eql(['b', 'd']);\n    })",
              "err": {},
              "uuid": "3db44bf4-639c-4dde-b034-6080cd62724c",
              "parentUUID": "6ad45969-6305-40cd-ad1e-06693b806e4e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dc9abed5-83f2-4130-beb1-718f8ad5762d",
            "2f874068-0c44-462f-9ec0-97656c8a867d",
            "8b84e49b-99ca-420b-8289-69fc3d906c74",
            "3db44bf4-639c-4dde-b034-6080cd62724c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d694dc54-112f-4612-9223-69d3e54c266d",
          "title": "set commands test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/set-commands.test.ts",
          "file": "/test/resp/command/set/set-commands.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "set commands test \"before all\" hook",
              "timedOut": false,
              "duration": 28,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "bd86190c-76a2-4b2e-98f9-850b42ed2981",
              "parentUUID": "d694dc54-112f-4612-9223-69d3e54c266d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "set commands test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "db03da32-b640-4ea3-8ab9-c66c4d7b5ddd",
              "parentUUID": "d694dc54-112f-4612-9223-69d3e54c266d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "set commands test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "3845a60c-46ce-42d1-b482-55740ec71d42",
              "parentUUID": "d694dc54-112f-4612-9223-69d3e54c266d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "set commands test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "059078ac-f251-48c2-a9f4-00be1254b895",
              "parentUUID": "d694dc54-112f-4612-9223-69d3e54c266d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return ZERO when certain commands are applied against key that doesn't exist",
              "fullTitle": "set commands test should return ZERO when certain commands are applied against key that doesn't exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['scard', 'doesnotexist']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['sismember', 'doesnotexist', 'test']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "704f9e6d-4a8b-4d31-a415-4af049a824ef",
              "parentUUID": "d694dc54-112f-4612-9223-69d3e54c266d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an appropriate error when a \"set\" command is applied to a non-set key",
              "fullTitle": "set commands test should throw an appropriate error when a \"set\" command is applied to a non-set key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['set', 'wrongtype', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sismember', 'wrongtype', 'set']);\n        chai_1.expect(response).to.equal(WRONG_TYPE);\n    })",
              "err": {},
              "uuid": "a6a25326-0d87-42c9-acef-06c9934d503c",
              "parentUUID": "d694dc54-112f-4612-9223-69d3e54c266d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new key when sadd is called correctly",
              "fullTitle": "set commands test should create a new key when sadd is called correctly",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['sadd', 'skey', 'untest']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'skey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "ab9f2e26-d0ac-4520-95d9-90f0a68ca0c5",
              "parentUUID": "d694dc54-112f-4612-9223-69d3e54c266d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only report the number of added keys",
              "fullTitle": "set commands test should only report the number of added keys",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['sadd', 'skey', 'untest', 'test2']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'skey']);\n        chai_1.expect(response).to.be.an('array');\n        // Keys are returned in reverse order? - No.\n        // smembers can return a list in any order\n        chai_1.expect(response.length).to.equal(2);\n        chai_1.expect(response.indexOf('test2')).to.be.greaterThan(-1);\n        chai_1.expect(response.indexOf('untest')).to.be.greaterThan(-1);\n    })",
              "err": {},
              "uuid": "3b436d21-d226-4d90-976a-45c24e709458",
              "parentUUID": "d694dc54-112f-4612-9223-69d3e54c266d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "a33bb316-f6a3-4177-9f69-6faec93fe78e",
              "title": "smove, sismember, and scard tests",
              "fullFile": "/home/lane/git/redis/test/resp/command/set/set-commands.test.ts",
              "file": "/test/resp/command/set/set-commands.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should do nothing when smove is called with a source key that does not exist",
                  "fullTitle": "set commands test smove, sismember, and scard tests should do nothing when smove is called with a source key that does not exist",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['smove', 'fromskey', 'toskey', 'nothing']);\n            chai_1.expect(response).to.equal(0);\n            response = yield common_test_1.sendCommand(client, ['exists', 'fromskey', 'toskey']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
                  "uuid": "f4a59bbd-0d2f-4d8c-b403-6e1f99dc06ce",
                  "parentUUID": "a33bb316-f6a3-4177-9f69-6faec93fe78e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should move a key from one set to another (and create the target if necessary)",
                  "fullTitle": "set commands test smove, sismember, and scard tests should move a key from one set to another (and create the target if necessary)",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['exists', 'tonewskey']);\n            chai_1.expect(response).to.equal(0);\n            response = yield common_test_1.sendCommand(client, ['smembers', 'tonewskey']);\n            chai_1.expect(response).to.eql([]);\n            response = yield common_test_1.sendCommand(client, ['sadd', uniqueKey, 'key1', 'key2', 'key3']);\n            chai_1.expect(response).to.equal(3);\n            response = yield common_test_1.sendCommand(client, ['smembers', uniqueKey]);\n            // key order is undefined in redis\n            chai_1.expect(response.length).to.equal(3);\n            chai_1.expect(response.indexOf('key3')).to.be.greaterThan(-1);\n            chai_1.expect(response.indexOf('key2')).to.be.greaterThan(-1);\n            chai_1.expect(response.indexOf('key1')).to.be.greaterThan(-1);\n            response = yield common_test_1.sendCommand(client, ['smove', uniqueKey, 'tonewskey', 'key2']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', 'tonewskey', 'key2']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['smembers', uniqueKey]);\n            // key order, again\n            chai_1.expect(response.length).to.equal(2);\n            chai_1.expect(response.indexOf('key3')).to.be.greaterThan(-1);\n            chai_1.expect(response.indexOf('key1')).to.be.greaterThan(-1);\n            response = yield common_test_1.sendCommand(client, ['smembers', 'tonewskey']);\n            chai_1.expect(response).to.eql(['key2']);\n        })",
                  "err": {},
                  "uuid": "117fd55c-2202-4b01-b822-5a385bec1713",
                  "parentUUID": "a33bb316-f6a3-4177-9f69-6faec93fe78e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should report cardinality of a set",
                  "fullTitle": "set commands test smove, sismember, and scard tests should report cardinality of a set",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['scard', uniqueKey]);\n            chai_1.expect(response).to.equal(2);\n            response = yield common_test_1.sendCommand(client, ['scard', 'tonewskey']);\n            chai_1.expect(response).to.equal(1);\n        })",
                  "err": {},
                  "uuid": "f18e09e2-d9dd-4c3a-acea-6bc183d05806",
                  "parentUUID": "a33bb316-f6a3-4177-9f69-6faec93fe78e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should report ismember true/false",
                  "fullTitle": "set commands test smove, sismember, and scard tests should report ismember true/false",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['sismember', 'tonewskey', 'key2']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', 'tonewskey', 'key1']);\n            chai_1.expect(response).to.equal(0);\n            response = yield common_test_1.sendCommand(client, ['sismember', uniqueKey, 'key1']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', uniqueKey, 'key3']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', uniqueKey, 'key2']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
                  "uuid": "166be3fe-d0e3-4565-a360-dfc1fd1d0085",
                  "parentUUID": "a33bb316-f6a3-4177-9f69-6faec93fe78e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only remove the source element if the destination element already exists",
                  "fullTitle": "set commands test smove, sismember, and scard tests should only remove the source element if the destination element already exists",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const newkey = `move-unique-${new Date().getTime()}`;\n            const newToKey = `move-new-to-key`;\n            let response = yield common_test_1.sendCommand(client, ['sadd', newkey, 'key1', 'key2', 'key3']);\n            chai_1.expect(response).to.equal(3);\n            response = yield common_test_1.sendCommand(client, ['sadd', newToKey, 'key1', 'key2', 'key3']);\n            chai_1.expect(response).to.equal(3);\n            response = yield common_test_1.sendCommand(client, ['smove', newkey, newToKey, 'key2']);\n            // Inconsistent with redis documentation?\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', newkey, 'key2']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
                  "uuid": "c459fd81-1b19-4d9e-abd7-d42df464f998",
                  "parentUUID": "a33bb316-f6a3-4177-9f69-6faec93fe78e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4a59bbd-0d2f-4d8c-b403-6e1f99dc06ce",
                "117fd55c-2202-4b01-b822-5a385bec1713",
                "f18e09e2-d9dd-4c3a-acea-6bc183d05806",
                "166be3fe-d0e3-4565-a360-dfc1fd1d0085",
                "c459fd81-1b19-4d9e-abd7-d42df464f998"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 35,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "704f9e6d-4a8b-4d31-a415-4af049a824ef",
            "a6a25326-0d87-42c9-acef-06c9934d503c",
            "ab9f2e26-d0ac-4520-95d9-90f0a68ca0c5",
            "3b436d21-d226-4d90-976a-45c24e709458"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b8f34900-4d24-4e83-9f5d-e6692114ff23",
          "title": "sinter-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sinter-command.test.ts",
          "file": "/test/resp/command/set/sinter-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sinter-command test \"before all\" hook",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "86fd6ee1-18b5-45e2-92f3-c18c3caf06d9",
              "parentUUID": "b8f34900-4d24-4e83-9f5d-e6692114ff23",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sinter-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "a84a93d4-c3b9-44b2-85df-2f0ee2b3edfb",
              "parentUUID": "b8f34900-4d24-4e83-9f5d-e6692114ff23",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sinter-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "ab1b684f-2734-470e-8207-b60b25262e34",
              "parentUUID": "b8f34900-4d24-4e83-9f5d-e6692114ff23",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sinter-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "67448095-cc66-4692-9d5d-7fd842f6f1ec",
              "parentUUID": "b8f34900-4d24-4e83-9f5d-e6692114ff23",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return EMPTY SET when the source set does not exist",
              "fullTitle": "sinter-command test should return EMPTY SET when the source set does not exist",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sinter', 'ary']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "6a6ec835-d72c-4442-8961-58dc7906a9c1",
              "parentUUID": "b8f34900-4d24-4e83-9f5d-e6692114ff23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return EMPTY SET when any other set does not exist",
              "fullTitle": "sinter-command test should return EMPTY SET when any other set does not exist",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'empty']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "f3b41f6b-f7a3-47db-ac04-2e39d5e82862",
              "parentUUID": "b8f34900-4d24-4e83-9f5d-e6692114ff23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when one of the keys is not a set",
              "fullTitle": "sinter-command test should fail when one of the keys is not a set",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '1', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'zkey']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n        response = yield common_test_1.sendCommand(client, ['set', 'skey1', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'skey1']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "56e7c3f7-bc33-4ea2-a38f-11eb5fba6e2b",
              "parentUUID": "b8f34900-4d24-4e83-9f5d-e6692114ff23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the intersection of one or more sets",
              "fullTitle": "sinter-command test should return the intersection of one or more sets",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key3', 'a', 'c', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'key2', 'key3']);\n        chai_1.expect(response).to.eql(['c']);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'a']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key2', 'key1', 'key3']);\n        chai_1.expect(response.length).to.equal(2);\n        // Redis does not guarantee the order of a set\n        chai_1.expect(response.sort()).to.eql(['a', 'c']);\n    })",
              "err": {},
              "uuid": "25a8e0a6-60d5-419b-8158-84f51efc9fe3",
              "parentUUID": "b8f34900-4d24-4e83-9f5d-e6692114ff23",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6a6ec835-d72c-4442-8961-58dc7906a9c1",
            "f3b41f6b-f7a3-47db-ac04-2e39d5e82862",
            "56e7c3f7-bc33-4ea2-a38f-11eb5fba6e2b",
            "25a8e0a6-60d5-419b-8158-84f51efc9fe3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "aa5667d7-c6e4-44e2-8ec6-a5d662715978",
          "title": "sinterstore-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sinterstore-command.test.ts",
          "file": "/test/resp/command/set/sinterstore-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sinterstore-command test \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "c8b121e2-1805-44aa-a102-5b444da63557",
              "parentUUID": "aa5667d7-c6e4-44e2-8ec6-a5d662715978",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sinterstore-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "4289d76d-da33-485e-a8e9-b2bcad31c60e",
              "parentUUID": "aa5667d7-c6e4-44e2-8ec6-a5d662715978",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sinterstore-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "506d7d67-6012-45ac-8ed8-38df249ab689",
              "parentUUID": "aa5667d7-c6e4-44e2-8ec6-a5d662715978",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sinterstore-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "1127dec2-58d7-4238-be6c-266d6517610b",
              "parentUUID": "aa5667d7-c6e4-44e2-8ec6-a5d662715978",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require a minimum of two parameters",
              "fullTitle": "sinterstore-command test should require a minimum of two parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'ary']);\n        chai_1.expect(response).to.match(/ERR wrong number of arguments for \\'sinterstore\\' command/i);\n    })",
              "err": {},
              "uuid": "ef9cc1c5-3756-448b-a355-0e4a90563b98",
              "parentUUID": "aa5667d7-c6e4-44e2-8ec6-a5d662715978",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return ZERO when the source set does not exist",
              "fullTitle": "sinterstore-command test should return ZERO when the source set does not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'dest', 'src']);\n        chai_1.expect(response).to.eql(0);\n    })",
              "err": {},
              "uuid": "aa51f3ff-ea1a-4445-b628-abe6462e6cc2",
              "parentUUID": "aa5667d7-c6e4-44e2-8ec6-a5d662715978",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overwrite the destination and return the number of keys copied",
              "fullTitle": "sinterstore-command test should overwrite the destination and return the number of keys copied",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c', 'd', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['set', 'key3', 'some text value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'key3', 'key1', 'key2']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'key3']);\n        chai_1.expect(response).to.eql(['c']);\n    })",
              "err": {},
              "uuid": "4ce0794a-5f68-41ac-8a4c-e911a97c06b4",
              "parentUUID": "aa5667d7-c6e4-44e2-8ec6-a5d662715978",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when one of the keys is not a set",
              "fullTitle": "sinterstore-command test should fail when one of the keys is not a set",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '1', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'key1', 'zkey']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n        response = yield common_test_1.sendCommand(client, ['set', 'skey1', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'key1', 'skey1']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "89a6f66c-c20f-4ecd-b3d4-fec3aab1b6c0",
              "parentUUID": "aa5667d7-c6e4-44e2-8ec6-a5d662715978",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ef9cc1c5-3756-448b-a355-0e4a90563b98",
            "aa51f3ff-ea1a-4445-b628-abe6462e6cc2",
            "4ce0794a-5f68-41ac-8a4c-e911a97c06b4",
            "89a6f66c-c20f-4ecd-b3d4-fec3aab1b6c0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "012d6103-49be-40e3-b6ed-f0f5e47d9460",
          "title": "srem-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/srem-command.test.ts",
          "file": "/test/resp/command/set/srem-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "srem-command test \"before all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "d0b88599-cc58-45ed-a5cd-abc1f6248aee",
              "parentUUID": "012d6103-49be-40e3-b6ed-f0f5e47d9460",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "srem-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "f394b685-b73a-434e-8c08-8e29c5ee8f97",
              "parentUUID": "012d6103-49be-40e3-b6ed-f0f5e47d9460",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "srem-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "9b08f363-d25a-4247-bbd2-01b44a41cec0",
              "parentUUID": "012d6103-49be-40e3-b6ed-f0f5e47d9460",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "srem-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "2959d97e-27d6-4630-8b56-4b37ea7a193c",
              "parentUUID": "012d6103-49be-40e3-b6ed-f0f5e47d9460",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 0 when the set does not exist",
              "fullTitle": "srem-command test should return 0 when the set does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['srem', 'set', 'member']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "3affa36c-7091-4952-8255-80a757b0778d",
              "parentUUID": "012d6103-49be-40e3-b6ed-f0f5e47d9460",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return only the number of existing keys that are removed",
              "fullTitle": "srem-command test should return only the number of existing keys that are removed",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'set', 'key1', 'key2', 'key3', 'key4']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['srem', 'set', 'key2', 'not', 'here', 'today', 'key4']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'set']);\n        chai_1.expect(response.sort()).to.eql(['key1', 'key3']);\n    })",
              "err": {},
              "uuid": "93c6541d-98ed-4fca-aee4-305a3f58711f",
              "parentUUID": "012d6103-49be-40e3-b6ed-f0f5e47d9460",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove an empty set when all members are removed",
              "fullTitle": "srem-command test should remove an empty set when all members are removed",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['srem', 'set', 'key1', 'key3']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['exists', 'set']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "2426b0b1-c161-48f6-9d67-535ad09d6c0d",
              "parentUUID": "012d6103-49be-40e3-b6ed-f0f5e47d9460",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3affa36c-7091-4952-8255-80a757b0778d",
            "93c6541d-98ed-4fca-aee4-305a3f58711f",
            "2426b0b1-c161-48f6-9d67-535ad09d6c0d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c26e00cf-f837-444f-ac1a-fbe1eb19ffe6",
          "title": "sunion-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sunion-command.test.ts",
          "file": "/test/resp/command/set/sunion-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sunion-command test \"before all\" hook",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "6388e4f2-5177-4fa3-97ab-0f464cfa6cab",
              "parentUUID": "c26e00cf-f837-444f-ac1a-fbe1eb19ffe6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sunion-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "6274a6d9-b1bc-4fec-a2c8-e0641a3f7a6f",
              "parentUUID": "c26e00cf-f837-444f-ac1a-fbe1eb19ffe6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sunion-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "f989bc16-465b-4fd4-b66f-b32a442b993a",
              "parentUUID": "c26e00cf-f837-444f-ac1a-fbe1eb19ffe6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sunion-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "7f392fc1-6c04-4305-bf3c-3006db7640b4",
              "parentUUID": "c26e00cf-f837-444f-ac1a-fbe1eb19ffe6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return EMPTY SET when the source set does not exist",
              "fullTitle": "sunion-command test should return EMPTY SET when the source set does not exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sunion', 'ary']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "352bce0b-f746-4471-b360-261eb37c99b5",
              "parentUUID": "c26e00cf-f837-444f-ac1a-fbe1eb19ffe6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the union of a single set",
              "fullTitle": "sunion-command test should return the union of a single set",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['sunion', 'key1']);\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd']);\n    })",
              "err": {},
              "uuid": "4624b2aa-4f19-412f-81ad-516ece759ede",
              "parentUUID": "c26e00cf-f837-444f-ac1a-fbe1eb19ffe6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when sunion requested againt non-set keys",
              "fullTitle": "sunion-command test should fail when sunion requested againt non-set keys",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'string-key', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sunion', 'key1', 'string-key']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "ed49e0b6-40a0-4a1e-b430-77fd6b3e55d2",
              "parentUUID": "c26e00cf-f837-444f-ac1a-fbe1eb19ffe6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the union of multiple sets",
              "fullTitle": "sunion-command test should return the union of multiple sets",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key3', 'a', 'c', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sunion', 'key1', 'key2', 'key3']);\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd', 'e']);\n    })",
              "err": {},
              "uuid": "a7e272ee-8c5b-4c39-bd47-5a97d62695f9",
              "parentUUID": "c26e00cf-f837-444f-ac1a-fbe1eb19ffe6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "352bce0b-f746-4471-b360-261eb37c99b5",
            "4624b2aa-4f19-412f-81ad-516ece759ede",
            "ed49e0b6-40a0-4a1e-b430-77fd6b3e55d2",
            "a7e272ee-8c5b-4c39-bd47-5a97d62695f9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ffa52480-a5bb-475b-abc4-15fae4c35c35",
          "title": "sunionstore-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sunionstore-command.test.ts",
          "file": "/test/resp/command/set/sunionstore-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sunionstore-command test \"before all\" hook",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "fde576a7-2a8f-47ad-b5a7-f48219517325",
              "parentUUID": "ffa52480-a5bb-475b-abc4-15fae4c35c35",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sunionstore-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "e09fc5d2-9b9a-4532-b62a-add0bfb3243f",
              "parentUUID": "ffa52480-a5bb-475b-abc4-15fae4c35c35",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sunionstore-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "97e64e46-0348-4925-aa1f-26bef9382e03",
              "parentUUID": "ffa52480-a5bb-475b-abc4-15fae4c35c35",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sunionstore-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "9e77bd97-b06d-4773-97fd-eb7adb5253ac",
              "parentUUID": "ffa52480-a5bb-475b-abc4-15fae4c35c35",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require a minimum of two parameters",
              "fullTitle": "sunionstore-command test should require a minimum of two parameters",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sunionstore', 'ary']);\n        chai_1.expect(response).to.match(/ERR wrong number of arguments for \\'sunionstore\\' command/i);\n    })",
              "err": {},
              "uuid": "866fd7b5-f880-4a76-a328-1898d407a90d",
              "parentUUID": "ffa52480-a5bb-475b-abc4-15fae4c35c35",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return ZERO when the source set does not exist",
              "fullTitle": "sunionstore-command test should return ZERO when the source set does not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sunionstore', 'dest', 'src']);\n        chai_1.expect(response).to.eql(0);\n    })",
              "err": {},
              "uuid": "02202fe5-ea24-4e54-92e0-efcf52c52e38",
              "parentUUID": "ffa52480-a5bb-475b-abc4-15fae4c35c35",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overwrite the destination and return the number of keys copied",
              "fullTitle": "sunionstore-command test should overwrite the destination and return the number of keys copied",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c', 'd', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['set', 'key3', 'some text value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sunionstore', 'key3', 'key1', 'key2']);\n        chai_1.expect(response).to.equal(5);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'key3']);\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd', 'e']);\n    })",
              "err": {},
              "uuid": "29754a27-bac1-4582-bd8d-dfc0936feb21",
              "parentUUID": "ffa52480-a5bb-475b-abc4-15fae4c35c35",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "866fd7b5-f880-4a76-a328-1898d407a90d",
            "02202fe5-ea24-4e54-92e0-efcf52c52e38",
            "29754a27-bac1-4582-bd8d-dfc0936feb21"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "65b49b15-27cc-4111-9e63-0ef7aec88652",
          "title": "z-command tests",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/z-commands.test.ts",
          "file": "/test/resp/command/sset/z-commands.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "z-command tests \"before all\" hook",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "39a0f2b8-e383-4e0c-b36a-36714c667f0d",
              "parentUUID": "65b49b15-27cc-4111-9e63-0ef7aec88652",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "z-command tests \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "d0ab93ce-cfa2-40fc-9d44-837359c22f70",
              "parentUUID": "65b49b15-27cc-4111-9e63-0ef7aec88652",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "z-command tests \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "3ee4a9b4-8ade-47ab-a15b-36aa557c7a12",
              "parentUUID": "65b49b15-27cc-4111-9e63-0ef7aec88652",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "z-command tests \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "bec83cc9-0912-4e04-b304-0ba86a0a2c7e",
              "parentUUID": "65b49b15-27cc-4111-9e63-0ef7aec88652",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should support basic operations",
              "fullTitle": "z-command tests should support basic operations",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueZkey = `key${new Date().getTime()}`;\n        let response = yield common_test_1.sendCommand(client, ['zrange', 'testkey', String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER)]);\n        chai_1.expect(response).to.eql([]);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'testkey', '14', '__proto__']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '8', '5a600e16']);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '9', '5a600e17']);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '10', '5a600e18']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zcard', uniqueZkey]);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql(['5a600e16', '8',\n            '5a600e17', '9',\n            '5a600e18', '10']);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '12', '5a600e17']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['zcount', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER)]);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER)]);\n        chai_1.expect(response.length).to.equal(3);\n        chai_1.expect(response).to.eql(['5a600e16', '5a600e18', '5a600e17']);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql(['5a600e16', '8', '5a600e18', '10', '5a600e17', '12']);\n        response = yield common_test_1.sendCommand(client, ['type', uniqueZkey]);\n        chai_1.expect(response).to.equal('zset');\n        response = yield common_test_1.sendCommand(client, ['zcount', uniqueZkey, '-Infinity', '10']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['zcount', uniqueZkey, 'Negative One', '10']);\n        chai_1.expect(response).to.equal('ReplyError: ERR min or max is not a float');\n        // report syntax error\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'with Scores']);\n        chai_1.expect(response).to.eql('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String('Number.MIN_SAFE_INTEGER'), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql('ReplyError: ERR value is not an integer or out of range');\n        // Remove members without removing keys\n        response = yield common_test_1.sendCommand(client, ['zrem', uniqueZkey, 'does not exist', '5a600e16', '5a600e18', '5a600e17']);\n        chai_1.expect(response).to.equal(3);\n        // Unexpectedly, redis removes the key when the last element is removed\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueZkey]);\n        console.log(`searched for ${uniqueZkey}`);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "9821f533-c7a3-4723-8457-5806ce1d4ef2",
              "parentUUID": "65b49b15-27cc-4111-9e63-0ef7aec88652",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should increase rank",
              "fullTitle": "z-command tests should increase rank",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueZkey = `incrkey${new Date().getTime()}`;\n        let response;\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '1', 'first']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '2', 'second']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '3', 'third']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '4', 'fourth']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, '2', 'first']);\n        chai_1.expect(response).to.equal('3');\n        // Validate zscore\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'first']);\n        // expect(response).to.equal('3');\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'second']);\n        // expect(response).to.equal('2');\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'third']);\n        // expect(response).to.equal('3');\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'fourth']);\n        // expect(response).to.equal('4');\n        //\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'first']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'second']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'third']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'fourth']);\n        chai_1.expect(response).to.equal(3);\n        // expect(response).to.match(/^ReplyError: ERR unknown command.*/);\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, '-20', 'fourth']);\n        chai_1.expect(response).to.equal('-16');\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, `-${Number.MIN_SAFE_INTEGER + 1}.${Number.MAX_SAFE_INTEGER}`, 'fourth']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not a valid float');\n        // Should create a key if it doesn't exist\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, '-20', 'fifth']);\n        chai_1.expect(response).to.equal('-20');\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql(['fifth', '-20', 'fourth', '-16', 'second', '2', 'first', '3', 'third', '3']);\n    })",
              "err": {},
              "uuid": "601ebee6-32d4-467a-adfb-4599f06496c7",
              "parentUUID": "65b49b15-27cc-4111-9e63-0ef7aec88652",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9821f533-c7a3-4723-8457-5806ce1d4ef2",
            "601ebee6-32d4-467a-adfb-4599f06496c7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 39,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a4293b8c-3a1e-454e-81e4-101d50cf5bb9",
          "title": "zadd command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zadd-command.test.ts",
          "file": "/test/resp/command/sset/zadd-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zadd command test \"before all\" hook",
              "timedOut": false,
              "duration": 49,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "79cb0dfb-9359-4097-8ff6-488d84112e4c",
              "parentUUID": "a4293b8c-3a1e-454e-81e4-101d50cf5bb9",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zadd command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "0b9a91db-ade3-4077-9ae5-75e279c78ec3",
              "parentUUID": "a4293b8c-3a1e-454e-81e4-101d50cf5bb9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zadd command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "eb07749a-7549-4c48-930c-9a56144cbf8e",
              "parentUUID": "a4293b8c-3a1e-454e-81e4-101d50cf5bb9",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zadd command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "5f7d40aa-5f7a-49aa-89de-e3a92d84fa6b",
              "parentUUID": "a4293b8c-3a1e-454e-81e4-101d50cf5bb9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require at least 3 parameters",
              "fullTitle": "zadd command test should require at least 3 parameters",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['zadd']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "9ceaafab-c9af-4f09-9087-f219aa1a8651",
              "parentUUID": "a4293b8c-3a1e-454e-81e4-101d50cf5bb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject even parameter counts",
              "fullTitle": "zadd command test should reject even parameter counts",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something', '456']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something', '456', 'another', '765']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something', '456', 'another', '765', 'test']);\n        // The \"something\" key should already exist so we only count 2 new fields\n        chai_1.expect(response).to.equal(2);\n    })",
              "err": {},
              "uuid": "f3fa46d4-4b80-4b3c-b404-fc0943a73205",
              "parentUUID": "a4293b8c-3a1e-454e-81e4-101d50cf5bb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject an attempt to store non-floatish rankings",
              "fullTitle": "zadd command test should reject an attempt to store non-floatish rankings",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '__data__', 'something']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not a valid float');\n    })",
              "err": {},
              "uuid": "1e10855f-898d-460b-b76d-41745235ef9e",
              "parentUUID": "a4293b8c-3a1e-454e-81e4-101d50cf5bb9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9ceaafab-c9af-4f09-9087-f219aa1a8651",
            "f3fa46d4-4b80-4b3c-b404-fc0943a73205",
            "1e10855f-898d-460b-b76d-41745235ef9e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8468de25-7132-48eb-8ea8-e1d46bcaf293",
          "title": "zrange-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zrange-command.test.ts",
          "file": "/test/resp/command/sset/zrange-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zrange-command test \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "f492b4cd-840d-4e75-aa52-9e842cc74a33",
              "parentUUID": "8468de25-7132-48eb-8ea8-e1d46bcaf293",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zrange-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "76d6679e-e27c-4c63-9f62-1e800e9e39ba",
              "parentUUID": "8468de25-7132-48eb-8ea8-e1d46bcaf293",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zrange-command test \"after all\" hook",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "0194969a-ab7d-45f8-8ef3-d8a34da27b41",
              "parentUUID": "8468de25-7132-48eb-8ea8-e1d46bcaf293",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zrange-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "5eaae830-fd44-455f-a274-ccc4f3b8aebe",
              "parentUUID": "8468de25-7132-48eb-8ea8-e1d46bcaf293",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should reproduce the redis documentation examples",
              "fullTitle": "zrange-command test should reproduce the redis documentation examples",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'one']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '2', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '3', 'three']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '0', '-1']);\n        chai_1.expect(response).to.eql(['one', 'two', 'three']);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '2', '3']);\n        chai_1.expect(response).to.eql(['three']);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '-2', '-1']);\n        chai_1.expect(response).to.eql(['two', 'three']);\n    })",
              "err": {},
              "uuid": "91818be1-06e8-4663-a93c-64cec48f919a",
              "parentUUID": "8468de25-7132-48eb-8ea8-e1d46bcaf293",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should also reproduce the second documented example",
              "fullTitle": "zrange-command test should also reproduce the second documented example",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '0', '1', 'withscores']);\n        chai_1.expect(response).to.eql(['one', '1', 'two', '2']);\n    })",
              "err": {},
              "uuid": "693774c0-404f-40b5-99a9-49ca0d01e687",
              "parentUUID": "8468de25-7132-48eb-8ea8-e1d46bcaf293",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "91818be1-06e8-4663-a93c-64cec48f919a",
            "693774c0-404f-40b5-99a9-49ca0d01e687"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "89d0f9a3-3c77-4f3b-b68a-ec944d978ce5",
          "title": "zrank-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zrank-command.test.ts",
          "file": "/test/resp/command/sset/zrank-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zrank-command test \"before all\" hook",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "e9d5fe29-a590-4e6b-beaa-fdccbab11c34",
              "parentUUID": "89d0f9a3-3c77-4f3b-b68a-ec944d978ce5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zrank-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "965127ba-dd27-4304-ba0b-95aa77469826",
              "parentUUID": "89d0f9a3-3c77-4f3b-b68a-ec944d978ce5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zrank-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "6e1c7ec6-25b7-40f2-a83f-3d955dc1aa0c",
              "parentUUID": "89d0f9a3-3c77-4f3b-b68a-ec944d978ce5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zrank-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "bbb8db78-a98f-4b45-91a2-2e5770403d80",
              "parentUUID": "89d0f9a3-3c77-4f3b-b68a-ec944d978ce5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when the ZSET does not exist",
              "fullTitle": "zrank-command test should return NIL when the ZSET does not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrank', 'zset', 'member']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "b2ac26b1-9c07-48cd-a642-ae0865de2405",
              "parentUUID": "89d0f9a3-3c77-4f3b-b68a-ec944d978ce5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NIL when the ZSET exists but the key does not",
              "fullTitle": "zrank-command test should return NIL when the ZSET exists but the key does not",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '23.3', 'member']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrank', 'zset', 'membre']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['exists', 'zset']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "a0121fa5-04a5-4112-a83e-0fea20b5b728",
              "parentUUID": "89d0f9a3-3c77-4f3b-b68a-ec944d978ce5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b2ac26b1-9c07-48cd-a642-ae0865de2405",
            "a0121fa5-04a5-4112-a83e-0fea20b5b728"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9ee3226f-9921-492c-b868-07f271321669",
          "title": "zrem-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zrem-command.test.ts",
          "file": "/test/resp/command/sset/zrem-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zrem-command test \"before all\" hook",
              "timedOut": false,
              "duration": 24,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "9c0a350f-0ee1-47e1-a896-08c31a8a01d8",
              "parentUUID": "9ee3226f-9921-492c-b868-07f271321669",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zrem-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "35b5209e-6786-4e16-a640-b0c1820a5d06",
              "parentUUID": "9ee3226f-9921-492c-b868-07f271321669",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zrem-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "d1204313-7bf7-4ab4-aeae-e20df5838920",
              "parentUUID": "9ee3226f-9921-492c-b868-07f271321669",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zrem-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "473f7dcb-d238-406b-a9c8-75e22250ffce",
              "parentUUID": "9ee3226f-9921-492c-b868-07f271321669",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should remove a key from a sorted set",
              "fullTitle": "zrem-command test should remove a key from a sorted set",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'one']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '2', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '3', 'three']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrem', 'zset', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '0', '-1', 'withscores']);\n        chai_1.expect(response).to.eql(['one', '1', 'three', '3']);\n    })",
              "err": {},
              "uuid": "87172f3e-4505-483a-b152-f3c763b42f83",
              "parentUUID": "9ee3226f-9921-492c-b868-07f271321669",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87172f3e-4505-483a-b152-f3c763b42f83"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 45,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6cd78613-4fc9-4a41-b6fb-ca3aa85aeb46",
          "title": "getset-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/getset-command.test.ts",
          "file": "/test/resp/command/string/getset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "getset-command test \"before all\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "e9d82dfb-20b0-44de-8878-0667816b12ad",
              "parentUUID": "6cd78613-4fc9-4a41-b6fb-ca3aa85aeb46",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "getset-command test \"before each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "2ab3752a-6298-40ea-9714-b206805e17fd",
              "parentUUID": "6cd78613-4fc9-4a41-b6fb-ca3aa85aeb46",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "getset-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "34e6a93b-1c2b-4404-8537-3e74b5076835",
              "parentUUID": "6cd78613-4fc9-4a41-b6fb-ca3aa85aeb46",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "getset-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "02cf69b2-fc86-4ea3-95c9-4170f6e6fedb",
              "parentUUID": "6cd78613-4fc9-4a41-b6fb-ca3aa85aeb46",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when the original key does not exist",
              "fullTitle": "getset-command test should report NIL when the original key does not exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['getset', uniqueKey, '0']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "180f8c92-0cd1-4a9d-a79d-727597d88a7b",
              "parentUUID": "6cd78613-4fc9-4a41-b6fb-ca3aa85aeb46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report the previous value of the key",
              "fullTitle": "getset-command test should report the previous value of the key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['getset', uniqueKey, 'ninety nine']);\n        chai_1.expect(response).to.equal('0');\n        response = yield common_test_1.sendCommand(client, ['getset', uniqueKey, 'nothing']);\n        chai_1.expect(response).to.equal('ninety nine');\n    })",
              "err": {},
              "uuid": "4e2cd5c6-fac7-4780-8356-ab20729ee4c6",
              "parentUUID": "6cd78613-4fc9-4a41-b6fb-ca3aa85aeb46",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "180f8c92-0cd1-4a9d-a79d-727597d88a7b",
            "4e2cd5c6-fac7-4780-8356-ab20729ee4c6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0fe7ec08-93c5-42d3-8a51-c0acbf5f8458",
          "title": "incr/decr command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/incr-command.test.ts",
          "file": "/test/resp/command/string/incr-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "incr/decr command test \"before all\" hook",
              "timedOut": false,
              "duration": 29,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a millisecond TTL to validate incr respects TTL\n    common_test_1.sendCommand(new net.Socket(), ['set', 'ttlkey', '100', 'PX', '3'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
              "uuid": "9c8de4f9-63cf-4a9f-bf34-d7a5a1b9def0",
              "parentUUID": "0fe7ec08-93c5-42d3-8a51-c0acbf5f8458",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "incr/decr command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "197398db-9911-43dc-becc-d158f6ad60e7",
              "parentUUID": "0fe7ec08-93c5-42d3-8a51-c0acbf5f8458",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "incr/decr command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "ddbdac0d-29dd-46b6-81d7-a542bb05b362",
              "parentUUID": "0fe7ec08-93c5-42d3-8a51-c0acbf5f8458",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "incr/decr command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "af8cf190-5c68-4a84-8e0c-2f471462fa58",
              "parentUUID": "0fe7ec08-93c5-42d3-8a51-c0acbf5f8458",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ONE when incr called against unknown key",
              "fullTitle": "incr/decr command test should report ONE when incr called against unknown key",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['incr', 'incr-key']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "97730dfc-f7c7-4d9a-85d2-1ffb3b24c2d7",
              "parentUUID": "0fe7ec08-93c5-42d3-8a51-c0acbf5f8458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incr/decr command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['get', 'incr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('1');\n    })",
              "err": {},
              "uuid": "97cc9f29-aa95-4a8f-911a-76c47255e917",
              "parentUUID": "0fe7ec08-93c5-42d3-8a51-c0acbf5f8458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incr/decr command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            response = yield common_test_1.sendCommand(new net.Socket(), ['set', 'incr-key', '9007199254740990']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(new net.Socket(), ['incr', 'incr-key']);\n            chai_1.expect(response).to.equal(Number.MAX_SAFE_INTEGER);\n            response = yield common_test_1.sendCommand(new net.Socket(), ['incr', 'incr-key']);\n            chai_1.expect(response).to.equal('ReplyError: ERR increment or decrement would overflow');\n        }\n    })",
              "err": {},
              "uuid": "5f2fd9b3-2830-47c8-9993-24e512c6387b",
              "parentUUID": "0fe7ec08-93c5-42d3-8a51-c0acbf5f8458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report -1 when decr called against unknown key",
              "fullTitle": "incr/decr command test should report -1 when decr called against unknown key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['decr', 'decr-key']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(-1);\n    })",
              "err": {},
              "uuid": "4cffcf1d-4ce1-4a78-a3d2-30147c336573",
              "parentUUID": "0fe7ec08-93c5-42d3-8a51-c0acbf5f8458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incr/decr command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['get', 'decr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('-1');\n    })",
              "err": {},
              "uuid": "5a7344ad-243e-47ab-be45-f3163e366d68",
              "parentUUID": "0fe7ec08-93c5-42d3-8a51-c0acbf5f8458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incr/decr command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            let response = yield common_test_1.sendCommand(new net.Socket(), ['set', 'decr-key', '-9007199254740990']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(new net.Socket(), ['decr', 'decr-key']);\n            chai_1.expect(response).to.equal(Number.MIN_SAFE_INTEGER);\n            response = yield common_test_1.sendCommand(new net.Socket(), ['decr', 'decr-key']);\n            chai_1.expect(response).to.equal('ReplyError: ERR increment or decrement would overflow');\n        }\n    })",
              "err": {},
              "uuid": "a251f49e-026f-48dd-835d-ba75af7fdb8a",
              "parentUUID": "0fe7ec08-93c5-42d3-8a51-c0acbf5f8458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect TTL",
              "fullTitle": "incr/decr command test should respect TTL",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['get', 'ttlkey']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "6069a9b3-6b59-4eac-a87c-55124ef114a5",
              "parentUUID": "0fe7ec08-93c5-42d3-8a51-c0acbf5f8458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to increment a HASH value",
              "fullTitle": "incr/decr command test should fail to increment a HASH value",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `test-incr-${new Date().getTime()}`;\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['incr', uniqueKey]);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "d23a9505-0e88-488e-9bfd-f627df626990",
              "parentUUID": "0fe7ec08-93c5-42d3-8a51-c0acbf5f8458",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "97730dfc-f7c7-4d9a-85d2-1ffb3b24c2d7",
            "97cc9f29-aa95-4a8f-911a-76c47255e917",
            "5f2fd9b3-2830-47c8-9993-24e512c6387b",
            "4cffcf1d-4ce1-4a78-a3d2-30147c336573",
            "5a7344ad-243e-47ab-be45-f3163e366d68",
            "a251f49e-026f-48dd-835d-ba75af7fdb8a",
            "6069a9b3-6b59-4eac-a87c-55124ef114a5",
            "d23a9505-0e88-488e-9bfd-f627df626990"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 44,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f207cee7-6e2a-4f7f-9eb9-ce694d75770f",
          "title": "incrby/decrby command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/incrby-command.test.ts",
          "file": "/test/resp/command/string/incrby-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "incrby/decrby command test \"before all\" hook",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a millisecond TTL to validate incrby respects TTL\n    common_test_1.sendCommand(client, ['set', 'ttlkey', '100', 'PX', '3'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
              "uuid": "39de5f03-e3c7-4086-9452-e956ee8d849f",
              "parentUUID": "f207cee7-6e2a-4f7f-9eb9-ce694d75770f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "incrby/decrby command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "d3a29804-3c26-4e0f-b7f9-e9118add9bb8",
              "parentUUID": "f207cee7-6e2a-4f7f-9eb9-ce694d75770f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "incrby/decrby command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "d9fa15ea-b3a6-4b7a-b0dc-0d9412bbfad8",
              "parentUUID": "f207cee7-6e2a-4f7f-9eb9-ce694d75770f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "incrby/decrby command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "30279559-2cd5-46a6-8edb-c1a194235385",
              "parentUUID": "f207cee7-6e2a-4f7f-9eb9-ce694d75770f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report the INCREMENT when incrby called against non-existing key",
              "fullTitle": "incrby/decrby command test should report the INCREMENT when incrby called against non-existing key",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['incrby', 'incr-key', '10']);\n        chai_1.expect(response).to.be.a('number');\n        // This is how redis behaves\n        chai_1.expect(response).to.equal(10);\n    })",
              "err": {},
              "uuid": "627433d9-833f-4bfb-8f2c-2db4dc72c99f",
              "parentUUID": "f207cee7-6e2a-4f7f-9eb9-ce694d75770f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incrby/decrby command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['get', 'incr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('10');\n    })",
              "err": {},
              "uuid": "a68168d5-1fcf-476c-95a2-abbbb9addcf8",
              "parentUUID": "f207cee7-6e2a-4f7f-9eb9-ce694d75770f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incrby/decrby command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            response = yield common_test_1.sendCommand(client, ['set', 'incr-key', '9007199254740981']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['incrby', 'incr-key', '10']);\n            chai_1.expect(response).to.equal(Number.MAX_SAFE_INTEGER);\n            response = yield common_test_1.sendCommand(client, ['incrby', 'incr-key', '110']);\n            chai_1.expect(response).to.equal('ReplyError: ERR increment or decrement would overflow');\n        }\n    })",
              "err": {},
              "uuid": "f769cb9a-247b-4aac-b75a-8a9d6b2be990",
              "parentUUID": "f207cee7-6e2a-4f7f-9eb9-ce694d75770f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report the NEGATIVE increment when decrby called against unknown key",
              "fullTitle": "incrby/decrby command test should report the NEGATIVE increment when decrby called against unknown key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['decrby', 'decr-key', '12']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(-12);\n    })",
              "err": {},
              "uuid": "7c69d0d1-661f-455d-9b33-8731b777329a",
              "parentUUID": "f207cee7-6e2a-4f7f-9eb9-ce694d75770f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support negative increment and positive decrement",
              "fullTitle": "incrby/decrby command test should support negative increment and positive decrement",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['incrby', 'negincr', '-12']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(-12);\n        response = yield common_test_1.sendCommand(client, ['decrby', 'negincr', '-24']);\n        chai_1.expect(response).to.equal(12);\n    })",
              "err": {},
              "uuid": "2b4abe73-8788-40cc-a3db-96eb5888c323",
              "parentUUID": "f207cee7-6e2a-4f7f-9eb9-ce694d75770f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incrby/decrby command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['get', 'decr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('-12');\n    })",
              "err": {},
              "uuid": "3ff955a4-a655-4f63-a62d-2eee9cafcd8a",
              "parentUUID": "f207cee7-6e2a-4f7f-9eb9-ce694d75770f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incrby/decrby command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            response = yield common_test_1.sendCommand(client, ['set', 'decr-key', '-9007199254740981']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['decrby', 'decr-key', '10']);\n            chai_1.expect(response).to.equal(Number.MIN_SAFE_INTEGER);\n            // This does not seem to be exact\n            // response = await sendCommand(client, ['decrby', 'decr-key', String(Number.MAX_SAFE_INTEGER)]);\n            // expect(response).to.equal('ReplyError: Error: increment or decrement would overflow');\n        }\n    })",
              "err": {},
              "uuid": "9365e87e-5b9a-4ab0-89d5-e50ef916498e",
              "parentUUID": "f207cee7-6e2a-4f7f-9eb9-ce694d75770f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect TTL",
              "fullTitle": "incrby/decrby command test should respect TTL",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['get', 'ttlkey']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "d019a404-f6a1-4785-9618-933cb7aa63d9",
              "parentUUID": "f207cee7-6e2a-4f7f-9eb9-ce694d75770f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to increment a HASH value",
              "fullTitle": "incrby/decrby command test should fail to increment a HASH value",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `test-incr-${new Date().getTime()}`;\n        let response = yield common_test_1.sendCommand(client, ['hset', uniqueKey, 'one', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['incrby', uniqueKey, '12']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "e6d36e15-da3e-4573-85b9-0299acc2f58c",
              "parentUUID": "f207cee7-6e2a-4f7f-9eb9-ce694d75770f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "627433d9-833f-4bfb-8f2c-2db4dc72c99f",
            "a68168d5-1fcf-476c-95a2-abbbb9addcf8",
            "f769cb9a-247b-4aac-b75a-8a9d6b2be990",
            "7c69d0d1-661f-455d-9b33-8731b777329a",
            "2b4abe73-8788-40cc-a3db-96eb5888c323",
            "3ff955a4-a655-4f63-a62d-2eee9cafcd8a",
            "9365e87e-5b9a-4ab0-89d5-e50ef916498e",
            "d019a404-f6a1-4785-9618-933cb7aa63d9",
            "e6d36e15-da3e-4573-85b9-0299acc2f58c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 29,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e820e5bb-edd7-4d16-aa5c-59e35ca56b24",
          "title": "mget-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/mget-command.test.ts",
          "file": "/test/resp/command/string/mget-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "mget-command test \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "95e1b9d7-6330-42d1-ba45-03c2e81d69fd",
              "parentUUID": "e820e5bb-edd7-4d16-aa5c-59e35ca56b24",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "mget-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "7252634e-1e22-4e07-bc0c-d7d5c6f62ff2",
              "parentUUID": "e820e5bb-edd7-4d16-aa5c-59e35ca56b24",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "mget-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "0c2ac443-e096-4f14-9b1f-3243bebb7212",
              "parentUUID": "e820e5bb-edd7-4d16-aa5c-59e35ca56b24",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "mget-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "c2f5c9a2-7f39-46d4-a6f4-f9fbb196a4e0",
              "parentUUID": "e820e5bb-edd7-4d16-aa5c-59e35ca56b24",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when the key does not exist",
              "fullTitle": "mget-command test should return NIL when the key does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mget', 'zset', 'member']);\n        chai_1.expect(response).to.eql([null, null]);\n    })",
              "err": {},
              "uuid": "d39cf1ae-bead-46b3-b416-69d77136c977",
              "parentUUID": "e820e5bb-edd7-4d16-aa5c-59e35ca56b24",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return multiple values for string keys as requested",
              "fullTitle": "mget-command test should return multiple values for string keys as requested",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mset', 'key1', '1', 'key2', '2', 'key3', '3']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['mget', 'key2', 'key1', 'noneya', 'key3']);\n        chai_1.expect(response).to.eql(['2', '1', null, '3']);\n    })",
              "err": {},
              "uuid": "30a94c03-e7d8-4cc4-88cd-0d531c954b44",
              "parentUUID": "e820e5bb-edd7-4d16-aa5c-59e35ca56b24",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NIL for ZSET, LIST, and HASH types as well",
              "fullTitle": "mget-command test should return NIL for ZSET, LIST, and HASH types as well",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'member']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'list', 'value']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['hset', 'hash', 'field', 'value']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['mget', 'key2', 'key1', 'list', 'key3', 'hash', 'zset']);\n        chai_1.expect(response).to.eql(['2', '1', null, '3', null, null]);\n    })",
              "err": {},
              "uuid": "c468c0dd-30d7-4991-a22c-25243a62af35",
              "parentUUID": "e820e5bb-edd7-4d16-aa5c-59e35ca56b24",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d39cf1ae-bead-46b3-b416-69d77136c977",
            "30a94c03-e7d8-4cc4-88cd-0d531c954b44",
            "c468c0dd-30d7-4991-a22c-25243a62af35"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8df34572-890b-43ac-8855-2cf89008c66a",
          "title": "mset-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/mset-command.test.ts",
          "file": "/test/resp/command/string/mset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "mset-command test \"before all\" hook",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "0e96f2dd-6d4c-4033-8a7a-323b2bc2258e",
              "parentUUID": "8df34572-890b-43ac-8855-2cf89008c66a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "mset-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "26b3d8ee-d488-46ef-b854-28f54d3b9b84",
              "parentUUID": "8df34572-890b-43ac-8855-2cf89008c66a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "mset-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "e7a2eb2a-b904-44d8-a548-5657074fdbf6",
              "parentUUID": "8df34572-890b-43ac-8855-2cf89008c66a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "mset-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "472e98b4-2ccb-4570-9ea6-c883dd43b88e",
              "parentUUID": "8df34572-890b-43ac-8855-2cf89008c66a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create multiple keys at once",
              "fullTitle": "mset-command test should create multiple keys at once",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mset', 'key1', 'Hello', 'key2', 'world']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'key1']);\n        chai_1.expect(response).to.equal('Hello');\n        response = yield common_test_1.sendCommand(client, ['get', 'key2']);\n        chai_1.expect(response).to.equal('world');\n    })",
              "err": {},
              "uuid": "57ded181-4f19-4b75-baec-4fc4fdc8c97e",
              "parentUUID": "8df34572-890b-43ac-8855-2cf89008c66a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only accept an even number of parameters",
              "fullTitle": "mset-command test should only accept an even number of parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['msEt', 'wrong', 'number', 'of']);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for MSET/i);\n    })",
              "err": {},
              "uuid": "694fd7f4-4ec6-4cd3-b360-bf593ad9aba9",
              "parentUUID": "8df34572-890b-43ac-8855-2cf89008c66a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "57ded181-4f19-4b75-baec-4fc4fdc8c97e",
            "694fd7f4-4ec6-4cd3-b360-bf593ad9aba9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a5e83962-a3b8-48a1-8b60-cae0a6018113",
          "title": "set-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/set-command.test.ts",
          "file": "/test/resp/command/string/set-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "set-command test \"before all\" hook",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "aa607c60-28b8-42e4-9ced-338c267a171c",
              "parentUUID": "a5e83962-a3b8-48a1-8b60-cae0a6018113",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "set-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "78e305c8-b4c1-4e01-8da4-b4361931df3d",
              "parentUUID": "a5e83962-a3b8-48a1-8b60-cae0a6018113",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "set-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "5f5f3bb1-541d-4623-a369-6666b7d899ee",
              "parentUUID": "a5e83962-a3b8-48a1-8b60-cae0a6018113",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "set-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "d57e91b5-69ed-473d-a9d6-86f43e834f48",
              "parentUUID": "a5e83962-a3b8-48a1-8b60-cae0a6018113",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should allow us to set a several second ttl",
              "fullTitle": "set-command test should allow us to set a several second ttl",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // During local testing there are 8 milliseconds from put to get\n        response = yield common_test_1.sendCommand(client, ['set', 'TTLtest', 'key', 'EX', '1']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "b1230e95-c2e8-40f8-8a0c-31dc7f523e02",
              "parentUUID": "a5e83962-a3b8-48a1-8b60-cae0a6018113",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke NX after XX",
              "fullTitle": "set-command test should NOT allow SET to invoke NX after XX",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'XX', 'NX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "edf68c79-9145-4a19-a6fd-b0a6e33e2f2c",
              "parentUUID": "a5e83962-a3b8-48a1-8b60-cae0a6018113",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke XX after NX",
              "fullTitle": "set-command test should NOT allow SET to invoke XX after NX",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'NX', 'XX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "95df5f1f-c93e-4877-b95b-52d9098fc3cc",
              "parentUUID": "a5e83962-a3b8-48a1-8b60-cae0a6018113",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return nil when SET invoked with XX on a key that doesn't exist",
              "fullTitle": "set-command test should return nil when SET invoked with XX on a key that doesn't exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `TEST${new Date().getTime()}`;\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'key', 'XX']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "d198ea6b-3fc6-418a-85d1-23c53772bc10",
              "parentUUID": "a5e83962-a3b8-48a1-8b60-cae0a6018113",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return OK when SET invoked with XX on a key that DOES exist",
              "fullTitle": "set-command test should return OK when SET invoked with XX on a key that DOES exist",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `TEST${new Date().getTime()}`;\n        // set the key with NX first to validate that functionality\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'key', 'NX']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'new value', 'XX']);\n        chai_1.expect(response).to.equal('OK');\n        // Now validate that the key is what we said last\n        response = yield common_test_1.sendCommand(client, ['get', uniqueKey]);\n        chai_1.expect(response).to.equal('new value');\n    })",
              "err": {},
              "uuid": "8b563145-ec0f-40e1-aa51-1f732de9f3a9",
              "parentUUID": "a5e83962-a3b8-48a1-8b60-cae0a6018113",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke EX and PX simultaneously",
              "fullTitle": "set-command test should NOT allow SET to invoke EX and PX simultaneously",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Note: Our behavior is different from redis.  This error is 'wrong number of args'\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'EX', '100', 'PX', '100']);\n        chai_1.expect(response).to.match(/^ReplyError: ERR syntax error/);\n    })",
              "err": {},
              "uuid": "1426a42f-32aa-4025-8742-ea27c94fac75",
              "parentUUID": "a5e83962-a3b8-48a1-8b60-cae0a6018113",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow us to set a millisecond ttl",
              "fullTitle": "set-command test should allow us to set a millisecond ttl",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // During local teseting there are 8 milliseconds from put to get\n        response = yield common_test_1.sendCommand(client, ['set', 'MILLItest', 'key', 'PX', '1']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "be2570f1-e0c5-4237-ab19-e56553cf1ce3",
              "parentUUID": "a5e83962-a3b8-48a1-8b60-cae0a6018113",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prove that the one second TTL has expired",
              "fullTitle": "set-command test should prove that the one second TTL has expired",
              "timedOut": false,
              "duration": 1004,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "setTimeout(() => {\n    common_test_1.sendCommand(client, ['get', 'TTLtest'])\n        .then((responseGet) => {\n        chai_1.expect(responseGet).to.equal(null);\n        done();\n    });\n}, 1000);",
              "err": {},
              "uuid": "5a8eb85c-8b48-4dad-958c-9cb3c7a58ed1",
              "parentUUID": "a5e83962-a3b8-48a1-8b60-cae0a6018113",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not accept unknown parameters",
              "fullTitle": "set-command test should not accept unknown parameters",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'Q']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "39ddc3f8-f351-4128-92bd-1ce2017f041d",
              "parentUUID": "a5e83962-a3b8-48a1-8b60-cae0a6018113",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke PX after EX",
              "fullTitle": "set-command test should NOT allow SET to invoke PX after EX",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'EX', '100', 'PX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "c7c4090a-9b72-4761-a488-97bbc126cf3d",
              "parentUUID": "a5e83962-a3b8-48a1-8b60-cae0a6018113",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke EX after PX",
              "fullTitle": "set-command test should NOT allow SET to invoke EX after PX",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'PX', '100', 'EX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "f1ea6866-2375-4371-86f8-2bf33c3f32c4",
              "parentUUID": "a5e83962-a3b8-48a1-8b60-cae0a6018113",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow a TTL less than 1ms",
              "fullTitle": "set-command test should not allow a TTL less than 1ms",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'MILLItest', 'key', 'PX', '0']);\n        chai_1.expect(response).to.equal('ReplyError: ERR invalid expire time in set');\n    })",
              "err": {},
              "uuid": "ccb7f200-e375-4b94-9ea6-226eee184b6d",
              "parentUUID": "a5e83962-a3b8-48a1-8b60-cae0a6018113",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prove that the millisecond TTL has expired",
              "fullTitle": "set-command test should prove that the millisecond TTL has expired",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "setTimeout(() => {\n    common_test_1.sendCommand(client, ['get', 'MILLItest'])\n        .then((responseGet) => {\n        chai_1.expect(responseGet).to.equal(null);\n        done();\n    });\n}, 10);",
              "err": {},
              "uuid": "46918b24-834c-4a6a-acf6-ff2fa448563e",
              "parentUUID": "a5e83962-a3b8-48a1-8b60-cae0a6018113",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b1230e95-c2e8-40f8-8a0c-31dc7f523e02",
            "edf68c79-9145-4a19-a6fd-b0a6e33e2f2c",
            "95df5f1f-c93e-4877-b95b-52d9098fc3cc",
            "d198ea6b-3fc6-418a-85d1-23c53772bc10",
            "8b563145-ec0f-40e1-aa51-1f732de9f3a9",
            "1426a42f-32aa-4025-8742-ea27c94fac75",
            "be2570f1-e0c5-4237-ab19-e56553cf1ce3",
            "5a8eb85c-8b48-4dad-958c-9cb3c7a58ed1",
            "39ddc3f8-f351-4128-92bd-1ce2017f041d",
            "c7c4090a-9b72-4761-a488-97bbc126cf3d",
            "f1ea6866-2375-4371-86f8-2bf33c3f32c4",
            "ccb7f200-e375-4b94-9ea6-226eee184b6d",
            "46918b24-834c-4a6a-acf6-ff2fa448563e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1047,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d2d93428-f134-443f-84e2-531c7b32bc1c",
          "title": "setnx-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/setnx-command.test.ts",
          "file": "/test/resp/command/string/setnx-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "setnx-command test \"before all\" hook",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "1b3280d3-d9ff-44f3-b3a5-850e9660870b",
              "parentUUID": "d2d93428-f134-443f-84e2-531c7b32bc1c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "setnx-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "ded730aa-7145-4d51-8780-5f93d1499d5e",
              "parentUUID": "d2d93428-f134-443f-84e2-531c7b32bc1c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "setnx-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "2d9b8304-68c6-4e96-ad91-cccbb6f60a36",
              "parentUUID": "d2d93428-f134-443f-84e2-531c7b32bc1c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "setnx-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "27eddcac-65e4-40e3-aacc-c82a077b9e36",
              "parentUUID": "d2d93428-f134-443f-84e2-531c7b32bc1c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 1 when the key does not exist",
              "fullTitle": "setnx-command test should return 1 when the key does not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['setnx', 'test', 'key']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "a99b1a16-0bab-4fd0-8a90-089739ceb98d",
              "parentUUID": "d2d93428-f134-443f-84e2-531c7b32bc1c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the key already exists",
              "fullTitle": "setnx-command test should return 0 when the key already exists",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['setnx', 'test', 'other']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['get', 'test']);\n        chai_1.expect(response).to.equal('key');\n    })",
              "err": {},
              "uuid": "5c686f26-5c13-4b7c-afef-dc851cfb2bb5",
              "parentUUID": "d2d93428-f134-443f-84e2-531c7b32bc1c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a99b1a16-0bab-4fd0-8a90-089739ceb98d",
            "5c686f26-5c13-4b7c-afef-dc851cfb2bb5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a5cae214-6556-4858-a5b0-c955097f8dba",
          "title": "data-type test",
          "fullFile": "/home/lane/git/redis/test/resp/data/data-type.test.ts",
          "file": "/test/resp/data/data-type.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "data-type test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "4fe4f804-8814-41da-b269-f2d08ffbc80f",
              "parentUUID": "a5cae214-6556-4858-a5b0-c955097f8dba",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "data-type test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "b85eddc1-7a32-4b28-b4b5-702ea4991fa6",
              "parentUUID": "a5cae214-6556-4858-a5b0-c955097f8dba",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "data-type test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "f6d70e85-3b40-4fdb-91e5-a349849620fc",
              "parentUUID": "a5cae214-6556-4858-a5b0-c955097f8dba",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should enumerate data-types",
              "fullTitle": "data-type test should enumerate data-types",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        chai_1.expect(data_type_1.DataType.NONE).to.equal('none');\n        chai_1.expect(data_type_1.DataType.STRING).to.equal('string');\n        chai_1.expect(data_type_1.DataType.LIST).to.equal('list');\n        chai_1.expect(data_type_1.DataType.SET).to.equal('set');\n        chai_1.expect(data_type_1.DataType.ZSET).to.equal('zset');\n        chai_1.expect(data_type_1.DataType.HASH).to.equal('hash');\n        chai_1.expect(Object.keys(data_type_1.DataType).length).to.equal(6);\n    })",
              "err": {},
              "uuid": "f90f6788-269e-4be4-9f69-00301571e6ba",
              "parentUUID": "a5cae214-6556-4858-a5b0-c955097f8dba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f90f6788-269e-4be4-9f69-00301571e6ba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "855a656c-896d-43ee-9cb3-3a9b0f963a53",
          "title": "sorted-set test",
          "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
          "file": "/test/resp/data/sorted-set.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "sorted-set test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();\nss = new sorted_set_1.SortedSet();\nz = new Z();",
              "err": {},
              "uuid": "a7ad8052-54c8-4386-af1d-68d5f1255101",
              "parentUUID": "855a656c-896d-43ee-9cb3-3a9b0f963a53",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sorted-set test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "a83ac8f5-21cd-4be8-b3cc-4e110f11e2ba",
              "parentUUID": "855a656c-896d-43ee-9cb3-3a9b0f963a53",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sorted-set test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "5c2621cc-1c9c-462a-b2f9-6f726bb03c1a",
              "parentUUID": "855a656c-896d-43ee-9cb3-3a9b0f963a53",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should instantiate",
              "fullTitle": "sorted-set test should instantiate",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        chai_1.expect(z.constructor.name).to.equal('Z');\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(ss.constructor.name).to.equal('SortedSet');\n    })",
              "err": {},
              "uuid": "0134d7d2-fc5a-4048-a5c9-bce26d106ba1",
              "parentUUID": "855a656c-896d-43ee-9cb3-3a9b0f963a53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add, get, and delete an entry",
              "fullTitle": "sorted-set test should add, get, and delete an entry",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', 1);\n        chai_1.expect(added).to.equal(null);\n        added = ss.add('test', 1);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(z.keys().length).to.equal(1);\n        chai_1.expect(ss.keys().length).to.equal(1);\n        let item = z.get('test');\n        chai_1.expect(item.constructor.name).to.equal('Number');\n        item = ss.get('test');\n        chai_1.expect(item.constructor.name).to.equal('Number');\n        z.del('test');\n        chai_1.expect(z.keys().length).to.equal(0);\n        ss.del('test');\n        chai_1.expect(ss.keys().length).to.equal(0);\n    })",
              "err": {},
              "uuid": "0a59a370-1de1-4010-b937-8fd8af332693",
              "parentUUID": "855a656c-896d-43ee-9cb3-3a9b0f963a53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw when attempting to add __proto__ key",
              "fullTitle": "sorted-set test should throw when attempting to add __proto__ key",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(() => {\n            z.add('__proto__', 0);\n        }).to.throw();\n        // expect(() => {\n        //   ss.add('__proto__', 0)\n        // }).to.throw();\n    })",
              "err": {},
              "uuid": "86c07628-93eb-45de-87d9-39203f8155e0",
              "parentUUID": "855a656c-896d-43ee-9cb3-3a9b0f963a53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add an undefined or null score",
              "fullTitle": "sorted-set test should not add an undefined or null score",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', null);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(z.keys().length).to.equal(0);\n        added = z.add('test', undefined);\n        chai_1.expect(z.keys().length).to.equal(0);\n        // Typescript prevents adding null\n        // added = ss.add('test', null);\n        // expect(added).to.equal(null);\n        // expect(ss.keys().length).to.equal(0);\n        // added = ss.add('test', undefined);\n        // expect(z.keys().length).to.equal(0);\n    })",
              "err": {},
              "uuid": "56e15e5a-4f5d-4a6a-9270-c4571e23b5fa",
              "parentUUID": "855a656c-896d-43ee-9cb3-3a9b0f963a53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not duplicate key/value pairs",
              "fullTitle": "sorted-set test should not duplicate key/value pairs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', 123);\n        chai_1.expect(added).to.equal(null); // This is weird\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = z.add('test', 123);\n        chai_1.expect(added).to.equal(123); // and weirder\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = ss.add('test', 123);\n        chai_1.expect(added).to.equal(null); // This is weird\n        chai_1.expect(ss.keys().length).to.equal(1);\n        added = ss.add('test', 123);\n        chai_1.expect(added).to.equal(123); // and weirder\n        chai_1.expect(ss.keys().length).to.equal(1);\n    })",
              "err": {},
              "uuid": "4953fd20-23dc-40b9-a95c-b6d68a25dcc7",
              "parentUUID": "855a656c-896d-43ee-9cb3-3a9b0f963a53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the old rank when replacing a key",
              "fullTitle": "sorted-set test should return the old rank when replacing a key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', 123);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = z.add('test', 321);\n        chai_1.expect(added).to.equal(123);\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = z.get('test');\n        chai_1.expect(added).to.equal(321);\n        added = ss.add('test', 123);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(ss.keys().length).to.equal(1);\n        added = ss.add('test', 321);\n        chai_1.expect(added).to.equal(123);\n        chai_1.expect(ss.keys().length).to.equal(1);\n        added = ss.get('test');\n        chai_1.expect(added).to.equal(321);\n    })",
              "err": {},
              "uuid": "751aa671-2a2e-488a-b46e-5dfee5734535",
              "parentUUID": "855a656c-896d-43ee-9cb3-3a9b0f963a53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a value when adding at least 32 values (I think - it is difficult to tell)",
              "fullTitle": "sorted-set test should return a value when adding at least 32 values (I think - it is difficult to tell)",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "16f4e4f1-2cba-4a5c-b20d-669b24c1a567",
              "parentUUID": "855a656c-896d-43ee-9cb3-3a9b0f963a53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "fullTitle": "sorted-set test should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(z.add('Terminator', 8.0)).to.equal(null); // => null\n        chai_1.expect(z.add('District 9', 8.0)).to.equal(null); // => null\n        chai_1.expect(z.add('Ex Machina', 0.7)).to.equal(null); // => null\n        chai_1.expect(z.add('Ex Machina', 7.7)).to.equal(0.7); // => 0.7\n        // alias\n        chai_1.expect(z.set('The Matrix', 8.7)).to.equal(null); // => null\n        // average O(1)\n        chai_1.expect(z.has('Terminator')).to.equal(true); // => true\n        chai_1.expect(z.has('Blade Runner')).to.equal(false); // => false\n        // average O(1)\n        chai_1.expect(z.score('Ex Machina')).to.equal(7.7); // => 7.7\n        chai_1.expect(z.score('Blade Runner')).to.equal(null); // => null\n        // alias\n        chai_1.expect(z.get('The Matrix')).to.equal(8.7); // => 8.7\n        // average O(log(N))\n        chai_1.expect(z.rem('Ex Machina')).to.equal(7.7); // => 7.7\n        // average O(1)\n        chai_1.expect(z.rem('Ex Machina')).to.equal(null); // => null\n        // alias\n        chai_1.expect(z.del('Ex Machina')).to.equal(null); // => null\n        // average O(log(N)+M) where M is the number of elements between min and max\n        // This is not working as expected\n        chai_1.expect(z.rangeByScore(7, 8)).to.eql(['District 9', 'Terminator']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        chai_1.expect(z.rangeByScore(8)).to.eql(['District 9', 'Terminator', 'The Matrix']); // [8.0-∞)\n        // => ['District 9', 'Terminator', 'The Matrix']\n        chai_1.expect(z.rangeByScore(8, null, { withScores: true })).to.eql([['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]);\n        // => [['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]\n        // average O(log(N)+log(M)) where M as in rangeByScore\n        // Again - not as expected\n        chai_1.expect(z.count(7, 8)).to.equal(2); // => 3\n        // average O(log(N))\n        // Not working as expected\n        chai_1.expect(z.rank('Ex Machina')).to.equal(null); // => 0\n        // Not working as expected\n        chai_1.expect(z.rank('Terminator')).to.equal(1); // => 2\n        chai_1.expect(z.rank('Blade Runner')).to.equal(null); // => null\n        // average O(log(N)+M) where M as in range\n        // Not working as expected\n        chai_1.expect(z.range(0, 2)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Not working as expected\n        chai_1.expect(z.range(0, 2, { withScores: true })).to.eql([['District 9', 8], ['Terminator', 8], ['The Matrix', 8.7]]);\n        // => [['Ex Machina', 7.7],\n        //     ['District 9', 8],\n        //     ['Terminator', 8]]\n        chai_1.expect(z.range(-1)).to.eql(['The Matrix']); // => ['The Matrix']\n        // almost alias\n        // Not working as expected\n        chai_1.expect(z.slice(0, 3)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Set cardinality (number of elements)\n        // average O(1)\n        // Not working as expected\n        chai_1.expect(z.card()).to.equal(3); // => 4\n        // alias\n        // Not working as expected\n        chai_1.expect(z.length).to.equal(3); // => 4\n    })",
              "err": {},
              "uuid": "0ae16aec-b43c-42dc-83c4-f53e481bfd47",
              "parentUUID": "855a656c-896d-43ee-9cb3-3a9b0f963a53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "the rewrite should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "fullTitle": "sorted-set test the rewrite should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(ss.add('Terminator', 8.0)).to.equal(null); // => null\n        chai_1.expect(ss.add('District 9', 8.0)).to.equal(null); // => null\n        chai_1.expect(ss.add('Ex Machina', 0.7)).to.equal(null); // => null\n        chai_1.expect(ss.add('Ex Machina', 7.7)).to.equal(0.7); // => 0.7\n        // alias\n        chai_1.expect(ss.set('The Matrix', 8.7)).to.equal(null); // => null\n        // average O(1)\n        chai_1.expect(ss.has('Terminator')).to.equal(true); // => true\n        chai_1.expect(ss.has('Blade Runner')).to.equal(false); // => false\n        // average O(1)\n        chai_1.expect(ss.score('Ex Machina')).to.equal(7.7); // => 7.7\n        chai_1.expect(ss.score('Blade Runner')).to.equal(null); // => null\n        // alias\n        chai_1.expect(ss.get('The Matrix')).to.equal(8.7); // => 8.7\n        // average O(log(N))\n        chai_1.expect(ss.rem('Ex Machina')).to.equal(7.7); // => 7.7\n        // average O(1)\n        chai_1.expect(ss.rem('Ex Machina')).to.equal(null); // => null\n        // alias\n        chai_1.expect(ss.del('Ex Machina')).to.equal(null); // => null\n        // average O(log(N)+M) where M is the number of elements between min and max\n        // This is not working as expected\n        chai_1.expect(ss.rangeByScore(7, 8)).to.eql(['District 9', 'Terminator']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        chai_1.expect(ss.rangeByScore(8)).to.eql(['District 9', 'Terminator', 'The Matrix']); // [8.0-∞)\n        // => ['District 9', 'Terminator', 'The Matrix']\n        chai_1.expect(ss.rangeByScore(8, null, { withScores: true })).to.eql([['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]);\n        // => [['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]\n        // average O(log(N)+log(M)) where M as in rangeByScore\n        // Again - not as expected\n        chai_1.expect(ss.count(7, 8)).to.equal(2); // => 3\n        // average O(log(N))\n        // Not working as expected\n        chai_1.expect(ss.rank('Ex Machina')).to.equal(null); // => 0\n        // Not working as expected\n        chai_1.expect(ss.rank('Terminator')).to.equal(1); // => 2\n        chai_1.expect(ss.rank('Blade Runner')).to.equal(null); // => null\n        // average O(log(N)+M) where M as in range\n        // Not working as expected\n        chai_1.expect(ss.range(0, 2)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Not working as expected\n        chai_1.expect(ss.range(0, 2, { withScores: true })).to.eql([['District 9', 8], ['Terminator', 8], ['The Matrix', 8.7]]);\n        // => [['Ex Machina', 7.7],\n        //     ['District 9', 8],\n        //     ['Terminator', 8]]\n        chai_1.expect(ss.range(-1)).to.eql(['The Matrix']); // => ['The Matrix']\n        // almost alias\n        // Not working as expected\n        chai_1.expect(ss.slice(0, 3)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Set cardinality (number of elements)\n        // average O(1)\n        // Not working as expected\n        chai_1.expect(ss.card()).to.equal(3); // => 4\n        // alias\n        // Not working as expected\n        chai_1.expect(ss.length).to.equal(3); // => 4\n    })",
              "err": {},
              "uuid": "be0c7ffc-7f0a-4fdb-98e0-5a00aaf43948",
              "parentUUID": "855a656c-896d-43ee-9cb3-3a9b0f963a53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "2b1dea32-3e50-4404-95e5-52f7685d4d13",
              "title": "skip map",
              "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
              "file": "/test/resp/data/sorted-set.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should support basic operations",
                  "fullTitle": "sorted-set test skip map should support basic operations",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var z = new Z();\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);\nchai_1.expect(z.range()).to.eql([]);\nchai_1.expect(z.rangeByScore()).to.eql([]);\nchai_1.expect(() => {\n    z.add('__proto__', 14);\n}).to.throw();\nz.add('5a600e16', 8);\nz.add('5a600e17', 9);\nchai_1.expect(z.add('5a600e18', 10)).to.equal(null);\nchai_1.expect(z.add('5a600e17', 12)).to.equal(9);\nchai_1.expect(z).to.have.length(3);\nchai_1.expect(z.toArray()).to.eql(['5a600e16', '5a600e18', '5a600e17']);\nchai_1.expect(z.toArray()).to.eql(z.range(0, -1));\nchai_1.expect(z.toArray()).to.eql(z.rangeByScore());\nchai_1.expect(z.has('5a600e16')).to.be.ok;\nchai_1.expect(z.has('5a600e17')).to.be.ok;\nchai_1.expect(z.has('5a600e18')).to.be.ok;\nchai_1.expect(z.has('5a600e19')).to.not.be.ok;\nchai_1.expect(z.score('5a600e16')).to.equal(8);\nchai_1.expect(z.score('5a600e17')).to.equal(12);\nchai_1.expect(z.score('5a600e18')).to.equal(10);\nchai_1.expect(z.score('5a600e19')).to.equal(null);\nchai_1.expect(z.rem('5a600e16')).to.equal(8);\nchai_1.expect(z).to.have.length(2);\nchai_1.expect(z.rem('5a600e16')).to.equal(null);\nchai_1.expect(z).to.have.length(2);\nchai_1.expect(z.has('5a600e16')).to.not.be.ok;\nchai_1.expect(z.toArray()).to.eql(['5a600e18', '5a600e17']);\nchai_1.expect(z.toArray({ withScores: true }))\n    .to.eql(z.range(0, -1, { withScores: true }));\nchai_1.expect(z.toArray()).to.eql(z.rangeByScore());\nz.add('5a600e16', 10);\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nchai_1.expect(z).to.have.length(9);\n// no change, so should be O(1)\nz.add('5a600e17', 12);\nchai_1.expect(z.rank('5a600e17')).to.equal(4);\nchai_1.expect(z).to.have.length(9);\nchai_1.expect(z.toArray()).to.eql([\n    '5a600e16',\n    '5a600e11',\n    '5a600e18',\n    '5a600e13',\n    '5a600e17',\n    '5a600e14',\n    '5a600e10',\n    '5a600e12',\n    '5a600e15',\n]);\nchai_1.expect(z.toArray()).to.eql(z.range(0, -1));\nchai_1.expect(z.toArray()).to.eql(z.rangeByScore());\nchai_1.expect(z.rangeByScore(14, 16, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n]);",
                  "err": {},
                  "uuid": "b46cf1cb-5287-4c87-9992-1a4f8917ea16",
                  "parentUUID": "2b1dea32-3e50-4404-95e5-52f7685d4d13",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "254588da-9f88-4e69-8cf2-138aa8ecf1ff",
                  "title": "#add",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should implicitly delete",
                      "fullTitle": "sorted-set test skip map #add should implicitly delete",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.add('5a600e14', null)).to.equal(14);\nchai_1.expect(z.add('5a600e19', null)).to.equal(null);\nchai_1.expect(z).to.have.length(8);",
                      "err": {},
                      "uuid": "15c9e7e0-2f2f-4484-9065-257b984d55af",
                      "parentUUID": "254588da-9f88-4e69-8cf2-138aa8ecf1ff",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "15c9e7e0-2f2f-4484-9065-257b984d55af"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "dacd6017-188d-4462-be53-1d5a62fedf75",
                  "title": "#empty",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should remove all elements",
                      "fullTitle": "sorted-set test skip map #empty should remove all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nz.empty();\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "47c34f59-6e69-4b95-a612-88f041de61be",
                      "parentUUID": "dacd6017-188d-4462-be53-1d5a62fedf75",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "47c34f59-6e69-4b95-a612-88f041de61be"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "055e26df-869a-4ccd-890e-5eb71b99133e",
                  "title": "#incrBy(increment, key)",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should increase rank",
                      "fullTitle": "sorted-set test skip map #incrBy(increment, key) should increase rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.add('second', 2);\nz.add('third', 3);\nz.add('fourth', 4);\nchai_1.expect(z.incrBy(2, 'first')).to.equal(3);\nchai_1.expect(z.rank('first')).to.equal(1);",
                      "err": {},
                      "uuid": "bd2c40f9-b65b-425e-88f6-0d970edf34e8",
                      "parentUUID": "055e26df-869a-4ccd-890e-5eb71b99133e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should create if not found",
                      "fullTitle": "sorted-set test skip map #incrBy(increment, key) should create if not found",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.incrBy(2, 'second');\nchai_1.expect(z.card()).to.equal(2);\nchai_1.expect(z.rank('second')).to.equal(1);",
                      "err": {},
                      "uuid": "42502a3f-ecd0-4801-a039-531d763932e4",
                      "parentUUID": "055e26df-869a-4ccd-890e-5eb71b99133e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bd2c40f9-b65b-425e-88f6-0d970edf34e8",
                    "42502a3f-ecd0-4801-a039-531d763932e4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "9434723c-7618-4e22-8a4a-105c252af41b",
                  "title": "#keys",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the keys",
                      "fullTitle": "sorted-set test skip map #keys should return the keys",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.keys()).to.eql(['5a600e16', '5a600e11', '5a600e18', '5a600e13',\n    '5a600e17', '5a600e14', '5a600e10', '5a600e12', '5a600e15']);",
                      "err": {},
                      "uuid": "812852ca-0a2a-4934-ad63-36e9cdd7171c",
                      "parentUUID": "9434723c-7618-4e22-8a4a-105c252af41b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "812852ca-0a2a-4934-ad63-36e9cdd7171c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "8cdcce24-1722-4436-82f0-9632a1a9498f",
                  "title": "#rangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map #rangeByScore should support special ranges",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rangeByScore(14, null, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);\nchai_1.expect(z.rangeByScore(null, 10, { withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n]);\nchai_1.expect(z.rangeByScore(-Infinity, Infinity)).to.eql(z.toArray());\nchai_1.expect(z.rangeByScore(null, null)).to.eql(z.toArray());",
                      "err": {},
                      "uuid": "358a6935-972e-4e66-a08c-7c476a5f6551",
                      "parentUUID": "8cdcce24-1722-4436-82f0-9632a1a9498f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "358a6935-972e-4e66-a08c-7c476a5f6551"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "6cf06230-d2cd-42b5-a422-66ed6ebc9e77",
                  "title": "#count",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should count elements",
                      "fullTitle": "sorted-set test skip map #count should count elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nchai_1.expect(z.count()).to.equal(0);\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nz.add('5a600e19', 14);\nz.add('5a600f00', 30.0);\nz.add('5a600f01', 30.5);\nz.add('5a600f02', 31.0);\nz.add('5a600f03', 31.5);\nz.add('5a600f04', 32.0);\nz.add('5a600f05', 32.0);\nz.add('5a600f06', 32.0);\nchai_1.expect(z.count()).to.eql(z.rangeByScore().length);\nchai_1.expect(z.count(8)).to.eql(z.rangeByScore(8).length);\nchai_1.expect(z.count(3, 7)).to.eql(z.rangeByScore(3, 7).length);\nchai_1.expect(z.count(5, 14)).to.eql(z.rangeByScore(5, 14).length);\nchai_1.expect(z.count(5, 5)).to.eql(z.rangeByScore(5, 5).length);\nchai_1.expect(z.count(5, 0)).to.eql(z.rangeByScore(5, 0).length);\nchai_1.expect(z.count(30, 32)).to.eql(z.rangeByScore(30, 32).length);\nchai_1.expect(z.count(40)).to.eql(z.rangeByScore(40).length);",
                      "err": {},
                      "uuid": "5130270d-42a4-4c72-a354-78d23a742c5d",
                      "parentUUID": "6cf06230-d2cd-42b5-a422-66ed6ebc9e77",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5130270d-42a4-4c72-a354-78d23a742c5d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "5e163bf2-fae5-41b2-af70-1c165e631472",
                  "title": "#range",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map #range should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.add('second', 2);\nz.add('third', 3);\nz.add('fourth', 4);\nvar array = ['first', 'second', 'third', 'fourth'];\nchai_1.expect(z.range()).to.eql(array);\nchai_1.expect(z.range(2)).to.eql(array.slice(2));\nchai_1.expect(z.range(8)).to.eql(array.slice(8));\nchai_1.expect(z.range(0, 2)).to.eql(array.slice(0, 3));\nchai_1.expect(z.range(-1)).to.eql(['fourth']);\nchai_1.expect(z.range(-4)).to.eql(array);\nchai_1.expect(z.range(-4, -2)).to.eql(array.slice(0, 3));\nchai_1.expect(z.range(-4, z.length + 1000))\n    .to.eql(array.slice(-4, z.length + 1000));",
                      "err": {},
                      "uuid": "68f9f5ed-2f12-48ab-9ba1-317ed17e76b7",
                      "parentUUID": "5e163bf2-fae5-41b2-af70-1c165e631472",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should support withScores",
                      "fullTitle": "sorted-set test skip map #range should support withScores",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.add('second', 2);\nchai_1.expect(z.range(0, 0, { withScores: true }))\n    .to.eql([['first', 1]]);",
                      "err": {},
                      "uuid": "2dff234a-84a9-49c8-8956-e84296f7b1f1",
                      "parentUUID": "5e163bf2-fae5-41b2-af70-1c165e631472",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "68f9f5ed-2f12-48ab-9ba1-317ed17e76b7",
                    "2dff234a-84a9-49c8-8956-e84296f7b1f1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "74b2d232-c54d-4ecd-b26f-661e11b3dd9e",
                  "title": "#intersect",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should intersect two sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect two sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = new Z(), b = new Z();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nchai_1.expect(Z.intersect(a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e19', '5a600e1c', '5a600e15', '5a600e1b']);\nchai_1.expect(Z.intersect(b, a)).to.eql(['5a600e1b', '5a600e14',\n    '5a600e1c', '5a600e15', '5a600e19', '5a600e10', '5a600e17']);",
                      "err": {},
                      "uuid": "745b3a5c-5832-439d-994e-549dee6b5ce0",
                      "parentUUID": "74b2d232-c54d-4ecd-b26f-661e11b3dd9e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect three sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect three sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = new Z(), b = new Z(), c = new Z();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nchai_1.expect(Z.intersect(c, a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e1c']);\nchai_1.expect(Z.intersect(c, a, b)).to.eql(c.intersect(a, b));",
                      "err": {},
                      "uuid": "c3a0bb89-ac31-45bd-9977-6da9ae553c03",
                      "parentUUID": "74b2d232-c54d-4ecd-b26f-661e11b3dd9e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect four sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect four sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = new Z();\nvar b = new Z();\nvar c = new Z();\nvar d = new Z();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nd.add('5a600e1c', 400);\nd.add('5a600e17', 500);\nd.add('5a600e1f', 600);\nd.add('5a600e20', 700);\nchai_1.expect(Z.intersect(d, c, a, b)).to.eql(['5a600e17', '5a600e1c']);\nchai_1.expect(Z.intersect(d, c, a, b)).to.eql(d.intersect(c, a, b));",
                      "err": {},
                      "uuid": "6c6b7d15-4adf-4c71-8f60-cc9bcd22df65",
                      "parentUUID": "74b2d232-c54d-4ecd-b26f-661e11b3dd9e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "745b3a5c-5832-439d-994e-549dee6b5ce0",
                    "c3a0bb89-ac31-45bd-9977-6da9ae553c03",
                    "6c6b7d15-4adf-4c71-8f60-cc9bcd22df65"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "8ca74f78-ba0c-4d9a-9773-54a0756f07d6",
                  "title": "#rank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should get the correct rank",
                      "fullTitle": "sorted-set test skip map #rank should get the correct rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rank('5a600e12')).to.equal(7);\nchai_1.expect(z.rank('5a600e13')).to.equal(3);\nchai_1.expect(z.rank('5a600e16')).to.equal(0);\nchai_1.expect(z.rank('5a600e15')).to.equal(8);\nchai_1.expect(z.rank('not in set')).to.equal(null);",
                      "err": {},
                      "uuid": "419d805b-3c02-4427-992d-56efa7a69631",
                      "parentUUID": "8ca74f78-ba0c-4d9a-9773-54a0756f07d6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "419d805b-3c02-4427-992d-56efa7a69631"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "561b73be-25e6-4d0f-ae1e-af7e03a30fd5",
                  "title": "#rem",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should delete special elements",
                      "fullTitle": "sorted-set test skip map #rem should delete special elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rem('5a600e15')).to.equal(19);\nchai_1.expect(z).to.have.length(8);\nchai_1.expect(z.rem('5a600e16')).to.equal(3);\nchai_1.expect(z).to.have.length(7);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "78c985e0-320e-4220-ac0b-a3f04ac5573a",
                      "parentUUID": "561b73be-25e6-4d0f-ae1e-af7e03a30fd5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should delete many elements",
                      "fullTitle": "sorted-set test skip map #rem should delete many elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rem('5a600e11')).to.equal(6);\nchai_1.expect(z.rem('5a600e13')).to.equal(11);\nchai_1.expect(z.rem('5a600e14')).to.equal(14);\nchai_1.expect(z.rem('5a600e15')).to.equal(19);\nchai_1.expect(z.rem('5a600e16')).to.equal(3);\nchai_1.expect(z.rem('5a600e17')).to.equal(12);\nchai_1.expect(z.length).to.equal(3);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e18', 10],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "a05b74ee-853a-4983-9712-3e2b733a56a8",
                      "parentUUID": "561b73be-25e6-4d0f-ae1e-af7e03a30fd5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "78c985e0-320e-4220-ac0b-a3f04ac5573a",
                    "a05b74ee-853a-4983-9712-3e2b733a56a8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "7cea9724-dd6b-4e70-8615-e5ac42c8d000",
                  "title": "#remRangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a range of elements",
                      "fullTitle": "sorted-set test skip map #remRangeByScore should strip out a range of elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByScore(4, 14)).to.equal(5);\nchai_1.expect(z).to.have.length(4);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "67eda7d2-c988-4e81-bb1b-2f0e54e66e63",
                      "parentUUID": "7cea9724-dd6b-4e70-8615-e5ac42c8d000",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all the elements",
                      "fullTitle": "sorted-set test skip map #remRangeByScore should strip out all the elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByScore(3, 19)).to.equal(9);\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "fdcd8a1b-770b-4cb4-b729-3b3512b92d7f",
                      "parentUUID": "7cea9724-dd6b-4e70-8615-e5ac42c8d000",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "67eda7d2-c988-4e81-bb1b-2f0e54e66e63",
                    "fdcd8a1b-770b-4cb4-b729-3b3512b92d7f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "a6a7c67d-86ac-4e72-beeb-45328bcc17f9",
                  "title": "#remRangeByRank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a slice of elements",
                      "fullTitle": "sorted-set test skip map #remRangeByRank should strip out a slice of elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByRank(1, 6)).to.equal(5);\nchai_1.expect(z).to.have.length(4);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "2a20d23c-718f-48fb-8ca0-9e814239b64f",
                      "parentUUID": "a6a7c67d-86ac-4e72-beeb-45328bcc17f9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all elements",
                      "fullTitle": "sorted-set test skip map #remRangeByRank should strip out all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByRank(0, 9)).to.equal(9);\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "93a27dd7-5af5-400f-ab56-8cf4562280b5",
                      "parentUUID": "a6a7c67d-86ac-4e72-beeb-45328bcc17f9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2a20d23c-718f-48fb-8ca0-9e814239b64f",
                    "93a27dd7-5af5-400f-ab56-8cf4562280b5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "eb58a9b6-dc1f-405e-9b97-dc04bea8c296",
                  "title": "#values",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the values",
                      "fullTitle": "sorted-set test skip map #values should return the values",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', -1);\nz.add('third', 5);\nz.add('second', 3);\nchai_1.expect(z.values()).to.eql([-1, 3, 5]);",
                      "err": {},
                      "uuid": "c59feaad-1528-4e88-aef5-df0d15516877",
                      "parentUUID": "eb58a9b6-dc1f-405e-9b97-dc04bea8c296",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c59feaad-1528-4e88-aef5-df0d15516877"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "7f4776da-5e88-4db2-9107-25725955461f",
                  "title": "unique",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should ensure values are unique",
                      "fullTitle": "sorted-set test skip map unique should ensure values are unique",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z({ unique: true });\nassert.equal(z.keys().length, 0, 'Expected an empty SortedSet');\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(() => {\n    z.add('5a600e19', 11);\n}).to.throw(/unique/);\n// quick exit test\nchai_1.expect(() => {\n    z.add('5a600dff', z._head.next[z._level - 1].next.value);\n}).to.throw(/unique/);\n// this test ensures the key < key check doesn't come into play\nchai_1.expect(() => {\n    z.add('5a600dff', 11);\n}).to.throw(/unique/);\nchai_1.expect(() => {\n    z.add('5a600e18', 10);\n}).to.not.throw();\nchai_1.expect(z).to.have.length(9);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "eabc955d-f082-4a7f-8d72-571a9fe73104",
                      "parentUUID": "7f4776da-5e88-4db2-9107-25725955461f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert keys if constraint broken during update",
                      "fullTitle": "sorted-set test skip map unique should revert keys if constraint broken during update",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z({ unique: true });\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(() => {\n    z.add('5a600e13', 14);\n}).to.throw(/unique/);\nchai_1.expect(z).to.have.length(9);\nchai_1.expect(z.score('5a600e13')).to.equal(11);",
                      "err": {},
                      "uuid": "3bfa7a09-ad48-4ccd-805c-c5c0359247f4",
                      "parentUUID": "7f4776da-5e88-4db2-9107-25725955461f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "eabc955d-f082-4a7f-8d72-571a9fe73104",
                    "3bfa7a09-ad48-4ccd-805c-c5c0359247f4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "b46cf1cb-5287-4c87-9992-1a4f8917ea16"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "5002c3f5-3c46-4168-9701-2a4eb1fb3ce5",
              "title": "skip map rewrite",
              "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
              "file": "/test/resp/data/sorted-set.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should support basic operations",
                  "fullTitle": "sorted-set test skip map rewrite should support basic operations",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let ss = new sorted_set_1.SortedSet();\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);\nchai_1.expect(ss.range()).to.eql([]);\nchai_1.expect(ss.rangeByScore()).to.eql([]);\n// expect(() => {\n//   ss.add('__proto__', 14);\n// }).to.throw();\nss.add('5a600e16', 8);\nss.add('5a600e17', 9);\nchai_1.expect(ss.add('5a600e18', 10)).to.equal(null);\nchai_1.expect(ss.add('5a600e17', 12)).to.equal(9);\nchai_1.expect(ss).to.have.length(3);\nchai_1.expect(ss.toArray()).to.eql(['5a600e16', '5a600e18', '5a600e17']);\nchai_1.expect(ss.toArray()).to.eql(ss.range(0, -1));\nchai_1.expect(ss.toArray()).to.eql(ss.rangeByScore());\nchai_1.expect(ss.has('5a600e16')).to.be.ok;\nchai_1.expect(ss.has('5a600e17')).to.be.ok;\nchai_1.expect(ss.has('5a600e18')).to.be.ok;\nchai_1.expect(ss.has('5a600e19')).to.not.be.ok;\nchai_1.expect(ss.score('5a600e16')).to.equal(8);\nchai_1.expect(ss.score('5a600e17')).to.equal(12);\nchai_1.expect(ss.score('5a600e18')).to.equal(10);\nchai_1.expect(ss.score('5a600e19')).to.equal(null);\nchai_1.expect(ss.rem('5a600e16')).to.equal(8);\nchai_1.expect(ss).to.have.length(2);\nchai_1.expect(ss.rem('5a600e16')).to.equal(null);\nchai_1.expect(ss).to.have.length(2);\nchai_1.expect(ss.has('5a600e16')).to.not.be.ok;\nchai_1.expect(ss.toArray()).to.eql(['5a600e18', '5a600e17']);\nchai_1.expect(ss.toArray({ withScores: true }))\n    .to.eql(ss.range(0, -1, { withScores: true }));\nchai_1.expect(ss.toArray()).to.eql(ss.rangeByScore());\nss.add('5a600e16', 10);\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nchai_1.expect(ss).to.have.length(9);\n// no change, so should be O(1)\nss.add('5a600e17', 12);\nchai_1.expect(ss.rank('5a600e17')).to.equal(4);\nchai_1.expect(ss).to.have.length(9);\nchai_1.expect(ss.toArray()).to.eql([\n    '5a600e16',\n    '5a600e11',\n    '5a600e18',\n    '5a600e13',\n    '5a600e17',\n    '5a600e14',\n    '5a600e10',\n    '5a600e12',\n    '5a600e15',\n]);\nchai_1.expect(ss.toArray()).to.eql(ss.range(0, -1));\nchai_1.expect(ss.toArray()).to.eql(ss.rangeByScore());\nchai_1.expect(ss.rangeByScore(14, 16, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n]);",
                  "err": {},
                  "uuid": "707ef306-8649-44f7-8c7c-30606c0dcdf1",
                  "parentUUID": "5002c3f5-3c46-4168-9701-2a4eb1fb3ce5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "37310eaf-c89f-4325-8a55-a13b5638045d",
                  "title": "#add",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should implicitly delete",
                      "fullTitle": "sorted-set test skip map rewrite #add should implicitly delete",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.add('5a600e14', null)).to.equal(14);\nchai_1.expect(ss.add('5a600e19', null)).to.equal(null);\nchai_1.expect(ss).to.have.length(8);",
                      "err": {},
                      "uuid": "dd4cfc8e-12dd-48b5-9dfd-97cfa9b05950",
                      "parentUUID": "37310eaf-c89f-4325-8a55-a13b5638045d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dd4cfc8e-12dd-48b5-9dfd-97cfa9b05950"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "e8199351-db22-4b2f-85c6-526d8d920635",
                  "title": "#empty",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should remove all elements",
                      "fullTitle": "sorted-set test skip map rewrite #empty should remove all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nss.empty();\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "3d9a38bd-20fa-428e-8b60-c48e28f910e2",
                      "parentUUID": "e8199351-db22-4b2f-85c6-526d8d920635",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3d9a38bd-20fa-428e-8b60-c48e28f910e2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "ab558437-36d8-4900-b6b0-5f85f5149edd",
                  "title": "#incrBy(increment, key)",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should increase rank",
                      "fullTitle": "sorted-set test skip map rewrite #incrBy(increment, key) should increase rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.add('second', 2);\nss.add('third', 3);\nss.add('fourth', 4);\nchai_1.expect(ss.incrBy(2, 'first')).to.equal(3);\nchai_1.expect(ss.rank('first')).to.equal(1);",
                      "err": {},
                      "uuid": "e93f58ba-1ee6-4df8-b45f-6bb65549ae7b",
                      "parentUUID": "ab558437-36d8-4900-b6b0-5f85f5149edd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should create if not found",
                      "fullTitle": "sorted-set test skip map rewrite #incrBy(increment, key) should create if not found",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.incrBy(2, 'second');\nchai_1.expect(ss.card()).to.equal(2);\nchai_1.expect(ss.rank('second')).to.equal(1);",
                      "err": {},
                      "uuid": "97e6d181-ed2d-48ad-828e-2c8d044d6f75",
                      "parentUUID": "ab558437-36d8-4900-b6b0-5f85f5149edd",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e93f58ba-1ee6-4df8-b45f-6bb65549ae7b",
                    "97e6d181-ed2d-48ad-828e-2c8d044d6f75"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "3ef00810-c726-44dd-aec5-b07aedece273",
                  "title": "#keys",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the keys",
                      "fullTitle": "sorted-set test skip map rewrite #keys should return the keys",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.keys()).to.eql(['5a600e16', '5a600e11', '5a600e18', '5a600e13',\n    '5a600e17', '5a600e14', '5a600e10', '5a600e12', '5a600e15']);",
                      "err": {},
                      "uuid": "a9449cd7-e4b7-42b8-9b82-04d67d9fe03f",
                      "parentUUID": "3ef00810-c726-44dd-aec5-b07aedece273",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a9449cd7-e4b7-42b8-9b82-04d67d9fe03f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "ddf0c815-3bf4-4b55-a356-48d5f0929999",
                  "title": "#rangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map rewrite #rangeByScore should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rangeByScore(14, null, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);\nchai_1.expect(ss.rangeByScore(null, 10, { withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n]);\nchai_1.expect(ss.rangeByScore(-Infinity, Infinity)).to.eql(ss.toArray());\nchai_1.expect(ss.rangeByScore(null, null)).to.eql(ss.toArray());",
                      "err": {},
                      "uuid": "92fd9e57-a36c-40d4-bba3-5e9c0191ba4d",
                      "parentUUID": "ddf0c815-3bf4-4b55-a356-48d5f0929999",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "92fd9e57-a36c-40d4-bba3-5e9c0191ba4d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "d9e80de7-f1df-4129-91f4-f5ac6045828a",
                  "title": "#count",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should count elements",
                      "fullTitle": "sorted-set test skip map rewrite #count should count elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nchai_1.expect(ss.count()).to.equal(0);\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nss.add('5a600e19', 14);\nss.add('5a600f00', 30.0);\nss.add('5a600f01', 30.5);\nss.add('5a600f02', 31.0);\nss.add('5a600f03', 31.5);\nss.add('5a600f04', 32.0);\nss.add('5a600f05', 32.0);\nss.add('5a600f06', 32.0);\nchai_1.expect(ss.count()).to.eql(ss.rangeByScore().length);\nchai_1.expect(ss.count(8)).to.eql(ss.rangeByScore(8).length);\nchai_1.expect(ss.count(3, 7)).to.eql(ss.rangeByScore(3, 7).length);\nchai_1.expect(ss.count(5, 14)).to.eql(ss.rangeByScore(5, 14).length);\nchai_1.expect(ss.count(5, 5)).to.eql(ss.rangeByScore(5, 5).length);\nchai_1.expect(ss.count(5, 0)).to.eql(ss.rangeByScore(5, 0).length);\nchai_1.expect(ss.count(30, 32)).to.eql(ss.rangeByScore(30, 32).length);\nchai_1.expect(ss.count(40)).to.eql(ss.rangeByScore(40).length);",
                      "err": {},
                      "uuid": "10b0889f-4ac1-4c43-ba8a-afb5bc14a10a",
                      "parentUUID": "d9e80de7-f1df-4129-91f4-f5ac6045828a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "10b0889f-4ac1-4c43-ba8a-afb5bc14a10a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "d5661a6c-42ca-4759-9f1b-91bf0782cdaf",
                  "title": "#range",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map rewrite #range should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.add('second', 2);\nss.add('third', 3);\nss.add('fourth', 4);\nlet array = ['first', 'second', 'third', 'fourth'];\nchai_1.expect(ss.range()).to.eql(array);\nchai_1.expect(ss.range(2)).to.eql(array.slice(2));\nchai_1.expect(ss.range(8)).to.eql(array.slice(8));\nchai_1.expect(ss.range(0, 2)).to.eql(array.slice(0, 3));\nchai_1.expect(ss.range(-1)).to.eql(['fourth']);\nchai_1.expect(ss.range(-4)).to.eql(array);\nchai_1.expect(ss.range(-4, -2)).to.eql(array.slice(0, 3));\nchai_1.expect(ss.range(-4, ss.length + 1000))\n    .to.eql(array.slice(-4, ss.length + 1000));",
                      "err": {},
                      "uuid": "47d2f205-fad0-45fc-a1bc-db75eab4096c",
                      "parentUUID": "d5661a6c-42ca-4759-9f1b-91bf0782cdaf",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should support withScores",
                      "fullTitle": "sorted-set test skip map rewrite #range should support withScores",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.add('second', 2);\nchai_1.expect(ss.range(0, 0, { withScores: true }))\n    .to.eql([['first', 1]]);",
                      "err": {},
                      "uuid": "7d38c8c1-eaee-4c40-ae37-e67105ed47bf",
                      "parentUUID": "d5661a6c-42ca-4759-9f1b-91bf0782cdaf",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "47d2f205-fad0-45fc-a1bc-db75eab4096c",
                    "7d38c8c1-eaee-4c40-ae37-e67105ed47bf"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "579ce667-b0a2-460b-8ccc-7615ec7638f8",
                  "title": "#intersect",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should intersect two sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect two sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nchai_1.expect(sorted_set_1.SortedSet.intersect(a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e19', '5a600e1c', '5a600e15', '5a600e1b']);\nchai_1.expect(sorted_set_1.SortedSet.intersect(b, a)).to.eql(['5a600e1b', '5a600e14',\n    '5a600e1c', '5a600e15', '5a600e19', '5a600e10', '5a600e17']);",
                      "err": {},
                      "uuid": "a212f6d3-4a3d-46dd-af53-9406d4febfa4",
                      "parentUUID": "579ce667-b0a2-460b-8ccc-7615ec7638f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect three sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect three sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet(), c = new sorted_set_1.SortedSet();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nchai_1.expect(sorted_set_1.SortedSet.intersect(c, a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e1c']);\n// expect(SortedSet.intersect(c, a, b)).to.eql(c.intersect(a, b));",
                      "err": {},
                      "uuid": "aae9ad6b-3b57-4363-b103-fef659a280d0",
                      "parentUUID": "579ce667-b0a2-460b-8ccc-7615ec7638f8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect four sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect four sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let a = new sorted_set_1.SortedSet();\nlet b = new sorted_set_1.SortedSet();\nlet c = new sorted_set_1.SortedSet();\nlet d = new sorted_set_1.SortedSet();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nd.add('5a600e1c', 400);\nd.add('5a600e17', 500);\nd.add('5a600e1f', 600);\nd.add('5a600e20', 700);\nchai_1.expect(sorted_set_1.SortedSet.intersect(d, c, a, b)).to.eql(['5a600e17', '5a600e1c']);\n// expect(SortedSet.intersect(d, c, a, b)).to.eql(d.intersect(c, a, b));",
                      "err": {},
                      "uuid": "29747296-8ddd-46fc-906d-86dc166be2f5",
                      "parentUUID": "579ce667-b0a2-460b-8ccc-7615ec7638f8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a212f6d3-4a3d-46dd-af53-9406d4febfa4",
                    "aae9ad6b-3b57-4363-b103-fef659a280d0",
                    "29747296-8ddd-46fc-906d-86dc166be2f5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "484d4de1-7d23-4aa5-bf19-40bf006e9c3f",
                  "title": "#rank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should get the correct rank",
                      "fullTitle": "sorted-set test skip map rewrite #rank should get the correct rank",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rank('5a600e12')).to.equal(7);\nchai_1.expect(ss.rank('5a600e13')).to.equal(3);\nchai_1.expect(ss.rank('5a600e16')).to.equal(0);\nchai_1.expect(ss.rank('5a600e15')).to.equal(8);\nchai_1.expect(ss.rank('not in set')).to.equal(null);",
                      "err": {},
                      "uuid": "8826351d-f09e-473a-9f89-89fe46fa2d7e",
                      "parentUUID": "484d4de1-7d23-4aa5-bf19-40bf006e9c3f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8826351d-f09e-473a-9f89-89fe46fa2d7e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "33650b4e-54a1-4482-ac72-43616118a5d1",
                  "title": "#rem",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should delete special elements",
                      "fullTitle": "sorted-set test skip map rewrite #rem should delete special elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rem('5a600e15')).to.equal(19);\nchai_1.expect(ss).to.have.length(8);\nchai_1.expect(ss.rem('5a600e16')).to.equal(3);\nchai_1.expect(ss).to.have.length(7);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "c8b9a9c3-a6bf-4f81-919a-ca7c8e7f3fe1",
                      "parentUUID": "33650b4e-54a1-4482-ac72-43616118a5d1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should delete many elements",
                      "fullTitle": "sorted-set test skip map rewrite #rem should delete many elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rem('5a600e11')).to.equal(6);\nchai_1.expect(ss.rem('5a600e13')).to.equal(11);\nchai_1.expect(ss.rem('5a600e14')).to.equal(14);\nchai_1.expect(ss.rem('5a600e15')).to.equal(19);\nchai_1.expect(ss.rem('5a600e16')).to.equal(3);\nchai_1.expect(ss.rem('5a600e17')).to.equal(12);\nchai_1.expect(ss.length).to.equal(3);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e18', 10],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "d795aa10-bfb3-4281-8e38-666ecee1db64",
                      "parentUUID": "33650b4e-54a1-4482-ac72-43616118a5d1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c8b9a9c3-a6bf-4f81-919a-ca7c8e7f3fe1",
                    "d795aa10-bfb3-4281-8e38-666ecee1db64"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "b65ddeb5-915d-47e5-b5db-6001d97990dc",
                  "title": "#remRangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a range of elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByScore should strip out a range of elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByScore(4, 14)).to.equal(5);\nchai_1.expect(ss).to.have.length(4);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "ba08f96f-0039-419d-906e-76d7fe464624",
                      "parentUUID": "b65ddeb5-915d-47e5-b5db-6001d97990dc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all the elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByScore should strip out all the elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByScore(3, 19)).to.equal(9);\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "7cf126e8-85a8-4c6a-83b0-499630590569",
                      "parentUUID": "b65ddeb5-915d-47e5-b5db-6001d97990dc",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ba08f96f-0039-419d-906e-76d7fe464624",
                    "7cf126e8-85a8-4c6a-83b0-499630590569"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "f905483f-5098-4f8c-8963-32725bb078a0",
                  "title": "#remRangeByRank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a slice of elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByRank should strip out a slice of elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByRank(1, 6)).to.equal(5);\nchai_1.expect(ss).to.have.length(4);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "7f0c24b4-9a2a-43e0-8abe-5df33540d483",
                      "parentUUID": "f905483f-5098-4f8c-8963-32725bb078a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByRank should strip out all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByRank(0, 9)).to.equal(9);\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "1b1a4a87-c2a1-4003-8e7c-7b2398e030ed",
                      "parentUUID": "f905483f-5098-4f8c-8963-32725bb078a0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7f0c24b4-9a2a-43e0-8abe-5df33540d483",
                    "1b1a4a87-c2a1-4003-8e7c-7b2398e030ed"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "4138cb3c-49ec-473a-a9c7-dca22b20bb6c",
                  "title": "#values",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the values",
                      "fullTitle": "sorted-set test skip map rewrite #values should return the values",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', -1);\nss.add('third', 5);\nss.add('second', 3);\nchai_1.expect(ss.values()).to.eql([-1, 3, 5]);",
                      "err": {},
                      "uuid": "1f423193-7b7a-4aa6-bd62-52aa9cfc4ac7",
                      "parentUUID": "4138cb3c-49ec-473a-a9c7-dca22b20bb6c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1f423193-7b7a-4aa6-bd62-52aa9cfc4ac7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "c2d80e86-6480-49c1-aca9-6bfdd138fa20",
                  "title": "unique rewrite",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should ensure values are unique",
                      "fullTitle": "sorted-set test skip map rewrite unique rewrite should ensure values are unique",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const options = { unique: true };\nlet ss = new sorted_set_1.SortedSet(options);\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(() => {\n    ss.add('5a600e19', 11);\n}).to.throw(/unique/);\n// quick exit test\nchai_1.expect(() => {\n    ss.add('5a600dff', ss._head.next[ss._level - 1].next.value);\n}).to.throw(/unique/);\n// this test ensures the key < key check doesn't come into play\nchai_1.expect(() => {\n    ss.add('5a600dff', 11);\n}).to.throw(/unique/);\nchai_1.expect(() => {\n    ss.add('5a600e18', 10);\n}).to.not.throw();\nchai_1.expect(ss).to.have.length(9);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "71a026a8-56cb-4919-a304-282f8f463f2d",
                      "parentUUID": "c2d80e86-6480-49c1-aca9-6bfdd138fa20",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert keys if constraint broken during update",
                      "fullTitle": "sorted-set test skip map rewrite unique rewrite should revert keys if constraint broken during update",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet({ unique: true });\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(() => {\n    ss.add('5a600e13', 14);\n}).to.throw(/unique/);\nchai_1.expect(ss).to.have.length(9);\nchai_1.expect(ss.score('5a600e13')).to.equal(11);",
                      "err": {},
                      "uuid": "8f2bbd4d-3f5d-48a7-ba74-ee01cca14f87",
                      "parentUUID": "c2d80e86-6480-49c1-aca9-6bfdd138fa20",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "71a026a8-56cb-4919-a304-282f8f463f2d",
                    "8f2bbd4d-3f5d-48a7-ba74-ee01cca14f87"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "707ef306-8649-44f7-8c7c-30606c0dcdf1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "0134d7d2-fc5a-4048-a5c9-bce26d106ba1",
            "0a59a370-1de1-4010-b937-8fd8af332693",
            "86c07628-93eb-45de-87d9-39203f8155e0",
            "56e15e5a-4f5d-4a6a-9270-c4571e23b5fa",
            "4953fd20-23dc-40b9-a95c-b6d68a25dcc7",
            "751aa671-2a2e-488a-b46e-5dfee5734535",
            "0ae16aec-b43c-42dc-83c4-f53e481bfd47",
            "be0c7ffc-7f0a-4fdb-98e0-5a00aaf43948"
          ],
          "failures": [],
          "pending": [
            "16f4e4f1-2cba-4a5c-b20d-669b24c1a567"
          ],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "reportDir": "docs/mochawesome"
      },
      "version": "4.1.0"
    }
  }
}