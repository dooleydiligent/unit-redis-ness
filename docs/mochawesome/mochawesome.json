{
  "stats": {
    "suites": 93,
    "tests": 318,
    "passes": 316,
    "pending": 2,
    "failures": 0,
    "start": "2020-01-22T18:22:46.417Z",
    "end": "2020-01-22T18:23:05.264Z",
    "duration": 18847,
    "testsRegistered": 318,
    "passPercent": 100,
    "pendingPercent": 0.628930817610063,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3f13d93a-25b5-4e8a-861b-30e771511875",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook",
          "fullTitle": "\"before all\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "done();",
          "err": {},
          "uuid": "cdec1ccd-8397-408d-8c16-30f6f35938bb",
          "parentUUID": "3f13d93a-25b5-4e8a-861b-30e771511875",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook",
          "fullTitle": "\"after all\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "__awaiter(void 0, void 0, void 0, function* () {\n})",
          "err": {},
          "uuid": "67221890-ef65-441b-8501-909d9d5e8327",
          "parentUUID": "3f13d93a-25b5-4e8a-861b-30e771511875",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "2c50f8d4-5040-4684-8c33-7be530eb0e40",
          "title": "dictionary test",
          "fullFile": "/home/lane/git/redis/test/dictionary.test.ts",
          "file": "/test/dictionary.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "dictionary test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dictionary = new dictionary_1.Dictionary();\nsinon.createSandbox();",
              "err": {},
              "uuid": "2fb08036-8ccc-4d93-a8c3-3331d77905f8",
              "parentUUID": "2c50f8d4-5040-4684-8c33-7be530eb0e40",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "dictionary test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "f0705950-0923-46bf-94e7-ee1d73627661",
              "parentUUID": "2c50f8d4-5040-4684-8c33-7be530eb0e40",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "dictionary test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "08556ea0-f0ad-4e9c-847e-50479bf986c5",
              "parentUUID": "2c50f8d4-5040-4684-8c33-7be530eb0e40",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should construct",
              "fullTitle": "dictionary test should construct",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        chai_1.expect(dictionary.constructor.name).to.equal('Dictionary');\n    })",
              "err": {},
              "uuid": "8db6197d-0e13-4123-904b-df37b5292132",
              "parentUUID": "2c50f8d4-5040-4684-8c33-7be530eb0e40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should implement basic put/get/remove/size/clear/contains/exists/keys/values functionality",
              "fullTitle": "dictionary test should implement basic put/get/remove/size/clear/contains/exists/keys/values functionality",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dictionary.put('item', 'one');\nchai_1.expect(dictionary.exists('item')).to.equal(true);\nchai_1.expect(dictionary.exists('one')).to.equal(false);\nchai_1.expect(dictionary.get('item')).to.equal('one');\nchai_1.expect(dictionary.size()).to.equal(1);\nchai_1.expect(dictionary.contains('one')).to.equal(true);\nchai_1.expect(dictionary.keys().length).to.equal(1);\nchai_1.expect(dictionary.values().length).to.equal(1);\ndictionary.put('item', 'two');\nchai_1.expect(dictionary.get('item')).to.equal('two');\ndictionary.put('one', { embedded: true });\ndictionary.remove('three');\nchai_1.expect(dictionary.size()).to.equal(2);\nlet foundTwo = false;\nfor (const each of dictionary) {\n    if (!foundTwo) {\n        chai_1.expect(each).to.equal('two');\n        foundTwo = true;\n    }\n    else {\n        chai_1.expect(each).to.eql({ embedded: true });\n    }\n}\ndictionary.remove('item');\nchai_1.expect(dictionary.size()).to.equal(1);\ndictionary.clear();\nchai_1.expect(dictionary.size()).to.equal(0);",
              "err": {},
              "uuid": "a07959ec-f385-4237-8467-874437a7e06c",
              "parentUUID": "2c50f8d4-5040-4684-8c33-7be530eb0e40",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8db6197d-0e13-4123-904b-df37b5292132",
            "a07959ec-f385-4237-8467-874437a7e06c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9fd4f8c0-5681-43a1-a095-791f99c379cd",
          "title": "logger test",
          "fullFile": "/home/lane/git/redis/test/logger.test.ts",
          "file": "/test/logger.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "logger test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "3735e375-f4fa-42e7-80cc-9c4e30cbcac5",
              "parentUUID": "9fd4f8c0-5681-43a1-a095-791f99c379cd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "logger test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "c96f9340-5a24-44f0-b660-ff8c98a308a3",
              "parentUUID": "9fd4f8c0-5681-43a1-a095-791f99c379cd",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "logger test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "3bbe82e0-0007-4f7b-976b-f205107653a9",
              "parentUUID": "9fd4f8c0-5681-43a1-a095-791f99c379cd",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should construct",
              "fullTitle": "logger test should construct",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        logger = new logger_1.Logger(module.id);\n        chai_1.expect(logger.constructor.name).to.equal('Logger');\n        logger.info(`This is an info message`);\n        logger.warn('This is a warning message');\n        logger.debug(`This is an invisible debug message`);\n    })",
              "err": {},
              "uuid": "008cb6c8-069f-4a21-92e2-784c53ccb620",
              "parentUUID": "9fd4f8c0-5681-43a1-a095-791f99c379cd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not construct when initialized with an empty string",
              "fullTitle": "logger test should not construct when initialized with an empty string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(() => {\n    logger = new logger_1.Logger('');\n}).to.throw();",
              "err": {},
              "uuid": "46f54b2b-a4bd-48c4-b920-5c663a7b755b",
              "parentUUID": "9fd4f8c0-5681-43a1-a095-791f99c379cd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "008cb6c8-069f-4a21-92e2-784c53ccb620",
            "46f54b2b-a4bd-48c4-b920-5c663a7b755b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "91db1c54-d5d6-48a0-8014-070db2ae681c",
          "title": "lua-bit test",
          "fullFile": "/home/lane/git/redis/test/lua/lua-bit.test.ts",
          "file": "/test/lua/lua-bit.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lua-bit test \"before all\" hook",
              "timedOut": false,
              "duration": 72,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "a90b4a3d-cda2-423d-a4b6-32117dbb1266",
              "parentUUID": "91db1c54-d5d6-48a0-8014-070db2ae681c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lua-bit test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "c0cf36f0-5231-44dc-a1db-4dff6cd9f68d",
              "parentUUID": "91db1c54-d5d6-48a0-8014-070db2ae681c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lua-bit test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "803abaae-fb9c-496e-a56b-fe761e7de65f",
              "parentUUID": "91db1c54-d5d6-48a0-8014-070db2ae681c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lua-bit test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "54dca11e-9769-44d6-8a4f-614ba291893f",
              "parentUUID": "91db1c54-d5d6-48a0-8014-070db2ae681c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should leverage the LUA bit library for bit AND op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit AND op",
              "timedOut": false,
              "duration": 66,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'local val = bit.band(5, 1) return val ', '0']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "f2846126-f07c-4831-bf21-e9c26192a296",
              "parentUUID": "91db1c54-d5d6-48a0-8014-070db2ae681c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit OR op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit OR op",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'local val = bit.bor(5, 1) return val ', '0']);\n        chai_1.expect(response).to.equal(5);\n    })",
              "err": {},
              "uuid": "732146d1-3cf8-4cc9-9faf-09766a58050d",
              "parentUUID": "91db1c54-d5d6-48a0-8014-070db2ae681c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit XOR op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit XOR op",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'local val = bit.bxor(5, 1) return val ', '0']);\n        chai_1.expect(response).to.equal(4);\n    })",
              "err": {},
              "uuid": "1de1f8a6-b7a5-4ec0-9fe2-94e49144e531",
              "parentUUID": "91db1c54-d5d6-48a0-8014-070db2ae681c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit NOT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit NOT op",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'local val = bit.bnot(5) return val ', '0']);\n        chai_1.expect(response).to.equal(-6);\n    })",
              "err": {},
              "uuid": "7a4a1702-6051-432b-bb04-4b61ee426c3b",
              "parentUUID": "91db1c54-d5d6-48a0-8014-070db2ae681c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit LSHIFT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit LSHIFT op",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'local val = bit.lshift(5, 1) return val ', '0']);\n        chai_1.expect(response).to.equal(10);\n    })",
              "err": {},
              "uuid": "481a91ad-713d-4ac3-8ace-97faf9243feb",
              "parentUUID": "91db1c54-d5d6-48a0-8014-070db2ae681c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit RSHIFT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit RSHIFT op",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['info', 'server']);\n        // Only run this test if this is unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            response = yield common_test_1.sendCommand(client, ['eval', 'local val = bit.rshift(-5, 1) return val ', '0']);\n            chai_1.expect(response).to.equal(-3);\n        }\n    })",
              "err": {},
              "uuid": "cf48969c-645a-49bb-a951-0a61507ac740",
              "parentUUID": "91db1c54-d5d6-48a0-8014-070db2ae681c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit ARSHIFT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit ARSHIFT op",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'local val = bit.arshift(5, 1) return val ', '0']);\n        chai_1.expect(response).to.equal(2);\n    })",
              "err": {},
              "uuid": "ac655829-d5ff-417a-986b-b2d37e3e5dc3",
              "parentUUID": "91db1c54-d5d6-48a0-8014-070db2ae681c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f2846126-f07c-4831-bf21-e9c26192a296",
            "732146d1-3cf8-4cc9-9faf-09766a58050d",
            "1de1f8a6-b7a5-4ec0-9fe2-94e49144e531",
            "7a4a1702-6051-432b-bb04-4b61ee426c3b",
            "481a91ad-713d-4ac3-8ace-97faf9243feb",
            "cf48969c-645a-49bb-a951-0a61507ac740",
            "ac655829-d5ff-417a-986b-b2d37e3e5dc3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 233,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "99160b89-42fc-4627-be70-5f378ffa4b03",
          "title": "client command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/client-command.test.ts",
          "file": "/test/resp/command/client-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "client command test \"before all\" hook",
              "timedOut": false,
              "duration": 24,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "52f257b5-c1c4-4ac0-94be-e4a08a75fb81",
              "parentUUID": "99160b89-42fc-4627-be70-5f378ffa4b03",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "client command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "13ed47e4-3727-46b9-a585-f1280950e1cb",
              "parentUUID": "99160b89-42fc-4627-be70-5f378ffa4b03",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "client command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "55f665d8-5d45-495d-800d-e6153f40e1c8",
              "parentUUID": "99160b89-42fc-4627-be70-5f378ffa4b03",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "client command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "dd1a8572-68f1-45dc-a0b5-da9e70fa22af",
              "parentUUID": "99160b89-42fc-4627-be70-5f378ffa4b03",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow more than 3 parameters",
              "fullTitle": "client command test should not allow more than 3 parameters",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'one', 'two', 'three', 'four']);\n        chai_1.expect(response).to.equal('ReplyError: ERR Unknown subcommand or wrong number of arguments for \\'one\\'. Try CLIENT HELP');\n    })",
              "err": {},
              "uuid": "524c77ed-29dd-49ec-aefe-9d02565c713f",
              "parentUUID": "99160b89-42fc-4627-be70-5f378ffa4b03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail predictably when an unknown subcommand is passed",
              "fullTitle": "client command test should fail predictably when an unknown subcommand is passed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'whatever']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'whatever'));\n    })",
              "err": {},
              "uuid": "5f7e8ea9-7c87-438b-ab13-d8d6e45b85d9",
              "parentUUID": "99160b89-42fc-4627-be70-5f378ffa4b03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a NIL name when called with \"GETNAME\" subcommand",
              "fullTitle": "client command test should return a NIL name when called with \"GETNAME\" subcommand",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'getname']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "071172f3-f410-4234-8cde-52e828fbfbd9",
              "parentUUID": "99160b89-42fc-4627-be70-5f378ffa4b03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail predictably when \"GETNAME\" is called with too many parameters",
              "fullTitle": "client command test should fail predictably when \"GETNAME\" is called with too many parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'getname', 'extra']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'getname'));\n    })",
              "err": {},
              "uuid": "d76e5326-42a2-4904-a843-39bd0eda2e6a",
              "parentUUID": "99160b89-42fc-4627-be70-5f378ffa4b03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with \"OK\" when \"setname\" is called with a valid name",
              "fullTitle": "client command test should respond with \"OK\" when \"setname\" is called with a valid name",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['client', 'setname', 'whatever']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['client', 'getname']);\n        chai_1.expect(response).to.equal('whatever');\n    })",
              "err": {},
              "uuid": "2a20c48b-fee5-4001-8eb3-a4d421387f10",
              "parentUUID": "99160b89-42fc-4627-be70-5f378ffa4b03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should persist the value for \"setname\" across tests",
              "fullTitle": "client command test should persist the value for \"setname\" across tests",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'getname']);\n        chai_1.expect(response).to.equal('whatever');\n    })",
              "err": {},
              "uuid": "c3ee9f45-74bc-42f9-b8e0-12424bc9198a",
              "parentUUID": "99160b89-42fc-4627-be70-5f378ffa4b03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"setname\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"setname\" called with too many parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'setname', 'test', 'two']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'setname'));\n    })",
              "err": {},
              "uuid": "8bbb920e-2bad-43fb-bb57-fea2bd62a62f",
              "parentUUID": "99160b89-42fc-4627-be70-5f378ffa4b03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow whitespace in \"setname\" subcommand",
              "fullTitle": "client command test should not allow whitespace in \"setname\" subcommand",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'setname', 'te\\nst']);\n        chai_1.expect(response).to.equal(`ReplyError: ERR Client names cannot contain spaces, newlines or special characters.`);\n    })",
              "err": {},
              "uuid": "cd0c5aaf-c65c-4367-904f-4b91b6698a8d",
              "parentUUID": "99160b89-42fc-4627-be70-5f378ffa4b03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the server-assigned client id",
              "fullTitle": "client command test should return the server-assigned client id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'id']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(String(response).length).to.be.greaterThan(0);\n    })",
              "err": {},
              "uuid": "b810362b-021f-4deb-9eec-22fe34a3c8f4",
              "parentUUID": "99160b89-42fc-4627-be70-5f378ffa4b03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"id\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"id\" called with too many parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'id', 'test', 'two']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'id'));\n    })",
              "err": {},
              "uuid": "e8875db9-4cab-4760-98cf-aadb1c8d7087",
              "parentUUID": "99160b89-42fc-4627-be70-5f378ffa4b03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a bunch of information when client \"list\" subcommand is invoked",
              "fullTitle": "client command test should return a bunch of information when client \"list\" subcommand is invoked",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'list']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response.length).to.be.greaterThan(0);\n        chai_1.expect(response).to.match(/ name=whatever /);\n        chai_1.expect(response).to.match(/\\bdb=0\\b/);\n    })",
              "err": {},
              "uuid": "31114ab4-e8ee-48cc-a38b-0d929f649464",
              "parentUUID": "99160b89-42fc-4627-be70-5f378ffa4b03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"list\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"list\" called with too many parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'list', 'test', 'two']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "fd3e53e8-d2df-4ba5-8896-6c5805f7dbbf",
              "parentUUID": "99160b89-42fc-4627-be70-5f378ffa4b03",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "524c77ed-29dd-49ec-aefe-9d02565c713f",
            "5f7e8ea9-7c87-438b-ab13-d8d6e45b85d9",
            "071172f3-f410-4234-8cde-52e828fbfbd9",
            "d76e5326-42a2-4904-a843-39bd0eda2e6a",
            "2a20c48b-fee5-4001-8eb3-a4d421387f10",
            "c3ee9f45-74bc-42f9-b8e0-12424bc9198a",
            "8bbb920e-2bad-43fb-bb57-fea2bd62a62f",
            "cd0c5aaf-c65c-4367-904f-4b91b6698a8d",
            "b810362b-021f-4deb-9eec-22fe34a3c8f4",
            "e8875db9-4cab-4760-98cf-aadb1c8d7087",
            "31114ab4-e8ee-48cc-a38b-0d929f649464",
            "fd3e53e8-d2df-4ba5-8896-6c5805f7dbbf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d0ac3aa9-5eb7-4249-b978-c63a0e2f85b6",
          "title": "flushall-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/db/flushall-command.test.ts",
          "file": "/test/resp/command/db/flushall-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "flushall-command test \"before all\" hook",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "6bf242d5-8b27-4eb9-8062-03d5663fa112",
              "parentUUID": "d0ac3aa9-5eb7-4249-b978-c63a0e2f85b6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "flushall-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "6b051d60-6f60-4063-b783-830e2708f41c",
              "parentUUID": "d0ac3aa9-5eb7-4249-b978-c63a0e2f85b6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "flushall-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "1e745545-676f-4789-86b0-94c62d025146",
              "parentUUID": "d0ac3aa9-5eb7-4249-b978-c63a0e2f85b6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "flushall-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "39750312-7719-4faa-a561-f44c3ca2990b",
              "parentUUID": "d0ac3aa9-5eb7-4249-b978-c63a0e2f85b6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should remove all keys from all databases",
              "fullTitle": "flushall-command test should remove all keys from all databases",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let db = 0; db < 16; db++) {\n            response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['set', 'dbid', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            console.log(`DB: ${db}: dbsize: ${response}`);\n            chai_1.expect(response).to.equal(1);\n        }\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        for (let db = 0; db < 16; db++) {\n            response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.equal(0);\n        }\n    })",
              "err": {},
              "uuid": "45d1ed76-16bc-4f6a-a5cb-74113c6fe047",
              "parentUUID": "d0ac3aa9-5eb7-4249-b978-c63a0e2f85b6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "45d1ed76-16bc-4f6a-a5cb-74113c6fe047"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 106,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "213b7087-144a-4996-b404-1c938781c7ef",
          "title": "flushdb-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/db/flushdb-command.test.ts",
          "file": "/test/resp/command/db/flushdb-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "flushdb-command test \"before all\" hook",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "8642b92e-c16a-4b11-b7fe-cd7da157924f",
              "parentUUID": "213b7087-144a-4996-b404-1c938781c7ef",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "flushdb-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "acc20d03-4f85-42ec-a018-d1aef75f8596",
              "parentUUID": "213b7087-144a-4996-b404-1c938781c7ef",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "flushdb-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "1e6536df-e261-4bec-bc69-93907f254d52",
              "parentUUID": "213b7087-144a-4996-b404-1c938781c7ef",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "flushdb-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "35dce129-1964-4eef-8d81-da0a5d0f7bb6",
              "parentUUID": "213b7087-144a-4996-b404-1c938781c7ef",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should remove all keys from only the currently selected databases",
              "fullTitle": "flushdb-command test should remove all keys from only the currently selected databases",
              "timedOut": false,
              "duration": 140,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let db = 0; db < 16; db++) {\n            response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['set', 'dbid', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.equal(1);\n        }\n        for (let db = 0; db < 16; db++) {\n            if (db !== 14) {\n                response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n                chai_1.expect(response).to.equal('OK');\n                response = yield common_test_1.sendCommand(client, ['flushdb']);\n                chai_1.expect(response).to.equal('OK');\n                response = yield common_test_1.sendCommand(client, ['exists', 'dbid']);\n                chai_1.expect(response).to.equal(0);\n                response = yield common_test_1.sendCommand(client, ['dbsize']);\n                chai_1.expect(response).to.equal(0);\n            }\n        }\n        response = yield common_test_1.sendCommand(client, ['select', '14']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'dbid']);\n        chai_1.expect(response).to.equal('14');\n        response = yield common_test_1.sendCommand(client, ['dbsize']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "1f5affe2-bf0a-434c-a31a-90d0e64b17c4",
              "parentUUID": "213b7087-144a-4996-b404-1c938781c7ef",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1f5affe2-bf0a-434c-a31a-90d0e64b17c4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 140,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "091cd370-380b-4888-a76e-88cbcb8df315",
          "title": "hget command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/hash/hget-command.test.ts",
          "file": "/test/resp/command/hash/hget-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "hget command test \"before all\" hook",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "85a2d62f-4296-4915-8ce2-3be85fc99b97",
              "parentUUID": "091cd370-380b-4888-a76e-88cbcb8df315",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "hget command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "0dd3a093-dfad-4b19-bc92-3358e9446e44",
              "parentUUID": "091cd370-380b-4888-a76e-88cbcb8df315",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "hget command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "85ef4505-c9ec-44ab-80b3-1ab8912acda8",
              "parentUUID": "091cd370-380b-4888-a76e-88cbcb8df315",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "hget command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "41af2c19-382b-4c71-a1cc-819a29be4b51",
              "parentUUID": "091cd370-380b-4888-a76e-88cbcb8df315",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require exactly 2 parameters",
              "fullTitle": "hget command test should require exactly 2 parameters",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['hget', 'test'])\n    .then((response1) => {\n    chai_1.expect(response1).to.equal('ReplyError: ERR wrong number of arguments for \\'hget\\' command');\n    common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'one', 'two'])\n        .then((response2) => {\n        chai_1.expect(response2).to.equal('ReplyError: ERR wrong number of arguments for \\'hget\\' command');\n        common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'one'])\n            .then((response3) => {\n            chai_1.expect(response3).to.equal(null);\n            done();\n        });\n    });\n});",
              "err": {},
              "uuid": "87090264-31e4-4615-acff-87dd78784f37",
              "parentUUID": "091cd370-380b-4888-a76e-88cbcb8df315",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a value after it has be set",
              "fullTitle": "hget command test should get a value after it has be set",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['hset', 'test', 'one', 'two'])\n    .then(() => {\n    common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'one'])\n        .then((response) => {\n        chai_1.expect(response).to.equal('two');\n        done();\n    });\n});",
              "err": {},
              "uuid": "61667415-5637-45cd-ae56-d969fc2a3a55",
              "parentUUID": "091cd370-380b-4888-a76e-88cbcb8df315",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return nil string when the key exists but the field does not",
              "fullTitle": "hget command test should return nil string when the key exists but the field does not",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'two'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(null);\n    done();\n});",
              "err": {},
              "uuid": "75a248c8-3121-4e1a-91f8-9bfe566f2f60",
              "parentUUID": "091cd370-380b-4888-a76e-88cbcb8df315",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87090264-31e4-4615-acff-87dd78784f37",
            "61667415-5637-45cd-ae56-d969fc2a3a55",
            "75a248c8-3121-4e1a-91f8-9bfe566f2f60"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "633753bd-771d-48d4-825f-7c776a711246",
          "title": "hset command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/hash/hset-command.test.ts",
          "file": "/test/resp/command/hash/hset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "hset command test \"before all\" hook",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(new net.Socket(), ['flushall']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "426390e8-96d4-4a8e-8381-d4c2a0a88903",
              "parentUUID": "633753bd-771d-48d4-825f-7c776a711246",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "hset command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "e4cfdb63-01c4-488c-aa3f-d6c812e3dea4",
              "parentUUID": "633753bd-771d-48d4-825f-7c776a711246",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "hset command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "31ff2787-1d0c-42ad-b864-2b3b0b5ca8cd",
              "parentUUID": "633753bd-771d-48d4-825f-7c776a711246",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "hset command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "3fa8cb18-06df-4cd4-aa2a-3e306535e97d",
              "parentUUID": "633753bd-771d-48d4-825f-7c776a711246",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require a minimum of 3 parameters",
              "fullTitle": "hset command test should require a minimum of 3 parameters",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `KEY${new Date().getTime()}`;\n        chai_1.expect(uniqueKey).not.to.equal(lastId);\n        lastId = uniqueKey;\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey]);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for \\'hset\\' command/i);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one']);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for \\'hm?set\\' command/i);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'two']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "2cd93a1a-bd61-40fa-947b-ecd8c7f51754",
              "parentUUID": "633753bd-771d-48d4-825f-7c776a711246",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only accept an odd number of parameters",
              "fullTitle": "hset command test should only accept an odd number of parameters",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `newKey${new Date().getTime()}`;\n        chai_1.expect(uniqueKey).not.to.equal(lastId);\n        lastId = uniqueKey;\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one2', 'two', 'fail']);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for hm?set/i);\n    })",
              "err": {},
              "uuid": "b9415400-8332-4c80-9351-11e066e9a383",
              "parentUUID": "633753bd-771d-48d4-825f-7c776a711246",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only report added fields",
              "fullTitle": "hset command test should only report added fields",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `key3${new Date().getTime()}`;\n        chai_1.expect(uniqueKey).not.to.equal(lastId);\n        lastId = uniqueKey;\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'six']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'anothervalue']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hget', uniqueKey, 'one']);\n        chai_1.expect(response).to.equal('anothervalue');\n    })",
              "err": {},
              "uuid": "eed5361b-5efb-48e3-8586-5f5b19a3a07c",
              "parentUUID": "633753bd-771d-48d4-825f-7c776a711246",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2cd93a1a-bd61-40fa-947b-ecd8c7f51754",
            "b9415400-8332-4c80-9351-11e066e9a383",
            "eed5361b-5efb-48e3-8586-5f5b19a3a07c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "656f1fff-67fd-4cdd-bda5-a7f66af99602",
          "title": "del-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/del-command.test.ts",
          "file": "/test/resp/command/key/del-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "del-command test \"before all\" hook",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "9d142090-3c3d-451f-b6e1-2a653cec5080",
              "parentUUID": "656f1fff-67fd-4cdd-bda5-a7f66af99602",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "del-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "5f60c180-b638-4a3c-95d7-8d8254232940",
              "parentUUID": "656f1fff-67fd-4cdd-bda5-a7f66af99602",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "del-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "860ef150-b1c3-4e27-ad50-c793bf0617fa",
              "parentUUID": "656f1fff-67fd-4cdd-bda5-a7f66af99602",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "del-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "498c6bea-c15b-464d-8e74-bf9b4891e993",
              "parentUUID": "656f1fff-67fd-4cdd-bda5-a7f66af99602",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when called with no keys present",
              "fullTitle": "del-command test should report ZERO when called with no keys present",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['del', 'key1', 'key2', 'key3'])\n    .then((response) => {\n    chai_1.expect(response).to.be.a('number');\n    chai_1.expect(response).to.equal(0);\n    done();\n});",
              "err": {},
              "uuid": "32bad382-25ee-46e9-aaa2-f7056e12736d",
              "parentUUID": "656f1fff-67fd-4cdd-bda5-a7f66af99602",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report the number of keys actually removed",
              "fullTitle": "del-command test should report the number of keys actually removed",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const client = new net.Socket();\ncommon_test_1.sendCommand(client, ['set', 'key1', 'data'])\n    .then(() => {\n    common_test_1.sendCommand(client, ['set', 'key2', 'data'])\n        .then(() => {\n        common_test_1.sendCommand(client, ['set', 'key3', 'data'])\n            .then(() => {\n            common_test_1.sendCommand(client, ['del', 'key1', 'key3'])\n                .then((response) => {\n                chai_1.expect(response).to.equal(2);\n                done();\n            });\n        });\n    });\n});",
              "err": {},
              "uuid": "8b904001-d74d-4c8a-a652-135ba19a05a2",
              "parentUUID": "656f1fff-67fd-4cdd-bda5-a7f66af99602",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have retained key2 from the previous test",
              "fullTitle": "del-command test should have retained key2 from the previous test",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['del', 'key2'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n    done();\n});",
              "err": {},
              "uuid": "66715563-ae4e-47db-a379-32390f2a0781",
              "parentUUID": "656f1fff-67fd-4cdd-bda5-a7f66af99602",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "32bad382-25ee-46e9-aaa2-f7056e12736d",
            "8b904001-d74d-4c8a-a652-135ba19a05a2",
            "66715563-ae4e-47db-a379-32390f2a0781"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b3106dc0-a8e4-486d-83e2-65277532be05",
          "title": "exists-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/exists-command.test.ts",
          "file": "/test/resp/command/key/exists-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "exists-command test \"before all\" hook",
              "timedOut": false,
              "duration": 42,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a millisecond TTL to validate exists respects TTL\n    common_test_1.sendCommand(new net.Socket(), ['set', 'ttlkey', 'value', 'PX', '3'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
              "uuid": "491b18ee-1bd3-4978-aafd-ca421e53ac0f",
              "parentUUID": "b3106dc0-a8e4-486d-83e2-65277532be05",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "exists-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "0211853e-70b5-4de8-b376-32680ffffdc6",
              "parentUUID": "b3106dc0-a8e4-486d-83e2-65277532be05",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "exists-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "564996ca-21d1-422b-b349-271f8795642b",
              "parentUUID": "b3106dc0-a8e4-486d-83e2-65277532be05",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "exists-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "19919c0c-8838-45dc-b0b3-ade29dbbb5c1",
              "parentUUID": "b3106dc0-a8e4-486d-83e2-65277532be05",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when none of the specified keys exist",
              "fullTitle": "exists-command test should report ZERO when none of the specified keys exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['exists', 'key1', 'key2', 'key3'])\n    .then((response) => {\n    chai_1.expect(response).to.be.a('number');\n    chai_1.expect(response).to.equal(0);\n    done();\n});",
              "err": {},
              "uuid": "4c021c96-bbca-4f21-82c4-83d3ae779567",
              "parentUUID": "b3106dc0-a8e4-486d-83e2-65277532be05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require at least ONE parameter",
              "fullTitle": "exists-command test should require at least ONE parameter",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['exists'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'exists\\' command');\n    done();\n});",
              "err": {},
              "uuid": "24c70a34-2507-492e-a0f4-73ae442944f9",
              "parentUUID": "b3106dc0-a8e4-486d-83e2-65277532be05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report GREATER THAN ZERO when checking for the same existing key multiple times",
              "fullTitle": "exists-command test should report GREATER THAN ZERO when checking for the same existing key multiple times",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['set', 'key', 'value'])\n    .then(() => {\n    common_test_1.sendCommand(new net.Socket(), ['exists', 'key', 'key', 'unknownkey', 'another', 'another'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(2);\n        done();\n    });\n});",
              "err": {},
              "uuid": "eb731dda-e034-4f77-9ce5-e778a4b12e54",
              "parentUUID": "b3106dc0-a8e4-486d-83e2-65277532be05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect the TTL value on a key",
              "fullTitle": "exists-command test should respect the TTL value on a key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['exists', 'ttlkey'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(0);\n    done();\n});",
              "err": {},
              "uuid": "98bfc596-fd15-4e77-ac02-90d34368d1ea",
              "parentUUID": "b3106dc0-a8e4-486d-83e2-65277532be05",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4c021c96-bbca-4f21-82c4-83d3ae779567",
            "24c70a34-2507-492e-a0f4-73ae442944f9",
            "eb731dda-e034-4f77-9ce5-e778a4b12e54",
            "98bfc596-fd15-4e77-ac02-90d34368d1ea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0697da5b-72fc-4d72-a5a9-023ef122b74a",
          "title": "expire-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/expire-command.test.ts",
          "file": "/test/resp/command/key/expire-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "expire-command test \"before all\" hook",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "84beb790-17d3-468e-9d73-31c6983eacc2",
              "parentUUID": "0697da5b-72fc-4d72-a5a9-023ef122b74a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "expire-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "108eec70-e74e-4434-8161-1fa408cb25de",
              "parentUUID": "0697da5b-72fc-4d72-a5a9-023ef122b74a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "expire-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "f2d09f1f-a7c5-4b83-ad58-9d3aa85755f6",
              "parentUUID": "0697da5b-72fc-4d72-a5a9-023ef122b74a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "expire-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "ea8b8d7b-188c-4043-9ffd-b66759a73d53",
              "parentUUID": "0697da5b-72fc-4d72-a5a9-023ef122b74a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when expire called on non-existent key",
              "fullTitle": "expire-command test should report ZERO when expire called on non-existent key",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['expire', 'no-key', '1000']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "0d2e6dcd-c729-4189-a132-9235c8a039a9",
              "parentUUID": "0697da5b-72fc-4d72-a5a9-023ef122b74a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require an integer value for the ttl parameter",
              "fullTitle": "expire-command test should require an integer value for the ttl parameter",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'mykey', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', '10.2']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', 'ten']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "7bc8d3eb-9a85-4123-baa6-583993fffe4f",
              "parentUUID": "0697da5b-72fc-4d72-a5a9-023ef122b74a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set the requested ttl on a key",
              "fullTitle": "expire-command test should set the requested ttl on a key",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', '10000']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "b6eae947-d1a7-44ae-8539-83e4bff881b5",
              "parentUUID": "0697da5b-72fc-4d72-a5a9-023ef122b74a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should expire a key when we set a negative ttl",
              "fullTitle": "expire-command test should expire a key when we set a negative ttl",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Note that this is not consistent with documentation\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', '-1']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "203b1605-71ff-4e02-9fec-b59f09992ac5",
              "parentUUID": "0697da5b-72fc-4d72-a5a9-023ef122b74a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should work with ZKEYs (and other key types - as yet untested)",
              "fullTitle": "expire-command test should work with ZKEYs (and other key types - as yet untested)",
              "timedOut": false,
              "duration": 2017,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['zadd', 'zkey', '1', 'member'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n    common_test_1.sendCommand(client, ['exists', 'zkey'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(1);\n        common_test_1.sendCommand(client, ['expire', 'zkey', '1'])\n            .then((response) => {\n            chai_1.expect(response).to.equal(1);\n            setTimeout(() => {\n                common_test_1.sendCommand(client, ['exists', 'zkey'])\n                    .then((response) => {\n                    chai_1.expect(response).to.equal(0, `Unexpected response ${response} should be ZERO`);\n                    done();\n                });\n            }, 2000);\n        });\n    });\n});",
              "err": {},
              "uuid": "bc8bf036-6e64-411e-988f-a07b2d0f5493",
              "parentUUID": "0697da5b-72fc-4d72-a5a9-023ef122b74a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should survive the RENAME operation",
              "fullTitle": "expire-command test should survive the RENAME operation",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'rename-test', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['expire', 'rename-test', '1']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rename', 'rename-test', 'new-name']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'new-name']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'rename-test']);\n        chai_1.expect(response).to.equal(0);\n        yield setTimeout(() => __awaiter(void 0, void 0, void 0, function* () {\n            response = yield common_test_1.sendCommand(client, ['exists', 'new-name']);\n            chai_1.expect(response).to.equal(0);\n        }), 2000);\n    })",
              "err": {},
              "uuid": "6b916214-bcac-4ae5-9f44-0a4415b7ffd7",
              "parentUUID": "0697da5b-72fc-4d72-a5a9-023ef122b74a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0d2e6dcd-c729-4189-a132-9235c8a039a9",
            "7bc8d3eb-9a85-4123-baa6-583993fffe4f",
            "b6eae947-d1a7-44ae-8539-83e4bff881b5",
            "203b1605-71ff-4e02-9fec-b59f09992ac5",
            "bc8bf036-6e64-411e-988f-a07b2d0f5493",
            "6b916214-bcac-4ae5-9f44-0a4415b7ffd7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2041,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a49865d6-055c-4d87-abef-6cbbe67321b4",
          "title": "keys-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/keys-command.test.ts",
          "file": "/test/resp/command/key/keys-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "keys-command test \"before all\" hook",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "d2a03dde-8116-492d-b26d-1ac674c2e530",
              "parentUUID": "a49865d6-055c-4d87-abef-6cbbe67321b4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "keys-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "2ba759b0-d423-4b8a-84c1-fad97eac8def",
              "parentUUID": "a49865d6-055c-4d87-abef-6cbbe67321b4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "keys-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "51f947d9-7d0a-4202-9d2d-f5867275db2a",
              "parentUUID": "a49865d6-055c-4d87-abef-6cbbe67321b4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "keys-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "663a6bd5-22f5-4e6d-8fef-71ff857b81e8",
              "parentUUID": "a49865d6-055c-4d87-abef-6cbbe67321b4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should retrieve keys by glob patterns",
              "fullTitle": "keys-command test should retrieve keys by glob patterns",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mset', 'firstname', 'Jack', 'lastname', 'Stuntman', 'age', '35']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['keys', '*name*']);\n        chai_1.expect(response.sort()).to.eql(['firstname', 'lastname']);\n        response = yield common_test_1.sendCommand(client, ['keys', 'a??']);\n        chai_1.expect(response).to.eql(['age']);\n        response = yield common_test_1.sendCommand(client, ['keys', '*']);\n        // NOTE: There does not appear to be a guarantee of order\n        chai_1.expect(response.sort()).to.eql(['age', 'firstname', 'lastname']);\n    })",
              "err": {},
              "uuid": "79f631a5-8c64-4338-a813-b272f931fc55",
              "parentUUID": "a49865d6-055c-4d87-abef-6cbbe67321b4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "79f631a5-8c64-4338-a813-b272f931fc55"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "30f6fde1-6e9f-4061-a02f-fd0a7e8571bf",
          "title": "move-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/move-command.test.ts",
          "file": "/test/resp/command/key/move-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "move-command test \"before all\" hook",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "fa639233-2724-4b06-8b16-3139dd0aeea8",
              "parentUUID": "30f6fde1-6e9f-4061-a02f-fd0a7e8571bf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "move-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "087b92b4-052c-459f-9a24-6e7c64323da4",
              "parentUUID": "30f6fde1-6e9f-4061-a02f-fd0a7e8571bf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "move-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "974c683a-c03c-4610-8f93-9daa13c46ca9",
              "parentUUID": "30f6fde1-6e9f-4061-a02f-fd0a7e8571bf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "move-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "b6700f30-2a78-4224-b654-374b9cb7292c",
              "parentUUID": "30f6fde1-6e9f-4061-a02f-fd0a7e8571bf",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow target and source db to be the same",
              "fullTitle": "move-command test should not allow target and source db to be the same",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Even if source key does not exist\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, '0']);\n        chai_1.expect(response).to.equal('ReplyError: ERR source and destination objects are the same');\n    })",
              "err": {},
              "uuid": "ce15d070-e921-4b8c-a58a-53aea126a5b1",
              "parentUUID": "30f6fde1-6e9f-4061-a02f-fd0a7e8571bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should also report ZERO when the target key already exists",
              "fullTitle": "move-command test should also report ZERO when the target key already exists",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'database ZERO']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, '0']);\n        chai_1.expect(response).to.equal('ReplyError: ERR source and destination objects are the same');\n    })",
              "err": {},
              "uuid": "d3ed1bf2-ef30-4436-bd49-d92a45a6ab14",
              "parentUUID": "30f6fde1-6e9f-4061-a02f-fd0a7e8571bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should move a key from one database to another otherwise",
              "fullTitle": "move-command test should move a key from one database to another otherwise",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, '14']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['select', '14']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "43e3a9f6-bffd-4d65-a22e-6fbaccc43857",
              "parentUUID": "30f6fde1-6e9f-4061-a02f-fd0a7e8571bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report error when target database is invalid and key exists",
              "fullTitle": "move-command test should report error when target database is invalid and key exists",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Database 14 is already selected\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, 'InvalidDb']);\n        chai_1.expect(response).to.equal('ReplyError: ERR index out of range');\n    })",
              "err": {},
              "uuid": "da215165-fb80-4e30-8599-55e97924de04",
              "parentUUID": "30f6fde1-6e9f-4061-a02f-fd0a7e8571bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the key does not exist in the current db",
              "fullTitle": "move-command test should return 0 when the key does not exist in the current db",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushdb']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['dbsize']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['move', 'nokey', '3']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "8334e981-a906-452c-8319-b583b364de75",
              "parentUUID": "30f6fde1-6e9f-4061-a02f-fd0a7e8571bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the key exists in both source and target db",
              "fullTitle": "move-command test should return 0 when the key exists in both source and target db",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['select', '0']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['set', 'nokey', 'db0']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'nokey']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['select', '1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'nokey']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['set', 'nokey', 'db1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['move', 'nokey', '0']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['get', 'nokey']);\n        chai_1.expect(response).to.equal('db1');\n        response = yield common_test_1.sendCommand(client, ['select', '0']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'nokey']);\n        chai_1.expect(response).to.equal('db0');\n    })",
              "err": {},
              "uuid": "2e4ab070-5b7e-457f-b837-198c41578181",
              "parentUUID": "30f6fde1-6e9f-4061-a02f-fd0a7e8571bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ce15d070-e921-4b8c-a58a-53aea126a5b1",
            "d3ed1bf2-ef30-4436-bd49-d92a45a6ab14",
            "43e3a9f6-bffd-4d65-a22e-6fbaccc43857",
            "da215165-fb80-4e30-8599-55e97924de04",
            "8334e981-a906-452c-8319-b583b364de75",
            "2e4ab070-5b7e-457f-b837-198c41578181"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 47,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "553b1d0e-4f3c-42a3-9164-28a679e9257c",
          "title": "pexpire-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/pexpire-command.test.ts",
          "file": "/test/resp/command/key/pexpire-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "pexpire-command test \"before all\" hook",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "20f2144a-f283-41f6-b867-5e5a1e167159",
              "parentUUID": "553b1d0e-4f3c-42a3-9164-28a679e9257c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "pexpire-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "3796c6c2-f9d4-49bf-b864-f695e3199c6b",
              "parentUUID": "553b1d0e-4f3c-42a3-9164-28a679e9257c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "pexpire-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "b64ea74c-4d24-432c-94ce-09975797b2d8",
              "parentUUID": "553b1d0e-4f3c-42a3-9164-28a679e9257c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "pexpire-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "fb80cae3-974b-4f3a-8983-2e8dac2e9955",
              "parentUUID": "553b1d0e-4f3c-42a3-9164-28a679e9257c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when expire called on non-existent key",
              "fullTitle": "pexpire-command test should report ZERO when expire called on non-existent key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['pexpire', 'no-key', '1000']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "f927b01e-a40e-40b3-8e35-f8256355273f",
              "parentUUID": "553b1d0e-4f3c-42a3-9164-28a679e9257c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require an integer value for the ttl parameter",
              "fullTitle": "pexpire-command test should require an integer value for the ttl parameter",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'mykey', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['pexpire', 'mykey', '10.2']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['pexpire', 'mykey', 'ten']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "75866336-cde0-4307-bce9-09bb0e9b022e",
              "parentUUID": "553b1d0e-4f3c-42a3-9164-28a679e9257c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set the requested ttl on a key",
              "fullTitle": "pexpire-command test should set the requested ttl on a key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['pexpire', 'mykey', '10000']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "0702b188-b0f0-4a06-b28d-12dd3aa50eac",
              "parentUUID": "553b1d0e-4f3c-42a3-9164-28a679e9257c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should expire a key when we set a negative ttl",
              "fullTitle": "pexpire-command test should expire a key when we set a negative ttl",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Note that this is not consistent with documentation\n        response = yield common_test_1.sendCommand(client, ['pexpire', 'mykey', '-1']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "eb01d7c3-5f5d-4b25-92eb-d41d66c32087",
              "parentUUID": "553b1d0e-4f3c-42a3-9164-28a679e9257c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should work with ZKEYs (and other key types - as yet untested)",
              "fullTitle": "pexpire-command test should work with ZKEYs (and other key types - as yet untested)",
              "timedOut": false,
              "duration": 2006,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['zadd', 'zkey', '1', 'member'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n    common_test_1.sendCommand(client, ['exists', 'zkey'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(1);\n        common_test_1.sendCommand(client, ['pexpire', 'zkey', '1'])\n            .then((response) => {\n            chai_1.expect(response).to.equal(1);\n            setTimeout(() => {\n                common_test_1.sendCommand(client, ['exists', 'zkey'])\n                    .then((response) => {\n                    chai_1.expect(response).to.equal(0, `Unexpected response ${response} should be ZERO`);\n                    done();\n                });\n            }, 2000);\n        });\n    });\n});",
              "err": {},
              "uuid": "e3b3ede0-b1bc-4a55-91d7-e106a712488f",
              "parentUUID": "553b1d0e-4f3c-42a3-9164-28a679e9257c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should survive the RENAME operation",
              "fullTitle": "pexpire-command test should survive the RENAME operation",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'rename-test', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['pexpire', 'rename-test', '1000']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rename', 'rename-test', 'new-name']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'new-name']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'rename-test']);\n        chai_1.expect(response).to.equal(0);\n        yield setTimeout(() => __awaiter(void 0, void 0, void 0, function* () {\n            response = yield common_test_1.sendCommand(client, ['exists', 'new-name']);\n            chai_1.expect(response).to.equal(0);\n        }), 2000);\n    })",
              "err": {},
              "uuid": "8f70149d-74c8-446a-812b-0a92713ab46f",
              "parentUUID": "553b1d0e-4f3c-42a3-9164-28a679e9257c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f927b01e-a40e-40b3-8e35-f8256355273f",
            "75866336-cde0-4307-bce9-09bb0e9b022e",
            "0702b188-b0f0-4a06-b28d-12dd3aa50eac",
            "eb01d7c3-5f5d-4b25-92eb-d41d66c32087",
            "e3b3ede0-b1bc-4a55-91d7-e106a712488f",
            "8f70149d-74c8-446a-812b-0a92713ab46f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2026,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4163d38a-240f-4937-ba4a-72370c446b25",
          "title": "randomkey-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/randomkey-command.test.ts",
          "file": "/test/resp/command/key/randomkey-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "randomkey-command test \"before all\" hook",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "0012767f-de1f-49f9-b4b9-4baabf0e6528",
              "parentUUID": "4163d38a-240f-4937-ba4a-72370c446b25",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "randomkey-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "a3227741-8346-488e-8028-25b766f459e8",
              "parentUUID": "4163d38a-240f-4937-ba4a-72370c446b25",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "randomkey-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "f1930d6c-c423-4103-869a-3ec7d18ddc1a",
              "parentUUID": "4163d38a-240f-4937-ba4a-72370c446b25",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "randomkey-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "e0d517ab-4c30-46b3-a626-94570c60a6ad",
              "parentUUID": "4163d38a-240f-4937-ba4a-72370c446b25",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when the database is empty",
              "fullTitle": "randomkey-command test should return NIL when the database is empty",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushdb']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['randomkey']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "8a1324ae-78b6-4a00-a5c2-e8ce50edbfb2",
              "parentUUID": "4163d38a-240f-4937-ba4a-72370c446b25",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return list, zkey, hash, and string keys without preference",
              "fullTitle": "randomkey-command test should return list, zkey, hash, and string keys without preference",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const results = [];\n        response = yield common_test_1.sendCommand(client, ['hset', 'hash', 'field', 'value']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lpush', 'list', 'element']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'member']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['set', 'string', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        for (let i = 0; i < 15; i++) {\n            response = yield common_test_1.sendCommand(client, ['randomkey']);\n            chai_1.expect(response).to.be.a('string');\n            response = yield common_test_1.sendCommand(client, ['type', response]);\n            chai_1.expect(response).to.be.a('string');\n            if (results.indexOf(response) === -1) {\n                results.push(response);\n            }\n            if (results.length === 4) {\n                break;\n            }\n        }\n        chai_1.expect(results.length).to.be.greaterThan(1);\n    })",
              "err": {},
              "uuid": "161e19c8-62f9-483a-8665-dd65a66a833e",
              "parentUUID": "4163d38a-240f-4937-ba4a-72370c446b25",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8a1324ae-78b6-4a00-a5c2-e8ce50edbfb2",
            "161e19c8-62f9-483a-8665-dd65a66a833e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e9268501-23b0-43d7-9333-2874252b6883",
          "title": "rename-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/rename-command.test.ts",
          "file": "/test/resp/command/key/rename-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rename-command test \"before all\" hook",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "84ae7028-f239-4fc1-b9a9-9d1bde968c5e",
              "parentUUID": "e9268501-23b0-43d7-9333-2874252b6883",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rename-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "9e86b4f4-2773-420c-a92f-21ac44f09113",
              "parentUUID": "e9268501-23b0-43d7-9333-2874252b6883",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rename-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "6a09c94b-b950-494c-9e66-ba7b55554d2a",
              "parentUUID": "e9268501-23b0-43d7-9333-2874252b6883",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rename-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "d65c699c-96c7-46de-8a75-75f0ce2973a4",
              "parentUUID": "e9268501-23b0-43d7-9333-2874252b6883",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report an error when the key does not exist",
              "fullTitle": "rename-command test should report an error when the key does not exist",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rename', 'mykey', 'my-otherkey']);\n        chai_1.expect(response).to.equal('ReplyError: ERR no such key');\n    })",
              "err": {},
              "uuid": "497a130c-2376-4ca2-a8fa-0a50a1c2487f",
              "parentUUID": "e9268501-23b0-43d7-9333-2874252b6883",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should rename a key",
              "fullTitle": "rename-command test should rename a key",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'mykey', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['rename', 'mykey', 'my-otherkey']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'my-otherkey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "bc4b8c59-a33a-47f9-b63e-14ed48360315",
              "parentUUID": "e9268501-23b0-43d7-9333-2874252b6883",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overwrite an existing key without notice",
              "fullTitle": "rename-command test should overwrite an existing key without notice",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'myoriginalkey', 'something']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['rename', 'my-otherkey', 'myoriginalkey']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'myoriginalkey']);\n        chai_1.expect(response).to.equal('value');\n    })",
              "err": {},
              "uuid": "39e7ad9c-8fbb-4daa-90ef-71145ac3b796",
              "parentUUID": "e9268501-23b0-43d7-9333-2874252b6883",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "497a130c-2376-4ca2-a8fa-0a50a1c2487f",
            "bc4b8c59-a33a-47f9-b63e-14ed48360315",
            "39e7ad9c-8fbb-4daa-90ef-71145ac3b796"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8c556bfb-c01d-4eaf-8ea8-7ff32167eb68",
          "title": "renamenx-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/renamenx-command.test.ts",
          "file": "/test/resp/command/key/renamenx-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "renamenx-command test \"before all\" hook",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "318431d0-9548-4ca8-8fce-5d9d1aad3275",
              "parentUUID": "8c556bfb-c01d-4eaf-8ea8-7ff32167eb68",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "renamenx-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "5d943405-3908-4e9a-808f-0b285e58a2f2",
              "parentUUID": "8c556bfb-c01d-4eaf-8ea8-7ff32167eb68",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "renamenx-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "45efa420-0359-4f1e-a9e1-25b2e632adf8",
              "parentUUID": "8c556bfb-c01d-4eaf-8ea8-7ff32167eb68",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "renamenx-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "e85dd87f-7e61-438a-8f21-a225e5df36c1",
              "parentUUID": "8c556bfb-c01d-4eaf-8ea8-7ff32167eb68",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report an error when the key does not exist",
              "fullTitle": "renamenx-command test should report an error when the key does not exist",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['renamenx', 'mykey', 'my-otherkey']);\n        chai_1.expect(response).to.equal('ReplyError: ERR no such key');\n    })",
              "err": {},
              "uuid": "3ccd3c96-b875-41b9-bbd7-fd804212efc1",
              "parentUUID": "8c556bfb-c01d-4eaf-8ea8-7ff32167eb68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when attempting renamenx with source = destination",
              "fullTitle": "renamenx-command test should return 0 when attempting renamenx with source = destination",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'key', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['renamenx', 'key', 'key']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'key']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "45d636bc-1fbe-42da-b092-f9abf7c3f9a4",
              "parentUUID": "8c556bfb-c01d-4eaf-8ea8-7ff32167eb68",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should rename a key when requested",
              "fullTitle": "renamenx-command test should rename a key when requested",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['renamenx', 'key', 'newkey']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'key']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'newkey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "86afa155-dfba-4a5b-b496-b3f9bb2882e7",
              "parentUUID": "8c556bfb-c01d-4eaf-8ea8-7ff32167eb68",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3ccd3c96-b875-41b9-bbd7-fd804212efc1",
            "45d636bc-1fbe-42da-b092-f9abf7c3f9a4",
            "86afa155-dfba-4a5b-b496-b3f9bb2882e7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c6ca0ec3-5ef6-4264-ab82-f9ee4c281f6b",
          "title": "ttl-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/ttl-command.test.ts",
          "file": "/test/resp/command/key/ttl-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "ttl-command test \"before all\" hook",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a couple - second TTL to validate exists respects TTL\n    common_test_1.sendCommand(new net.Socket(), ['set', 'ttlkey', 'value', 'EX', '30'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
              "uuid": "96eced3f-c91e-40c9-afcc-2f07c0450e41",
              "parentUUID": "c6ca0ec3-5ef6-4264-ab82-f9ee4c281f6b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "ttl-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "4094327d-ceaf-402b-bb12-f977d3019b13",
              "parentUUID": "c6ca0ec3-5ef6-4264-ab82-f9ee4c281f6b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "ttl-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "4424d0f0-3781-4531-a91c-77a25ce816ea",
              "parentUUID": "c6ca0ec3-5ef6-4264-ab82-f9ee4c281f6b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "ttl-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "f953de55-5816-4cbe-805b-db2f28558a5d",
              "parentUUID": "c6ca0ec3-5ef6-4264-ab82-f9ee4c281f6b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report -2 when the key does not exist",
              "fullTitle": "ttl-command test should report -2 when the key does not exist",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ttl', 'nokey']);\n        chai_1.expect(response).to.equal(-2);\n    })",
              "err": {},
              "uuid": "b7b69f0f-b8f6-4596-bbde-044d08abb96f",
              "parentUUID": "c6ca0ec3-5ef6-4264-ab82-f9ee4c281f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return -1 when the key exists but does not have a ttl",
              "fullTitle": "ttl-command test should return -1 when the key exists but does not have a ttl",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'newkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['ttl', 'newkey']);\n        chai_1.expect(response).to.equal(-1);\n    })",
              "err": {},
              "uuid": "c84dcd0d-f7be-484f-879a-f92993ccea45",
              "parentUUID": "c6ca0ec3-5ef6-4264-ab82-f9ee4c281f6b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the current ttl in seconds when available",
              "fullTitle": "ttl-command test should return the current ttl in seconds when available",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ttl', 'ttlkey']);\n        chai_1.expect(response).to.be.greaterThan(0);\n        chai_1.expect(response).to.be.lessThan(31);\n    })",
              "err": {},
              "uuid": "d5d3cf2c-3507-4a5e-a070-22e60ede2695",
              "parentUUID": "c6ca0ec3-5ef6-4264-ab82-f9ee4c281f6b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b7b69f0f-b8f6-4596-bbde-044d08abb96f",
            "c84dcd0d-f7be-484f-879a-f92993ccea45",
            "d5d3cf2c-3507-4a5e-a070-22e60ede2695"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ed995883-e34f-45c3-b52d-702468d0680d",
          "title": "type-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/type-command.test.ts",
          "file": "/test/resp/command/key/type-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "type-command test \"before all\" hook",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "aa654808-fe68-4858-bd82-050ece1c8a2f",
              "parentUUID": "ed995883-e34f-45c3-b52d-702468d0680d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "type-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "12027cb8-fa1b-4fa6-97c0-7b2a3b1037a1",
              "parentUUID": "ed995883-e34f-45c3-b52d-702468d0680d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "type-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "f7ef34d1-d4c1-4116-b2ab-264ba5818faa",
              "parentUUID": "ed995883-e34f-45c3-b52d-702468d0680d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "type-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a404a913-386a-4733-9e82-a29da42f046a",
              "parentUUID": "ed995883-e34f-45c3-b52d-702468d0680d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report the type of key",
              "fullTitle": "type-command test should report the type of key",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['set', 'string-key', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['type', 'string-key']);\n        chai_1.expect(response).to.equal('string');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'list-key', 'test']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['type', 'list-key']);\n        chai_1.expect(response).to.equal('list');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'set-key', 'test']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['type', 'set-key']);\n        chai_1.expect(response).to.equal('set');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['type', 'zkey']);\n        chai_1.expect(response).to.equal('zset');\n        response = yield common_test_1.sendCommand(client, ['type', 'never']);\n        chai_1.expect(response).to.equal('none');\n    })",
              "err": {},
              "uuid": "bda4b9d7-bc1d-43ae-8005-f29ebeb847e0",
              "parentUUID": "ed995883-e34f-45c3-b52d-702468d0680d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bda4b9d7-bc1d-43ae-8005-f29ebeb847e0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ee4e7167-05ec-448d-9195-156b60dbcef1",
          "title": "blpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/blpop-command.test.ts",
          "file": "/test/resp/command/list/blpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "blpop-command test \"before all\" hook",
              "timedOut": false,
              "duration": 64,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "0ea702ac-73b8-4f7b-96a2-05985dd7002f",
              "parentUUID": "ee4e7167-05ec-448d-9195-156b60dbcef1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "blpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "3f1b908b-6f34-413a-b52f-14942d73bf59",
              "parentUUID": "ee4e7167-05ec-448d-9195-156b60dbcef1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "blpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "da806db4-1b30-4f63-93fd-e9e86d6540b1",
              "parentUUID": "ee4e7167-05ec-448d-9195-156b60dbcef1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "blpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "6c41f136-6984-4280-839a-178c3de5cdf1",
              "parentUUID": "ee4e7167-05ec-448d-9195-156b60dbcef1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when timeout > 0 and list does not exist",
              "fullTitle": "blpop-command test should return NIL when timeout > 0 and list does not exist",
              "timedOut": false,
              "duration": 1005,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['blpop', 'no-key', '1']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "621051c4-9688-4f9b-bf64-3fc148e37e4e",
              "parentUUID": "ee4e7167-05ec-448d-9195-156b60dbcef1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should wait for a list to exist and return the list name and value",
              "fullTitle": "blpop-command test should wait for a list to exist and return the list name and value",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['blpop', 'no-key', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['no-key', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'no-key', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "73ef064b-d95f-44ba-9061-f161f26c678e",
              "parentUUID": "ee4e7167-05ec-448d-9195-156b60dbcef1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the list name and HEAD value",
              "fullTitle": "blpop-command test should return the list name and HEAD value",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['blpop', 'no-key2', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['no-key2', 'first']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'no-key2', 'third', 'second', 'first'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n});",
              "err": {},
              "uuid": "c8548a1a-992c-4f99-ba77-e26fd4c3a32b",
              "parentUUID": "ee4e7167-05ec-448d-9195-156b60dbcef1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support blocking lpop against multiple lists in one call",
              "fullTitle": "blpop-command test should support blocking lpop against multiple lists in one call",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['blpop', 'list1', 'list2', 'list3', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['list2', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'list2', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "1f7b3276-6637-4de8-9a85-1e5369df088d",
              "parentUUID": "ee4e7167-05ec-448d-9195-156b60dbcef1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the pushd value when it already exists even if a timeout is set",
              "fullTitle": "blpop-command test should return the pushd value when it already exists even if a timeout is set",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueKey = `poplpush${new Date().getTime()}`;\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', uniqueKey, 'third', 'second', 'first'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n    common_test_1.sendCommand(client, ['blpop', uniqueKey, '0'])\n        .then((response) => {\n        chai_1.expect(response).to.eql([uniqueKey, 'first']);\n        done();\n    });\n});",
              "err": {},
              "uuid": "3e91ce0f-9e80-4428-a614-e87b2b34c1a3",
              "parentUUID": "ee4e7167-05ec-448d-9195-156b60dbcef1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "621051c4-9688-4f9b-bf64-3fc148e37e4e",
            "73ef064b-d95f-44ba-9061-f161f26c678e",
            "c8548a1a-992c-4f99-ba77-e26fd4c3a32b",
            "1f7b3276-6637-4de8-9a85-1e5369df088d",
            "3e91ce0f-9e80-4428-a614-e87b2b34c1a3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1017,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "54fdb38e-3bee-4903-ba85-9d5119dc6f33",
          "title": "brpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/brpop-command.test.ts",
          "file": "/test/resp/command/list/brpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "brpop-command test \"before all\" hook",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "e9637c8a-e04d-4c8d-9600-035ab13844c3",
              "parentUUID": "54fdb38e-3bee-4903-ba85-9d5119dc6f33",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "brpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "c6abe6ca-c99f-4c31-8a3f-f1b99f966a9b",
              "parentUUID": "54fdb38e-3bee-4903-ba85-9d5119dc6f33",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "brpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "1521ecc0-c18e-4280-9ed7-1ac7541d6198",
              "parentUUID": "54fdb38e-3bee-4903-ba85-9d5119dc6f33",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "brpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "e73ad0f0-5d72-41c0-abbe-14f27602e51a",
              "parentUUID": "54fdb38e-3bee-4903-ba85-9d5119dc6f33",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when timeout > 0 and list does not exist",
              "fullTitle": "brpop-command test should return NIL when timeout > 0 and list does not exist",
              "timedOut": false,
              "duration": 1006,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['brpop', 'no-key', '1']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "e7a0b9cf-e9e0-49e1-aa01-110127603b06",
              "parentUUID": "54fdb38e-3bee-4903-ba85-9d5119dc6f33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should wait for a list to exist and return the list name and value",
              "fullTitle": "brpop-command test should wait for a list to exist and return the list name and value",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['brpop', 'no-key', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['no-key', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'no-key', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "b1976ef7-5914-4644-85b1-a2cf281e8d30",
              "parentUUID": "54fdb38e-3bee-4903-ba85-9d5119dc6f33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the list name and TAIL value",
              "fullTitle": "brpop-command test should return the list name and TAIL value",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['flushall'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    common_test_1.sendCommand(client, ['brpop', 'no-key2', '0'])\n        .then((response) => {\n        chai_1.expect(response).to.eql(['no-key2', 'first']);\n        done();\n    });\n    common_test_1.sendCommand(new net.Socket(), ['rpush', 'no-key2', 'third', 'second', 'first'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(3);\n    });\n});",
              "err": {},
              "uuid": "864cc85c-d239-4b8f-880d-447749bc7100",
              "parentUUID": "54fdb38e-3bee-4903-ba85-9d5119dc6f33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support blocking rpop against multiple lists in one call",
              "fullTitle": "brpop-command test should support blocking rpop against multiple lists in one call",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['brpop', 'list1', 'list2', 'list3', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['list3', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'list3', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "3b7c15e4-1e72-47d3-848c-51806c1a9671",
              "parentUUID": "54fdb38e-3bee-4903-ba85-9d5119dc6f33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the pushd value when it already exists even if a timeout is set",
              "fullTitle": "brpop-command test should return the pushd value when it already exists even if a timeout is set",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueKey = `poprpush${new Date().getTime()}`;\ncommon_test_1.sendCommand(new net.Socket(), ['rpush', uniqueKey, 'third', 'second', 'first'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n    common_test_1.sendCommand(client, ['brpop', uniqueKey, '0'])\n        .then((response) => {\n        chai_1.expect(response).to.eql([uniqueKey, 'first']);\n        done();\n    });\n});",
              "err": {},
              "uuid": "be1603b7-e6a9-409a-8846-139c1100201f",
              "parentUUID": "54fdb38e-3bee-4903-ba85-9d5119dc6f33",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e7a0b9cf-e9e0-49e1-aa01-110127603b06",
            "b1976ef7-5914-4644-85b1-a2cf281e8d30",
            "864cc85c-d239-4b8f-880d-447749bc7100",
            "3b7c15e4-1e72-47d3-848c-51806c1a9671",
            "be1603b7-e6a9-409a-8846-139c1100201f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1025,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9efaa545-d687-46b8-af2c-5762cae7ab7b",
          "title": "brpoplpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/brpoplpush-command.test.ts",
          "file": "/test/resp/command/list/brpoplpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "brpoplpush-command test \"before all\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "8bac241f-e08f-4c2a-998a-2bb038798d33",
              "parentUUID": "9efaa545-d687-46b8-af2c-5762cae7ab7b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "brpoplpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        sinon.createSandbox();\n        yield common_test_1.sendCommand(client, ['flushall']);\n        yield common_test_1.sendCommand(client, ['select', '0']);\n    })",
              "err": {},
              "uuid": "fab0e71e-6d0b-405e-8497-09e64c79028d",
              "parentUUID": "9efaa545-d687-46b8-af2c-5762cae7ab7b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "brpoplpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "f70d5c97-5481-439c-8bde-8edde9237f14",
              "parentUUID": "9efaa545-d687-46b8-af2c-5762cae7ab7b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "brpoplpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "532effdd-a110-41e3-98a3-69e18d9d7c19",
              "parentUUID": "9efaa545-d687-46b8-af2c-5762cae7ab7b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when destination does not exist and timeout expires",
              "fullTitle": "brpoplpush-command test should return NIL when destination does not exist and timeout expires",
              "timedOut": false,
              "duration": 2005,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['brpoplpush', 'src', 'dst', '2']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "2952cae3-b132-4b42-80b0-d8d9dada079e",
              "parentUUID": "9efaa545-d687-46b8-af2c-5762cae7ab7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the poplpushed value when lpush is called",
              "fullTitle": "brpoplpush-command test should return the poplpushed value when lpush is called",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['brpoplpush', 'poplpushkey', 'poplpopkey', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('value1');\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'poplpushkey', 'value1', 'value2', 'value3'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n});",
              "err": {},
              "uuid": "8bb5da64-f386-431c-8651-7dba22a359f4",
              "parentUUID": "9efaa545-d687-46b8-af2c-5762cae7ab7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the pushd value when it already exists even if a timeout is set",
              "fullTitle": "brpoplpush-command test should return the pushd value when it already exists even if a timeout is set",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueKey = `poplpush${new Date().getTime()}`;\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', uniqueKey, 'value1', 'value2', 'value3'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n    common_test_1.sendCommand(client, ['brpoplpush', uniqueKey, 'poplpopkey', '0'])\n        .then((response) => {\n        chai_1.expect(response).to.equal('value1');\n        done();\n    });\n});",
              "err": {},
              "uuid": "d945e087-a982-4adb-8dc1-2f3d1b0e8736",
              "parentUUID": "9efaa545-d687-46b8-af2c-5762cae7ab7b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should wait indefinitely (28 days) for a value to be available",
              "fullTitle": "brpoplpush-command test should wait indefinitely (28 days) for a value to be available",
              "timedOut": false,
              "duration": 4007,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const startTime = process.hrtime.bigint();\ncommon_test_1.sendCommand(client, ['brpoplpush', 'newpoplpushkey', 'newpoplpopkey', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('newvalue1');\n    const endTime = process.hrtime.bigint();\n    console.log(`Duration is ${Number(endTime) - Number(startTime)}`);\n    chai_1.expect(Number(endTime - startTime)).to.be.greaterThan(4000000000);\n    done();\n});\nsetTimeout(() => {\n    common_test_1.sendCommand(new net.Socket(), ['lpush', 'newpoplpushkey', 'newvalue1', 'newvalue2', 'newvalue3'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(3);\n    });\n}, 4000);",
              "err": {},
              "uuid": "de832432-c142-4b60-b2eb-0c67ee12dd42",
              "parentUUID": "9efaa545-d687-46b8-af2c-5762cae7ab7b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2952cae3-b132-4b42-80b0-d8d9dada079e",
            "8bb5da64-f386-431c-8651-7dba22a359f4",
            "d945e087-a982-4adb-8dc1-2f3d1b0e8736",
            "de832432-c142-4b60-b2eb-0c67ee12dd42"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6020,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "da7ef78d-eb15-4b9c-b739-49c260915697",
          "title": "lindex-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lindex-command.test.ts",
          "file": "/test/resp/command/list/lindex-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lindex-command test \"before all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "46dc958e-b74d-4ced-84b8-5ecd01924ac4",
              "parentUUID": "da7ef78d-eb15-4b9c-b739-49c260915697",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lindex-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "b212b1ae-36ce-4079-a422-5768ad021f8c",
              "parentUUID": "da7ef78d-eb15-4b9c-b739-49c260915697",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lindex-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "e5673cb0-78a1-4261-bd16-ffaa6d5638d7",
              "parentUUID": "da7ef78d-eb15-4b9c-b739-49c260915697",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lindex-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "d0ebebbc-6dff-406b-8376-64a0dc29d971",
              "parentUUID": "da7ef78d-eb15-4b9c-b739-49c260915697",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when lindex called with invalid index on non-existent key",
              "fullTitle": "lindex-command test should report NIL when lindex called with invalid index on non-existent key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lindex', 'no-key', 'negative one thousand']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "99f65c88-70b4-4d4f-8963-aa4032f8fb8e",
              "parentUUID": "da7ef78d-eb15-4b9c-b739-49c260915697",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report ERR when attempting to get lindex of non-list key",
              "fullTitle": "lindex-command test should report ERR when attempting to get lindex of non-list key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lindex', 'lkey', '0']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "f1f6ad10-8dbe-419b-85c9-8ab2f0038b6b",
              "parentUUID": "da7ef78d-eb15-4b9c-b739-49c260915697",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the correct key at an index",
              "fullTitle": "lindex-command test should return the correct key at an index",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `lkey-${new Date().getTime()}`;\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '0']);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '1']);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-1']);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-100']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, 'two']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, 'a1', 'b2', 'c3']);\n        chai_1.expect(response).to.equal(6);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-6']);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-7']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '100']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "0f25bfdd-1c7f-4120-a73c-fa4599687657",
              "parentUUID": "da7ef78d-eb15-4b9c-b739-49c260915697",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "99f65c88-70b4-4d4f-8963-aa4032f8fb8e",
            "f1f6ad10-8dbe-419b-85c9-8ab2f0038b6b",
            "0f25bfdd-1c7f-4120-a73c-fa4599687657"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5fa44c1e-2a51-4078-b239-0c646f912166",
          "title": "llen-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/llen-command.test.ts",
          "file": "/test/resp/command/list/llen-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "llen-command test \"before all\" hook",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "9814e8c7-8795-4839-8603-e76a097afe61",
              "parentUUID": "5fa44c1e-2a51-4078-b239-0c646f912166",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "llen-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "48948322-a0a9-4472-bfde-6d6dc99161bc",
              "parentUUID": "5fa44c1e-2a51-4078-b239-0c646f912166",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "llen-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "47b973de-baa7-44cd-9e81-0f1e0d0fa0d0",
              "parentUUID": "5fa44c1e-2a51-4078-b239-0c646f912166",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "llen-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a4a34418-7bd5-4f53-85c2-772a55d9df8a",
              "parentUUID": "5fa44c1e-2a51-4078-b239-0c646f912166",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report 0 when llen called on non-existent key",
              "fullTitle": "llen-command test should report 0 when llen called on non-existent key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['llen', 'no-key']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "00c610d7-2dde-404d-a05e-79dff65631d3",
              "parentUUID": "5fa44c1e-2a51-4078-b239-0c646f912166",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report WRONGTYPE when attempting to get llen of non-list key",
              "fullTitle": "llen-command test should report WRONGTYPE when attempting to get llen of non-list key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'lkey']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "5835c2b1-edc0-489d-8616-32b1ee06b3aa",
              "parentUUID": "5fa44c1e-2a51-4078-b239-0c646f912166",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the correct list length",
              "fullTitle": "llen-command test should return the correct list length",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `lkey-${new Date().getTime()}`;\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal(null);\n        // The list goes away when the last element is popped\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, '-6']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "2917c25c-d052-4ede-a4b8-1f5fe9b867cc",
              "parentUUID": "5fa44c1e-2a51-4078-b239-0c646f912166",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00c610d7-2dde-404d-a05e-79dff65631d3",
            "5835c2b1-edc0-489d-8616-32b1ee06b3aa",
            "2917c25c-d052-4ede-a4b8-1f5fe9b867cc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "be6a7ef7-3181-42ef-8b52-070b004799a3",
          "title": "lpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lpop-command.test.ts",
          "file": "/test/resp/command/list/lpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lpop-command test \"before all\" hook",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "929b3bbc-ea78-4ed4-afa0-9d97bad89b4a",
              "parentUUID": "be6a7ef7-3181-42ef-8b52-070b004799a3",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "39382d95-9afa-4690-8d20-14a0fe8eb4b1",
              "parentUUID": "be6a7ef7-3181-42ef-8b52-070b004799a3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "1ee3a702-36de-429b-87df-ec84a6e9a0cd",
              "parentUUID": "be6a7ef7-3181-42ef-8b52-070b004799a3",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "8198d0b1-2b31-41fc-8972-cd7dad49ab8c",
              "parentUUID": "be6a7ef7-3181-42ef-8b52-070b004799a3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when lpop called on non-existent key",
              "fullTitle": "lpop-command test should report NIL when lpop called on non-existent key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lpop', 'no-key']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['exists', 'no-key']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "b55cd4d3-23c7-4983-95d9-c1b1492053f6",
              "parentUUID": "be6a7ef7-3181-42ef-8b52-070b004799a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return values from the left side of a list",
              "fullTitle": "lpop-command test should return values from the left side of a list",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', testKey, 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('d');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal(null);\n        // The list goes away when the last element is removed\n        response = yield common_test_1.sendCommand(client, ['exists', testKey]);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "5b2486bf-c8b7-41f0-9bd7-8591bc8d2030",
              "parentUUID": "be6a7ef7-3181-42ef-8b52-070b004799a3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b55cd4d3-23c7-4983-95d9-c1b1492053f6",
            "5b2486bf-c8b7-41f0-9bd7-8591bc8d2030"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4153ed82-5d74-4e9f-8aaf-66b68c13c9a2",
          "title": "lpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lpush-command.test.ts",
          "file": "/test/resp/command/list/lpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lpush-command test \"before all\" hook",
              "timedOut": false,
              "duration": 47,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "e2e9c3f9-70e4-4b86-acd3-b82c93237958",
              "parentUUID": "4153ed82-5d74-4e9f-8aaf-66b68c13c9a2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "4f911ae6-6a26-4388-97ca-d56551ac7f0d",
              "parentUUID": "4153ed82-5d74-4e9f-8aaf-66b68c13c9a2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "c294556c-a7c1-4657-93f7-fea8c640eb8c",
              "parentUUID": "4153ed82-5d74-4e9f-8aaf-66b68c13c9a2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "9abd5214-e8ed-41c6-8558-bfc23ab97e78",
              "parentUUID": "4153ed82-5d74-4e9f-8aaf-66b68c13c9a2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ERR when attempting to lpush to a non-list key",
              "fullTitle": "lpush-command test should report ERR when attempting to lpush to a non-list key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'lkey', '0']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "8fa4458c-3b7a-4507-af38-6542cc546b2a",
              "parentUUID": "4153ed82-5d74-4e9f-8aaf-66b68c13c9a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a list if it doesn't already exist",
              "fullTitle": "lpush-command test should create a list if it doesn't already exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exists', testKey]);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['lpush', testKey, 'a', 'b', 'c']);\n        // The list is now 'c', 'b', 'a'\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['exists', testKey]);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "f477bd78-4a9e-4d9a-98fe-00b1a2870696",
              "parentUUID": "4153ed82-5d74-4e9f-8aaf-66b68c13c9a2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the list in a predicatble order",
              "fullTitle": "lpush-command test should have created the list in a predicatble order",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lindex', testKey, '1']);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['llen', testKey]);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpop', testKey]);\n        chai_1.expect(response).to.equal('a');\n    })",
              "err": {},
              "uuid": "5fffab99-bacb-4941-92f5-6dac43a81b7b",
              "parentUUID": "4153ed82-5d74-4e9f-8aaf-66b68c13c9a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8fa4458c-3b7a-4507-af38-6542cc546b2a",
            "f477bd78-4a9e-4d9a-98fe-00b1a2870696",
            "5fffab99-bacb-4941-92f5-6dac43a81b7b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4683cb5e-08a9-4e87-b596-cc5a7ef799fe",
          "title": "lrange-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lrange-command.test.ts",
          "file": "/test/resp/command/list/lrange-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lrange-command test \"before all\" hook",
              "timedOut": false,
              "duration": 38,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "0e22098e-2a7e-40aa-bf20-0baeade3d71c",
              "parentUUID": "4683cb5e-08a9-4e87-b596-cc5a7ef799fe",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lrange-command test \"before each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "5c628ca7-c89c-4850-b67c-e22825c98347",
              "parentUUID": "4683cb5e-08a9-4e87-b596-cc5a7ef799fe",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lrange-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "d354def4-d906-4117-bb3b-ffa2cfab4111",
              "parentUUID": "4683cb5e-08a9-4e87-b596-cc5a7ef799fe",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lrange-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "41acca50-42db-44dc-8d14-b759e5050fe9",
              "parentUUID": "4683cb5e-08a9-4e87-b596-cc5a7ef799fe",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "return an empty list when the key does not exist",
              "fullTitle": "lrange-command test return an empty list when the key does not exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', '0', '100']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "f79c376b-ede2-46e1-ab5a-dd7d544986e8",
              "parentUUID": "4683cb5e-08a9-4e87-b596-cc5a7ef799fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report an error when start or stop index are invalid",
              "fullTitle": "lrange-command test should report an error when start or stop index are invalid",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', 'negative one', '-2']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', '0', 'negative two']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', '-1', '-100']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "ee3e01bd-4290-4dbf-80e6-5ea7d6d8194d",
              "parentUUID": "4683cb5e-08a9-4e87-b596-cc5a7ef799fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return predictable results",
              "fullTitle": "lrange-command test should return predictable results",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', 'newlist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'newlist', 'world']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'newlist', '0', '-1']);\n        chai_1.expect(response).to.eql(['hello', 'world']);\n    })",
              "err": {},
              "uuid": "105131eb-e3b5-481b-a3f3-030b3ddad261",
              "parentUUID": "4683cb5e-08a9-4e87-b596-cc5a7ef799fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reproduce the results from the redis documentation",
              "fullTitle": "lrange-command test should reproduce the results from the redis documentation",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', 'doclist', 'one']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'doclist', 'two']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'doclist', 'three']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '0', '0']);\n        chai_1.expect(response).to.eql(['one']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '-3', '2']);\n        chai_1.expect(response).to.eql(['one', 'two', 'three']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '-100', '100']);\n        chai_1.expect(response).to.eql(['one', 'two', 'three']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '5', '10']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "347fc3fa-985e-4756-a3b5-75e37c3ecfc4",
              "parentUUID": "4683cb5e-08a9-4e87-b596-cc5a7ef799fe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f79c376b-ede2-46e1-ab5a-dd7d544986e8",
            "ee3e01bd-4290-4dbf-80e6-5ea7d6d8194d",
            "105131eb-e3b5-481b-a3f3-030b3ddad261",
            "347fc3fa-985e-4756-a3b5-75e37c3ecfc4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d2d35c98-0330-4ae1-89a7-38c7b2d4089a",
          "title": "lrem-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lrem-command.test.ts",
          "file": "/test/resp/command/list/lrem-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lrem-command test \"before all\" hook",
              "timedOut": false,
              "duration": 56,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "4a476197-e788-4ae7-a438-50f8b520ad84",
              "parentUUID": "d2d35c98-0330-4ae1-89a7-38c7b2d4089a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lrem-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "cc290f18-97f9-414f-a52a-13dd38c1b4b2",
              "parentUUID": "d2d35c98-0330-4ae1-89a7-38c7b2d4089a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lrem-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "62d87c51-9e7c-439f-8717-7018273105c1",
              "parentUUID": "d2d35c98-0330-4ae1-89a7-38c7b2d4089a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lrem-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a9c86700-2936-4d8f-bb4d-0a49c06b0bf9",
              "parentUUID": "d2d35c98-0330-4ae1-89a7-38c7b2d4089a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should NOT report 0 when lrem called with invalid non-existent key",
              "fullTitle": "lrem-command test should NOT report 0 when lrem called with invalid non-existent key",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'no-key', 'negative one thousand', 'test']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "6a41911c-1f05-433d-a99d-18ec3454169f",
              "parentUUID": "d2d35c98-0330-4ae1-89a7-38c7b2d4089a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report ERR when lrem called against existing key with invalid count argument",
              "fullTitle": "lrem-command test should report ERR when lrem called against existing key with invalid count argument",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lpush', 'lrem', 'akey']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'lrem', 'negative one thousand', 'test']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "3cb1a86b-2825-4a9d-b3b3-7ea5fca2d680",
              "parentUUID": "d2d35c98-0330-4ae1-89a7-38c7b2d4089a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report 0 when lrem called with valid arguments and non-existing element",
              "fullTitle": "lrem-command test should report 0 when lrem called with valid arguments and non-existing element",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'lrem', '0', 'does not exist']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "42073cef-b7bc-4769-9a69-9a99fd03a6b8",
              "parentUUID": "d2d35c98-0330-4ae1-89a7-38c7b2d4089a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should use negative index counters",
              "fullTitle": "lrem-command test should use negative index counters",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'foo']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '-2', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '-1']);\n        chai_1.expect(response).to.eql(['hello', 'foo']);\n    })",
              "err": {},
              "uuid": "e7e1e0cb-0d25-47ba-a13c-fe38e87c426f",
              "parentUUID": "d2d35c98-0330-4ae1-89a7-38c7b2d4089a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a ZERO result when the key does not exist",
              "fullTitle": "lrem-command test should return a ZERO result when the key does not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'otherlist', '1', 'test']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "3e2c05d0-538d-4a17-8223-ad1dbb85b506",
              "parentUUID": "d2d35c98-0330-4ae1-89a7-38c7b2d4089a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove every matchin element when count is 0",
              "fullTitle": "lrem-command test should remove every matchin element when count is 0",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushdb']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'foo']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '0', 'hello']);\n        chai_1.expect(response).to.equal(3);\n    })",
              "err": {},
              "uuid": "42a3a73d-04fe-4fcf-be33-3070f592103c",
              "parentUUID": "d2d35c98-0330-4ae1-89a7-38c7b2d4089a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove the list when all elements are gone",
              "fullTitle": "lrem-command test should remove the list when all elements are gone",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '0', 'foo']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mylist']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "403de233-fc62-4801-b133-51f409b0f97b",
              "parentUUID": "d2d35c98-0330-4ae1-89a7-38c7b2d4089a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove only the number of requested elements when count > 0",
              "fullTitle": "lrem-command test should remove only the number of requested elements when count > 0",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'calibrate']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '1', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '2']);\n        chai_1.expect(response).to.eql(['hello', 'calibrate', 'hello']);\n    })",
              "err": {},
              "uuid": "7934dfcd-ac20-4c7a-8656-5b7364067e9a",
              "parentUUID": "d2d35c98-0330-4ae1-89a7-38c7b2d4089a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should default to startIndex ZERO when it is less than ZERO",
              "fullTitle": "lrem-command test should default to startIndex ZERO when it is less than ZERO",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let i = 0; i < 10; i++) {\n            response = yield common_test_1.sendCommand(client, ['RPUSH', 'newlist', `${i}`]);\n            chai_1.expect(response).to.equal(i + 1);\n        }\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'newlist', '-100', '2']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'newlist']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'newlist', '0', '3']);\n        chai_1.expect(response).to.eql(['0', '1', '2']);\n    })",
              "err": {},
              "uuid": "1546f576-0a26-43ce-9cf3-b1070f7ba5a8",
              "parentUUID": "d2d35c98-0330-4ae1-89a7-38c7b2d4089a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove the list when start > end or start > llen",
              "fullTitle": "lrem-command test should remove the list when start > end or start > llen",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exists', 'newlist']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'newlist', '10', '2']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'newlist']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "f652bf87-10dc-4476-a522-5f50d6709b60",
              "parentUUID": "d2d35c98-0330-4ae1-89a7-38c7b2d4089a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should properly handle a negative endIndex",
              "fullTitle": "lrem-command test should properly handle a negative endIndex",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let i = 0; i < 7; i++) {\n            response = yield common_test_1.sendCommand(client, ['RPUSH', 'neglist', `${i}`]);\n            chai_1.expect(response).to.equal(i + 1);\n        }\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'neglist', '-100', '-3']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'neglist', '0', '100']);\n        chai_1.expect(response).to.eql(['0', '1', '2', '3', '4']);\n    })",
              "err": {},
              "uuid": "0ad3da36-c254-4022-a638-edae6eacda99",
              "parentUUID": "d2d35c98-0330-4ae1-89a7-38c7b2d4089a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove the key when abs(endIndex) is > llen",
              "fullTitle": "lrem-command test should remove the key when abs(endIndex) is > llen",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'neglist', '-100', '-6']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'neglist']);\n        chai_1.expect(response).to.eql(0);\n    })",
              "err": {},
              "uuid": "01102d81-47ce-46bb-9747-aa8a820e33eb",
              "parentUUID": "d2d35c98-0330-4ae1-89a7-38c7b2d4089a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6a41911c-1f05-433d-a99d-18ec3454169f",
            "3cb1a86b-2825-4a9d-b3b3-7ea5fca2d680",
            "42073cef-b7bc-4769-9a69-9a99fd03a6b8",
            "e7e1e0cb-0d25-47ba-a13c-fe38e87c426f",
            "3e2c05d0-538d-4a17-8223-ad1dbb85b506",
            "42a3a73d-04fe-4fcf-be33-3070f592103c",
            "403de233-fc62-4801-b133-51f409b0f97b",
            "7934dfcd-ac20-4c7a-8656-5b7364067e9a",
            "1546f576-0a26-43ce-9cf3-b1070f7ba5a8",
            "f652bf87-10dc-4476-a522-5f50d6709b60",
            "0ad3da36-c254-4022-a638-edae6eacda99",
            "01102d81-47ce-46bb-9747-aa8a820e33eb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 48,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3bd4db49-9c3f-4701-82a0-27a3c0aa9da7",
          "title": "lset-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lset-command.test.ts",
          "file": "/test/resp/command/list/lset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lset-command test \"before all\" hook",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "19f7701e-2dab-4b7e-abe6-280f476071a8",
              "parentUUID": "3bd4db49-9c3f-4701-82a0-27a3c0aa9da7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lset-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "3fcb805d-9120-46e5-b6d4-d8d8820c686a",
              "parentUUID": "3bd4db49-9c3f-4701-82a0-27a3c0aa9da7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lset-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "91a0259c-1d41-49ec-81e8-064ccd5624ea",
              "parentUUID": "3bd4db49-9c3f-4701-82a0-27a3c0aa9da7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lset-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "1f088657-6db8-4fa4-9d37-40ead7b2d397",
              "parentUUID": "3bd4db49-9c3f-4701-82a0-27a3c0aa9da7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should fail when a key does not exist",
              "fullTitle": "lset-command test should fail when a key does not exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lset', 'no-key', 'negative one thousand', 'test']);\n        chai_1.expect(response).to.equal('ReplyError: ERR no such key');\n    })",
              "err": {},
              "uuid": "dfb0624e-e39e-4efb-8f36-9faa4cd8414e",
              "parentUUID": "3bd4db49-9c3f-4701-82a0-27a3c0aa9da7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should replace a valid index",
              "fullTitle": "lset-command test should replace a valid index",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', testkey, 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lset', testkey, '-1', 'z']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lrange', testkey, '0', '3']);\n        chai_1.expect(response).to.eql(['a', 'b', 'z']);\n    })",
              "err": {},
              "uuid": "6d633ee5-a699-4ea7-9dcb-8a3d8d414165",
              "parentUUID": "3bd4db49-9c3f-4701-82a0-27a3c0aa9da7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should recognize invalid indexes",
              "fullTitle": "lset-command test should recognize invalid indexes",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lset', testkey, 'invalid', '3']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "81bb3bc2-0f44-4c81-aaf0-c30f30c87610",
              "parentUUID": "3bd4db49-9c3f-4701-82a0-27a3c0aa9da7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dfb0624e-e39e-4efb-8f36-9faa4cd8414e",
            "6d633ee5-a699-4ea7-9dcb-8a3d8d414165",
            "81bb3bc2-0f44-4c81-aaf0-c30f30c87610"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e7b40ff8-9d6a-4578-8ca3-4bc823354f29",
          "title": "ltrim-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/ltrim-command.test.ts",
          "file": "/test/resp/command/list/ltrim-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "ltrim-command test \"before all\" hook",
              "timedOut": false,
              "duration": 43,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "6369f854-7f29-499a-ae88-b2cb4b27f543",
              "parentUUID": "e7b40ff8-9d6a-4578-8ca3-4bc823354f29",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "ltrim-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "736daa57-e45b-4df4-8509-d2148949e887",
              "parentUUID": "e7b40ff8-9d6a-4578-8ca3-4bc823354f29",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "ltrim-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "0f10d6a6-f791-4341-b19a-1dd4c9d8d8f1",
              "parentUUID": "e7b40ff8-9d6a-4578-8ca3-4bc823354f29",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "ltrim-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "4343a5fb-3c87-4b06-bbb4-2783359f8269",
              "parentUUID": "e7b40ff8-9d6a-4578-8ca3-4bc823354f29",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report OK when the key does not exist",
              "fullTitle": "ltrim-command test should report OK when the key does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'no-key', '0', '100']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "6e912e7a-8d21-45bb-b5d9-247cbeeb552e",
              "parentUUID": "e7b40ff8-9d6a-4578-8ca3-4bc823354f29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should trim a list to the requested size or less",
              "fullTitle": "ltrim-command test should trim a list to the requested size or less",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'calibrate']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '3']);\n        chai_1.expect(response).to.eql(['hello', 'hello', 'calibrate', 'hello']);\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'mylist', '0', '100']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '3']);\n        chai_1.expect(response).to.eql(['hello', 'hello', 'calibrate', 'hello']);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'mylist', '1', '4']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '3']);\n        chai_1.expect(response).to.eql(['hello', 'calibrate', 'hello']);\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'mylist', '-2', '1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '1']);\n        chai_1.expect(response).to.eql(['calibrate']);\n    })",
              "err": {},
              "uuid": "d99d6291-62c0-4340-b9d7-230a8f3b352c",
              "parentUUID": "e7b40ff8-9d6a-4578-8ca3-4bc823354f29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject an invalid start index",
              "fullTitle": "ltrim-command test should reject an invalid start index",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'testlist', 'wrong', '10']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "b23a336a-3cd4-42cb-9cc8-ac5981a2d188",
              "parentUUID": "e7b40ff8-9d6a-4578-8ca3-4bc823354f29",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6e912e7a-8d21-45bb-b5d9-247cbeeb552e",
            "d99d6291-62c0-4340-b9d7-230a8f3b352c",
            "b23a336a-3cd4-42cb-9cc8-ac5981a2d188"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7f8f7859-9ad1-440d-b542-41264ed91969",
          "title": "rpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/rpop-command.test.ts",
          "file": "/test/resp/command/list/rpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rpop-command test \"before all\" hook",
              "timedOut": false,
              "duration": 31,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "7fbc0508-4821-4e78-8936-0ef9201e9ed8",
              "parentUUID": "7f8f7859-9ad1-440d-b542-41264ed91969",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "3acf4ac1-5d72-43b1-a3ab-dbc5eefa4569",
              "parentUUID": "7f8f7859-9ad1-440d-b542-41264ed91969",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "ff5e023a-a631-4a21-9f04-bcfaddb8aa8d",
              "parentUUID": "7f8f7859-9ad1-440d-b542-41264ed91969",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "d327fc13-bfaf-4315-8128-7dd0fb87046a",
              "parentUUID": "7f8f7859-9ad1-440d-b542-41264ed91969",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when rpop called on non-existent key",
              "fullTitle": "rpop-command test should report NIL when rpop called on non-existent key",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpop', 'no-key']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['exists', 'no-key']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "b72a18fa-a32a-4339-aa2c-40409da782cc",
              "parentUUID": "7f8f7859-9ad1-440d-b542-41264ed91969",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b72a18fa-a32a-4339-aa2c-40409da782cc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "135dff88-c81b-4760-84ea-c62f4bbcb673",
          "title": "rpoplpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/rpoplpush-command.test.ts",
          "file": "/test/resp/command/list/rpoplpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rpoplpush-command test \"before all\" hook",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "69d0be73-0f86-4fa4-93d1-74cd5a9a72f6",
              "parentUUID": "135dff88-c81b-4760-84ea-c62f4bbcb673",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rpoplpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "7be9ed88-f685-449e-b224-83c31e9bc4e3",
              "parentUUID": "135dff88-c81b-4760-84ea-c62f4bbcb673",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rpoplpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "4910252d-823f-47c9-8a07-a8dfc643425f",
              "parentUUID": "135dff88-c81b-4760-84ea-c62f4bbcb673",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rpoplpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "b6c79d89-ce9c-491f-8138-c1de03078d26",
              "parentUUID": "135dff88-c81b-4760-84ea-c62f4bbcb673",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when destination does not exist",
              "fullTitle": "rpoplpush-command test should return NIL when destination does not exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpoplpush', 'src', 'dst']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "c599afb4-dd88-46af-84e2-743b6d4d69be",
              "parentUUID": "135dff88-c81b-4760-84ea-c62f4bbcb673",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should rotate a list when src and dst are the same",
              "fullTitle": "rpoplpush-command test should rotate a list when src and dst are the same",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', 'src', 'a']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'src', 'b']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'src', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'src', '0', '3']);\n        chai_1.expect(response).to.eql(['a', 'b', 'c']);\n        response = yield common_test_1.sendCommand(client, ['rpoplpush', 'src', 'src']);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'src', '0', '3']);\n        chai_1.expect(response).to.eql(['c', 'a', 'b']);\n    })",
              "err": {},
              "uuid": "0aec02fa-acc4-439a-a612-fd6fa2fcbefd",
              "parentUUID": "135dff88-c81b-4760-84ea-c62f4bbcb673",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create the target list if it does not exist",
              "fullTitle": "rpoplpush-command test should create the target list if it does not exist",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exists', 'dst']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['rpoplpush', 'src', 'dst']);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['exists', 'dst']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'src', '0', '3']);\n        chai_1.expect(response).to.eql(['c', 'a']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'dst', '0', '3']);\n        chai_1.expect(response).to.eql(['b']);\n    })",
              "err": {},
              "uuid": "254479ca-7db6-42c2-868f-90cf263b763b",
              "parentUUID": "135dff88-c81b-4760-84ea-c62f4bbcb673",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c599afb4-dd88-46af-84e2-743b6d4d69be",
            "0aec02fa-acc4-439a-a612-fd6fa2fcbefd",
            "254479ca-7db6-42c2-868f-90cf263b763b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 40,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "efc186e3-914a-4c54-b293-790b40adba6c",
          "title": "rpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/rpush-command.test.ts",
          "file": "/test/resp/command/list/rpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rpush-command test \"before all\" hook",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "7772c05d-051b-46fe-a516-7994a2749459",
              "parentUUID": "efc186e3-914a-4c54-b293-790b40adba6c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "e76c978c-5286-45c8-845d-fdf7a4798bc6",
              "parentUUID": "efc186e3-914a-4c54-b293-790b40adba6c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "6febd757-1efc-47f8-969a-7ee474ecc43d",
              "parentUUID": "efc186e3-914a-4c54-b293-790b40adba6c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "b30531f4-2045-444a-9c64-e4613549b448",
              "parentUUID": "efc186e3-914a-4c54-b293-790b40adba6c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ERR when attempting to rpush to a non-list key",
              "fullTitle": "rpush-command test should report ERR when attempting to rpush to a non-list key",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['rpush', 'lkey', '0']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "dab2f322-9c97-4431-aa8c-a07dbbf5d865",
              "parentUUID": "efc186e3-914a-4c54-b293-790b40adba6c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dab2f322-9c97-4431-aa8c-a07dbbf5d865"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b24b699b-1faf-44bc-96a7-06b892d4ef92",
          "title": "multi command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/multi-command.test.ts",
          "file": "/test/resp/command/multi-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "multi command test \"before all\" hook",
              "timedOut": false,
              "duration": 44,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "3108ebff-52da-4e61-9641-f2251ffbc0fc",
              "parentUUID": "b24b699b-1faf-44bc-96a7-06b892d4ef92",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "multi command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "54c27d8e-6526-4a86-bdd2-7893561c7177",
              "parentUUID": "b24b699b-1faf-44bc-96a7-06b892d4ef92",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "multi command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "8fec906e-7204-4731-9391-e244e064f93e",
              "parentUUID": "b24b699b-1faf-44bc-96a7-06b892d4ef92",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "multi command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "d05fa40d-65f9-4135-a9ca-ee58efaa8d95",
              "parentUUID": "b24b699b-1faf-44bc-96a7-06b892d4ef92",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow nested MULTI invocations",
              "fullTitle": "multi command test should not allow nested MULTI invocations",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('ReplyError: ERR MULTI calls can not be nested');\n    })",
              "err": {},
              "uuid": "ee4d5fa6-e02f-4520-9e28-2bcc42f006ed",
              "parentUUID": "b24b699b-1faf-44bc-96a7-06b892d4ef92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect the DISCARD command",
              "fullTitle": "multi command test should respect the DISCARD command",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['discard']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "66283680-e9be-4c6a-b814-0f209ef648a3",
              "parentUUID": "b24b699b-1faf-44bc-96a7-06b892d4ef92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow DISCARD without MULTI",
              "fullTitle": "multi command test should not allow DISCARD without MULTI",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['discard']);\n        chai_1.expect(response).to.equal('ReplyError: ERR DISCARD without MULTI');\n    })",
              "err": {},
              "uuid": "9f29efb5-2c64-4dc7-b744-1fe4bd0dc83f",
              "parentUUID": "b24b699b-1faf-44bc-96a7-06b892d4ef92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should continue to validate commands after MULTI",
              "fullTitle": "multi command test should continue to validate commands after MULTI",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['unknown', 'command']);\n        chai_1.expect(response).to.equal('ReplyError: ERR unknown command `unknown`, with args beginning with: `command`, ', `${response}`);\n        response = yield common_test_1.sendCommand(client, ['lpush', 'test', 'one', 'two', 'three']);\n        chai_1.expect(response).to.equal('QUEUED');\n    })",
              "err": {},
              "uuid": "50a5d0d6-8537-4ab5-b152-a4d5490bf1f8",
              "parentUUID": "b24b699b-1faf-44bc-96a7-06b892d4ef92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should EXECABORT from a previous error",
              "fullTitle": "multi command test should EXECABORT from a previous error",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exec']);\n        chai_1.expect(response).to.equal('ReplyError: EXECABORT Transaction discarded because of previous errors.');\n    })",
              "err": {},
              "uuid": "8a5dfb64-0a38-4d8d-a2a9-88392c631dc9",
              "parentUUID": "b24b699b-1faf-44bc-96a7-06b892d4ef92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should queue a set of commands when there is no intervening error",
              "fullTitle": "multi command test should queue a set of commands when there is no intervening error",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'test', 'one', 'two', 'three']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['exec']);\n        chai_1.expect(response).to.eql([3]);\n    })",
              "err": {},
              "uuid": "f5347b41-aeca-43f8-9eec-15126dbf563c",
              "parentUUID": "b24b699b-1faf-44bc-96a7-06b892d4ef92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reset transaction state after executing commands",
              "fullTitle": "multi command test should reset transaction state after executing commands",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['discard']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "d12d57c5-f181-4792-ad33-0771258d2602",
              "parentUUID": "b24b699b-1faf-44bc-96a7-06b892d4ef92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the results of multiple commands in the order provided",
              "fullTitle": "multi command test should return the results of multiple commands in the order provided",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['brpoplpush', 'test', 'dest', '0']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['exec']);\n        chai_1.expect(response).to.eql(['three', 'two', 'one']);\n        response = yield common_test_1.sendCommand(client, ['exists', 'test']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'dest']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "0273b507-5122-4ae0-8074-cc9c8c19d455",
              "parentUUID": "b24b699b-1faf-44bc-96a7-06b892d4ef92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate the behavior of brpoplpush",
              "fullTitle": "multi command test should validate the behavior of brpoplpush",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'test', 'one', 'two', 'three']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('three');\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('two');\n        response = yield common_test_1.sendCommand(client, ['brpoplpush', 'test', 'dest', '0']);\n        chai_1.expect(response).to.equal('one');\n    })",
              "err": {},
              "uuid": "6b58d3b7-0861-45fd-a53d-545be50016ea",
              "parentUUID": "b24b699b-1faf-44bc-96a7-06b892d4ef92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when EXEC issued without MULTI",
              "fullTitle": "multi command test should fail when EXEC issued without MULTI",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exec']);\n        chai_1.expect(response).to.equal('ReplyError: ERR EXEC without MULTI');\n    })",
              "err": {},
              "uuid": "ac511f88-9ab8-41ff-87b1-9114a1a356e9",
              "parentUUID": "b24b699b-1faf-44bc-96a7-06b892d4ef92",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ee4d5fa6-e02f-4520-9e28-2bcc42f006ed",
            "66283680-e9be-4c6a-b814-0f209ef648a3",
            "9f29efb5-2c64-4dc7-b744-1fe4bd0dc83f",
            "50a5d0d6-8537-4ab5-b152-a4d5490bf1f8",
            "8a5dfb64-0a38-4d8d-a2a9-88392c631dc9",
            "f5347b41-aeca-43f8-9eec-15126dbf563c",
            "d12d57c5-f181-4792-ad33-0771258d2602",
            "0273b507-5122-4ae0-8074-cc9c8c19d455",
            "6b58d3b7-0861-45fd-a53d-545be50016ea",
            "ac511f88-9ab8-41ff-87b1-9114a1a356e9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 71,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "975c17c2-f445-45fa-b66c-863457a8e107",
          "title": "script-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/script-command.test.ts",
          "file": "/test/resp/command/script-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "script-command test \"before all\" hook",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "3136b86a-170d-4aae-aa18-8806bfa62b10",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "script-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "c838fac8-47c5-466d-a89c-4e024b40be39",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "script-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "1cc8bd9e-66e7-4548-a47c-14bdefa9f801",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "script-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "347d5488-1827-4b8d-93f6-51019244c705",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should calcuclate the correct sha1 of a script and store the script",
              "fullTitle": "script-command test should calcuclate the correct sha1 of a script and store the script",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['script', 'exists', sha1]);\n        chai_1.expect(response).to.eql([0]);\n        // validate failure on unparseable script\n        response = yield common_test_1.sendCommand(client, ['script', 'load', code]);\n        chai_1.expect(response).to.match(/ReplyError: ERR .*/);\n        // validate success on parseable script\n        response = yield common_test_1.sendCommand(client, ['script', 'load', `${code}}`]);\n        chai_1.expect(response).to.equal(sha1);\n        // validate a script is persisted\n        response = yield common_test_1.sendCommand(client, ['script', 'exists', sha1]);\n        chai_1.expect(response).to.eql([1]);\n        // validate response to unknown sub command\n        response = yield common_test_1.sendCommand(client, ['script', 'test', sha1]);\n        chai_1.expect(response).to.equal('ReplyError: ERR Unknown subcommand or wrong number of arguments for \\'test\\'. Try SCRIPT HELP.');\n    })",
              "err": {},
              "uuid": "2085e165-8783-4a08-87e6-8c41ce42a811",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should evaluate a loaded lua script using evalsha",
              "fullTitle": "script-command test should evaluate a loaded lua script using evalsha",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Validate that NOSCRIPT is triggered\n        response = yield common_test_1.sendCommand(client, ['evalsha', `${sha1}xx`, '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('ReplyError: NOSCRIPT No matching script. Please use EVAL.');\n        // Validate that param 1 cannot be negative\n        response = yield common_test_1.sendCommand(client, ['evalsha', sha1, '-2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('ReplyError: ERR Number of keys can\\'t be negative');\n        // Validate that param 1 cannot be text\n        response = yield common_test_1.sendCommand(client, ['evalsha', sha1, 'two', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "cb1b2422-bee9-49b9-8e12-c9587298af95",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should execute a simple script",
              "fullTitle": "script-command test should execute a simple script",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Validate that a simple script can be processed\n        response = yield common_test_1.sendCommand(client, ['EVAL', 'local val=\"Hello Compose\" return val', '0']);\n        chai_1.expect(response).to.equal('Hello Compose');\n    })",
              "err": {},
              "uuid": "588ef621-2871-4d95-80a1-54103d9d0d9e",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create and process the ARGV table",
              "fullTitle": "script-command test should create and process the ARGV table",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return ARGV[2]', '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.eql('second');\n    })",
              "err": {},
              "uuid": "27cbe36a-fd7e-4511-9cb6-7b0e9f82c94f",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create and process the KEYS table",
              "fullTitle": "script-command test should create and process the KEYS table",
              "timedOut": false,
              "duration": 153,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return KEYS[1]', '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('key1');\n    })",
              "err": {},
              "uuid": "38bc9c85-ec94-4016-b916-76cabb32385d",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a NUMBER when required",
              "fullTitle": "script-command test should return a NUMBER when required",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return 123', '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal(123);\n    })",
              "err": {},
              "uuid": "d7407cfa-b1b6-4aa4-86a8-370f105159f6",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NIL when there is no return value",
              "fullTitle": "script-command test should return NIL when there is no return value",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'print \"Hello World\"', '0']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "5d4048c1-b53f-4e92-85ef-e8fa4a3df5e7",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a TABLE when required",
              "fullTitle": "script-command test should return a TABLE when required",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, [`eval`, `return ARGV`, '2', 'key1', 'key2', 'first', 'second', 'third']);\n        chai_1.expect(response).to.eql(['first', 'second', 'third']);\n    })",
              "err": {},
              "uuid": "bdf93b37-17e2-4840-925a-1959d66ee28c",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return items in order",
              "fullTitle": "script-command test should return items in order",
              "timedOut": false,
              "duration": 56,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return {true, \"test\", false, 10, 10.2}', '0']);\n        chai_1.expect(response).to.eql([1, 'test', null, 10, 10]);\n    })",
              "err": {},
              "uuid": "cf69f868-6e4a-42f7-9cc1-9e2555aa85d5",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return integer and nil for true and false, respectively",
              "fullTitle": "script-command test should return integer and nil for true and false, respectively",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return { true, false, false}', '0']);\n        chai_1.expect(response).to.eql([1, null, null]);\n    })",
              "err": {},
              "uuid": "038207fe-de83-48fa-92dd-a65dd0d9a2f8",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to execute a representative BULL script",
              "fullTitle": "script-command test should be able to execute a representative BULL script",
              "timedOut": false,
              "duration": 134,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        const luaScriptPath = path.join(__dirname, '../../resources/bull.lua');\n        console.log(`trying to load ${luaScriptPath}`);\n        const luaScript = fs.readFileSync(luaScriptPath, 'utf8');\n        const args = ['6', 'bull:some_queue:wait', 'bull:some_queue:paused', 'bull:some_queue:meta-paused', 'bull:some_queue:id', 'bull:some_queue:delayed', 'bull:some_queue:priority', 'bull:some_queue:', '', 'S1234_last_first', '{\"trackid\":\"9405503699300066833313\",\"filingKey\":\"S1234_last_first\",\"name\":\"S1234_last_first\",\"message\":\"Waiting to start\"}', '{\"delay\":15,\"attempts\":1,\"timestamp\":1579142712160}', '1579142712160', '15', '1579142712175', '0', 'LPUSH', '9f187ecc-d502-4287-9f23-9978e6c2d67e'];\n        response = yield common_test_1.sendCommand(client, ['eval', luaScript, ...args]);\n        chai_1.expect(response).to.equal('1');\n        response = yield common_test_1.sendCommand(client, ['keys', '*']);\n        chai_1.expect(response.sort()).to.eql(['bull:some_queue:1', 'bull:some_queue:delayed', 'bull:some_queue:id']);\n        response = yield common_test_1.sendCommand(client, ['type', 'bull:some_queue:delayed']);\n        chai_1.expect(response).to.equal('zset');\n        response = yield common_test_1.sendCommand(client, ['type', 'bull:some_queue:id']);\n        chai_1.expect(response).to.equal('string');\n        response = yield common_test_1.sendCommand(client, ['type', 'bull:some_queue:1']);\n        chai_1.expect(response).to.equal('hash');\n        response = yield common_test_1.sendCommand(client, ['get', 'bull:some_queue:id']);\n        chai_1.expect(response).to.equal('1');\n    })",
              "err": {},
              "uuid": "802c124d-4841-4f2f-8cc8-3ff69f830d84",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when we attempt to EVAL an invalid script",
              "fullTitle": "script-command test should fail when we attempt to EVAL an invalid script",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', '-- Invalid\\r\\nscript']);\n        // Validated against redis\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'eval\\' command');\n    })",
              "err": {},
              "uuid": "7816c85c-823d-4513-b367-0d6d2b42ffba",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to return a NULL value from a lua script",
              "fullTitle": "script-command test should be able to return a NULL value from a lua script",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'local val = nil return val', '0']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "001c9598-d0f8-45b8-91ad-fae587bd7bd2",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return table values after the first NIL is encountered and return integers not floats",
              "fullTitle": "script-command test should not return table values after the first NIL is encountered and return integers not floats",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "323f2c37-ec2b-4a0e-9b40-e37e6ca557ac",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a table with embedded calls to redis",
              "fullTitle": "script-command test should return a table with embedded calls to redis",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['hset', embeddedkey, 'one', '1', 'two', '2', 'three', '3']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['hgetall', embeddedkey]);\n        chai_1.expect(response).to.eql(['one', '1', 'two', '2', 'three', '3']);\n        response = yield common_test_1.sendCommand(client, ['eval', `local j = redis.call(\"HGETALL\", \"${embeddedkey}\") return { j, \"SAMPLE\" }`, '0']);\n        // Validated with redis\n        chai_1.expect(response).to.eql(['SAMPLE', ['one', '1', 'two', '2', 'three', '3']]);\n    })",
              "err": {},
              "uuid": "6281e6ed-e6c5-411d-b1e2-13d0cb4f6855",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support the unpack lua command",
              "fullTitle": "script-command test should support the unpack lua command",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['hset', embeddedkey, 'one', '1', 'two', '2', 'three', '3']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['eval', `return { unpack(redis.call(\"hgetall\", \"${embeddedkey}\")) }`, '0']);\n        chai_1.expect(response).to.eql(['one', '1', 'two', '2', 'three', '3']);\n    })",
              "err": {},
              "uuid": "55631392-1a22-4d4f-acd5-c66dc2f390ee",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert values properly",
              "fullTitle": "script-command test should convert values properly",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', \"return {1,2,{3,'Hello World!'}}\", '0']);\n        chai_1.expect(response).to.eql([1, 2, [3, 'Hello World!']]);\n    })",
              "err": {},
              "uuid": "222a94bf-77c7-4083-891d-d74310f16250",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return embedded tables from embedded calls",
              "fullTitle": "script-command test should return embedded tables from embedded calls",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', \"return {1,2,{3,bit.bxor(5,3)}}\", '0']);\n        chai_1.expect(response).to.eql([1, 2, [3, 6]]);\n    })",
              "err": {},
              "uuid": "2b792b6b-3ddd-40c8-af8a-e6cc4aec1271",
              "parentUUID": "975c17c2-f445-45fa-b66c-863457a8e107",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2085e165-8783-4a08-87e6-8c41ce42a811",
            "cb1b2422-bee9-49b9-8e12-c9587298af95",
            "588ef621-2871-4d95-80a1-54103d9d0d9e",
            "27cbe36a-fd7e-4511-9cb6-7b0e9f82c94f",
            "38bc9c85-ec94-4016-b916-76cabb32385d",
            "d7407cfa-b1b6-4aa4-86a8-370f105159f6",
            "5d4048c1-b53f-4e92-85ef-e8fa4a3df5e7",
            "bdf93b37-17e2-4840-925a-1959d66ee28c",
            "cf69f868-6e4a-42f7-9cc1-9e2555aa85d5",
            "038207fe-de83-48fa-92dd-a65dd0d9a2f8",
            "802c124d-4841-4f2f-8cc8-3ff69f830d84",
            "7816c85c-823d-4513-b367-0d6d2b42ffba",
            "001c9598-d0f8-45b8-91ad-fae587bd7bd2",
            "6281e6ed-e6c5-411d-b1e2-13d0cb4f6855",
            "55631392-1a22-4d4f-acd5-c66dc2f390ee",
            "222a94bf-77c7-4083-891d-d74310f16250",
            "2b792b6b-3ddd-40c8-af8a-e6cc4aec1271"
          ],
          "failures": [],
          "pending": [
            "323f2c37-ec2b-4a0e-9b40-e37e6ca557ac"
          ],
          "skipped": [],
          "duration": 699,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9ced7a2c-f2d2-415c-93d8-d6c27d6c9d2c",
          "title": "publish/subscribe test",
          "fullFile": "/home/lane/git/redis/test/resp/command/server/pubsub-server.test.ts",
          "file": "/test/resp/command/server/pubsub-server.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "publish/subscribe test \"before all\" hook",
              "timedOut": false,
              "duration": 41,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "1c2ece16-c587-41d7-b9ed-6a8ac4131ccc",
              "parentUUID": "9ced7a2c-f2d2-415c-93d8-d6c27d6c9d2c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "publish/subscribe test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "4b9fead8-982b-4520-80de-633c5ccf214f",
              "parentUUID": "9ced7a2c-f2d2-415c-93d8-d6c27d6c9d2c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "publish/subscribe test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "eff0a4b3-6791-4917-9922-42b15f4b25d1",
              "parentUUID": "9ced7a2c-f2d2-415c-93d8-d6c27d6c9d2c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "publish/subscribe test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "d42f19ac-3203-4a7f-bc64-7eeef7cfa3cc",
              "parentUUID": "9ced7a2c-f2d2-415c-93d8-d6c27d6c9d2c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return ZERO when a message is published to a channel without subscribers",
              "fullTitle": "publish/subscribe test should return ZERO when a message is published to a channel without subscribers",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['publish', 'channel', 'Hollow world!']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "bc797c6e-ba50-48cb-8fbb-c23ea84f6162",
              "parentUUID": "9ced7a2c-f2d2-415c-93d8-d6c27d6c9d2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should unsubscribe from a channel that it is not subscribed to",
              "fullTitle": "publish/subscribe test should unsubscribe from a channel that it is not subscribed to",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Sound's weird, but this is observed behavior\n        response = yield common_test_1.sendCommand(client, ['unsubscribe', 'some channel']);\n        chai_1.expect(response).to.eql(['unsubscribe', 'some channel', 0]);\n    })",
              "err": {},
              "uuid": "f96d0071-10c3-4060-adf9-162ae65c4251",
              "parentUUID": "9ced7a2c-f2d2-415c-93d8-d6c27d6c9d2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should subscribe to an arbitrary channel",
              "fullTitle": "publish/subscribe test should subscribe to an arbitrary channel",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['subscribe', 'arbitrary channel']);\n        chai_1.expect(response).to.eql(['subscribe', 'arbitrary channel', 1]);\n    })",
              "err": {},
              "uuid": "afe16baa-a25b-4f08-948d-a7df7842fff2",
              "parentUUID": "9ced7a2c-f2d2-415c-93d8-d6c27d6c9d2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report the number of currently subscribed channels",
              "fullTitle": "publish/subscribe test should report the number of currently subscribed channels",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['subscribe', 'another channel']);\n        chai_1.expect(response).to.eql(['subscribe', 'another channel', 2]);\n        response = yield common_test_1.sendCommand(client, ['unsubscribe', 'another channel']);\n        chai_1.expect(response).to.eql(['unsubscribe', 'another channel', 1]);\n        response = yield common_test_1.sendCommand(client, ['unsubscribe', 'arbitrary channel']);\n        chai_1.expect(response).to.eql(['unsubscribe', 'arbitrary channel', 0]);\n    })",
              "err": {},
              "uuid": "52700201-677e-4a32-a309-408cef55b881",
              "parentUUID": "9ced7a2c-f2d2-415c-93d8-d6c27d6c9d2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should receive separate subscribe responses and then notifications on subscribed channels",
              "fullTitle": "publish/subscribe test should receive separate subscribe responses and then notifications on subscribed channels",
              "timedOut": false,
              "duration": 1507,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let counter = 0;\nconst newClient1 = new net.Socket();\nnewClient1.on('data', (data) => {\n    // console.log(`Counter is ${counter}`);\n    // console.log(`\\n***Listener ${counter} received ${data.toString('utf8')}\\n`);\n    switch (counter) {\n        case 0:\n            chai_1.expect(data.toString('utf8')).to.equal(`*3\\r\\n$9\\r\\nsubscribe\\r\\n$3\\r\\none\\r\\n:1\\r\\n*3\\r\\n$9\\r\\nsubscribe\\r\\n$3\\r\\ntwo\\r\\n:2\\r\\n*3\\r\\n$9\\r\\nsubscribe\\r\\n$5\\r\\nthree\\r\\n:3\\r\\n`);\n            break;\n        case 1:\n            chai_1.expect(data.toString('utf8')).to.equal(`*3\\r\\n$7\\r\\nmessage\\r\\n$3\\r\\ntwo\\r\\n$12\\r\\nmessage to 2\\r\\n`);\n            done();\n            break;\n    }\n    counter++;\n});\ncommon_test_1.sendCommand(newClient1, ['subscribe', 'one', 'two', 'three'])\n    .then((rsp) => {\n    //        console.log(`RESPONSE ${JSON.stringify(rsp)}`);\n    // Responses are sent in separate messages\n    chai_1.expect(rsp).to.eql(['subscribe', 'one', 1]);\n    const anotherClient = new net.Socket();\n    // wait a tick so that the published message is received separately\n    setTimeout(() => {\n        common_test_1.sendCommand(anotherClient, ['publish', 'two', 'message to 2'])\n            .then((rsp) => {\n            chai_1.expect(rsp).to.equal(1);\n        });\n    }, 1500);\n});",
              "err": {},
              "uuid": "0ac228bc-ce6f-49fe-9e68-d3b224f97c75",
              "parentUUID": "9ced7a2c-f2d2-415c-93d8-d6c27d6c9d2c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bc797c6e-ba50-48cb-8fbb-c23ea84f6162",
            "f96d0071-10c3-4060-adf9-162ae65c4251",
            "afe16baa-a25b-4f08-948d-a7df7842fff2",
            "52700201-677e-4a32-a309-408cef55b881",
            "0ac228bc-ce6f-49fe-9e68-d3b224f97c75"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1527,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "584d9b7d-eeb2-448b-a166-c3ff3f96acf2",
          "title": "resp-server test",
          "fullFile": "/home/lane/git/redis/test/resp/command/server/resp-server.test.ts",
          "file": "/test/resp/command/server/resp-server.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "resp-server test \"before each\" hook",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "bf0e691c-ff49-442b-83e7-6880cdb10675",
              "parentUUID": "584d9b7d-eeb2-448b-a166-c3ff3f96acf2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "resp-server test \"after each\" hook",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "bfa29d4e-e866-4564-b7ca-c4fe1480bb37",
              "parentUUID": "584d9b7d-eeb2-448b-a166-c3ff3f96acf2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "f64c105e-a8ab-4ee0-aded-12c0a3bd1226",
              "title": "server start and stop tests",
              "fullFile": "/home/lane/git/redis/test/resp/command/server/resp-server.test.ts",
              "file": "/test/resp/command/server/resp-server.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should instantiate",
                  "fullTitle": "resp-server test server start and stop tests should instantiate",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            respServer = new resp_server_1.RespServer();\n            chai_1.expect(respServer.constructor.name).to.equal('RespServer');\n        })",
                  "err": {},
                  "uuid": "c067aeaa-1174-41f6-b539-2adbe90c92ad",
                  "parentUUID": "f64c105e-a8ab-4ee0-aded-12c0a3bd1226",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit \"ready\" on startup",
                  "fullTitle": "resp-server test server start and stop tests should emit \"ready\" on startup",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
                  "err": {},
                  "uuid": "d955c73b-6ca4-4d09-b374-b9fbbff9e788",
                  "parentUUID": "f64c105e-a8ab-4ee0-aded-12c0a3bd1226",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit \"closed\" on shutdown",
                  "fullTitle": "resp-server test server start and stop tests should emit \"closed\" on shutdown",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer.on('closed', () => {\n    done();\n});\nrespServer.stop();",
                  "err": {},
                  "uuid": "69a188e7-2751-4176-8b59-fd463ab7a9fd",
                  "parentUUID": "f64c105e-a8ab-4ee0-aded-12c0a3bd1226",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept connections on default ${env.REDIS_HOST}:${env.REDIS_PORT}",
                  "fullTitle": "resp-server test server start and stop tests should accept connections on default ${env.REDIS_HOST}:${env.REDIS_PORT}",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    const client = new net.Socket();\n    client.on('ready', (data) => {\n        respServer.on('closed', () => {\n            done();\n        });\n        respServer.stop();\n    });\n    client.on('connect', (data) => {\n    });\n    client.on('error', (err) => {\n        assert_1.fail(`Unexpected error during connection`, err.stack);\n    });\n    client.connect(Number(process.env.REDIS_PORT || 6379), process.env.REDIS_HOST || 'localhost', () => {\n    });\n});\nrespServer.start();",
                  "err": {},
                  "uuid": "9e788c6e-c481-46c2-b15b-401696f8aeab",
                  "parentUUID": "f64c105e-a8ab-4ee0-aded-12c0a3bd1226",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c067aeaa-1174-41f6-b539-2adbe90c92ad",
                "d955c73b-6ca4-4d09-b374-b9fbbff9e788",
                "69a188e7-2751-4176-8b59-fd463ab7a9fd",
                "9e788c6e-c481-46c2-b15b-401696f8aeab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "df828750-5cb1-4b71-b6da-82b40a4d60e8",
              "title": "other server tests",
              "fullFile": "/home/lane/git/redis/test/resp/command/server/resp-server.test.ts",
              "file": "/test/resp/command/server/resp-server.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "resp-server test other server tests \"before all\" hook",
                  "timedOut": false,
                  "duration": 33,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    client = new net.Socket();\n    done();\n});\nrespServer.start();",
                  "err": {},
                  "uuid": "e5e80b9b-ad1c-4dfe-bf22-e77db1e781fa",
                  "parentUUID": "df828750-5cb1-4b71-b6da-82b40a4d60e8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "resp-server test other server tests \"after all\" hook",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            yield respServer.stop();\n        })",
                  "err": {},
                  "uuid": "4a96fc01-11ff-4257-8d4f-fc752c7d19bc",
                  "parentUUID": "df828750-5cb1-4b71-b6da-82b40a4d60e8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should respond properly to the \"ping\" command",
                  "fullTitle": "resp-server test other server tests should respond properly to the \"ping\" command",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['ping'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('PONG');\n    done();\n});",
                  "err": {},
                  "uuid": "3b7ae6e1-7bc0-40d8-bd4a-8fbd316e1993",
                  "parentUUID": "df828750-5cb1-4b71-b6da-82b40a4d60e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond properly to the \"echo\" command",
                  "fullTitle": "resp-server test other server tests should respond properly to the \"echo\" command",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['echo', 'test'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('test');\n    done();\n});",
                  "err": {},
                  "uuid": "704b0a5e-23ca-48ec-af62-753ae4c3a576",
                  "parentUUID": "df828750-5cb1-4b71-b6da-82b40a4d60e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond with \"ERR\" when echo command has no parameters",
                  "fullTitle": "resp-server test other server tests should respond with \"ERR\" when echo command has no parameters",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            // Note that 'ReplyError:' is supplied by the redis parser, NOT by the code under test\n            const response = yield common_test_1.sendCommand(client, ['echo']);\n            chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'echo\\' command');\n        })",
                  "err": {},
                  "uuid": "def9f39d-8a73-415f-96e6-a3f56a080106",
                  "parentUUID": "df828750-5cb1-4b71-b6da-82b40a4d60e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond with \"ERR\" when echo command has two or more parameters",
                  "fullTitle": "resp-server test other server tests should respond with \"ERR\" when echo command has two or more parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['echo', 'one', 'two'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'echo\\' command');\n    done();\n});",
                  "err": {},
                  "uuid": "e6848bea-aa0b-4aa0-b72f-76bf5fa6a0dd",
                  "parentUUID": "df828750-5cb1-4b71-b6da-82b40a4d60e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond to the \"time\" command with an array of two strings",
                  "fullTitle": "resp-server test other server tests should respond to the \"time\" command with an array of two strings",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Note: we use hrtime which should already do what we need so we don't validate\ncommon_test_1.sendCommand(client, ['time'])\n    .then((response) => {\n    chai_1.expect(response).to.be.an('array');\n    chai_1.expect(response.length).to.equal(2);\n    chai_1.expect(parseInt(response[0], 10)).to.be.greaterThan(0);\n    chai_1.expect(parseInt(response[1], 10)).to.be.greaterThan(0);\n    done();\n});",
                  "err": {},
                  "uuid": "417520d8-481f-4092-9a1c-b79bfba8aeb6",
                  "parentUUID": "df828750-5cb1-4b71-b6da-82b40a4d60e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond with nulCommand when the command is not known",
                  "fullTitle": "resp-server test other server tests should respond with nulCommand when the command is not known",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['felix', 'the', 'cat'])\n    .then((response) => {\n    chai_1.expect(response).to.match(/^ReplyError: ERR unknown command.*/);\n    done();\n});",
                  "err": {},
                  "uuid": "f6121029-ec1c-4868-9711-0939bb3e3d49",
                  "parentUUID": "df828750-5cb1-4b71-b6da-82b40a4d60e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should implement the info command",
                  "fullTitle": "resp-server test other server tests should implement the info command",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield common_test_1.sendCommand(client, ['info']);\n            chai_1.expect(response).to.match(/^# server\\r\\nredis_version:.*/im);\n        })",
                  "err": {},
                  "uuid": "6be897e9-8d22-42ac-8fee-ba11af315162",
                  "parentUUID": "df828750-5cb1-4b71-b6da-82b40a4d60e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should implement the SET command",
                  "fullTitle": "resp-server test other server tests should implement the SET command",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['SET', 'this', 'that'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    common_test_1.sendCommand(client, ['GET', 'this'])\n        .then((getresponse) => {\n        chai_1.expect(getresponse).to.equal('that');\n        done();\n    });\n});",
                  "err": {},
                  "uuid": "fbfc68ec-3751-4026-b32e-23959d65934e",
                  "parentUUID": "df828750-5cb1-4b71-b6da-82b40a4d60e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return nil string when GET is invoked with unknown parameters",
                  "fullTitle": "resp-server test other server tests should return nil string when GET is invoked with unknown parameters",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['GET', ' '])\n    .then((getresponse) => {\n    chai_1.expect(getresponse).to.equal(null);\n    done();\n});",
                  "err": {},
                  "uuid": "734be5eb-1cc4-425d-bc48-5d1adb3405eb",
                  "parentUUID": "df828750-5cb1-4b71-b6da-82b40a4d60e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should implement the info command with a known parameter",
                  "fullTitle": "resp-server test other server tests should implement the info command with a known parameter",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['info', 'memory'])\n    .then((response) => {\n    chai_1.expect(response).to.match(/^# memory.*/mi);\n    done();\n});",
                  "err": {},
                  "uuid": "895d267c-3886-4bef-a80c-8d5440d3e7ab",
                  "parentUUID": "df828750-5cb1-4b71-b6da-82b40a4d60e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not respond when info is called with an unknown paramter",
                  "fullTitle": "resp-server test other server tests should not respond when info is called with an unknown paramter",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield common_test_1.sendCommand(client, ['info', 'juicy']);\n            // Don't know how to send an empty - non-null string response yet\n            chai_1.expect(String(response).trim()).to.equal('');\n        })",
                  "err": {},
                  "uuid": "e5a45955-7ba1-4485-94c5-852d580cd331",
                  "parentUUID": "df828750-5cb1-4b71-b6da-82b40a4d60e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should report the number of keys in the current database",
                  "fullTitle": "resp-server test other server tests should report the number of keys in the current database",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.be.a('number');\n            chai_1.expect(response).to.be.greaterThan(0);\n        })",
                  "err": {},
                  "uuid": "3d157cdd-3510-45f8-8baf-959212f317be",
                  "parentUUID": "df828750-5cb1-4b71-b6da-82b40a4d60e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support the \"select\" command",
                  "fullTitle": "resp-server test other server tests should support the \"select\" command",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['select', '12']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
                  "uuid": "ec6e3470-d35a-473d-9708-f2c17cda748b",
                  "parentUUID": "df828750-5cb1-4b71-b6da-82b40a4d60e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow us to select an invalid database",
                  "fullTitle": "resp-server test other server tests should not allow us to select an invalid database",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['select', 'one']);\n            chai_1.expect(response).to.equal('ReplyError: ERR invalid DB index');\n            response = yield common_test_1.sendCommand(client, ['select', '-12']);\n            chai_1.expect(response).to.equal('ReplyError: ERR DB index is out of range');\n            response = yield common_test_1.sendCommand(client, ['select', '22']);\n            chai_1.expect(response).to.equal('ReplyError: ERR DB index is out of range');\n        })",
                  "err": {},
                  "uuid": "32f15e62-e8c6-480b-a169-877993cebba8",
                  "parentUUID": "df828750-5cb1-4b71-b6da-82b40a4d60e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond properly to the \"quit\" command",
                  "fullTitle": "resp-server test other server tests should respond properly to the \"quit\" command",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Note however that the server does not disconnect us.  That is the client's job\ncommon_test_1.sendCommand(client, ['quit'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    done();\n});",
                  "err": {},
                  "uuid": "d540b94d-b24f-4c91-8118-0d3a69eaf275",
                  "parentUUID": "df828750-5cb1-4b71-b6da-82b40a4d60e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b7ae6e1-7bc0-40d8-bd4a-8fbd316e1993",
                "704b0a5e-23ca-48ec-af62-753ae4c3a576",
                "def9f39d-8a73-415f-96e6-a3f56a080106",
                "e6848bea-aa0b-4aa0-b72f-76bf5fa6a0dd",
                "417520d8-481f-4092-9a1c-b79bfba8aeb6",
                "f6121029-ec1c-4868-9711-0939bb3e3d49",
                "6be897e9-8d22-42ac-8fee-ba11af315162",
                "fbfc68ec-3751-4026-b32e-23959d65934e",
                "734be5eb-1cc4-425d-bc48-5d1adb3405eb",
                "895d267c-3886-4bef-a80c-8d5440d3e7ab",
                "e5a45955-7ba1-4485-94c5-852d580cd331",
                "3d157cdd-3510-45f8-8baf-959212f317be",
                "ec6e3470-d35a-473d-9708-f2c17cda748b",
                "32f15e62-e8c6-480b-a169-877993cebba8",
                "d540b94d-b24f-4c91-8118-0d3a69eaf275"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "fef98d17-4aa0-4c6b-a516-567afa10fa2e",
          "title": "sdiff-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sdiff-command.test.ts",
          "file": "/test/resp/command/set/sdiff-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sdiff-command test \"before all\" hook",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "27813401-b735-42d7-a08d-d69f639610dc",
              "parentUUID": "fef98d17-4aa0-4c6b-a516-567afa10fa2e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sdiff-command test \"before each\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "73771bd1-006c-4045-8b50-2c363ac1314c",
              "parentUUID": "fef98d17-4aa0-4c6b-a516-567afa10fa2e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sdiff-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "285c13fc-cf6a-4286-96ee-84baadb0220e",
              "parentUUID": "fef98d17-4aa0-4c6b-a516-567afa10fa2e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sdiff-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "2354f760-233c-447d-8a33-bb35191ce0e1",
              "parentUUID": "fef98d17-4aa0-4c6b-a516-567afa10fa2e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return EMPTY ARRAY when the source set does not exist",
              "fullTitle": "sdiff-command test should return EMPTY ARRAY when the source set does not exist",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'ary']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "a999c9e4-63c1-4c28-9086-3f1ced0f585f",
              "parentUUID": "fef98d17-4aa0-4c6b-a516-567afa10fa2e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return all members of source set when the destination set does not exist",
              "fullTitle": "sdiff-command test should return all members of source set when the destination set does not exist",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'key1', 'empty']);\n        // REDIS does not guarantee order of the set\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd']);\n    })",
              "err": {},
              "uuid": "f54e108d-bb01-4a85-b222-8146e6ac24bb",
              "parentUUID": "fef98d17-4aa0-4c6b-a516-567afa10fa2e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a proper DIFF of one or more sets",
              "fullTitle": "sdiff-command test should return a proper DIFF of one or more sets",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key3', 'a', 'c', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'key1', 'key2', 'key3']);\n        chai_1.expect(response.sort()).to.eql(['b', 'd']);\n    })",
              "err": {},
              "uuid": "3455dc06-f3ee-4ca9-8d3a-b22e29a52018",
              "parentUUID": "fef98d17-4aa0-4c6b-a516-567afa10fa2e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should ignore non-list keys",
              "fullTitle": "sdiff-command test should ignore non-list keys",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'list', '1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '2', 'three']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'key1', 'key2', 'key3']);\n        chai_1.expect(response.sort()).to.eql(['b', 'd']);\n    })",
              "err": {},
              "uuid": "348e54f9-1835-4baa-8bc9-3ce638c4f006",
              "parentUUID": "fef98d17-4aa0-4c6b-a516-567afa10fa2e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a999c9e4-63c1-4c28-9086-3f1ced0f585f",
            "f54e108d-bb01-4a85-b222-8146e6ac24bb",
            "3455dc06-f3ee-4ca9-8d3a-b22e29a52018",
            "348e54f9-1835-4baa-8bc9-3ce638c4f006"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ea79d9e7-7f09-4d53-b479-befadf522007",
          "title": "set commands test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/set-commands.test.ts",
          "file": "/test/resp/command/set/set-commands.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "set commands test \"before all\" hook",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "5bd41e24-6ebc-4076-90a2-2dc11cdb73cb",
              "parentUUID": "ea79d9e7-7f09-4d53-b479-befadf522007",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "set commands test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "9c300fa9-a5f2-484a-a262-d11dcc100ec9",
              "parentUUID": "ea79d9e7-7f09-4d53-b479-befadf522007",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "set commands test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "f6dbbe1d-f181-46ea-92fa-9543ba1e96bb",
              "parentUUID": "ea79d9e7-7f09-4d53-b479-befadf522007",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "set commands test \"after each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "3c6374cc-22fe-43fc-9166-85d3b1bd1ad0",
              "parentUUID": "ea79d9e7-7f09-4d53-b479-befadf522007",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return ZERO when certain commands are applied against key that doesn't exist",
              "fullTitle": "set commands test should return ZERO when certain commands are applied against key that doesn't exist",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['scard', 'doesnotexist']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['sismember', 'doesnotexist', 'test']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "0b3f9a59-e4e0-453a-8e91-91253168b712",
              "parentUUID": "ea79d9e7-7f09-4d53-b479-befadf522007",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an appropriate error when a \"set\" command is applied to a non-set key",
              "fullTitle": "set commands test should throw an appropriate error when a \"set\" command is applied to a non-set key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['set', 'wrongtype', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sismember', 'wrongtype', 'set']);\n        chai_1.expect(response).to.equal(WRONG_TYPE);\n    })",
              "err": {},
              "uuid": "97c977e5-de1a-4290-bebc-65cfec46e394",
              "parentUUID": "ea79d9e7-7f09-4d53-b479-befadf522007",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new key when sadd is called correctly",
              "fullTitle": "set commands test should create a new key when sadd is called correctly",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['sadd', 'skey', 'untest']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'skey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "cdd5e5df-6cb6-4bca-a8d0-abd8086f8ea8",
              "parentUUID": "ea79d9e7-7f09-4d53-b479-befadf522007",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only report the number of added keys",
              "fullTitle": "set commands test should only report the number of added keys",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['sadd', 'skey', 'untest', 'test2']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'skey']);\n        chai_1.expect(response).to.be.an('array');\n        // Keys are returned in reverse order? - No.\n        // smembers can return a list in any order\n        chai_1.expect(response.length).to.equal(2);\n        chai_1.expect(response.indexOf('test2')).to.be.greaterThan(-1);\n        chai_1.expect(response.indexOf('untest')).to.be.greaterThan(-1);\n    })",
              "err": {},
              "uuid": "6924879d-0864-4cd6-b92b-ece878b700e7",
              "parentUUID": "ea79d9e7-7f09-4d53-b479-befadf522007",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "c6026242-8cb7-4c9e-a896-6a0b560f60ec",
              "title": "smove, sismember, and scard tests",
              "fullFile": "/home/lane/git/redis/test/resp/command/set/set-commands.test.ts",
              "file": "/test/resp/command/set/set-commands.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should do nothing when smove is called with a source key that does not exist",
                  "fullTitle": "set commands test smove, sismember, and scard tests should do nothing when smove is called with a source key that does not exist",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['smove', 'fromskey', 'toskey', 'nothing']);\n            chai_1.expect(response).to.equal(0);\n            response = yield common_test_1.sendCommand(client, ['exists', 'fromskey', 'toskey']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
                  "uuid": "3d8bff3a-e323-4b7d-8552-d6da1dfda0a1",
                  "parentUUID": "c6026242-8cb7-4c9e-a896-6a0b560f60ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should move a key from one set to another (and create the target if necessary)",
                  "fullTitle": "set commands test smove, sismember, and scard tests should move a key from one set to another (and create the target if necessary)",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['exists', 'tonewskey']);\n            chai_1.expect(response).to.equal(0);\n            response = yield common_test_1.sendCommand(client, ['smembers', 'tonewskey']);\n            chai_1.expect(response).to.eql([]);\n            response = yield common_test_1.sendCommand(client, ['sadd', uniqueKey, 'key1', 'key2', 'key3']);\n            chai_1.expect(response).to.equal(3);\n            response = yield common_test_1.sendCommand(client, ['smembers', uniqueKey]);\n            // key order is undefined in redis\n            chai_1.expect(response.length).to.equal(3);\n            chai_1.expect(response.indexOf('key3')).to.be.greaterThan(-1);\n            chai_1.expect(response.indexOf('key2')).to.be.greaterThan(-1);\n            chai_1.expect(response.indexOf('key1')).to.be.greaterThan(-1);\n            response = yield common_test_1.sendCommand(client, ['smove', uniqueKey, 'tonewskey', 'key2']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', 'tonewskey', 'key2']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['smembers', uniqueKey]);\n            // key order, again\n            chai_1.expect(response.length).to.equal(2);\n            chai_1.expect(response.indexOf('key3')).to.be.greaterThan(-1);\n            chai_1.expect(response.indexOf('key1')).to.be.greaterThan(-1);\n            response = yield common_test_1.sendCommand(client, ['smembers', 'tonewskey']);\n            chai_1.expect(response).to.eql(['key2']);\n        })",
                  "err": {},
                  "uuid": "8801003e-9df0-4843-b277-af4557476b0f",
                  "parentUUID": "c6026242-8cb7-4c9e-a896-6a0b560f60ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should report cardinality of a set",
                  "fullTitle": "set commands test smove, sismember, and scard tests should report cardinality of a set",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['scard', uniqueKey]);\n            chai_1.expect(response).to.equal(2);\n            response = yield common_test_1.sendCommand(client, ['scard', 'tonewskey']);\n            chai_1.expect(response).to.equal(1);\n        })",
                  "err": {},
                  "uuid": "d4004fb7-c372-44cc-95e0-eb0bc322a950",
                  "parentUUID": "c6026242-8cb7-4c9e-a896-6a0b560f60ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should report ismember true/false",
                  "fullTitle": "set commands test smove, sismember, and scard tests should report ismember true/false",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['sismember', 'tonewskey', 'key2']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', 'tonewskey', 'key1']);\n            chai_1.expect(response).to.equal(0);\n            response = yield common_test_1.sendCommand(client, ['sismember', uniqueKey, 'key1']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', uniqueKey, 'key3']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', uniqueKey, 'key2']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
                  "uuid": "a195de3a-20cc-4c71-8983-a33ac0a587b5",
                  "parentUUID": "c6026242-8cb7-4c9e-a896-6a0b560f60ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should only remove the source element if the destination element already exists",
                  "fullTitle": "set commands test smove, sismember, and scard tests should only remove the source element if the destination element already exists",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const newkey = `move-unique-${new Date().getTime()}`;\n            const newToKey = `move-new-to-key`;\n            let response = yield common_test_1.sendCommand(client, ['sadd', newkey, 'key1', 'key2', 'key3']);\n            chai_1.expect(response).to.equal(3);\n            response = yield common_test_1.sendCommand(client, ['sadd', newToKey, 'key1', 'key2', 'key3']);\n            chai_1.expect(response).to.equal(3);\n            response = yield common_test_1.sendCommand(client, ['smove', newkey, newToKey, 'key2']);\n            // Inconsistent with redis documentation?\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', newkey, 'key2']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
                  "uuid": "72e149db-679a-487c-8567-b71ca3e2af48",
                  "parentUUID": "c6026242-8cb7-4c9e-a896-6a0b560f60ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d8bff3a-e323-4b7d-8552-d6da1dfda0a1",
                "8801003e-9df0-4843-b277-af4557476b0f",
                "d4004fb7-c372-44cc-95e0-eb0bc322a950",
                "a195de3a-20cc-4c71-8983-a33ac0a587b5",
                "72e149db-679a-487c-8567-b71ca3e2af48"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 65,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "0b3f9a59-e4e0-453a-8e91-91253168b712",
            "97c977e5-de1a-4290-bebc-65cfec46e394",
            "cdd5e5df-6cb6-4bca-a8d0-abd8086f8ea8",
            "6924879d-0864-4cd6-b92b-ece878b700e7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "732f7357-6ac7-4f4d-988d-7597f10ddb99",
          "title": "sinter-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sinter-command.test.ts",
          "file": "/test/resp/command/set/sinter-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sinter-command test \"before all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "d2f63ff7-6269-461d-abba-f2d8bd84dfa5",
              "parentUUID": "732f7357-6ac7-4f4d-988d-7597f10ddb99",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sinter-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "4e3e8580-3e75-4752-bcbb-39e46596dcfb",
              "parentUUID": "732f7357-6ac7-4f4d-988d-7597f10ddb99",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sinter-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "e5c2d065-f97b-48b7-a148-e43e513b1ec2",
              "parentUUID": "732f7357-6ac7-4f4d-988d-7597f10ddb99",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sinter-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "ee00dafb-2365-438e-9de4-080f1d4548a4",
              "parentUUID": "732f7357-6ac7-4f4d-988d-7597f10ddb99",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return EMPTY SET when the source set does not exist",
              "fullTitle": "sinter-command test should return EMPTY SET when the source set does not exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sinter', 'ary']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "b792ea08-391a-4303-975e-d8f675bbf27a",
              "parentUUID": "732f7357-6ac7-4f4d-988d-7597f10ddb99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return EMPTY SET when any other set does not exist",
              "fullTitle": "sinter-command test should return EMPTY SET when any other set does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'empty']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "ef92a15f-2af8-4097-ba39-e05528e9b523",
              "parentUUID": "732f7357-6ac7-4f4d-988d-7597f10ddb99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when one of the keys is not a set",
              "fullTitle": "sinter-command test should fail when one of the keys is not a set",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '1', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'zkey']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n        response = yield common_test_1.sendCommand(client, ['set', 'skey1', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'skey1']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "c718c2d4-f736-40e0-9e70-d1a319540746",
              "parentUUID": "732f7357-6ac7-4f4d-988d-7597f10ddb99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the intersection of one or more sets",
              "fullTitle": "sinter-command test should return the intersection of one or more sets",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key3', 'a', 'c', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'key2', 'key3']);\n        chai_1.expect(response).to.eql(['c']);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'a']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key2', 'key1', 'key3']);\n        chai_1.expect(response.length).to.equal(2);\n        // Redis does not guarantee the order of a set\n        chai_1.expect(response.sort()).to.eql(['a', 'c']);\n    })",
              "err": {},
              "uuid": "13b2ed0c-39eb-4601-bd11-f651113a39d0",
              "parentUUID": "732f7357-6ac7-4f4d-988d-7597f10ddb99",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b792ea08-391a-4303-975e-d8f675bbf27a",
            "ef92a15f-2af8-4097-ba39-e05528e9b523",
            "c718c2d4-f736-40e0-9e70-d1a319540746",
            "13b2ed0c-39eb-4601-bd11-f651113a39d0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "809e7957-a789-4e15-84dc-7145dc5437b8",
          "title": "sinterstore-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sinterstore-command.test.ts",
          "file": "/test/resp/command/set/sinterstore-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sinterstore-command test \"before all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "6ef50fc7-fc45-47de-bdab-a8cea351e334",
              "parentUUID": "809e7957-a789-4e15-84dc-7145dc5437b8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sinterstore-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "72c2bf12-8dcd-43e9-9595-bd639c252b9c",
              "parentUUID": "809e7957-a789-4e15-84dc-7145dc5437b8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sinterstore-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "66accde3-eb48-4c10-a870-3274137b666e",
              "parentUUID": "809e7957-a789-4e15-84dc-7145dc5437b8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sinterstore-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "7b29c10c-5553-4018-ad98-3955677a9b19",
              "parentUUID": "809e7957-a789-4e15-84dc-7145dc5437b8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require a minimum of two parameters",
              "fullTitle": "sinterstore-command test should require a minimum of two parameters",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'ary']);\n        chai_1.expect(response).to.match(/ERR wrong number of arguments for \\'sinterstore\\' command/i);\n    })",
              "err": {},
              "uuid": "8e62f171-58f3-4bb5-9889-234dc4a2a425",
              "parentUUID": "809e7957-a789-4e15-84dc-7145dc5437b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return ZERO when the source set does not exist",
              "fullTitle": "sinterstore-command test should return ZERO when the source set does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'dest', 'src']);\n        chai_1.expect(response).to.eql(0);\n    })",
              "err": {},
              "uuid": "fa4b75f5-5f42-4403-91fc-0f2d64a7ab73",
              "parentUUID": "809e7957-a789-4e15-84dc-7145dc5437b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overwrite the destination and return the number of keys copied",
              "fullTitle": "sinterstore-command test should overwrite the destination and return the number of keys copied",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c', 'd', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['set', 'key3', 'some text value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'key3', 'key1', 'key2']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'key3']);\n        chai_1.expect(response).to.eql(['c']);\n    })",
              "err": {},
              "uuid": "363a3622-d6ca-486d-b9cc-6a5340c8a21b",
              "parentUUID": "809e7957-a789-4e15-84dc-7145dc5437b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when one of the keys is not a set",
              "fullTitle": "sinterstore-command test should fail when one of the keys is not a set",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '1', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'key1', 'zkey']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n        response = yield common_test_1.sendCommand(client, ['set', 'skey1', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'key1', 'skey1']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "933c1e3c-9032-4cbd-b332-be7a42d84c53",
              "parentUUID": "809e7957-a789-4e15-84dc-7145dc5437b8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8e62f171-58f3-4bb5-9889-234dc4a2a425",
            "fa4b75f5-5f42-4403-91fc-0f2d64a7ab73",
            "363a3622-d6ca-486d-b9cc-6a5340c8a21b",
            "933c1e3c-9032-4cbd-b332-be7a42d84c53"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f5da13c0-b54f-4e9b-bc8c-c1541f960cd5",
          "title": "srem-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/srem-command.test.ts",
          "file": "/test/resp/command/set/srem-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "srem-command test \"before all\" hook",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "a11d8d61-e28e-4c8e-9b35-1da7fa18f705",
              "parentUUID": "f5da13c0-b54f-4e9b-bc8c-c1541f960cd5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "srem-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "1b334385-6508-4d3b-9e85-aeda90569e2f",
              "parentUUID": "f5da13c0-b54f-4e9b-bc8c-c1541f960cd5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "srem-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "6d6a46b9-5324-4456-9ac4-7457c2f622dc",
              "parentUUID": "f5da13c0-b54f-4e9b-bc8c-c1541f960cd5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "srem-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "d7da7d92-a727-477d-9401-5f7af7dd0364",
              "parentUUID": "f5da13c0-b54f-4e9b-bc8c-c1541f960cd5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 0 when the set does not exist",
              "fullTitle": "srem-command test should return 0 when the set does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['srem', 'set', 'member']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "2f62380f-9249-4f96-8612-3a47a7666c26",
              "parentUUID": "f5da13c0-b54f-4e9b-bc8c-c1541f960cd5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return only the number of existing keys that are removed",
              "fullTitle": "srem-command test should return only the number of existing keys that are removed",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'set', 'key1', 'key2', 'key3', 'key4']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['srem', 'set', 'key2', 'not', 'here', 'today', 'key4']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'set']);\n        chai_1.expect(response.sort()).to.eql(['key1', 'key3']);\n    })",
              "err": {},
              "uuid": "6886e0bb-f18c-43a8-9e5b-7c763339e626",
              "parentUUID": "f5da13c0-b54f-4e9b-bc8c-c1541f960cd5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove an empty set when all members are removed",
              "fullTitle": "srem-command test should remove an empty set when all members are removed",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['srem', 'set', 'key1', 'key3']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['exists', 'set']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "106348a1-fe59-41a3-a8f5-5d8d4c5d2d17",
              "parentUUID": "f5da13c0-b54f-4e9b-bc8c-c1541f960cd5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2f62380f-9249-4f96-8612-3a47a7666c26",
            "6886e0bb-f18c-43a8-9e5b-7c763339e626",
            "106348a1-fe59-41a3-a8f5-5d8d4c5d2d17"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d85e5e06-c233-40ff-9ebb-b0c278f77052",
          "title": "sunion-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sunion-command.test.ts",
          "file": "/test/resp/command/set/sunion-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sunion-command test \"before all\" hook",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "4bf75ac3-f871-4616-80d0-0b2a3c0f602c",
              "parentUUID": "d85e5e06-c233-40ff-9ebb-b0c278f77052",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sunion-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "5153dfe5-e511-4d7c-bd2b-2a1421c4e14f",
              "parentUUID": "d85e5e06-c233-40ff-9ebb-b0c278f77052",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sunion-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "9cab0775-98ce-44a0-a187-7ae826529a16",
              "parentUUID": "d85e5e06-c233-40ff-9ebb-b0c278f77052",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sunion-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "eb75f309-15cb-45ce-bf19-6e881899215e",
              "parentUUID": "d85e5e06-c233-40ff-9ebb-b0c278f77052",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return EMPTY SET when the source set does not exist",
              "fullTitle": "sunion-command test should return EMPTY SET when the source set does not exist",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sunion', 'ary']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "55089c21-d84b-414c-b9ea-a20df8478311",
              "parentUUID": "d85e5e06-c233-40ff-9ebb-b0c278f77052",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the union of a single set",
              "fullTitle": "sunion-command test should return the union of a single set",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['sunion', 'key1']);\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd']);\n    })",
              "err": {},
              "uuid": "103af80b-d30f-477f-b186-3d40d32a3888",
              "parentUUID": "d85e5e06-c233-40ff-9ebb-b0c278f77052",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when sunion requested againt non-set keys",
              "fullTitle": "sunion-command test should fail when sunion requested againt non-set keys",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'string-key', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sunion', 'key1', 'string-key']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "0f5f0678-0a4e-4613-b5b2-3d5736fefbcb",
              "parentUUID": "d85e5e06-c233-40ff-9ebb-b0c278f77052",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the union of multiple sets",
              "fullTitle": "sunion-command test should return the union of multiple sets",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key3', 'a', 'c', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sunion', 'key1', 'key2', 'key3']);\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd', 'e']);\n    })",
              "err": {},
              "uuid": "aa2b9604-3702-4ffe-995e-7e2df159078c",
              "parentUUID": "d85e5e06-c233-40ff-9ebb-b0c278f77052",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "55089c21-d84b-414c-b9ea-a20df8478311",
            "103af80b-d30f-477f-b186-3d40d32a3888",
            "0f5f0678-0a4e-4613-b5b2-3d5736fefbcb",
            "aa2b9604-3702-4ffe-995e-7e2df159078c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c33ca865-e792-4e2d-b7ec-cf829bc310e1",
          "title": "sunionstore-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sunionstore-command.test.ts",
          "file": "/test/resp/command/set/sunionstore-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sunionstore-command test \"before all\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "985a078e-bd7f-46ea-ab0a-2c36121e0f52",
              "parentUUID": "c33ca865-e792-4e2d-b7ec-cf829bc310e1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sunionstore-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "296205da-abf1-43a7-b720-d896e626ea4b",
              "parentUUID": "c33ca865-e792-4e2d-b7ec-cf829bc310e1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sunionstore-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "29a9e7b7-d1f8-42bf-b756-e9b4e6f9bda3",
              "parentUUID": "c33ca865-e792-4e2d-b7ec-cf829bc310e1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sunionstore-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "82725070-fd1b-42d1-ab92-a3b610f655cc",
              "parentUUID": "c33ca865-e792-4e2d-b7ec-cf829bc310e1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require a minimum of two parameters",
              "fullTitle": "sunionstore-command test should require a minimum of two parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sunionstore', 'ary']);\n        chai_1.expect(response).to.match(/ERR wrong number of arguments for \\'sunionstore\\' command/i);\n    })",
              "err": {},
              "uuid": "39299f69-ac7b-47c7-b901-e7e4357c2b8f",
              "parentUUID": "c33ca865-e792-4e2d-b7ec-cf829bc310e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return ZERO when the source set does not exist",
              "fullTitle": "sunionstore-command test should return ZERO when the source set does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sunionstore', 'dest', 'src']);\n        chai_1.expect(response).to.eql(0);\n    })",
              "err": {},
              "uuid": "9d89234a-8760-4d8c-ae5b-cd221584d57c",
              "parentUUID": "c33ca865-e792-4e2d-b7ec-cf829bc310e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overwrite the destination and return the number of keys copied",
              "fullTitle": "sunionstore-command test should overwrite the destination and return the number of keys copied",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c', 'd', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['set', 'key3', 'some text value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sunionstore', 'key3', 'key1', 'key2']);\n        chai_1.expect(response).to.equal(5);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'key3']);\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd', 'e']);\n    })",
              "err": {},
              "uuid": "a7eadea9-567e-4995-8ffb-4775cf505664",
              "parentUUID": "c33ca865-e792-4e2d-b7ec-cf829bc310e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "39299f69-ac7b-47c7-b901-e7e4357c2b8f",
            "9d89234a-8760-4d8c-ae5b-cd221584d57c",
            "a7eadea9-567e-4995-8ffb-4775cf505664"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f44b0ffd-dba4-4eb0-ae70-12e26a199ee7",
          "title": "z-command tests",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/z-commands.test.ts",
          "file": "/test/resp/command/sset/z-commands.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "z-command tests \"before all\" hook",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "ebc8da22-dd1d-43a1-9c4f-9bfdb62eae4f",
              "parentUUID": "f44b0ffd-dba4-4eb0-ae70-12e26a199ee7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "z-command tests \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "64459bd9-ae7e-4e87-90fa-d69f63a69feb",
              "parentUUID": "f44b0ffd-dba4-4eb0-ae70-12e26a199ee7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "z-command tests \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "3c28caf6-491d-4e6a-8e85-0996cb9b66df",
              "parentUUID": "f44b0ffd-dba4-4eb0-ae70-12e26a199ee7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "z-command tests \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "8fa96ab3-26f6-4836-8456-b9a96def2052",
              "parentUUID": "f44b0ffd-dba4-4eb0-ae70-12e26a199ee7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should support basic operations",
              "fullTitle": "z-command tests should support basic operations",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueZkey = `key${new Date().getTime()}`;\n        let response = yield common_test_1.sendCommand(client, ['zrange', 'testkey', String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER)]);\n        chai_1.expect(response).to.eql([]);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'testkey', '14', '__proto__']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '8', '5a600e16']);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '9', '5a600e17']);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '10', '5a600e18']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zcard', uniqueZkey]);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql(['5a600e16', '8',\n            '5a600e17', '9',\n            '5a600e18', '10']);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '12', '5a600e17']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['zcount', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER)]);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER)]);\n        chai_1.expect(response.length).to.equal(3);\n        chai_1.expect(response).to.eql(['5a600e16', '5a600e18', '5a600e17']);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql(['5a600e16', '8', '5a600e18', '10', '5a600e17', '12']);\n        response = yield common_test_1.sendCommand(client, ['type', uniqueZkey]);\n        chai_1.expect(response).to.equal('zset');\n        response = yield common_test_1.sendCommand(client, ['zcount', uniqueZkey, '-Infinity', '10']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['zcount', uniqueZkey, 'Negative One', '10']);\n        chai_1.expect(response).to.equal('ReplyError: ERR min or max is not a float');\n        // report syntax error\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'with Scores']);\n        chai_1.expect(response).to.eql('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String('Number.MIN_SAFE_INTEGER'), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql('ReplyError: ERR value is not an integer or out of range');\n        // Remove members without removing keys\n        response = yield common_test_1.sendCommand(client, ['zrem', uniqueZkey, 'does not exist', '5a600e16', '5a600e18', '5a600e17']);\n        chai_1.expect(response).to.equal(3);\n        // Unexpectedly, redis removes the key when the last element is removed\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueZkey]);\n        console.log(`searched for ${uniqueZkey}`);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "d317038c-8495-42b3-9ac1-37dd3a85a495",
              "parentUUID": "f44b0ffd-dba4-4eb0-ae70-12e26a199ee7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should increase rank",
              "fullTitle": "z-command tests should increase rank",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueZkey = `incrkey${new Date().getTime()}`;\n        let response;\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '1', 'first']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '2', 'second']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '3', 'third']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '4', 'fourth']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, '2', 'first']);\n        chai_1.expect(response).to.equal('3');\n        // Validate zscore\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'first']);\n        // expect(response).to.equal('3');\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'second']);\n        // expect(response).to.equal('2');\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'third']);\n        // expect(response).to.equal('3');\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'fourth']);\n        // expect(response).to.equal('4');\n        //\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'first']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'second']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'third']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'fourth']);\n        chai_1.expect(response).to.equal(3);\n        // expect(response).to.match(/^ReplyError: ERR unknown command.*/);\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, '-20', 'fourth']);\n        chai_1.expect(response).to.equal('-16');\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, `-${Number.MIN_SAFE_INTEGER + 1}.${Number.MAX_SAFE_INTEGER}`, 'fourth']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not a valid float');\n        // Should create a key if it doesn't exist\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, '-20', 'fifth']);\n        chai_1.expect(response).to.equal('-20');\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql(['fifth', '-20', 'fourth', '-16', 'second', '2', 'first', '3', 'third', '3']);\n    })",
              "err": {},
              "uuid": "d2efdfe8-ce60-4192-a494-e0e9bf8b70df",
              "parentUUID": "f44b0ffd-dba4-4eb0-ae70-12e26a199ee7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d317038c-8495-42b3-9ac1-37dd3a85a495",
            "d2efdfe8-ce60-4192-a494-e0e9bf8b70df"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 48,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2c52e08c-5b33-4d31-816b-502b08961562",
          "title": "zadd command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zadd-command.test.ts",
          "file": "/test/resp/command/sset/zadd-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zadd command test \"before all\" hook",
              "timedOut": false,
              "duration": 52,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "845a3362-64dd-4ef8-8947-90bc29650435",
              "parentUUID": "2c52e08c-5b33-4d31-816b-502b08961562",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zadd command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "daca4d6d-ee4c-44b7-aadf-8a02a37ed8d9",
              "parentUUID": "2c52e08c-5b33-4d31-816b-502b08961562",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zadd command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "d10f0cd5-4f3a-4c19-9c9f-cf1c4e2cd9a8",
              "parentUUID": "2c52e08c-5b33-4d31-816b-502b08961562",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zadd command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "bc330243-3be4-4f9b-8c72-d3c96f38e9e5",
              "parentUUID": "2c52e08c-5b33-4d31-816b-502b08961562",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require at least 3 parameters",
              "fullTitle": "zadd command test should require at least 3 parameters",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['zadd']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "28f197b3-a78c-44ef-b2ca-79b9fdb0786b",
              "parentUUID": "2c52e08c-5b33-4d31-816b-502b08961562",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject even parameter counts",
              "fullTitle": "zadd command test should reject even parameter counts",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something', '456']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something', '456', 'another', '765']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something', '456', 'another', '765', 'test']);\n        // The \"something\" key should already exist so we only count 2 new fields\n        chai_1.expect(response).to.equal(2);\n    })",
              "err": {},
              "uuid": "6bece147-bb75-4942-99a4-29e804ee3146",
              "parentUUID": "2c52e08c-5b33-4d31-816b-502b08961562",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject an attempt to store non-floatish rankings",
              "fullTitle": "zadd command test should reject an attempt to store non-floatish rankings",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '__data__', 'something']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not a valid float');\n    })",
              "err": {},
              "uuid": "b097d5d9-fe5a-4a20-9ce2-2a4a12d7a12f",
              "parentUUID": "2c52e08c-5b33-4d31-816b-502b08961562",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "28f197b3-a78c-44ef-b2ca-79b9fdb0786b",
            "6bece147-bb75-4942-99a4-29e804ee3146",
            "b097d5d9-fe5a-4a20-9ce2-2a4a12d7a12f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7cc577f8-9afb-46eb-8f88-5cc509235468",
          "title": "zrange-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zrange-command.test.ts",
          "file": "/test/resp/command/sset/zrange-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zrange-command test \"before all\" hook",
              "timedOut": false,
              "duration": 49,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "5f2cc007-42d4-4b4c-a7c6-25f89f8ea52e",
              "parentUUID": "7cc577f8-9afb-46eb-8f88-5cc509235468",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zrange-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "6900f2ad-ab54-4635-89b5-65e918684789",
              "parentUUID": "7cc577f8-9afb-46eb-8f88-5cc509235468",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zrange-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "ffc87f98-d374-43d4-bfac-c69432f0767d",
              "parentUUID": "7cc577f8-9afb-46eb-8f88-5cc509235468",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zrange-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a488932e-bdf1-455a-a904-35eb6261a231",
              "parentUUID": "7cc577f8-9afb-46eb-8f88-5cc509235468",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should reproduce the redis documentation examples",
              "fullTitle": "zrange-command test should reproduce the redis documentation examples",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'one']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '2', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '3', 'three']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '0', '-1']);\n        chai_1.expect(response).to.eql(['one', 'two', 'three']);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '2', '3']);\n        chai_1.expect(response).to.eql(['three']);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '-2', '-1']);\n        chai_1.expect(response).to.eql(['two', 'three']);\n    })",
              "err": {},
              "uuid": "a08abcd6-9d1f-481b-8824-36bcd962a233",
              "parentUUID": "7cc577f8-9afb-46eb-8f88-5cc509235468",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should also reproduce the second documented example",
              "fullTitle": "zrange-command test should also reproduce the second documented example",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '0', '1', 'withscores']);\n        chai_1.expect(response).to.eql(['one', '1', 'two', '2']);\n    })",
              "err": {},
              "uuid": "a27e1706-4790-4219-8c16-bf2fd6a2aa8f",
              "parentUUID": "7cc577f8-9afb-46eb-8f88-5cc509235468",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a08abcd6-9d1f-481b-8824-36bcd962a233",
            "a27e1706-4790-4219-8c16-bf2fd6a2aa8f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 30,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "de5a8e07-ecc4-49a1-84be-ab6a1c07e609",
          "title": "zrangebyscore-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zrangebyscore-command.test.ts",
          "file": "/test/resp/command/sset/zrangebyscore-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zrangebyscore-command test \"before all\" hook",
              "timedOut": false,
              "duration": 65,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "b5fff890-ae0b-4f19-9d02-2a3e4b712e41",
              "parentUUID": "de5a8e07-ecc4-49a1-84be-ab6a1c07e609",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zrangebyscore-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "c82ca1cd-2704-4723-ab5d-b9476d04c212",
              "parentUUID": "de5a8e07-ecc4-49a1-84be-ab6a1c07e609",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zrangebyscore-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "fec0de04-08ff-46e6-8d16-5b7ea8aec0c8",
              "parentUUID": "de5a8e07-ecc4-49a1-84be-ab6a1c07e609",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zrangebyscore-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "4a1ab095-03a3-4ee4-9b3e-fc3aee5bab3b",
              "parentUUID": "de5a8e07-ecc4-49a1-84be-ab6a1c07e609",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should reproduce the redis documentation examples",
              "fullTitle": "zrangebyscore-command test should reproduce the redis documentation examples",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'myzset', '1', 'one']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'myzset', '2', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'myzset', '3', 'three']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', '-inf', '+inf']);\n        chai_1.expect(response).to.eql(['one', 'two', 'three']);\n        response = yield common_test_1.sendCommand(client, ['ZRANGEBYSCORE', 'myzset', '1', '2']);\n        chai_1.expect(response).to.eql(['one', 'two']);\n        response = yield common_test_1.sendCommand(client, ['ZRANGEBYSCORE', 'myzset', '(1', '2']);\n        chai_1.expect(response).to.eql(['two']);\n        response = yield common_test_1.sendCommand(client, ['ZRANGEBYSCORE', 'myzset', '(1', '(2']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "60ddf4d9-faad-43f6-b658-1ab6a8ae05e8",
              "parentUUID": "de5a8e07-ecc4-49a1-84be-ab6a1c07e609",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should supply +Infinity for +inf as min parameter",
              "fullTitle": "zrangebyscore-command test should supply +Infinity for +inf as min parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', '+inf', '+inf']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "3c8c5725-17c4-41fb-93f5-7b9fa3d98ae5",
              "parentUUID": "de5a8e07-ecc4-49a1-84be-ab6a1c07e609",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should supply -Infinity for -inf as max parameter",
              "fullTitle": "zrangebyscore-command test should supply -Infinity for -inf as max parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', '-inf', '-inf']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "b94f82d2-940c-4397-9e02-04223c707114",
              "parentUUID": "de5a8e07-ecc4-49a1-84be-ab6a1c07e609",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should recognize invalid min parameter",
              "fullTitle": "zrangebyscore-command test should recognize invalid min parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // NOTE: 'inf' is NOT invalid to redis\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', 'inx', '+inf']);\n        chai_1.expect(response).to.equal('ReplyError: ERR min or max is not a float');\n    })",
              "err": {},
              "uuid": "661ec93d-7d7e-4baf-b407-dab5a6716dea",
              "parentUUID": "de5a8e07-ecc4-49a1-84be-ab6a1c07e609",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should recognize invalid max parameter",
              "fullTitle": "zrangebyscore-command test should recognize invalid max parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // NOTE: 'inf' is NOT invalid to redis\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', '-inf', 'int']);\n        chai_1.expect(response).to.equal('ReplyError: ERR min or max is not a float');\n    })",
              "err": {},
              "uuid": "a4797772-7af5-4202-b410-4f5296cda1db",
              "parentUUID": "de5a8e07-ecc4-49a1-84be-ab6a1c07e609",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should recognize the WITHSCORES option",
              "fullTitle": "zrangebyscore-command test should recognize the WITHSCORES option",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', '-inf', '+inf', 'withScores']);\n        chai_1.expect(response).to.eql(['one', '1', 'two', '2', 'three', '3']);\n    })",
              "err": {},
              "uuid": "fe564684-7449-4e19-addb-90df87ad6e30",
              "parentUUID": "de5a8e07-ecc4-49a1-84be-ab6a1c07e609",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should error when an invalid limit option is specified",
              "fullTitle": "zrangebyscore-command test should error when an invalid limit option is specified",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', '-inf', '+inf', 'limit']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', '-inf', '+inf', 'lizmit']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', '-inf', '+inf', 'limit', 'x']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', '-inf', '+inf', 'limit', '0', 'x']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "cec4878e-426c-4503-a371-de764ae0048b",
              "parentUUID": "de5a8e07-ecc4-49a1-84be-ab6a1c07e609",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "60ddf4d9-faad-43f6-b658-1ab6a8ae05e8",
            "3c8c5725-17c4-41fb-93f5-7b9fa3d98ae5",
            "b94f82d2-940c-4397-9e02-04223c707114",
            "661ec93d-7d7e-4baf-b407-dab5a6716dea",
            "a4797772-7af5-4202-b410-4f5296cda1db",
            "fe564684-7449-4e19-addb-90df87ad6e30",
            "cec4878e-426c-4503-a371-de764ae0048b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "17d4d208-fcb8-4b88-82d6-e20ad9611756",
          "title": "zrank-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zrank-command.test.ts",
          "file": "/test/resp/command/sset/zrank-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zrank-command test \"before all\" hook",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "516a08c6-51fc-4a0e-abbb-554233fb061f",
              "parentUUID": "17d4d208-fcb8-4b88-82d6-e20ad9611756",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zrank-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "675f04cd-3ac4-4bd6-9553-c6f80802580e",
              "parentUUID": "17d4d208-fcb8-4b88-82d6-e20ad9611756",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zrank-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "0a6dee68-6a61-4045-a9e4-57996a9cd11d",
              "parentUUID": "17d4d208-fcb8-4b88-82d6-e20ad9611756",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zrank-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "80ec2876-9db6-4468-b8a4-c3252453f17e",
              "parentUUID": "17d4d208-fcb8-4b88-82d6-e20ad9611756",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when the ZSET does not exist",
              "fullTitle": "zrank-command test should return NIL when the ZSET does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrank', 'zset', 'member']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "c9779415-5f43-4535-9878-24d19c76145e",
              "parentUUID": "17d4d208-fcb8-4b88-82d6-e20ad9611756",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NIL when the ZSET exists but the key does not",
              "fullTitle": "zrank-command test should return NIL when the ZSET exists but the key does not",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '23.3', 'member']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrank', 'zset', 'membre']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['exists', 'zset']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "d4ad36b2-7e8b-48c2-b88e-31f60ad48319",
              "parentUUID": "17d4d208-fcb8-4b88-82d6-e20ad9611756",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c9779415-5f43-4535-9878-24d19c76145e",
            "d4ad36b2-7e8b-48c2-b88e-31f60ad48319"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1ae60f4d-c731-4d1e-a16c-b50c2d91a151",
          "title": "zrem-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zrem-command.test.ts",
          "file": "/test/resp/command/sset/zrem-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zrem-command test \"before all\" hook",
              "timedOut": false,
              "duration": 45,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "c7b879bc-fa18-460a-9ff4-8a69ffeb8263",
              "parentUUID": "1ae60f4d-c731-4d1e-a16c-b50c2d91a151",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zrem-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "2762d3d6-cf48-4cec-84f6-c8af85a2eb89",
              "parentUUID": "1ae60f4d-c731-4d1e-a16c-b50c2d91a151",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zrem-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "afaa6cfc-063f-44a6-884e-5d2c0b96effd",
              "parentUUID": "1ae60f4d-c731-4d1e-a16c-b50c2d91a151",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zrem-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "9d583332-0717-420c-829a-c7c386a15e9b",
              "parentUUID": "1ae60f4d-c731-4d1e-a16c-b50c2d91a151",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should remove a key from a sorted set",
              "fullTitle": "zrem-command test should remove a key from a sorted set",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'one']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '2', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '3', 'three']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrem', 'zset', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '0', '-1', 'withscores']);\n        chai_1.expect(response).to.eql(['one', '1', 'three', '3']);\n    })",
              "err": {},
              "uuid": "50a02be4-2164-4404-ba59-d693dde42e58",
              "parentUUID": "1ae60f4d-c731-4d1e-a16c-b50c2d91a151",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "50a02be4-2164-4404-ba59-d693dde42e58"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5d1c31cd-c10d-4828-b410-8aa448bbb307",
          "title": "zscore-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zscore-command.test.ts",
          "file": "/test/resp/command/sset/zscore-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zscore-command test \"before all\" hook",
              "timedOut": false,
              "duration": 45,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "adc632aa-563d-44df-9372-c34f035fed36",
              "parentUUID": "5d1c31cd-c10d-4828-b410-8aa448bbb307",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zscore-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "f5551be8-f68c-4321-9b2a-a9584e0750e5",
              "parentUUID": "5d1c31cd-c10d-4828-b410-8aa448bbb307",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zscore-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "3c9adc6c-2bc9-4983-b403-413d01bb0c08",
              "parentUUID": "5d1c31cd-c10d-4828-b410-8aa448bbb307",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zscore-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "df043129-930d-4e40-b11a-1f258f8b6f22",
              "parentUUID": "5d1c31cd-c10d-4828-b410-8aa448bbb307",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return the score of a zset member",
              "fullTitle": "zscore-command test should return the score of a zset member",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '10', 'one']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zscore', 'zset', 'one']);\n        chai_1.expect(response).to.equal('10');\n    })",
              "err": {},
              "uuid": "30e6d1c1-292e-40f0-8a26-8953f6a068e4",
              "parentUUID": "5d1c31cd-c10d-4828-b410-8aa448bbb307",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null when the key or member does not exist",
              "fullTitle": "zscore-command test should return null when the key or member does not exist",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zscore', 'dontexist', 'two']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['zscore', 'zset', 'two']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "6c54e6ca-d5fb-4ae2-aaa4-2e72adee1fdb",
              "parentUUID": "5d1c31cd-c10d-4828-b410-8aa448bbb307",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "30e6d1c1-292e-40f0-8a26-8953f6a068e4",
            "6c54e6ca-d5fb-4ae2-aaa4-2e72adee1fdb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "841c4c3f-a525-40a0-a854-933b265c2a49",
          "title": "getset-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/getset-command.test.ts",
          "file": "/test/resp/command/string/getset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "getset-command test \"before all\" hook",
              "timedOut": false,
              "duration": 51,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "2ff23002-5f8a-4816-b484-7560de9264ff",
              "parentUUID": "841c4c3f-a525-40a0-a854-933b265c2a49",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "getset-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "d3ac6e4d-e4ad-4365-839d-74c8fcdf06ae",
              "parentUUID": "841c4c3f-a525-40a0-a854-933b265c2a49",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "getset-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "2d416031-bb57-4ea1-8da9-ee5b3bfedbb2",
              "parentUUID": "841c4c3f-a525-40a0-a854-933b265c2a49",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "getset-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "b4d8a3d8-f7c0-4d45-a295-e8f2cf45642f",
              "parentUUID": "841c4c3f-a525-40a0-a854-933b265c2a49",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when the original key does not exist",
              "fullTitle": "getset-command test should report NIL when the original key does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['getset', uniqueKey, '0']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "1d027a43-12b3-4ff4-8df0-47c2dd07f2de",
              "parentUUID": "841c4c3f-a525-40a0-a854-933b265c2a49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report the previous value of the key",
              "fullTitle": "getset-command test should report the previous value of the key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['getset', uniqueKey, 'ninety nine']);\n        chai_1.expect(response).to.equal('0');\n        response = yield common_test_1.sendCommand(client, ['getset', uniqueKey, 'nothing']);\n        chai_1.expect(response).to.equal('ninety nine');\n    })",
              "err": {},
              "uuid": "af5d5070-dbe5-499c-96ee-89decfe2134b",
              "parentUUID": "841c4c3f-a525-40a0-a854-933b265c2a49",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d027a43-12b3-4ff4-8df0-47c2dd07f2de",
            "af5d5070-dbe5-499c-96ee-89decfe2134b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0da279c4-6ebf-418e-adaa-e560c07c57c1",
          "title": "incr/decr command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/incr-command.test.ts",
          "file": "/test/resp/command/string/incr-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "incr/decr command test \"before all\" hook",
              "timedOut": false,
              "duration": 72,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a millisecond TTL to validate incr respects TTL\n    common_test_1.sendCommand(new net.Socket(), ['set', 'ttlkey', '100', 'PX', '3'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
              "uuid": "47b3a687-c800-4926-967f-1506a9192b98",
              "parentUUID": "0da279c4-6ebf-418e-adaa-e560c07c57c1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "incr/decr command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "8d06fd6e-1c32-42c8-b82c-ac0b33ae784d",
              "parentUUID": "0da279c4-6ebf-418e-adaa-e560c07c57c1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "incr/decr command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "06fc2d27-1946-44de-a125-cc7bebc340eb",
              "parentUUID": "0da279c4-6ebf-418e-adaa-e560c07c57c1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "incr/decr command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "00224aea-d5c5-49ca-a246-2b53164b80c1",
              "parentUUID": "0da279c4-6ebf-418e-adaa-e560c07c57c1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ONE when incr called against unknown key",
              "fullTitle": "incr/decr command test should report ONE when incr called against unknown key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['incr', 'incr-key']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "87b0401b-9353-43c2-bbda-0055b8350335",
              "parentUUID": "0da279c4-6ebf-418e-adaa-e560c07c57c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incr/decr command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['get', 'incr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('1');\n    })",
              "err": {},
              "uuid": "155473a3-e36e-4942-bfa1-9bc05e992a80",
              "parentUUID": "0da279c4-6ebf-418e-adaa-e560c07c57c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incr/decr command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            response = yield common_test_1.sendCommand(new net.Socket(), ['set', 'incr-key', '9007199254740990']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(new net.Socket(), ['incr', 'incr-key']);\n            chai_1.expect(response).to.equal(Number.MAX_SAFE_INTEGER);\n            response = yield common_test_1.sendCommand(new net.Socket(), ['incr', 'incr-key']);\n            chai_1.expect(response).to.equal('ReplyError: ERR increment or decrement would overflow');\n        }\n    })",
              "err": {},
              "uuid": "7a8e407a-71a0-4da2-ae0b-08899e6e70eb",
              "parentUUID": "0da279c4-6ebf-418e-adaa-e560c07c57c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report -1 when decr called against unknown key",
              "fullTitle": "incr/decr command test should report -1 when decr called against unknown key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['decr', 'decr-key']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(-1);\n    })",
              "err": {},
              "uuid": "4f81f5be-87d4-405f-88a1-d1e475095a71",
              "parentUUID": "0da279c4-6ebf-418e-adaa-e560c07c57c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incr/decr command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['get', 'decr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('-1');\n    })",
              "err": {},
              "uuid": "915ea602-7827-479c-aed3-cbe048d807d2",
              "parentUUID": "0da279c4-6ebf-418e-adaa-e560c07c57c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incr/decr command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            let response = yield common_test_1.sendCommand(new net.Socket(), ['set', 'decr-key', '-9007199254740990']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(new net.Socket(), ['decr', 'decr-key']);\n            chai_1.expect(response).to.equal(Number.MIN_SAFE_INTEGER);\n            response = yield common_test_1.sendCommand(new net.Socket(), ['decr', 'decr-key']);\n            chai_1.expect(response).to.equal('ReplyError: ERR increment or decrement would overflow');\n        }\n    })",
              "err": {},
              "uuid": "edfc9071-a482-4d79-b01c-87ae2549e82e",
              "parentUUID": "0da279c4-6ebf-418e-adaa-e560c07c57c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect TTL",
              "fullTitle": "incr/decr command test should respect TTL",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['get', 'ttlkey']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "10ef22b8-be7d-4bcd-9283-c086918ee412",
              "parentUUID": "0da279c4-6ebf-418e-adaa-e560c07c57c1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to increment a HASH value",
              "fullTitle": "incr/decr command test should fail to increment a HASH value",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `test-incr-${new Date().getTime()}`;\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['incr', uniqueKey]);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "c18947c4-1f21-41bc-8b56-4c6bbe0f19d5",
              "parentUUID": "0da279c4-6ebf-418e-adaa-e560c07c57c1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87b0401b-9353-43c2-bbda-0055b8350335",
            "155473a3-e36e-4942-bfa1-9bc05e992a80",
            "7a8e407a-71a0-4da2-ae0b-08899e6e70eb",
            "4f81f5be-87d4-405f-88a1-d1e475095a71",
            "915ea602-7827-479c-aed3-cbe048d807d2",
            "edfc9071-a482-4d79-b01c-87ae2549e82e",
            "10ef22b8-be7d-4bcd-9283-c086918ee412",
            "c18947c4-1f21-41bc-8b56-4c6bbe0f19d5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 35,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "093d1a51-9e89-4353-9281-c7ceb9a6884e",
          "title": "incrby/decrby command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/incrby-command.test.ts",
          "file": "/test/resp/command/string/incrby-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "incrby/decrby command test \"before all\" hook",
              "timedOut": false,
              "duration": 31,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a millisecond TTL to validate incrby respects TTL\n    common_test_1.sendCommand(client, ['set', 'ttlkey', '100', 'PX', '3'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
              "uuid": "57b87bdb-7524-4ca0-bf08-061c0146e5fc",
              "parentUUID": "093d1a51-9e89-4353-9281-c7ceb9a6884e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "incrby/decrby command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "d3365ba5-74c8-41ff-a196-435cd9ae1ddc",
              "parentUUID": "093d1a51-9e89-4353-9281-c7ceb9a6884e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "incrby/decrby command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "75ad80f2-140f-4b8c-a04c-ccd72e4e826e",
              "parentUUID": "093d1a51-9e89-4353-9281-c7ceb9a6884e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "incrby/decrby command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "93ff1c2d-2d27-447a-8b27-1dceb04d3e9b",
              "parentUUID": "093d1a51-9e89-4353-9281-c7ceb9a6884e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report the INCREMENT when incrby called against non-existing key",
              "fullTitle": "incrby/decrby command test should report the INCREMENT when incrby called against non-existing key",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['incrby', 'incr-key', '10']);\n        chai_1.expect(response).to.be.a('number');\n        // This is how redis behaves\n        chai_1.expect(response).to.equal(10);\n    })",
              "err": {},
              "uuid": "04bb914d-dd4b-4594-99f3-baa3a680a142",
              "parentUUID": "093d1a51-9e89-4353-9281-c7ceb9a6884e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incrby/decrby command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['get', 'incr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('10');\n    })",
              "err": {},
              "uuid": "eed59416-6a8b-43db-b965-2e1fb2908a7d",
              "parentUUID": "093d1a51-9e89-4353-9281-c7ceb9a6884e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incrby/decrby command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            response = yield common_test_1.sendCommand(client, ['set', 'incr-key', '9007199254740981']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['incrby', 'incr-key', '10']);\n            chai_1.expect(response).to.equal(Number.MAX_SAFE_INTEGER);\n            response = yield common_test_1.sendCommand(client, ['incrby', 'incr-key', '110']);\n            chai_1.expect(response).to.equal('ReplyError: ERR increment or decrement would overflow');\n        }\n    })",
              "err": {},
              "uuid": "3765ad76-b9b0-46b0-8d6a-c0d85cb97194",
              "parentUUID": "093d1a51-9e89-4353-9281-c7ceb9a6884e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report the NEGATIVE increment when decrby called against unknown key",
              "fullTitle": "incrby/decrby command test should report the NEGATIVE increment when decrby called against unknown key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['decrby', 'decr-key', '12']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(-12);\n    })",
              "err": {},
              "uuid": "91b3f6bf-d45e-4df0-a7a0-9ab3e2bfd36b",
              "parentUUID": "093d1a51-9e89-4353-9281-c7ceb9a6884e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support negative increment and positive decrement",
              "fullTitle": "incrby/decrby command test should support negative increment and positive decrement",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['incrby', 'negincr', '-12']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(-12);\n        response = yield common_test_1.sendCommand(client, ['decrby', 'negincr', '-24']);\n        chai_1.expect(response).to.equal(12);\n    })",
              "err": {},
              "uuid": "0a8c7e04-c4d2-4cd3-a30e-9a79f25ce5a1",
              "parentUUID": "093d1a51-9e89-4353-9281-c7ceb9a6884e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incrby/decrby command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['get', 'decr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('-12');\n    })",
              "err": {},
              "uuid": "1b599e8d-a21d-4b18-9253-53df06d03537",
              "parentUUID": "093d1a51-9e89-4353-9281-c7ceb9a6884e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incrby/decrby command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            response = yield common_test_1.sendCommand(client, ['set', 'decr-key', '-9007199254740981']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['decrby', 'decr-key', '10']);\n            chai_1.expect(response).to.equal(Number.MIN_SAFE_INTEGER);\n            // This does not seem to be exact\n            // response = await sendCommand(client, ['decrby', 'decr-key', String(Number.MAX_SAFE_INTEGER)]);\n            // expect(response).to.equal('ReplyError: Error: increment or decrement would overflow');\n        }\n    })",
              "err": {},
              "uuid": "05110f79-5269-4b1b-8dcc-1dd6b1998014",
              "parentUUID": "093d1a51-9e89-4353-9281-c7ceb9a6884e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect TTL",
              "fullTitle": "incrby/decrby command test should respect TTL",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['get', 'ttlkey']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "13df9f4d-389d-4495-9da4-1b9f9d7acb29",
              "parentUUID": "093d1a51-9e89-4353-9281-c7ceb9a6884e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to increment a HASH value",
              "fullTitle": "incrby/decrby command test should fail to increment a HASH value",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `test-incr-${new Date().getTime()}`;\n        let response = yield common_test_1.sendCommand(client, ['hset', uniqueKey, 'one', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['incrby', uniqueKey, '12']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "3b8653c8-98c3-441e-a6a2-470f1a089375",
              "parentUUID": "093d1a51-9e89-4353-9281-c7ceb9a6884e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "04bb914d-dd4b-4594-99f3-baa3a680a142",
            "eed59416-6a8b-43db-b965-2e1fb2908a7d",
            "3765ad76-b9b0-46b0-8d6a-c0d85cb97194",
            "91b3f6bf-d45e-4df0-a7a0-9ab3e2bfd36b",
            "0a8c7e04-c4d2-4cd3-a30e-9a79f25ce5a1",
            "1b599e8d-a21d-4b18-9253-53df06d03537",
            "05110f79-5269-4b1b-8dcc-1dd6b1998014",
            "13df9f4d-389d-4495-9da4-1b9f9d7acb29",
            "3b8653c8-98c3-441e-a6a2-470f1a089375"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4a12939d-cbcc-4610-854e-7abb732f51ac",
          "title": "mget-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/mget-command.test.ts",
          "file": "/test/resp/command/string/mget-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "mget-command test \"before all\" hook",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "9fe779f6-807c-4b74-bed0-d45bb1606c16",
              "parentUUID": "4a12939d-cbcc-4610-854e-7abb732f51ac",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "mget-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "dbf18b93-8e8f-41f3-b137-75f8665b1d7c",
              "parentUUID": "4a12939d-cbcc-4610-854e-7abb732f51ac",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "mget-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "55c3bddd-0ec7-4462-980f-d264d73eac34",
              "parentUUID": "4a12939d-cbcc-4610-854e-7abb732f51ac",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "mget-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "4a359df1-785e-4b24-9f85-3ecb87335b8f",
              "parentUUID": "4a12939d-cbcc-4610-854e-7abb732f51ac",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when the key does not exist",
              "fullTitle": "mget-command test should return NIL when the key does not exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mget', 'zset', 'member']);\n        chai_1.expect(response).to.eql([null, null]);\n    })",
              "err": {},
              "uuid": "ab9ddb51-b9b6-4457-80ad-ff280af53035",
              "parentUUID": "4a12939d-cbcc-4610-854e-7abb732f51ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return multiple values for string keys as requested",
              "fullTitle": "mget-command test should return multiple values for string keys as requested",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mset', 'key1', '1', 'key2', '2', 'key3', '3']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['mget', 'key2', 'key1', 'noneya', 'key3']);\n        chai_1.expect(response).to.eql(['2', '1', null, '3']);\n    })",
              "err": {},
              "uuid": "c15588ae-356c-4eea-af15-93b0cf8901b4",
              "parentUUID": "4a12939d-cbcc-4610-854e-7abb732f51ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NIL for ZSET, LIST, and HASH types as well",
              "fullTitle": "mget-command test should return NIL for ZSET, LIST, and HASH types as well",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'member']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'list', 'value']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['hset', 'hash', 'field', 'value']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['mget', 'key2', 'key1', 'list', 'key3', 'hash', 'zset']);\n        chai_1.expect(response).to.eql(['2', '1', null, '3', null, null]);\n    })",
              "err": {},
              "uuid": "28f0021c-16fe-4532-9e24-b8a7c2494bee",
              "parentUUID": "4a12939d-cbcc-4610-854e-7abb732f51ac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ab9ddb51-b9b6-4457-80ad-ff280af53035",
            "c15588ae-356c-4eea-af15-93b0cf8901b4",
            "28f0021c-16fe-4532-9e24-b8a7c2494bee"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2c48f9e1-e34d-4c49-9c87-6f1e2c65631b",
          "title": "mset-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/mset-command.test.ts",
          "file": "/test/resp/command/string/mset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "mset-command test \"before all\" hook",
              "timedOut": false,
              "duration": 38,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "bf5fe8a9-b862-4298-9b1a-67d2d733d9f8",
              "parentUUID": "2c48f9e1-e34d-4c49-9c87-6f1e2c65631b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "mset-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "a7d88927-e16f-48f3-bd91-22badd507933",
              "parentUUID": "2c48f9e1-e34d-4c49-9c87-6f1e2c65631b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "mset-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "867777ad-f33a-4a45-8f03-b17a09e94af5",
              "parentUUID": "2c48f9e1-e34d-4c49-9c87-6f1e2c65631b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "mset-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "bf2f9b5a-f9ca-424f-83f2-e92b507c8564",
              "parentUUID": "2c48f9e1-e34d-4c49-9c87-6f1e2c65631b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create multiple keys at once",
              "fullTitle": "mset-command test should create multiple keys at once",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mset', 'key1', 'Hello', 'key2', 'world']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'key1']);\n        chai_1.expect(response).to.equal('Hello');\n        response = yield common_test_1.sendCommand(client, ['get', 'key2']);\n        chai_1.expect(response).to.equal('world');\n    })",
              "err": {},
              "uuid": "a14adec7-7340-4f28-88c7-a305d79d315b",
              "parentUUID": "2c48f9e1-e34d-4c49-9c87-6f1e2c65631b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only accept an even number of parameters",
              "fullTitle": "mset-command test should only accept an even number of parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['msEt', 'wrong', 'number', 'of']);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for MSET/i);\n    })",
              "err": {},
              "uuid": "d55c8b48-a02c-4462-9093-a431ce4db6f3",
              "parentUUID": "2c48f9e1-e34d-4c49-9c87-6f1e2c65631b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a14adec7-7340-4f28-88c7-a305d79d315b",
            "d55c8b48-a02c-4462-9093-a431ce4db6f3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "35439ca5-0c10-4029-bdaa-40b6aae77d20",
          "title": "set-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/set-command.test.ts",
          "file": "/test/resp/command/string/set-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "set-command test \"before all\" hook",
              "timedOut": false,
              "duration": 54,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "024b7381-18b4-4b0e-9035-57acb608b5d8",
              "parentUUID": "35439ca5-0c10-4029-bdaa-40b6aae77d20",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "set-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "353d0037-cb4e-48df-bbe7-d5ae6ba8211e",
              "parentUUID": "35439ca5-0c10-4029-bdaa-40b6aae77d20",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "set-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "9ac1f01a-9608-4a96-9d0c-d15c33894724",
              "parentUUID": "35439ca5-0c10-4029-bdaa-40b6aae77d20",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "set-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "51c0711f-37b1-4698-a26c-e1ca8b960f9f",
              "parentUUID": "35439ca5-0c10-4029-bdaa-40b6aae77d20",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should allow us to set a several second ttl",
              "fullTitle": "set-command test should allow us to set a several second ttl",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // During local testing there are 8 milliseconds from put to get\n        response = yield common_test_1.sendCommand(client, ['set', 'TTLtest', 'key', 'EX', '1']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "96d9cf62-76a2-4f8b-8fcb-8f49530661ad",
              "parentUUID": "35439ca5-0c10-4029-bdaa-40b6aae77d20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke NX after XX",
              "fullTitle": "set-command test should NOT allow SET to invoke NX after XX",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'XX', 'NX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "1241dd93-cc38-40d9-98ac-d7fc7b0dfcf9",
              "parentUUID": "35439ca5-0c10-4029-bdaa-40b6aae77d20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke XX after NX",
              "fullTitle": "set-command test should NOT allow SET to invoke XX after NX",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'NX', 'XX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "47b48f50-047e-474a-8d42-252751fd6a4f",
              "parentUUID": "35439ca5-0c10-4029-bdaa-40b6aae77d20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return nil when SET invoked with XX on a key that doesn't exist",
              "fullTitle": "set-command test should return nil when SET invoked with XX on a key that doesn't exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `TEST${new Date().getTime()}`;\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'key', 'XX']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "78c6ed7b-93ef-423f-b39d-48bb0c0bfcd5",
              "parentUUID": "35439ca5-0c10-4029-bdaa-40b6aae77d20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return OK when SET invoked with XX on a key that DOES exist",
              "fullTitle": "set-command test should return OK when SET invoked with XX on a key that DOES exist",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `TEST${new Date().getTime()}`;\n        // set the key with NX first to validate that functionality\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'key', 'NX']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'new value', 'XX']);\n        chai_1.expect(response).to.equal('OK');\n        // Now validate that the key is what we said last\n        response = yield common_test_1.sendCommand(client, ['get', uniqueKey]);\n        chai_1.expect(response).to.equal('new value');\n    })",
              "err": {},
              "uuid": "2b17a189-90bf-4913-b687-e6c7a9ec6617",
              "parentUUID": "35439ca5-0c10-4029-bdaa-40b6aae77d20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke EX and PX simultaneously",
              "fullTitle": "set-command test should NOT allow SET to invoke EX and PX simultaneously",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Note: Our behavior is different from redis.  This error is 'wrong number of args'\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'EX', '100', 'PX', '100']);\n        chai_1.expect(response).to.match(/^ReplyError: ERR syntax error/);\n    })",
              "err": {},
              "uuid": "9f2a09fe-cc22-4181-bb92-47f4c3865b79",
              "parentUUID": "35439ca5-0c10-4029-bdaa-40b6aae77d20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow us to set a millisecond ttl",
              "fullTitle": "set-command test should allow us to set a millisecond ttl",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // During local teseting there are 8 milliseconds from put to get\n        response = yield common_test_1.sendCommand(client, ['set', 'MILLItest', 'key', 'PX', '1']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "6cb1a6d7-a1a8-4cc0-990e-455674faa64c",
              "parentUUID": "35439ca5-0c10-4029-bdaa-40b6aae77d20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prove that the one second TTL has expired",
              "fullTitle": "set-command test should prove that the one second TTL has expired",
              "timedOut": false,
              "duration": 1001,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "setTimeout(() => {\n    common_test_1.sendCommand(client, ['get', 'TTLtest'])\n        .then((responseGet) => {\n        chai_1.expect(responseGet).to.equal(null);\n        done();\n    });\n}, 1000);",
              "err": {},
              "uuid": "a1cc3947-0f5f-4d7f-aae6-1f0d96e6a5c6",
              "parentUUID": "35439ca5-0c10-4029-bdaa-40b6aae77d20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not accept unknown parameters",
              "fullTitle": "set-command test should not accept unknown parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'Q']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "a7dbca80-6de6-437c-95d1-ee474c90f8cf",
              "parentUUID": "35439ca5-0c10-4029-bdaa-40b6aae77d20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke PX after EX",
              "fullTitle": "set-command test should NOT allow SET to invoke PX after EX",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'EX', '100', 'PX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "5a5ba9fd-dca8-4b4b-90d6-8810a961c44d",
              "parentUUID": "35439ca5-0c10-4029-bdaa-40b6aae77d20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should NOT allow SET to invoke EX after PX",
              "fullTitle": "set-command test should NOT allow SET to invoke EX after PX",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'PX', '100', 'EX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "bde2f54e-81d6-40ee-aa63-5b0bacee4f18",
              "parentUUID": "35439ca5-0c10-4029-bdaa-40b6aae77d20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow a TTL less than 1ms",
              "fullTitle": "set-command test should not allow a TTL less than 1ms",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'MILLItest', 'key', 'PX', '0']);\n        chai_1.expect(response).to.equal('ReplyError: ERR invalid expire time in set');\n    })",
              "err": {},
              "uuid": "4aa76f58-482e-4b17-ab16-3167fe39b606",
              "parentUUID": "35439ca5-0c10-4029-bdaa-40b6aae77d20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should prove that the millisecond TTL has expired",
              "fullTitle": "set-command test should prove that the millisecond TTL has expired",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "setTimeout(() => {\n    common_test_1.sendCommand(client, ['get', 'MILLItest'])\n        .then((responseGet) => {\n        chai_1.expect(responseGet).to.equal(null);\n        done();\n    });\n}, 10);",
              "err": {},
              "uuid": "e0bf242b-41fb-46cb-9ff6-08476a04c861",
              "parentUUID": "35439ca5-0c10-4029-bdaa-40b6aae77d20",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "96d9cf62-76a2-4f8b-8fcb-8f49530661ad",
            "1241dd93-cc38-40d9-98ac-d7fc7b0dfcf9",
            "47b48f50-047e-474a-8d42-252751fd6a4f",
            "78c6ed7b-93ef-423f-b39d-48bb0c0bfcd5",
            "2b17a189-90bf-4913-b687-e6c7a9ec6617",
            "9f2a09fe-cc22-4181-bb92-47f4c3865b79",
            "6cb1a6d7-a1a8-4cc0-990e-455674faa64c",
            "a1cc3947-0f5f-4d7f-aae6-1f0d96e6a5c6",
            "a7dbca80-6de6-437c-95d1-ee474c90f8cf",
            "5a5ba9fd-dca8-4b4b-90d6-8810a961c44d",
            "bde2f54e-81d6-40ee-aa63-5b0bacee4f18",
            "4aa76f58-482e-4b17-ab16-3167fe39b606",
            "e0bf242b-41fb-46cb-9ff6-08476a04c861"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1040,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "64dd7b32-fe18-424d-840c-8b6d278b2bce",
          "title": "setnx-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/setnx-command.test.ts",
          "file": "/test/resp/command/string/setnx-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "setnx-command test \"before all\" hook",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "48015ade-0854-4099-ace0-32c67b3fabc6",
              "parentUUID": "64dd7b32-fe18-424d-840c-8b6d278b2bce",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "setnx-command test \"before each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "528cf2ed-1480-49c2-8ef2-87686656ca9a",
              "parentUUID": "64dd7b32-fe18-424d-840c-8b6d278b2bce",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "setnx-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "ef11021c-c49b-49cc-9cb1-2eb01a79ae17",
              "parentUUID": "64dd7b32-fe18-424d-840c-8b6d278b2bce",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "setnx-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "b6e23bb6-8382-4c76-8143-aff78843d4dd",
              "parentUUID": "64dd7b32-fe18-424d-840c-8b6d278b2bce",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 1 when the key does not exist",
              "fullTitle": "setnx-command test should return 1 when the key does not exist",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['setnx', 'test', 'key']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "d17cc41d-e903-4763-9966-897e262a3b4b",
              "parentUUID": "64dd7b32-fe18-424d-840c-8b6d278b2bce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the key already exists",
              "fullTitle": "setnx-command test should return 0 when the key already exists",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['setnx', 'test', 'other']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['get', 'test']);\n        chai_1.expect(response).to.equal('key');\n    })",
              "err": {},
              "uuid": "ad96ce3d-ccaf-41c0-83bd-37ccf0883481",
              "parentUUID": "64dd7b32-fe18-424d-840c-8b6d278b2bce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d17cc41d-e903-4763-9966-897e262a3b4b",
            "ad96ce3d-ccaf-41c0-83bd-37ccf0883481"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "23638368-6fb8-4b6a-a42f-ac853e1702c1",
          "title": "data-type test",
          "fullFile": "/home/lane/git/redis/test/resp/data/data-type.test.ts",
          "file": "/test/resp/data/data-type.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "data-type test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "041e747d-3da5-4f2c-85ca-71528c935853",
              "parentUUID": "23638368-6fb8-4b6a-a42f-ac853e1702c1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "data-type test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "e0f596b7-26c5-4371-94f8-524bbf87c5c4",
              "parentUUID": "23638368-6fb8-4b6a-a42f-ac853e1702c1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "data-type test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "afae1c5b-0de3-41e7-8e59-2dee81b07f2b",
              "parentUUID": "23638368-6fb8-4b6a-a42f-ac853e1702c1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should enumerate data-types",
              "fullTitle": "data-type test should enumerate data-types",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        chai_1.expect(data_type_1.DataType.NONE).to.equal('none');\n        chai_1.expect(data_type_1.DataType.STRING).to.equal('string');\n        chai_1.expect(data_type_1.DataType.LIST).to.equal('list');\n        chai_1.expect(data_type_1.DataType.SET).to.equal('set');\n        chai_1.expect(data_type_1.DataType.ZSET).to.equal('zset');\n        chai_1.expect(data_type_1.DataType.HASH).to.equal('hash');\n        chai_1.expect(Object.keys(data_type_1.DataType).length).to.equal(6);\n    })",
              "err": {},
              "uuid": "d583ebae-de34-49b8-93b8-03e27e8a0a66",
              "parentUUID": "23638368-6fb8-4b6a-a42f-ac853e1702c1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d583ebae-de34-49b8-93b8-03e27e8a0a66"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8a3deeb3-a275-49de-bebd-f5ad7a0d056b",
          "title": "sorted-set test",
          "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
          "file": "/test/resp/data/sorted-set.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "sorted-set test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();\nss = new sorted_set_1.SortedSet();\nz = new Z();",
              "err": {},
              "uuid": "49c76ae8-ab92-4511-84c6-e6d0e3cf810d",
              "parentUUID": "8a3deeb3-a275-49de-bebd-f5ad7a0d056b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sorted-set test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "32f23db4-3b4e-4e5e-bfa9-9b420b4a1a95",
              "parentUUID": "8a3deeb3-a275-49de-bebd-f5ad7a0d056b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sorted-set test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "2d2a678b-527d-4fe8-a431-f2013e7360ec",
              "parentUUID": "8a3deeb3-a275-49de-bebd-f5ad7a0d056b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should instantiate",
              "fullTitle": "sorted-set test should instantiate",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        chai_1.expect(z.constructor.name).to.equal('Z');\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(ss.constructor.name).to.equal('SortedSet');\n    })",
              "err": {},
              "uuid": "fc157f22-e9ec-4d91-b1b3-08ef6b5f986d",
              "parentUUID": "8a3deeb3-a275-49de-bebd-f5ad7a0d056b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add, get, and delete an entry",
              "fullTitle": "sorted-set test should add, get, and delete an entry",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', 1);\n        chai_1.expect(added).to.equal(null);\n        added = ss.add('test', 1);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(z.keys().length).to.equal(1);\n        chai_1.expect(ss.keys().length).to.equal(1);\n        let item = z.get('test');\n        chai_1.expect(item.constructor.name).to.equal('Number');\n        item = ss.get('test');\n        chai_1.expect(item.constructor.name).to.equal('Number');\n        z.del('test');\n        chai_1.expect(z.keys().length).to.equal(0);\n        ss.del('test');\n        chai_1.expect(ss.keys().length).to.equal(0);\n    })",
              "err": {},
              "uuid": "802b98d6-8ae2-48ce-9c03-3776564ffd74",
              "parentUUID": "8a3deeb3-a275-49de-bebd-f5ad7a0d056b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw when attempting to add __proto__ key",
              "fullTitle": "sorted-set test should throw when attempting to add __proto__ key",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(() => {\n            z.add('__proto__', 0);\n        }).to.throw();\n        // expect(() => {\n        //   ss.add('__proto__', 0)\n        // }).to.throw();\n    })",
              "err": {},
              "uuid": "0fab87ae-1a00-4550-b508-51179bf8f347",
              "parentUUID": "8a3deeb3-a275-49de-bebd-f5ad7a0d056b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add an undefined or null score",
              "fullTitle": "sorted-set test should not add an undefined or null score",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', null);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(z.keys().length).to.equal(0);\n        added = z.add('test', undefined);\n        chai_1.expect(z.keys().length).to.equal(0);\n        // Typescript prevents adding null\n        // added = ss.add('test', null);\n        // expect(added).to.equal(null);\n        // expect(ss.keys().length).to.equal(0);\n        // added = ss.add('test', undefined);\n        // expect(z.keys().length).to.equal(0);\n    })",
              "err": {},
              "uuid": "5fc139fc-679a-42bd-8398-ba2821f7df06",
              "parentUUID": "8a3deeb3-a275-49de-bebd-f5ad7a0d056b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not duplicate key/value pairs",
              "fullTitle": "sorted-set test should not duplicate key/value pairs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', 123);\n        chai_1.expect(added).to.equal(null); // This is weird\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = z.add('test', 123);\n        chai_1.expect(added).to.equal(123); // and weirder\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = ss.add('test', 123);\n        chai_1.expect(added).to.equal(null); // This is weird\n        chai_1.expect(ss.keys().length).to.equal(1);\n        added = ss.add('test', 123);\n        chai_1.expect(added).to.equal(123); // and weirder\n        chai_1.expect(ss.keys().length).to.equal(1);\n    })",
              "err": {},
              "uuid": "ff6da49a-3422-42d8-af0c-01677714c508",
              "parentUUID": "8a3deeb3-a275-49de-bebd-f5ad7a0d056b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the old rank when replacing a key",
              "fullTitle": "sorted-set test should return the old rank when replacing a key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', 123);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = z.add('test', 321);\n        chai_1.expect(added).to.equal(123);\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = z.get('test');\n        chai_1.expect(added).to.equal(321);\n        added = ss.add('test', 123);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(ss.keys().length).to.equal(1);\n        added = ss.add('test', 321);\n        chai_1.expect(added).to.equal(123);\n        chai_1.expect(ss.keys().length).to.equal(1);\n        added = ss.get('test');\n        chai_1.expect(added).to.equal(321);\n    })",
              "err": {},
              "uuid": "85c5e916-5702-496a-ab52-4ed72b45dd66",
              "parentUUID": "8a3deeb3-a275-49de-bebd-f5ad7a0d056b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a value when adding at least 32 values (I think - it is difficult to tell)",
              "fullTitle": "sorted-set test should return a value when adding at least 32 values (I think - it is difficult to tell)",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "6883333f-232c-42f3-9f67-99a46c47d7e5",
              "parentUUID": "8a3deeb3-a275-49de-bebd-f5ad7a0d056b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "fullTitle": "sorted-set test should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(z.add('Terminator', 8.0)).to.equal(null); // => null\n        chai_1.expect(z.add('District 9', 8.0)).to.equal(null); // => null\n        chai_1.expect(z.add('Ex Machina', 0.7)).to.equal(null); // => null\n        chai_1.expect(z.add('Ex Machina', 7.7)).to.equal(0.7); // => 0.7\n        // alias\n        chai_1.expect(z.set('The Matrix', 8.7)).to.equal(null); // => null\n        // average O(1)\n        chai_1.expect(z.has('Terminator')).to.equal(true); // => true\n        chai_1.expect(z.has('Blade Runner')).to.equal(false); // => false\n        // average O(1)\n        chai_1.expect(z.score('Ex Machina')).to.equal(7.7); // => 7.7\n        chai_1.expect(z.score('Blade Runner')).to.equal(null); // => null\n        // alias\n        chai_1.expect(z.get('The Matrix')).to.equal(8.7); // => 8.7\n        // average O(log(N))\n        chai_1.expect(z.rem('Ex Machina')).to.equal(7.7); // => 7.7\n        // average O(1)\n        chai_1.expect(z.rem('Ex Machina')).to.equal(null); // => null\n        // alias\n        chai_1.expect(z.del('Ex Machina')).to.equal(null); // => null\n        // average O(log(N)+M) where M is the number of elements between min and max\n        // This is not working as expected\n        chai_1.expect(z.rangeByScore(7, 8)).to.eql(['District 9', 'Terminator']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        chai_1.expect(z.rangeByScore(8)).to.eql(['District 9', 'Terminator', 'The Matrix']); // [8.0-∞)\n        // => ['District 9', 'Terminator', 'The Matrix']\n        chai_1.expect(z.rangeByScore(8, null, { withScores: true })).to.eql([['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]);\n        // => [['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]\n        // average O(log(N)+log(M)) where M as in rangeByScore\n        // Again - not as expected\n        chai_1.expect(z.count(7, 8)).to.equal(2); // => 3\n        // average O(log(N))\n        // Not working as expected\n        chai_1.expect(z.rank('Ex Machina')).to.equal(null); // => 0\n        // Not working as expected\n        chai_1.expect(z.rank('Terminator')).to.equal(1); // => 2\n        chai_1.expect(z.rank('Blade Runner')).to.equal(null); // => null\n        // average O(log(N)+M) where M as in range\n        // Not working as expected\n        chai_1.expect(z.range(0, 2)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Not working as expected\n        chai_1.expect(z.range(0, 2, { withScores: true })).to.eql([['District 9', 8], ['Terminator', 8], ['The Matrix', 8.7]]);\n        // => [['Ex Machina', 7.7],\n        //     ['District 9', 8],\n        //     ['Terminator', 8]]\n        chai_1.expect(z.range(-1)).to.eql(['The Matrix']); // => ['The Matrix']\n        // almost alias\n        // Not working as expected\n        chai_1.expect(z.slice(0, 3)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Set cardinality (number of elements)\n        // average O(1)\n        // Not working as expected\n        chai_1.expect(z.card()).to.equal(3); // => 4\n        // alias\n        // Not working as expected\n        chai_1.expect(z.length).to.equal(3); // => 4\n    })",
              "err": {},
              "uuid": "c5ee944a-39df-4b32-b577-8e1b9e49fd0e",
              "parentUUID": "8a3deeb3-a275-49de-bebd-f5ad7a0d056b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "the rewrite should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "fullTitle": "sorted-set test the rewrite should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(ss.add('Terminator', 8.0)).to.equal(null); // => null\n        chai_1.expect(ss.add('District 9', 8.0)).to.equal(null); // => null\n        chai_1.expect(ss.add('Ex Machina', 0.7)).to.equal(null); // => null\n        chai_1.expect(ss.add('Ex Machina', 7.7)).to.equal(0.7); // => 0.7\n        // alias\n        chai_1.expect(ss.set('The Matrix', 8.7)).to.equal(null); // => null\n        // average O(1)\n        chai_1.expect(ss.has('Terminator')).to.equal(true); // => true\n        chai_1.expect(ss.has('Blade Runner')).to.equal(false); // => false\n        // average O(1)\n        chai_1.expect(ss.score('Ex Machina')).to.equal(7.7); // => 7.7\n        chai_1.expect(ss.score('Blade Runner')).to.equal(null); // => null\n        // alias\n        chai_1.expect(ss.get('The Matrix')).to.equal(8.7); // => 8.7\n        // average O(log(N))\n        chai_1.expect(ss.rem('Ex Machina')).to.equal(7.7); // => 7.7\n        // average O(1)\n        chai_1.expect(ss.rem('Ex Machina')).to.equal(null); // => null\n        // alias\n        chai_1.expect(ss.del('Ex Machina')).to.equal(null); // => null\n        // average O(log(N)+M) where M is the number of elements between min and max\n        // This is not working as expected\n        chai_1.expect(ss.rangeByScore(7, 8)).to.eql(['District 9', 'Terminator']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        chai_1.expect(ss.rangeByScore(8)).to.eql(['District 9', 'Terminator', 'The Matrix']); // [8.0-∞)\n        // => ['District 9', 'Terminator', 'The Matrix']\n        chai_1.expect(ss.rangeByScore(8, null, { withScores: true })).to.eql([['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]);\n        // => [['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]\n        // average O(log(N)+log(M)) where M as in rangeByScore\n        // Again - not as expected\n        chai_1.expect(ss.count(7, 8)).to.equal(2); // => 3\n        // average O(log(N))\n        // Not working as expected\n        chai_1.expect(ss.rank('Ex Machina')).to.equal(null); // => 0\n        // Not working as expected\n        chai_1.expect(ss.rank('Terminator')).to.equal(1); // => 2\n        chai_1.expect(ss.rank('Blade Runner')).to.equal(null); // => null\n        // average O(log(N)+M) where M as in range\n        // Not working as expected\n        chai_1.expect(ss.range(0, 2)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Not working as expected\n        chai_1.expect(ss.range(0, 2, { withScores: true })).to.eql([['District 9', 8], ['Terminator', 8], ['The Matrix', 8.7]]);\n        // => [['Ex Machina', 7.7],\n        //     ['District 9', 8],\n        //     ['Terminator', 8]]\n        chai_1.expect(ss.range(-1)).to.eql(['The Matrix']); // => ['The Matrix']\n        // almost alias\n        // Not working as expected\n        chai_1.expect(ss.slice(0, 3)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Set cardinality (number of elements)\n        // average O(1)\n        // Not working as expected\n        chai_1.expect(ss.card()).to.equal(3); // => 4\n        // alias\n        // Not working as expected\n        chai_1.expect(ss.length).to.equal(3); // => 4\n    })",
              "err": {},
              "uuid": "4d862f61-bc16-477e-9641-3e6ed26a25ca",
              "parentUUID": "8a3deeb3-a275-49de-bebd-f5ad7a0d056b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "bc5191f7-3062-4f4b-99ee-bf7a0717d097",
              "title": "skip map",
              "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
              "file": "/test/resp/data/sorted-set.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should support basic operations",
                  "fullTitle": "sorted-set test skip map should support basic operations",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var z = new Z();\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);\nchai_1.expect(z.range()).to.eql([]);\nchai_1.expect(z.rangeByScore()).to.eql([]);\nchai_1.expect(() => {\n    z.add('__proto__', 14);\n}).to.throw();\nz.add('5a600e16', 8);\nz.add('5a600e17', 9);\nchai_1.expect(z.add('5a600e18', 10)).to.equal(null);\nchai_1.expect(z.add('5a600e17', 12)).to.equal(9);\nchai_1.expect(z).to.have.length(3);\nchai_1.expect(z.toArray()).to.eql(['5a600e16', '5a600e18', '5a600e17']);\nchai_1.expect(z.toArray()).to.eql(z.range(0, -1));\nchai_1.expect(z.toArray()).to.eql(z.rangeByScore());\nchai_1.expect(z.has('5a600e16')).to.be.ok;\nchai_1.expect(z.has('5a600e17')).to.be.ok;\nchai_1.expect(z.has('5a600e18')).to.be.ok;\nchai_1.expect(z.has('5a600e19')).to.not.be.ok;\nchai_1.expect(z.score('5a600e16')).to.equal(8);\nchai_1.expect(z.score('5a600e17')).to.equal(12);\nchai_1.expect(z.score('5a600e18')).to.equal(10);\nchai_1.expect(z.score('5a600e19')).to.equal(null);\nchai_1.expect(z.rem('5a600e16')).to.equal(8);\nchai_1.expect(z).to.have.length(2);\nchai_1.expect(z.rem('5a600e16')).to.equal(null);\nchai_1.expect(z).to.have.length(2);\nchai_1.expect(z.has('5a600e16')).to.not.be.ok;\nchai_1.expect(z.toArray()).to.eql(['5a600e18', '5a600e17']);\nchai_1.expect(z.toArray({ withScores: true }))\n    .to.eql(z.range(0, -1, { withScores: true }));\nchai_1.expect(z.toArray()).to.eql(z.rangeByScore());\nz.add('5a600e16', 10);\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nchai_1.expect(z).to.have.length(9);\n// no change, so should be O(1)\nz.add('5a600e17', 12);\nchai_1.expect(z.rank('5a600e17')).to.equal(4);\nchai_1.expect(z).to.have.length(9);\nchai_1.expect(z.toArray()).to.eql([\n    '5a600e16',\n    '5a600e11',\n    '5a600e18',\n    '5a600e13',\n    '5a600e17',\n    '5a600e14',\n    '5a600e10',\n    '5a600e12',\n    '5a600e15',\n]);\nchai_1.expect(z.toArray()).to.eql(z.range(0, -1));\nchai_1.expect(z.toArray()).to.eql(z.rangeByScore());\nchai_1.expect(z.rangeByScore(14, 16, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n]);",
                  "err": {},
                  "uuid": "f9ce0933-bc57-4288-bb3b-65a2d445ad4e",
                  "parentUUID": "bc5191f7-3062-4f4b-99ee-bf7a0717d097",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "853253b1-b275-4c14-b607-d8dd7b3fcc4d",
                  "title": "#add",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should implicitly delete",
                      "fullTitle": "sorted-set test skip map #add should implicitly delete",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.add('5a600e14', null)).to.equal(14);\nchai_1.expect(z.add('5a600e19', null)).to.equal(null);\nchai_1.expect(z).to.have.length(8);",
                      "err": {},
                      "uuid": "a57d2018-55dc-4dbb-a01c-dff033510d95",
                      "parentUUID": "853253b1-b275-4c14-b607-d8dd7b3fcc4d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a57d2018-55dc-4dbb-a01c-dff033510d95"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "071b5b9b-0802-4c9d-88e2-421dbdd48cb7",
                  "title": "#empty",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should remove all elements",
                      "fullTitle": "sorted-set test skip map #empty should remove all elements",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nz.empty();\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "dabd3fdd-55ed-4fed-9730-235dc9bc165d",
                      "parentUUID": "071b5b9b-0802-4c9d-88e2-421dbdd48cb7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dabd3fdd-55ed-4fed-9730-235dc9bc165d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "02ad7fd9-7228-43e7-aff0-b09ee6f5d067",
                  "title": "#incrBy(increment, key)",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should increase rank",
                      "fullTitle": "sorted-set test skip map #incrBy(increment, key) should increase rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.add('second', 2);\nz.add('third', 3);\nz.add('fourth', 4);\nchai_1.expect(z.incrBy(2, 'first')).to.equal(3);\nchai_1.expect(z.rank('first')).to.equal(1);",
                      "err": {},
                      "uuid": "4a7c1919-0410-417b-adcd-07e14f470466",
                      "parentUUID": "02ad7fd9-7228-43e7-aff0-b09ee6f5d067",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should create if not found",
                      "fullTitle": "sorted-set test skip map #incrBy(increment, key) should create if not found",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.incrBy(2, 'second');\nchai_1.expect(z.card()).to.equal(2);\nchai_1.expect(z.rank('second')).to.equal(1);",
                      "err": {},
                      "uuid": "4576dbef-5896-40c1-86de-2c80fc641241",
                      "parentUUID": "02ad7fd9-7228-43e7-aff0-b09ee6f5d067",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4a7c1919-0410-417b-adcd-07e14f470466",
                    "4576dbef-5896-40c1-86de-2c80fc641241"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "e53c0c03-3cac-4aea-8843-a7c50560bf1c",
                  "title": "#keys",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the keys",
                      "fullTitle": "sorted-set test skip map #keys should return the keys",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.keys()).to.eql(['5a600e16', '5a600e11', '5a600e18', '5a600e13',\n    '5a600e17', '5a600e14', '5a600e10', '5a600e12', '5a600e15']);",
                      "err": {},
                      "uuid": "408521f3-b63e-4166-a246-f908f4dd3ca7",
                      "parentUUID": "e53c0c03-3cac-4aea-8843-a7c50560bf1c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "408521f3-b63e-4166-a246-f908f4dd3ca7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "6df85de1-0d6a-4d19-b58a-0dfd2b74419f",
                  "title": "#rangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map #rangeByScore should support special ranges",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rangeByScore(14, null, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);\nchai_1.expect(z.rangeByScore(null, 10, { withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n]);\nchai_1.expect(z.rangeByScore(-Infinity, Infinity)).to.eql(z.toArray());\nchai_1.expect(z.rangeByScore(null, null)).to.eql(z.toArray());",
                      "err": {},
                      "uuid": "eb7025f1-bd6b-4d22-9511-f3b7513167d4",
                      "parentUUID": "6df85de1-0d6a-4d19-b58a-0dfd2b74419f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "eb7025f1-bd6b-4d22-9511-f3b7513167d4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "f7de3d0c-67bb-4c0d-a3d5-91481f7fb7e6",
                  "title": "#count",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should count elements",
                      "fullTitle": "sorted-set test skip map #count should count elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nchai_1.expect(z.count()).to.equal(0);\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nz.add('5a600e19', 14);\nz.add('5a600f00', 30.0);\nz.add('5a600f01', 30.5);\nz.add('5a600f02', 31.0);\nz.add('5a600f03', 31.5);\nz.add('5a600f04', 32.0);\nz.add('5a600f05', 32.0);\nz.add('5a600f06', 32.0);\nchai_1.expect(z.count()).to.eql(z.rangeByScore().length);\nchai_1.expect(z.count(8)).to.eql(z.rangeByScore(8).length);\nchai_1.expect(z.count(3, 7)).to.eql(z.rangeByScore(3, 7).length);\nchai_1.expect(z.count(5, 14)).to.eql(z.rangeByScore(5, 14).length);\nchai_1.expect(z.count(5, 5)).to.eql(z.rangeByScore(5, 5).length);\nchai_1.expect(z.count(5, 0)).to.eql(z.rangeByScore(5, 0).length);\nchai_1.expect(z.count(30, 32)).to.eql(z.rangeByScore(30, 32).length);\nchai_1.expect(z.count(40)).to.eql(z.rangeByScore(40).length);",
                      "err": {},
                      "uuid": "a7dfdea6-af00-445d-aa59-86f89fb937de",
                      "parentUUID": "f7de3d0c-67bb-4c0d-a3d5-91481f7fb7e6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a7dfdea6-af00-445d-aa59-86f89fb937de"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "58b053df-7a50-4bfc-ac67-db1be59de8d3",
                  "title": "#range",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map #range should support special ranges",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.add('second', 2);\nz.add('third', 3);\nz.add('fourth', 4);\nvar array = ['first', 'second', 'third', 'fourth'];\nchai_1.expect(z.range()).to.eql(array);\nchai_1.expect(z.range(2)).to.eql(array.slice(2));\nchai_1.expect(z.range(8)).to.eql(array.slice(8));\nchai_1.expect(z.range(0, 2)).to.eql(array.slice(0, 3));\nchai_1.expect(z.range(-1)).to.eql(['fourth']);\nchai_1.expect(z.range(-4)).to.eql(array);\nchai_1.expect(z.range(-4, -2)).to.eql(array.slice(0, 3));\nchai_1.expect(z.range(-4, z.length + 1000))\n    .to.eql(array.slice(-4, z.length + 1000));",
                      "err": {},
                      "uuid": "bf17112b-af8a-4f0e-8836-b1f71b26fd42",
                      "parentUUID": "58b053df-7a50-4bfc-ac67-db1be59de8d3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should support withScores",
                      "fullTitle": "sorted-set test skip map #range should support withScores",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.add('second', 2);\nchai_1.expect(z.range(0, 0, { withScores: true }))\n    .to.eql([['first', 1]]);",
                      "err": {},
                      "uuid": "fa2819bc-172d-4cf0-bc37-c7153d32c25f",
                      "parentUUID": "58b053df-7a50-4bfc-ac67-db1be59de8d3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bf17112b-af8a-4f0e-8836-b1f71b26fd42",
                    "fa2819bc-172d-4cf0-bc37-c7153d32c25f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "601d8773-b330-4110-94fa-9cb4c59c7e3f",
                  "title": "#intersect",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should intersect two sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect two sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = new Z(), b = new Z();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nchai_1.expect(Z.intersect(a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e19', '5a600e1c', '5a600e15', '5a600e1b']);\nchai_1.expect(Z.intersect(b, a)).to.eql(['5a600e1b', '5a600e14',\n    '5a600e1c', '5a600e15', '5a600e19', '5a600e10', '5a600e17']);",
                      "err": {},
                      "uuid": "704a2694-9629-4654-8ca5-877c5008da67",
                      "parentUUID": "601d8773-b330-4110-94fa-9cb4c59c7e3f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect three sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect three sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = new Z(), b = new Z(), c = new Z();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nchai_1.expect(Z.intersect(c, a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e1c']);\nchai_1.expect(Z.intersect(c, a, b)).to.eql(c.intersect(a, b));",
                      "err": {},
                      "uuid": "ce6d91ea-7276-4e42-87a5-189481380429",
                      "parentUUID": "601d8773-b330-4110-94fa-9cb4c59c7e3f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect four sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect four sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = new Z();\nvar b = new Z();\nvar c = new Z();\nvar d = new Z();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nd.add('5a600e1c', 400);\nd.add('5a600e17', 500);\nd.add('5a600e1f', 600);\nd.add('5a600e20', 700);\nchai_1.expect(Z.intersect(d, c, a, b)).to.eql(['5a600e17', '5a600e1c']);\nchai_1.expect(Z.intersect(d, c, a, b)).to.eql(d.intersect(c, a, b));",
                      "err": {},
                      "uuid": "ed4a70c1-6838-4ca1-9131-793889ea5523",
                      "parentUUID": "601d8773-b330-4110-94fa-9cb4c59c7e3f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "704a2694-9629-4654-8ca5-877c5008da67",
                    "ce6d91ea-7276-4e42-87a5-189481380429",
                    "ed4a70c1-6838-4ca1-9131-793889ea5523"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "5f5a5c80-01dd-4954-933a-6b667a53672f",
                  "title": "#rank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should get the correct rank",
                      "fullTitle": "sorted-set test skip map #rank should get the correct rank",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rank('5a600e12')).to.equal(7);\nchai_1.expect(z.rank('5a600e13')).to.equal(3);\nchai_1.expect(z.rank('5a600e16')).to.equal(0);\nchai_1.expect(z.rank('5a600e15')).to.equal(8);\nchai_1.expect(z.rank('not in set')).to.equal(null);",
                      "err": {},
                      "uuid": "ab1914a1-aedf-458e-b159-bc334ece1ec3",
                      "parentUUID": "5f5a5c80-01dd-4954-933a-6b667a53672f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ab1914a1-aedf-458e-b159-bc334ece1ec3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "4c13ac30-2f3f-48b5-9fdb-b645f5bd47a0",
                  "title": "#rem",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should delete special elements",
                      "fullTitle": "sorted-set test skip map #rem should delete special elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rem('5a600e15')).to.equal(19);\nchai_1.expect(z).to.have.length(8);\nchai_1.expect(z.rem('5a600e16')).to.equal(3);\nchai_1.expect(z).to.have.length(7);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "57624add-7877-4ca0-8b6b-a42ef57d4b84",
                      "parentUUID": "4c13ac30-2f3f-48b5-9fdb-b645f5bd47a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should delete many elements",
                      "fullTitle": "sorted-set test skip map #rem should delete many elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rem('5a600e11')).to.equal(6);\nchai_1.expect(z.rem('5a600e13')).to.equal(11);\nchai_1.expect(z.rem('5a600e14')).to.equal(14);\nchai_1.expect(z.rem('5a600e15')).to.equal(19);\nchai_1.expect(z.rem('5a600e16')).to.equal(3);\nchai_1.expect(z.rem('5a600e17')).to.equal(12);\nchai_1.expect(z.length).to.equal(3);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e18', 10],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "c53bd4f1-a1c5-4d7d-99c3-bc3f93df8af5",
                      "parentUUID": "4c13ac30-2f3f-48b5-9fdb-b645f5bd47a0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "57624add-7877-4ca0-8b6b-a42ef57d4b84",
                    "c53bd4f1-a1c5-4d7d-99c3-bc3f93df8af5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "55aa32d4-17b7-4ebb-b70c-c220dd80eae3",
                  "title": "#remRangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a range of elements",
                      "fullTitle": "sorted-set test skip map #remRangeByScore should strip out a range of elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByScore(4, 14)).to.equal(5);\nchai_1.expect(z).to.have.length(4);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "7902d900-25bb-42e2-88d4-4bcce48818f0",
                      "parentUUID": "55aa32d4-17b7-4ebb-b70c-c220dd80eae3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all the elements",
                      "fullTitle": "sorted-set test skip map #remRangeByScore should strip out all the elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByScore(3, 19)).to.equal(9);\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "2230829b-717c-4edd-98e6-47bb5a5045e2",
                      "parentUUID": "55aa32d4-17b7-4ebb-b70c-c220dd80eae3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7902d900-25bb-42e2-88d4-4bcce48818f0",
                    "2230829b-717c-4edd-98e6-47bb5a5045e2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "8a9d6410-8e7d-4f79-b2dd-98882d8107a7",
                  "title": "#remRangeByRank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a slice of elements",
                      "fullTitle": "sorted-set test skip map #remRangeByRank should strip out a slice of elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByRank(1, 6)).to.equal(5);\nchai_1.expect(z).to.have.length(4);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "adfdc724-dfc9-43b4-afc2-07ef40e0c93c",
                      "parentUUID": "8a9d6410-8e7d-4f79-b2dd-98882d8107a7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all elements",
                      "fullTitle": "sorted-set test skip map #remRangeByRank should strip out all elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByRank(0, 9)).to.equal(9);\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "18282aff-c7bd-43d7-b43d-60469e8fb3c9",
                      "parentUUID": "8a9d6410-8e7d-4f79-b2dd-98882d8107a7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "adfdc724-dfc9-43b4-afc2-07ef40e0c93c",
                    "18282aff-c7bd-43d7-b43d-60469e8fb3c9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "86d88274-2e3b-4019-84b9-8b73e4723d83",
                  "title": "#values",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the values",
                      "fullTitle": "sorted-set test skip map #values should return the values",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', -1);\nz.add('third', 5);\nz.add('second', 3);\nchai_1.expect(z.values()).to.eql([-1, 3, 5]);",
                      "err": {},
                      "uuid": "ae00ce34-df48-489f-96f6-deb87902c84b",
                      "parentUUID": "86d88274-2e3b-4019-84b9-8b73e4723d83",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ae00ce34-df48-489f-96f6-deb87902c84b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "d567b3c2-cd4a-4038-80d4-5490e004e836",
                  "title": "unique",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should ensure values are unique",
                      "fullTitle": "sorted-set test skip map unique should ensure values are unique",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z({ unique: true });\nassert.equal(z.keys().length, 0, 'Expected an empty SortedSet');\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(() => {\n    z.add('5a600e19', 11);\n}).to.throw(/unique/);\n// quick exit test\nchai_1.expect(() => {\n    z.add('5a600dff', z._head.next[z._level - 1].next.value);\n}).to.throw(/unique/);\n// this test ensures the key < key check doesn't come into play\nchai_1.expect(() => {\n    z.add('5a600dff', 11);\n}).to.throw(/unique/);\nchai_1.expect(() => {\n    z.add('5a600e18', 10);\n}).to.not.throw();\nchai_1.expect(z).to.have.length(9);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "7c7f3fc4-b522-455c-861a-1ddb4aebf77b",
                      "parentUUID": "d567b3c2-cd4a-4038-80d4-5490e004e836",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert keys if constraint broken during update",
                      "fullTitle": "sorted-set test skip map unique should revert keys if constraint broken during update",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z({ unique: true });\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(() => {\n    z.add('5a600e13', 14);\n}).to.throw(/unique/);\nchai_1.expect(z).to.have.length(9);\nchai_1.expect(z.score('5a600e13')).to.equal(11);",
                      "err": {},
                      "uuid": "a9a53a60-e186-4680-aa0b-88a44526960c",
                      "parentUUID": "d567b3c2-cd4a-4038-80d4-5490e004e836",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7c7f3fc4-b522-455c-861a-1ddb4aebf77b",
                    "a9a53a60-e186-4680-aa0b-88a44526960c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "f9ce0933-bc57-4288-bb3b-65a2d445ad4e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "0ff02806-8293-47be-ab17-5c8a55d96035",
              "title": "skip map rewrite",
              "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
              "file": "/test/resp/data/sorted-set.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should support basic operations",
                  "fullTitle": "sorted-set test skip map rewrite should support basic operations",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let ss = new sorted_set_1.SortedSet();\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);\nchai_1.expect(ss.range()).to.eql([]);\nchai_1.expect(ss.rangeByScore()).to.eql([]);\n// expect(() => {\n//   ss.add('__proto__', 14);\n// }).to.throw();\nss.add('5a600e16', 8);\nss.add('5a600e17', 9);\nchai_1.expect(ss.add('5a600e18', 10)).to.equal(null);\nchai_1.expect(ss.add('5a600e17', 12)).to.equal(9);\nchai_1.expect(ss).to.have.length(3);\nchai_1.expect(ss.toArray()).to.eql(['5a600e16', '5a600e18', '5a600e17']);\nchai_1.expect(ss.toArray()).to.eql(ss.range(0, -1));\nchai_1.expect(ss.toArray()).to.eql(ss.rangeByScore());\nchai_1.expect(ss.has('5a600e16')).to.be.ok;\nchai_1.expect(ss.has('5a600e17')).to.be.ok;\nchai_1.expect(ss.has('5a600e18')).to.be.ok;\nchai_1.expect(ss.has('5a600e19')).to.not.be.ok;\nchai_1.expect(ss.score('5a600e16')).to.equal(8);\nchai_1.expect(ss.score('5a600e17')).to.equal(12);\nchai_1.expect(ss.score('5a600e18')).to.equal(10);\nchai_1.expect(ss.score('5a600e19')).to.equal(null);\nchai_1.expect(ss.rem('5a600e16')).to.equal(8);\nchai_1.expect(ss).to.have.length(2);\nchai_1.expect(ss.rem('5a600e16')).to.equal(null);\nchai_1.expect(ss).to.have.length(2);\nchai_1.expect(ss.has('5a600e16')).to.not.be.ok;\nchai_1.expect(ss.toArray()).to.eql(['5a600e18', '5a600e17']);\nchai_1.expect(ss.toArray({ withScores: true }))\n    .to.eql(ss.range(0, -1, { withScores: true }));\nchai_1.expect(ss.toArray()).to.eql(ss.rangeByScore());\nss.add('5a600e16', 10);\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nchai_1.expect(ss).to.have.length(9);\n// no change, so should be O(1)\nss.add('5a600e17', 12);\nchai_1.expect(ss.rank('5a600e17')).to.equal(4);\nchai_1.expect(ss).to.have.length(9);\nchai_1.expect(ss.toArray()).to.eql([\n    '5a600e16',\n    '5a600e11',\n    '5a600e18',\n    '5a600e13',\n    '5a600e17',\n    '5a600e14',\n    '5a600e10',\n    '5a600e12',\n    '5a600e15',\n]);\nchai_1.expect(ss.toArray()).to.eql(ss.range(0, -1));\nchai_1.expect(ss.toArray()).to.eql(ss.rangeByScore());\nchai_1.expect(ss.rangeByScore(14, 16, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n]);",
                  "err": {},
                  "uuid": "6c555bd8-b572-47fe-8e5e-54bf1f855e22",
                  "parentUUID": "0ff02806-8293-47be-ab17-5c8a55d96035",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "5e0a33ce-8482-40be-a48d-fc4b59a4c227",
                  "title": "#add",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should implicitly delete",
                      "fullTitle": "sorted-set test skip map rewrite #add should implicitly delete",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.add('5a600e14', null)).to.equal(14);\nchai_1.expect(ss.add('5a600e19', null)).to.equal(null);\nchai_1.expect(ss).to.have.length(8);",
                      "err": {},
                      "uuid": "5e57daaf-597e-4f33-9cdc-e569d0023ee9",
                      "parentUUID": "5e0a33ce-8482-40be-a48d-fc4b59a4c227",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5e57daaf-597e-4f33-9cdc-e569d0023ee9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "bb854b63-0c87-4c61-be55-270db4305222",
                  "title": "#empty",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should remove all elements",
                      "fullTitle": "sorted-set test skip map rewrite #empty should remove all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nss.empty();\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "51b8a4dd-8633-4af7-be1a-c207ce129a15",
                      "parentUUID": "bb854b63-0c87-4c61-be55-270db4305222",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "51b8a4dd-8633-4af7-be1a-c207ce129a15"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "e970a5f8-1e61-495d-bc9d-35ec18504cba",
                  "title": "#incrBy(increment, key)",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should increase rank",
                      "fullTitle": "sorted-set test skip map rewrite #incrBy(increment, key) should increase rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.add('second', 2);\nss.add('third', 3);\nss.add('fourth', 4);\nchai_1.expect(ss.incrBy(2, 'first')).to.equal(3);\nchai_1.expect(ss.rank('first')).to.equal(1);",
                      "err": {},
                      "uuid": "bd56de33-82d8-4e92-983b-739d77e8ba4a",
                      "parentUUID": "e970a5f8-1e61-495d-bc9d-35ec18504cba",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should create if not found",
                      "fullTitle": "sorted-set test skip map rewrite #incrBy(increment, key) should create if not found",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.incrBy(2, 'second');\nchai_1.expect(ss.card()).to.equal(2);\nchai_1.expect(ss.rank('second')).to.equal(1);",
                      "err": {},
                      "uuid": "157ae4af-ddbd-4b1d-821c-fa7eff9d85d1",
                      "parentUUID": "e970a5f8-1e61-495d-bc9d-35ec18504cba",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bd56de33-82d8-4e92-983b-739d77e8ba4a",
                    "157ae4af-ddbd-4b1d-821c-fa7eff9d85d1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "3b703a92-0eba-45d6-88e5-25c182342403",
                  "title": "#keys",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the keys",
                      "fullTitle": "sorted-set test skip map rewrite #keys should return the keys",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.keys()).to.eql(['5a600e16', '5a600e11', '5a600e18', '5a600e13',\n    '5a600e17', '5a600e14', '5a600e10', '5a600e12', '5a600e15']);",
                      "err": {},
                      "uuid": "2bebe1f4-9947-4f05-a419-e236fc7f0249",
                      "parentUUID": "3b703a92-0eba-45d6-88e5-25c182342403",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2bebe1f4-9947-4f05-a419-e236fc7f0249"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "f38d9fff-715f-4219-999e-2f4636dd9f45",
                  "title": "#rangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map rewrite #rangeByScore should support special ranges",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rangeByScore(14, null, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);\nchai_1.expect(ss.rangeByScore(null, 10, { withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n]);\nchai_1.expect(ss.rangeByScore(-Infinity, Infinity)).to.eql(ss.toArray());\nchai_1.expect(ss.rangeByScore(null, null)).to.eql(ss.toArray());",
                      "err": {},
                      "uuid": "899cf132-fc45-4ca3-9db2-f90233b642b7",
                      "parentUUID": "f38d9fff-715f-4219-999e-2f4636dd9f45",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "899cf132-fc45-4ca3-9db2-f90233b642b7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "79ca9a80-320e-4226-a024-01313684064d",
                  "title": "#count",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should count elements",
                      "fullTitle": "sorted-set test skip map rewrite #count should count elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nchai_1.expect(ss.count()).to.equal(0);\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nss.add('5a600e19', 14);\nss.add('5a600f00', 30.0);\nss.add('5a600f01', 30.5);\nss.add('5a600f02', 31.0);\nss.add('5a600f03', 31.5);\nss.add('5a600f04', 32.0);\nss.add('5a600f05', 32.0);\nss.add('5a600f06', 32.0);\nchai_1.expect(ss.count()).to.eql(ss.rangeByScore().length);\nchai_1.expect(ss.count(8)).to.eql(ss.rangeByScore(8).length);\nchai_1.expect(ss.count(3, 7)).to.eql(ss.rangeByScore(3, 7).length);\nchai_1.expect(ss.count(5, 14)).to.eql(ss.rangeByScore(5, 14).length);\nchai_1.expect(ss.count(5, 5)).to.eql(ss.rangeByScore(5, 5).length);\nchai_1.expect(ss.count(5, 0)).to.eql(ss.rangeByScore(5, 0).length);\nchai_1.expect(ss.count(30, 32)).to.eql(ss.rangeByScore(30, 32).length);\nchai_1.expect(ss.count(40)).to.eql(ss.rangeByScore(40).length);",
                      "err": {},
                      "uuid": "e366147b-664f-4840-9478-7f1b575beba8",
                      "parentUUID": "79ca9a80-320e-4226-a024-01313684064d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e366147b-664f-4840-9478-7f1b575beba8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "5361c2d4-e7e0-44af-ade4-ac608366ce51",
                  "title": "#range",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map rewrite #range should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.add('second', 2);\nss.add('third', 3);\nss.add('fourth', 4);\nlet array = ['first', 'second', 'third', 'fourth'];\nchai_1.expect(ss.range()).to.eql(array);\nchai_1.expect(ss.range(2)).to.eql(array.slice(2));\nchai_1.expect(ss.range(8)).to.eql(array.slice(8));\nchai_1.expect(ss.range(0, 2)).to.eql(array.slice(0, 3));\nchai_1.expect(ss.range(-1)).to.eql(['fourth']);\nchai_1.expect(ss.range(-4)).to.eql(array);\nchai_1.expect(ss.range(-4, -2)).to.eql(array.slice(0, 3));\nchai_1.expect(ss.range(-4, ss.length + 1000))\n    .to.eql(array.slice(-4, ss.length + 1000));",
                      "err": {},
                      "uuid": "e6d615dd-ab03-4750-8fcb-fe4fccb9e6a2",
                      "parentUUID": "5361c2d4-e7e0-44af-ade4-ac608366ce51",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should support withScores",
                      "fullTitle": "sorted-set test skip map rewrite #range should support withScores",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.add('second', 2);\nchai_1.expect(ss.range(0, 0, { withScores: true }))\n    .to.eql([['first', 1]]);",
                      "err": {},
                      "uuid": "003fa6a3-e6bb-4fdc-8328-987c899f99ac",
                      "parentUUID": "5361c2d4-e7e0-44af-ade4-ac608366ce51",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e6d615dd-ab03-4750-8fcb-fe4fccb9e6a2",
                    "003fa6a3-e6bb-4fdc-8328-987c899f99ac"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "a166251f-f7dd-4179-a41f-ec5fdb74331c",
                  "title": "#intersect",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should intersect two sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect two sets",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nchai_1.expect(sorted_set_1.SortedSet.intersect(a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e19', '5a600e1c', '5a600e15', '5a600e1b']);\nchai_1.expect(sorted_set_1.SortedSet.intersect(b, a)).to.eql(['5a600e1b', '5a600e14',\n    '5a600e1c', '5a600e15', '5a600e19', '5a600e10', '5a600e17']);",
                      "err": {},
                      "uuid": "7ee30c84-223e-4dc8-b506-729319f735bf",
                      "parentUUID": "a166251f-f7dd-4179-a41f-ec5fdb74331c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect three sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect three sets",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet(), c = new sorted_set_1.SortedSet();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nchai_1.expect(sorted_set_1.SortedSet.intersect(c, a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e1c']);\n// expect(SortedSet.intersect(c, a, b)).to.eql(c.intersect(a, b));",
                      "err": {},
                      "uuid": "1b3d4bb2-6c3e-45cc-b407-e8c0132a7041",
                      "parentUUID": "a166251f-f7dd-4179-a41f-ec5fdb74331c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should intersect four sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect four sets",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let a = new sorted_set_1.SortedSet();\nlet b = new sorted_set_1.SortedSet();\nlet c = new sorted_set_1.SortedSet();\nlet d = new sorted_set_1.SortedSet();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nd.add('5a600e1c', 400);\nd.add('5a600e17', 500);\nd.add('5a600e1f', 600);\nd.add('5a600e20', 700);\nchai_1.expect(sorted_set_1.SortedSet.intersect(d, c, a, b)).to.eql(['5a600e17', '5a600e1c']);\n// expect(SortedSet.intersect(d, c, a, b)).to.eql(d.intersect(c, a, b));",
                      "err": {},
                      "uuid": "c990e88a-1f92-41ae-a237-28b09f44014b",
                      "parentUUID": "a166251f-f7dd-4179-a41f-ec5fdb74331c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7ee30c84-223e-4dc8-b506-729319f735bf",
                    "1b3d4bb2-6c3e-45cc-b407-e8c0132a7041",
                    "c990e88a-1f92-41ae-a237-28b09f44014b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "896aa1d8-df67-49de-851f-9eef5e813251",
                  "title": "#rank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should get the correct rank",
                      "fullTitle": "sorted-set test skip map rewrite #rank should get the correct rank",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rank('5a600e12')).to.equal(7);\nchai_1.expect(ss.rank('5a600e13')).to.equal(3);\nchai_1.expect(ss.rank('5a600e16')).to.equal(0);\nchai_1.expect(ss.rank('5a600e15')).to.equal(8);\nchai_1.expect(ss.rank('not in set')).to.equal(null);",
                      "err": {},
                      "uuid": "9b39f696-5f2d-4773-9c26-53955a20452c",
                      "parentUUID": "896aa1d8-df67-49de-851f-9eef5e813251",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9b39f696-5f2d-4773-9c26-53955a20452c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "4619813a-c422-4f76-b58d-dd35c5e85cef",
                  "title": "#rem",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should delete special elements",
                      "fullTitle": "sorted-set test skip map rewrite #rem should delete special elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rem('5a600e15')).to.equal(19);\nchai_1.expect(ss).to.have.length(8);\nchai_1.expect(ss.rem('5a600e16')).to.equal(3);\nchai_1.expect(ss).to.have.length(7);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "ffdd530e-80a0-4645-9f16-07b9173dc8d7",
                      "parentUUID": "4619813a-c422-4f76-b58d-dd35c5e85cef",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should delete many elements",
                      "fullTitle": "sorted-set test skip map rewrite #rem should delete many elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rem('5a600e11')).to.equal(6);\nchai_1.expect(ss.rem('5a600e13')).to.equal(11);\nchai_1.expect(ss.rem('5a600e14')).to.equal(14);\nchai_1.expect(ss.rem('5a600e15')).to.equal(19);\nchai_1.expect(ss.rem('5a600e16')).to.equal(3);\nchai_1.expect(ss.rem('5a600e17')).to.equal(12);\nchai_1.expect(ss.length).to.equal(3);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e18', 10],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "207611a3-1e4b-4fed-9eb0-2b585f981191",
                      "parentUUID": "4619813a-c422-4f76-b58d-dd35c5e85cef",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ffdd530e-80a0-4645-9f16-07b9173dc8d7",
                    "207611a3-1e4b-4fed-9eb0-2b585f981191"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "fc4045f5-37ed-49a8-a286-7855c6e6ea19",
                  "title": "#remRangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a range of elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByScore should strip out a range of elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByScore(4, 14)).to.equal(5);\nchai_1.expect(ss).to.have.length(4);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "678300a2-a1d9-4624-b9f0-6041d7a89100",
                      "parentUUID": "fc4045f5-37ed-49a8-a286-7855c6e6ea19",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all the elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByScore should strip out all the elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByScore(3, 19)).to.equal(9);\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "cab70eb9-4a32-4e7c-adbc-91d65e61bb21",
                      "parentUUID": "fc4045f5-37ed-49a8-a286-7855c6e6ea19",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "678300a2-a1d9-4624-b9f0-6041d7a89100",
                    "cab70eb9-4a32-4e7c-adbc-91d65e61bb21"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "6fd835b4-dc02-44ef-b1d7-914c9883f4e1",
                  "title": "#remRangeByRank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a slice of elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByRank should strip out a slice of elements",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByRank(1, 6)).to.equal(5);\nchai_1.expect(ss).to.have.length(4);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "c2468481-33e8-45ca-bd86-d5790180d0cb",
                      "parentUUID": "6fd835b4-dc02-44ef-b1d7-914c9883f4e1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should strip out all elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByRank should strip out all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByRank(0, 9)).to.equal(9);\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "3583c6b2-2c23-40c4-bf0a-db69fd52901a",
                      "parentUUID": "6fd835b4-dc02-44ef-b1d7-914c9883f4e1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c2468481-33e8-45ca-bd86-d5790180d0cb",
                    "3583c6b2-2c23-40c4-bf0a-db69fd52901a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "7c5ab0ca-3f9b-4246-8b6b-55d9df87b185",
                  "title": "#values",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the values",
                      "fullTitle": "sorted-set test skip map rewrite #values should return the values",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', -1);\nss.add('third', 5);\nss.add('second', 3);\nchai_1.expect(ss.values()).to.eql([-1, 3, 5]);",
                      "err": {},
                      "uuid": "af0333dd-21e5-4bf5-af0e-34523a87cf8f",
                      "parentUUID": "7c5ab0ca-3f9b-4246-8b6b-55d9df87b185",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "af0333dd-21e5-4bf5-af0e-34523a87cf8f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "39e16609-40a3-45af-8b68-ee72ef0e1c84",
                  "title": "unique rewrite",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should ensure values are unique",
                      "fullTitle": "sorted-set test skip map rewrite unique rewrite should ensure values are unique",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const options = { unique: true };\nlet ss = new sorted_set_1.SortedSet(options);\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(() => {\n    ss.add('5a600e19', 11);\n}).to.throw(/unique/);\n// quick exit test\nchai_1.expect(() => {\n    ss.add('5a600dff', ss._head.next[ss._level - 1].next.value);\n}).to.throw(/unique/);\n// this test ensures the key < key check doesn't come into play\nchai_1.expect(() => {\n    ss.add('5a600dff', 11);\n}).to.throw(/unique/);\nchai_1.expect(() => {\n    ss.add('5a600e18', 10);\n}).to.not.throw();\nchai_1.expect(ss).to.have.length(9);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "bd5534e8-5db3-4c47-ae52-614f74b2a588",
                      "parentUUID": "39e16609-40a3-45af-8b68-ee72ef0e1c84",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should revert keys if constraint broken during update",
                      "fullTitle": "sorted-set test skip map rewrite unique rewrite should revert keys if constraint broken during update",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet({ unique: true });\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(() => {\n    ss.add('5a600e13', 14);\n}).to.throw(/unique/);\nchai_1.expect(ss).to.have.length(9);\nchai_1.expect(ss.score('5a600e13')).to.equal(11);",
                      "err": {},
                      "uuid": "411f1630-a1bf-41c5-9faf-07da51ce6bfd",
                      "parentUUID": "39e16609-40a3-45af-8b68-ee72ef0e1c84",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bd5534e8-5db3-4c47-ae52-614f74b2a588",
                    "411f1630-a1bf-41c5-9faf-07da51ce6bfd"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [
                "6c555bd8-b572-47fe-8e5e-54bf1f855e22"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [
            "fc157f22-e9ec-4d91-b1b3-08ef6b5f986d",
            "802b98d6-8ae2-48ce-9c03-3776564ffd74",
            "0fab87ae-1a00-4550-b508-51179bf8f347",
            "5fc139fc-679a-42bd-8398-ba2821f7df06",
            "ff6da49a-3422-42d8-af0c-01677714c508",
            "85c5e916-5702-496a-ab52-4ed72b45dd66",
            "c5ee944a-39df-4b32-b577-8e1b9e49fd0e",
            "4d862f61-bc16-477e-9641-3e6ed26a25ca"
          ],
          "failures": [],
          "pending": [
            "6883333f-232c-42f3-9f67-99a46c47d7e5"
          ],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "reportDir": "docs/mochawesome"
      },
      "version": "4.1.0"
    }
  }
}