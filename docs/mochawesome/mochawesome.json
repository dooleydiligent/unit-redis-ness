{
  "stats": {
    "suites": 35,
    "tests": 147,
    "passes": 144,
    "pending": 2,
    "failures": 1,
    "start": "2020-01-21T12:19:05.078Z",
    "end": "2020-01-21T12:19:18.585Z",
    "duration": 13507,
    "testsRegistered": 318,
    "passPercent": 45.56962025316456,
    "pendingPercent": 0.628930817610063,
    "other": 0,
    "hasOther": false,
    "skipped": 171,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "90cce426-7359-4b2f-aa74-27d079939e75",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook",
          "fullTitle": "\"before all\" hook",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "done();",
          "err": {},
          "uuid": "25c39e0f-9406-4b98-bc24-682e64da97f8",
          "parentUUID": "90cce426-7359-4b2f-aa74-27d079939e75",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook",
          "fullTitle": "\"after all\" hook",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "__awaiter(void 0, void 0, void 0, function* () {\n})",
          "err": {},
          "uuid": "9a3dff2c-0337-4fab-b1e2-d7bd264477a0",
          "parentUUID": "90cce426-7359-4b2f-aa74-27d079939e75",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "91d79ce9-0996-4f7f-a98e-2bfc6a243447",
          "title": "dictionary test",
          "fullFile": "/home/lane/git/redis/test/dictionary.test.ts",
          "file": "/test/dictionary.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "dictionary test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dictionary = new dictionary_1.Dictionary();\nsinon.createSandbox();",
              "err": {},
              "uuid": "ad44e3db-68f6-4922-9f9a-e5610255d7b2",
              "parentUUID": "91d79ce9-0996-4f7f-a98e-2bfc6a243447",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "dictionary test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "3955386a-f0a4-43a5-b717-79acffdbefa0",
              "parentUUID": "91d79ce9-0996-4f7f-a98e-2bfc6a243447",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "dictionary test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "d1e60db7-2914-4b30-83ca-9ed7ea6844d8",
              "parentUUID": "91d79ce9-0996-4f7f-a98e-2bfc6a243447",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should construct",
              "fullTitle": "dictionary test should construct",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        chai_1.expect(dictionary.constructor.name).to.equal('Dictionary');\n    })",
              "err": {},
              "uuid": "abe68e63-2aa8-475e-9644-a3888e0c811d",
              "parentUUID": "91d79ce9-0996-4f7f-a98e-2bfc6a243447",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should implement basic put/get/remove/size/clear/contains/exists/keys/values functionality",
              "fullTitle": "dictionary test should implement basic put/get/remove/size/clear/contains/exists/keys/values functionality",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dictionary.put('item', 'one');\nchai_1.expect(dictionary.exists('item')).to.equal(true);\nchai_1.expect(dictionary.exists('one')).to.equal(false);\nchai_1.expect(dictionary.get('item')).to.equal('one');\nchai_1.expect(dictionary.size()).to.equal(1);\nchai_1.expect(dictionary.contains('one')).to.equal(true);\nchai_1.expect(dictionary.keys().length).to.equal(1);\nchai_1.expect(dictionary.values().length).to.equal(1);\ndictionary.put('item', 'two');\nchai_1.expect(dictionary.get('item')).to.equal('two');\ndictionary.put('one', { embedded: true });\ndictionary.remove('three');\nchai_1.expect(dictionary.size()).to.equal(2);\nlet foundTwo = false;\nfor (const each of dictionary) {\n    if (!foundTwo) {\n        chai_1.expect(each).to.equal('two');\n        foundTwo = true;\n    }\n    else {\n        chai_1.expect(each).to.eql({ embedded: true });\n    }\n}\ndictionary.remove('item');\nchai_1.expect(dictionary.size()).to.equal(1);\ndictionary.clear();\nchai_1.expect(dictionary.size()).to.equal(0);",
              "err": {},
              "uuid": "c9919df9-0256-4e45-94e9-5d8000e498bc",
              "parentUUID": "91d79ce9-0996-4f7f-a98e-2bfc6a243447",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "abe68e63-2aa8-475e-9644-a3888e0c811d",
            "c9919df9-0256-4e45-94e9-5d8000e498bc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c8a3e878-d455-4028-81a3-4ea36a6c534f",
          "title": "logger test",
          "fullFile": "/home/lane/git/redis/test/logger.test.ts",
          "file": "/test/logger.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "logger test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "6d282fea-f534-4205-b589-5971539de2c8",
              "parentUUID": "c8a3e878-d455-4028-81a3-4ea36a6c534f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "logger test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "3e44aab1-ddaf-4145-8c49-3c533991eb49",
              "parentUUID": "c8a3e878-d455-4028-81a3-4ea36a6c534f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "logger test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "e458fd85-c4c8-44b4-81e6-183599cff67a",
              "parentUUID": "c8a3e878-d455-4028-81a3-4ea36a6c534f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should construct",
              "fullTitle": "logger test should construct",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        logger = new logger_1.Logger(module.id);\n        chai_1.expect(logger.constructor.name).to.equal('Logger');\n        logger.info(`This is an info message`);\n        logger.warn('This is a warning message');\n        logger.debug(`This is an invisible debug message`);\n    })",
              "err": {},
              "uuid": "36ee69ea-2a5c-485f-842a-a6945c9e7247",
              "parentUUID": "c8a3e878-d455-4028-81a3-4ea36a6c534f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not construct when initialized with an empty string",
              "fullTitle": "logger test should not construct when initialized with an empty string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai_1.expect(() => {\n    logger = new logger_1.Logger('');\n}).to.throw();",
              "err": {},
              "uuid": "ebc1c9d1-fafa-4402-888d-53ddf77933f9",
              "parentUUID": "c8a3e878-d455-4028-81a3-4ea36a6c534f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "36ee69ea-2a5c-485f-842a-a6945c9e7247",
            "ebc1c9d1-fafa-4402-888d-53ddf77933f9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0f2cde5a-22dc-4967-ac51-8fb28bc3f231",
          "title": "lua-bit test",
          "fullFile": "/home/lane/git/redis/test/lua/lua-bit.test.ts",
          "file": "/test/lua/lua-bit.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lua-bit test \"before all\" hook",
              "timedOut": false,
              "duration": 40,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "71a02499-cacd-4b59-a582-f2aa5815aacc",
              "parentUUID": "0f2cde5a-22dc-4967-ac51-8fb28bc3f231",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lua-bit test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "112d68ab-a897-464e-b386-8fb369853c57",
              "parentUUID": "0f2cde5a-22dc-4967-ac51-8fb28bc3f231",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lua-bit test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "1de1597f-fb65-44ec-9e7d-931ab92e9e80",
              "parentUUID": "0f2cde5a-22dc-4967-ac51-8fb28bc3f231",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lua-bit test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "446b5f9e-a41d-4c06-9e0d-d83fd352873c",
              "parentUUID": "0f2cde5a-22dc-4967-ac51-8fb28bc3f231",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should leverage the LUA bit library for bit AND op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit AND op",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'local val = bit.band(5, 1) return val ', '0']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "154cb1b0-7537-4c06-b2f5-8f6f35d23598",
              "parentUUID": "0f2cde5a-22dc-4967-ac51-8fb28bc3f231",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit OR op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit OR op",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'local val = bit.bor(5, 1) return val ', '0']);\n        chai_1.expect(response).to.equal(5);\n    })",
              "err": {},
              "uuid": "2d194e58-b7ff-4f28-9138-b725843633de",
              "parentUUID": "0f2cde5a-22dc-4967-ac51-8fb28bc3f231",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit XOR op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit XOR op",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'local val = bit.bxor(5, 1) return val ', '0']);\n        chai_1.expect(response).to.equal(4);\n    })",
              "err": {},
              "uuid": "78b5b3d9-1941-42df-aa5f-b1d0d7f549d7",
              "parentUUID": "0f2cde5a-22dc-4967-ac51-8fb28bc3f231",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit NOT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit NOT op",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'local val = bit.bnot(5) return val ', '0']);\n        chai_1.expect(response).to.equal(-6);\n    })",
              "err": {},
              "uuid": "3c1f8acc-f03d-4781-bf81-d96fb0a83a78",
              "parentUUID": "0f2cde5a-22dc-4967-ac51-8fb28bc3f231",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit LSHIFT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit LSHIFT op",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'local val = bit.lshift(5, 1) return val ', '0']);\n        chai_1.expect(response).to.equal(10);\n    })",
              "err": {},
              "uuid": "5232806f-b585-4996-9f04-0392443244b0",
              "parentUUID": "0f2cde5a-22dc-4967-ac51-8fb28bc3f231",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit RSHIFT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit RSHIFT op",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'local val = bit.rshift(-5, 1) return val ', '0']);\n        chai_1.expect(response).to.equal(-3);\n    })",
              "err": {},
              "uuid": "7a60d69c-6d31-4631-80ea-2a42f4f7ab5a",
              "parentUUID": "0f2cde5a-22dc-4967-ac51-8fb28bc3f231",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should leverage the LUA bit library for bit ARSHIFT op",
              "fullTitle": "lua-bit test should leverage the LUA bit library for bit ARSHIFT op",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'local val = bit.arshift(5, 1) return val ', '0']);\n        chai_1.expect(response).to.equal(2);\n    })",
              "err": {},
              "uuid": "cea8ef92-47fa-4aee-a6d4-4f252c0c90c3",
              "parentUUID": "0f2cde5a-22dc-4967-ac51-8fb28bc3f231",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "154cb1b0-7537-4c06-b2f5-8f6f35d23598",
            "2d194e58-b7ff-4f28-9138-b725843633de",
            "78b5b3d9-1941-42df-aa5f-b1d0d7f549d7",
            "3c1f8acc-f03d-4781-bf81-d96fb0a83a78",
            "5232806f-b585-4996-9f04-0392443244b0",
            "7a60d69c-6d31-4631-80ea-2a42f4f7ab5a",
            "cea8ef92-47fa-4aee-a6d4-4f252c0c90c3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 127,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b09e040d-2a26-44fc-8f0c-bde89acfdf75",
          "title": "client command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/client-command.test.ts",
          "file": "/test/resp/command/client-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "client command test \"before all\" hook",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "5e9cb8d7-0f48-4284-8111-6c38f257b658",
              "parentUUID": "b09e040d-2a26-44fc-8f0c-bde89acfdf75",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "client command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "73838f5c-632f-4f07-a315-27c36ce4586e",
              "parentUUID": "b09e040d-2a26-44fc-8f0c-bde89acfdf75",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "client command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "ce08d3d2-5628-45f5-b4ad-48e7cf366b38",
              "parentUUID": "b09e040d-2a26-44fc-8f0c-bde89acfdf75",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "client command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "60068077-129e-48bf-92c9-25d0c417dfbc",
              "parentUUID": "b09e040d-2a26-44fc-8f0c-bde89acfdf75",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow more than 3 parameters",
              "fullTitle": "client command test should not allow more than 3 parameters",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'one', 'two', 'three', 'four']);\n        chai_1.expect(response).to.equal('ReplyError: ERR Unknown subcommand or wrong number of arguments for \\'one\\'. Try CLIENT HELP');\n    })",
              "err": {},
              "uuid": "6989c2f6-26d6-4326-ae32-d6d9633fc8c8",
              "parentUUID": "b09e040d-2a26-44fc-8f0c-bde89acfdf75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail predictably when an unknown subcommand is passed",
              "fullTitle": "client command test should fail predictably when an unknown subcommand is passed",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'whatever']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'whatever'));\n    })",
              "err": {},
              "uuid": "9c197f42-e484-4c65-8536-3ea9c32b7f8e",
              "parentUUID": "b09e040d-2a26-44fc-8f0c-bde89acfdf75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a NIL name when called with \"GETNAME\" subcommand",
              "fullTitle": "client command test should return a NIL name when called with \"GETNAME\" subcommand",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'getname']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "b71a90c6-fd3f-4bcf-8bec-cfe0a9340926",
              "parentUUID": "b09e040d-2a26-44fc-8f0c-bde89acfdf75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail predictably when \"GETNAME\" is called with too many parameters",
              "fullTitle": "client command test should fail predictably when \"GETNAME\" is called with too many parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'getname', 'extra']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'getname'));\n    })",
              "err": {},
              "uuid": "a39f6fd8-9f01-42ce-bb2f-23442d68943f",
              "parentUUID": "b09e040d-2a26-44fc-8f0c-bde89acfdf75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with \"OK\" when \"setname\" is called with a valid name",
              "fullTitle": "client command test should respond with \"OK\" when \"setname\" is called with a valid name",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['client', 'setname', 'whatever']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['client', 'getname']);\n        chai_1.expect(response).to.equal('whatever');\n    })",
              "err": {},
              "uuid": "31452d64-ed8a-498d-8dc9-98039da3fb3f",
              "parentUUID": "b09e040d-2a26-44fc-8f0c-bde89acfdf75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should persist the value for \"setname\" across tests",
              "fullTitle": "client command test should persist the value for \"setname\" across tests",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'getname']);\n        chai_1.expect(response).to.equal('whatever');\n    })",
              "err": {},
              "uuid": "88d67661-29a1-4fd6-83a3-1e6216a1ef10",
              "parentUUID": "b09e040d-2a26-44fc-8f0c-bde89acfdf75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"setname\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"setname\" called with too many parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'setname', 'test', 'two']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'setname'));\n    })",
              "err": {},
              "uuid": "ff32c16e-ad72-41ef-b068-6c983e021a49",
              "parentUUID": "b09e040d-2a26-44fc-8f0c-bde89acfdf75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow whitespace in \"setname\" subcommand",
              "fullTitle": "client command test should not allow whitespace in \"setname\" subcommand",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'setname', 'te\\nst']);\n        chai_1.expect(response).to.equal(`ReplyError: ERR Client names cannot contain spaces, newlines or special characters.`);\n    })",
              "err": {},
              "uuid": "7d27af67-ec0b-40b8-8b7a-fe78546411a0",
              "parentUUID": "b09e040d-2a26-44fc-8f0c-bde89acfdf75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the server-assigned client id",
              "fullTitle": "client command test should return the server-assigned client id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'id']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(String(response).length).to.be.greaterThan(0);\n    })",
              "err": {},
              "uuid": "5598b640-93c5-42a7-8a4c-db26b9750422",
              "parentUUID": "b09e040d-2a26-44fc-8f0c-bde89acfdf75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"id\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"id\" called with too many parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'id', 'test', 'two']);\n        chai_1.expect(response).to.equal(util.format(DEFAULT_ERROR, 'id'));\n    })",
              "err": {},
              "uuid": "57d94e9c-af33-4934-bfb1-7022809afb59",
              "parentUUID": "b09e040d-2a26-44fc-8f0c-bde89acfdf75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a bunch of information when client \"list\" subcommand is invoked",
              "fullTitle": "client command test should return a bunch of information when client \"list\" subcommand is invoked",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'list']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response.length).to.be.greaterThan(0);\n        chai_1.expect(response).to.match(/ name=whatever /);\n        chai_1.expect(response).to.match(/\\bdb=0\\b/);\n    })",
              "err": {},
              "uuid": "3455be52-23b2-4aee-9a68-1bca0f3d8d5b",
              "parentUUID": "b09e040d-2a26-44fc-8f0c-bde89acfdf75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respond with a predictable message when \"list\" called with too many parameters",
              "fullTitle": "client command test should respond with a predictable message when \"list\" called with too many parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['client', 'list', 'test', 'two']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "b8ee18ca-d5c9-4ae8-b23b-1485e064aaf2",
              "parentUUID": "b09e040d-2a26-44fc-8f0c-bde89acfdf75",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6989c2f6-26d6-4326-ae32-d6d9633fc8c8",
            "9c197f42-e484-4c65-8536-3ea9c32b7f8e",
            "b71a90c6-fd3f-4bcf-8bec-cfe0a9340926",
            "a39f6fd8-9f01-42ce-bb2f-23442d68943f",
            "31452d64-ed8a-498d-8dc9-98039da3fb3f",
            "88d67661-29a1-4fd6-83a3-1e6216a1ef10",
            "ff32c16e-ad72-41ef-b068-6c983e021a49",
            "7d27af67-ec0b-40b8-8b7a-fe78546411a0",
            "5598b640-93c5-42a7-8a4c-db26b9750422",
            "57d94e9c-af33-4934-bfb1-7022809afb59",
            "3455be52-23b2-4aee-9a68-1bca0f3d8d5b",
            "b8ee18ca-d5c9-4ae8-b23b-1485e064aaf2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "15deac70-c897-4af4-8500-981fdfe73f94",
          "title": "flushall-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/db/flushall-command.test.ts",
          "file": "/test/resp/command/db/flushall-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "flushall-command test \"before all\" hook",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "5c4806fa-4d6b-4464-8c34-fd3c377a0252",
              "parentUUID": "15deac70-c897-4af4-8500-981fdfe73f94",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "flushall-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "fe249ae9-bce0-468d-99fe-82d11cc770a4",
              "parentUUID": "15deac70-c897-4af4-8500-981fdfe73f94",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "flushall-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "06b36e19-b74e-4405-9f39-1bfaae7da4ae",
              "parentUUID": "15deac70-c897-4af4-8500-981fdfe73f94",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "flushall-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "d90cc086-7f2b-4977-9833-2056592c9a70",
              "parentUUID": "15deac70-c897-4af4-8500-981fdfe73f94",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should remove all keys from all databases",
              "fullTitle": "flushall-command test should remove all keys from all databases",
              "timedOut": false,
              "duration": 90,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let db = 0; db < 16; db++) {\n            response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['set', 'dbid', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            console.log(`DB: ${db}: dbsize: ${response}`);\n            chai_1.expect(response).to.equal(1);\n        }\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        for (let db = 0; db < 16; db++) {\n            response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.equal(0);\n        }\n    })",
              "err": {},
              "uuid": "dff04b6c-2a55-4ce8-b329-6d5f644a6e69",
              "parentUUID": "15deac70-c897-4af4-8500-981fdfe73f94",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dff04b6c-2a55-4ce8-b329-6d5f644a6e69"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 90,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "00b43f10-a930-4fb9-8bea-b9bba02b728f",
          "title": "flushdb-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/db/flushdb-command.test.ts",
          "file": "/test/resp/command/db/flushdb-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "flushdb-command test \"before all\" hook",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "2be48d01-3d9b-4e70-874b-7e23e6dfbf5d",
              "parentUUID": "00b43f10-a930-4fb9-8bea-b9bba02b728f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "flushdb-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "9f2e298a-0bf3-443f-99c1-ca0ba7ca3a18",
              "parentUUID": "00b43f10-a930-4fb9-8bea-b9bba02b728f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "flushdb-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "f3ccc126-3f82-4e08-833a-45eff02e4b11",
              "parentUUID": "00b43f10-a930-4fb9-8bea-b9bba02b728f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "flushdb-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "6a301f18-fd00-4d17-9666-f87721612904",
              "parentUUID": "00b43f10-a930-4fb9-8bea-b9bba02b728f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should remove all keys from only the currently selected databases",
              "fullTitle": "flushdb-command test should remove all keys from only the currently selected databases",
              "timedOut": false,
              "duration": 240,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let db = 0; db < 16; db++) {\n            response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['set', 'dbid', `${db}`]);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.equal(1);\n        }\n        for (let db = 0; db < 16; db++) {\n            if (db !== 14) {\n                response = yield common_test_1.sendCommand(client, ['select', `${db}`]);\n                chai_1.expect(response).to.equal('OK');\n                response = yield common_test_1.sendCommand(client, ['flushdb']);\n                chai_1.expect(response).to.equal('OK');\n                response = yield common_test_1.sendCommand(client, ['exists', 'dbid']);\n                chai_1.expect(response).to.equal(0);\n                response = yield common_test_1.sendCommand(client, ['dbsize']);\n                chai_1.expect(response).to.equal(0);\n            }\n        }\n        response = yield common_test_1.sendCommand(client, ['select', '14']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'dbid']);\n        chai_1.expect(response).to.equal('14');\n        response = yield common_test_1.sendCommand(client, ['dbsize']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "6058b245-56d7-4303-a380-ce92a5e30182",
              "parentUUID": "00b43f10-a930-4fb9-8bea-b9bba02b728f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6058b245-56d7-4303-a380-ce92a5e30182"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 240,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a3cfa0d5-6c4a-4728-9dc5-496530835ace",
          "title": "hget command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/hash/hget-command.test.ts",
          "file": "/test/resp/command/hash/hget-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "hget command test \"before all\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "abb4ad9f-b2f2-4bc3-8055-4bce5e88b1fe",
              "parentUUID": "a3cfa0d5-6c4a-4728-9dc5-496530835ace",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "hget command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "32d2c8c0-9784-487b-9477-7cfc14b5546b",
              "parentUUID": "a3cfa0d5-6c4a-4728-9dc5-496530835ace",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "hget command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "3dd373b0-6320-4c02-bb60-34a78ca8fccc",
              "parentUUID": "a3cfa0d5-6c4a-4728-9dc5-496530835ace",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "hget command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "0e2a74a6-ba87-4323-9541-5f1f0dd93be4",
              "parentUUID": "a3cfa0d5-6c4a-4728-9dc5-496530835ace",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require exactly 2 parameters",
              "fullTitle": "hget command test should require exactly 2 parameters",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['hget', 'test'])\n    .then((response1) => {\n    chai_1.expect(response1).to.equal('ReplyError: ERR wrong number of arguments for \\'hget\\' command');\n    common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'one', 'two'])\n        .then((response2) => {\n        chai_1.expect(response2).to.equal('ReplyError: ERR wrong number of arguments for \\'hget\\' command');\n        common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'one'])\n            .then((response3) => {\n            chai_1.expect(response3).to.equal(null);\n            done();\n        });\n    });\n});",
              "err": {},
              "uuid": "213c9141-3b26-4c8d-ad9c-3d6ceada453c",
              "parentUUID": "a3cfa0d5-6c4a-4728-9dc5-496530835ace",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a value after it has be set",
              "fullTitle": "hget command test should get a value after it has be set",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['hset', 'test', 'one', 'two'])\n    .then(() => {\n    common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'one'])\n        .then((response) => {\n        chai_1.expect(response).to.equal('two');\n        done();\n    });\n});",
              "err": {},
              "uuid": "f8b0875a-f699-454d-a677-46b6effd638c",
              "parentUUID": "a3cfa0d5-6c4a-4728-9dc5-496530835ace",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return nil string when the key exists but the field does not",
              "fullTitle": "hget command test should return nil string when the key exists but the field does not",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['hget', 'test', 'two'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(null);\n    done();\n});",
              "err": {},
              "uuid": "1d4d3e2d-24ec-4e9c-8d9f-f688a7454c8d",
              "parentUUID": "a3cfa0d5-6c4a-4728-9dc5-496530835ace",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "213c9141-3b26-4c8d-ad9c-3d6ceada453c",
            "f8b0875a-f699-454d-a677-46b6effd638c",
            "1d4d3e2d-24ec-4e9c-8d9f-f688a7454c8d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "277feb06-868f-4c67-9c24-ac19ad7211b1",
          "title": "hset command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/hash/hset-command.test.ts",
          "file": "/test/resp/command/hash/hset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "hset command test \"before all\" hook",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(new net.Socket(), ['flushall']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "7cddeae7-f20a-4a07-8148-8bc26688c10b",
              "parentUUID": "277feb06-868f-4c67-9c24-ac19ad7211b1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "hset command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "b31ada7e-650d-4b4c-bb15-467ce7eb8264",
              "parentUUID": "277feb06-868f-4c67-9c24-ac19ad7211b1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "hset command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "2ebda395-053a-47a1-b836-1053eea35e37",
              "parentUUID": "277feb06-868f-4c67-9c24-ac19ad7211b1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "hset command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "dd1e6229-6781-4719-9dc1-9361099ecb27",
              "parentUUID": "277feb06-868f-4c67-9c24-ac19ad7211b1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require a minimum of 3 parameters",
              "fullTitle": "hset command test should require a minimum of 3 parameters",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `KEY${new Date().getTime()}`;\n        chai_1.expect(uniqueKey).not.to.equal(lastId);\n        lastId = uniqueKey;\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey]);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for \\'hset\\' command/i);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one']);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for \\'hm?set\\' command/i);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'two']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "201e528c-0bd7-4798-9c51-34923833100d",
              "parentUUID": "277feb06-868f-4c67-9c24-ac19ad7211b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only accept an odd number of parameters",
              "fullTitle": "hset command test should only accept an odd number of parameters",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `newKey${new Date().getTime()}`;\n        chai_1.expect(uniqueKey).not.to.equal(lastId);\n        lastId = uniqueKey;\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one2', 'two', 'fail']);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for hm?set/i);\n    })",
              "err": {},
              "uuid": "f7c65bf9-b12d-48be-8380-54c9abc08efe",
              "parentUUID": "277feb06-868f-4c67-9c24-ac19ad7211b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should only report added fields",
              "fullTitle": "hset command test should only report added fields",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `key3${new Date().getTime()}`;\n        chai_1.expect(uniqueKey).not.to.equal(lastId);\n        lastId = uniqueKey;\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'six']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'anothervalue']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['hget', uniqueKey, 'one']);\n        chai_1.expect(response).to.equal('anothervalue');\n    })",
              "err": {},
              "uuid": "118fa7f3-555e-4a0e-9704-3156970e653b",
              "parentUUID": "277feb06-868f-4c67-9c24-ac19ad7211b1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "201e528c-0bd7-4798-9c51-34923833100d",
            "f7c65bf9-b12d-48be-8380-54c9abc08efe",
            "118fa7f3-555e-4a0e-9704-3156970e653b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "571bcbb8-ca03-48b4-8caf-93f230f015a8",
          "title": "del-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/del-command.test.ts",
          "file": "/test/resp/command/key/del-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "del-command test \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "28cb41b5-f8a8-4eab-a410-96adfb9fa327",
              "parentUUID": "571bcbb8-ca03-48b4-8caf-93f230f015a8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "del-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "f9b647ef-905b-42c4-94c0-a7e5b4f69ce6",
              "parentUUID": "571bcbb8-ca03-48b4-8caf-93f230f015a8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "del-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "cd9dfff5-d379-45cb-a1f2-9bfeff1f28bf",
              "parentUUID": "571bcbb8-ca03-48b4-8caf-93f230f015a8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "del-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "0b7dc23f-86eb-4028-8eca-3b3aeb2a59a4",
              "parentUUID": "571bcbb8-ca03-48b4-8caf-93f230f015a8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when called with no keys present",
              "fullTitle": "del-command test should report ZERO when called with no keys present",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['del', 'key1', 'key2', 'key3'])\n    .then((response) => {\n    chai_1.expect(response).to.be.a('number');\n    chai_1.expect(response).to.equal(0);\n    done();\n});",
              "err": {},
              "uuid": "07ea4498-c70d-4ff7-97c5-1fecb5ac1255",
              "parentUUID": "571bcbb8-ca03-48b4-8caf-93f230f015a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report the number of keys actually removed",
              "fullTitle": "del-command test should report the number of keys actually removed",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const client = new net.Socket();\ncommon_test_1.sendCommand(client, ['set', 'key1', 'data'])\n    .then(() => {\n    common_test_1.sendCommand(client, ['set', 'key2', 'data'])\n        .then(() => {\n        common_test_1.sendCommand(client, ['set', 'key3', 'data'])\n            .then(() => {\n            common_test_1.sendCommand(client, ['del', 'key1', 'key3'])\n                .then((response) => {\n                chai_1.expect(response).to.equal(2);\n                done();\n            });\n        });\n    });\n});",
              "err": {},
              "uuid": "512144f0-b5d4-44c3-9675-0ef278056d60",
              "parentUUID": "571bcbb8-ca03-48b4-8caf-93f230f015a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have retained key2 from the previous test",
              "fullTitle": "del-command test should have retained key2 from the previous test",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['del', 'key2'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n    done();\n});",
              "err": {},
              "uuid": "0af065ee-37fd-44b2-9c06-724293b2a541",
              "parentUUID": "571bcbb8-ca03-48b4-8caf-93f230f015a8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "07ea4498-c70d-4ff7-97c5-1fecb5ac1255",
            "512144f0-b5d4-44c3-9675-0ef278056d60",
            "0af065ee-37fd-44b2-9c06-724293b2a541"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f222c6d3-52ee-42a4-8f84-27f6163d8933",
          "title": "exists-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/exists-command.test.ts",
          "file": "/test/resp/command/key/exists-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "exists-command test \"before all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a millisecond TTL to validate exists respects TTL\n    common_test_1.sendCommand(new net.Socket(), ['set', 'ttlkey', 'value', 'PX', '3'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
              "uuid": "626e92dc-dafb-41b6-91d4-b3076eb0be05",
              "parentUUID": "f222c6d3-52ee-42a4-8f84-27f6163d8933",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "exists-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "2ce790db-0547-4a6a-b03c-a521887e1725",
              "parentUUID": "f222c6d3-52ee-42a4-8f84-27f6163d8933",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "exists-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "5a84c85b-43f7-46ef-8c54-e3af700c1d4d",
              "parentUUID": "f222c6d3-52ee-42a4-8f84-27f6163d8933",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "exists-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "23955618-02d2-41a1-b282-eac2588bdd41",
              "parentUUID": "f222c6d3-52ee-42a4-8f84-27f6163d8933",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when none of the specified keys exist",
              "fullTitle": "exists-command test should report ZERO when none of the specified keys exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['exists', 'key1', 'key2', 'key3'])\n    .then((response) => {\n    chai_1.expect(response).to.be.a('number');\n    chai_1.expect(response).to.equal(0);\n    done();\n});",
              "err": {},
              "uuid": "7f12ce7b-bb78-45a3-afd1-148ccb1a6563",
              "parentUUID": "f222c6d3-52ee-42a4-8f84-27f6163d8933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require at least ONE parameter",
              "fullTitle": "exists-command test should require at least ONE parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['exists'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'exists\\' command');\n    done();\n});",
              "err": {},
              "uuid": "34d8f4c6-3baa-4a02-b047-c42746a31c0c",
              "parentUUID": "f222c6d3-52ee-42a4-8f84-27f6163d8933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report GREATER THAN ZERO when checking for the same existing key multiple times",
              "fullTitle": "exists-command test should report GREATER THAN ZERO when checking for the same existing key multiple times",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['set', 'key', 'value'])\n    .then(() => {\n    common_test_1.sendCommand(new net.Socket(), ['exists', 'key', 'key', 'unknownkey', 'another', 'another'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(2);\n        done();\n    });\n});",
              "err": {},
              "uuid": "4a285014-8244-4286-b7bf-b2a329d5db62",
              "parentUUID": "f222c6d3-52ee-42a4-8f84-27f6163d8933",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect the TTL value on a key",
              "fullTitle": "exists-command test should respect the TTL value on a key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(new net.Socket(), ['exists', 'ttlkey'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(0);\n    done();\n});",
              "err": {},
              "uuid": "3d90c94a-0477-45cb-9d9c-5a355164f752",
              "parentUUID": "f222c6d3-52ee-42a4-8f84-27f6163d8933",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7f12ce7b-bb78-45a3-afd1-148ccb1a6563",
            "34d8f4c6-3baa-4a02-b047-c42746a31c0c",
            "4a285014-8244-4286-b7bf-b2a329d5db62",
            "3d90c94a-0477-45cb-9d9c-5a355164f752"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "59563505-29ba-4aa6-883a-b53fc2dd913b",
          "title": "expire-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/expire-command.test.ts",
          "file": "/test/resp/command/key/expire-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "expire-command test \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "06eb07a6-b870-4614-ab19-025782877730",
              "parentUUID": "59563505-29ba-4aa6-883a-b53fc2dd913b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "expire-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "3991b870-f999-4e46-97cf-26a5331019e1",
              "parentUUID": "59563505-29ba-4aa6-883a-b53fc2dd913b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "expire-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "098bb742-db4c-4bf0-bd08-a941faf8d83e",
              "parentUUID": "59563505-29ba-4aa6-883a-b53fc2dd913b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "expire-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "fc3e9024-317a-4a46-91eb-0612a4d7f524",
              "parentUUID": "59563505-29ba-4aa6-883a-b53fc2dd913b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when expire called on non-existent key",
              "fullTitle": "expire-command test should report ZERO when expire called on non-existent key",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['expire', 'no-key', '1000']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "816a8c76-e084-400b-9c3b-46ed4b174bc0",
              "parentUUID": "59563505-29ba-4aa6-883a-b53fc2dd913b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require an integer value for the ttl parameter",
              "fullTitle": "expire-command test should require an integer value for the ttl parameter",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'mykey', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', '10.2']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', 'ten']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "e6542ec3-eacb-4432-9d1a-9564fe707d56",
              "parentUUID": "59563505-29ba-4aa6-883a-b53fc2dd913b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set the requested ttl on a key",
              "fullTitle": "expire-command test should set the requested ttl on a key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', '10000']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "2eda7e06-c404-408a-8e8a-11ccb06dafb0",
              "parentUUID": "59563505-29ba-4aa6-883a-b53fc2dd913b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should expire a key when we set a negative ttl",
              "fullTitle": "expire-command test should expire a key when we set a negative ttl",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Note that this is not consistent with documentation\n        response = yield common_test_1.sendCommand(client, ['expire', 'mykey', '-1']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "edfc9424-de57-4438-b974-e0048b9b6643",
              "parentUUID": "59563505-29ba-4aa6-883a-b53fc2dd913b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should work with ZKEYs (and other key types - as yet untested)",
              "fullTitle": "expire-command test should work with ZKEYs (and other key types - as yet untested)",
              "timedOut": false,
              "duration": 2011,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['zadd', 'zkey', '1', 'member'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n    common_test_1.sendCommand(client, ['exists', 'zkey'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(1);\n        common_test_1.sendCommand(client, ['expire', 'zkey', '1'])\n            .then((response) => {\n            chai_1.expect(response).to.equal(1);\n            setTimeout(() => {\n                common_test_1.sendCommand(client, ['exists', 'zkey'])\n                    .then((response) => {\n                    chai_1.expect(response).to.equal(0, `Unexpected response ${response} should be ZERO`);\n                    done();\n                });\n            }, 2000);\n        });\n    });\n});",
              "err": {},
              "uuid": "1426e1cf-ff31-44f0-904c-8c0c8d40d4db",
              "parentUUID": "59563505-29ba-4aa6-883a-b53fc2dd913b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should survive the RENAME operation",
              "fullTitle": "expire-command test should survive the RENAME operation",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'rename-test', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['expire', 'rename-test', '1']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rename', 'rename-test', 'new-name']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'new-name']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'rename-test']);\n        chai_1.expect(response).to.equal(0);\n        yield setTimeout(() => __awaiter(void 0, void 0, void 0, function* () {\n            response = yield common_test_1.sendCommand(client, ['exists', 'new-name']);\n            chai_1.expect(response).to.equal(0);\n        }), 2000);\n    })",
              "err": {},
              "uuid": "5fa88503-c038-4a40-9354-7f1b5ddace37",
              "parentUUID": "59563505-29ba-4aa6-883a-b53fc2dd913b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "816a8c76-e084-400b-9c3b-46ed4b174bc0",
            "e6542ec3-eacb-4432-9d1a-9564fe707d56",
            "2eda7e06-c404-408a-8e8a-11ccb06dafb0",
            "edfc9424-de57-4438-b974-e0048b9b6643",
            "1426e1cf-ff31-44f0-904c-8c0c8d40d4db",
            "5fa88503-c038-4a40-9354-7f1b5ddace37"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2028,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9d376f02-23e3-4026-8176-b1f73ddf1731",
          "title": "keys-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/keys-command.test.ts",
          "file": "/test/resp/command/key/keys-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "keys-command test \"before all\" hook",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "747e5522-080d-4788-858f-c09e7a68b1b9",
              "parentUUID": "9d376f02-23e3-4026-8176-b1f73ddf1731",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "keys-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "69bea58b-6b60-4e54-8909-5f9dfc83e2a4",
              "parentUUID": "9d376f02-23e3-4026-8176-b1f73ddf1731",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "keys-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "12f8c3ec-fa3e-4a1c-870d-22bc2a59e974",
              "parentUUID": "9d376f02-23e3-4026-8176-b1f73ddf1731",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "keys-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "e33e26e4-c636-4682-acce-d4e163a13405",
              "parentUUID": "9d376f02-23e3-4026-8176-b1f73ddf1731",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should retrieve keys by glob patterns",
              "fullTitle": "keys-command test should retrieve keys by glob patterns",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mset', 'firstname', 'Jack', 'lastname', 'Stuntman', 'age', '35']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['keys', '*name*']);\n        chai_1.expect(response.sort()).to.eql(['firstname', 'lastname']);\n        response = yield common_test_1.sendCommand(client, ['keys', 'a??']);\n        chai_1.expect(response).to.eql(['age']);\n        response = yield common_test_1.sendCommand(client, ['keys', '*']);\n        // NOTE: There does not appear to be a guarantee of order\n        chai_1.expect(response.sort()).to.eql(['age', 'firstname', 'lastname']);\n    })",
              "err": {},
              "uuid": "43ddd3c5-6224-4116-a751-362b23cebef3",
              "parentUUID": "9d376f02-23e3-4026-8176-b1f73ddf1731",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "43ddd3c5-6224-4116-a751-362b23cebef3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a241dabd-360b-4cd6-bcef-3885369e74e4",
          "title": "move-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/move-command.test.ts",
          "file": "/test/resp/command/key/move-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "move-command test \"before all\" hook",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "5bfe79ba-f363-4f74-9c6b-c20862c83cfa",
              "parentUUID": "a241dabd-360b-4cd6-bcef-3885369e74e4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "move-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "2a47cbce-a746-44f8-af88-f50d40ec7204",
              "parentUUID": "a241dabd-360b-4cd6-bcef-3885369e74e4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "move-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "464bf186-548f-4b6e-80dc-bc9665fa0456",
              "parentUUID": "a241dabd-360b-4cd6-bcef-3885369e74e4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "move-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "8e0f5b28-0176-4982-adb7-3c84207ec52c",
              "parentUUID": "a241dabd-360b-4cd6-bcef-3885369e74e4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow target and source db to be the same",
              "fullTitle": "move-command test should not allow target and source db to be the same",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Even if source key does not exist\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, '0']);\n        chai_1.expect(response).to.equal('ReplyError: ERR source and destination objects are the same');\n    })",
              "err": {},
              "uuid": "5da20d85-70bb-431b-9e2f-958c79ae1bc3",
              "parentUUID": "a241dabd-360b-4cd6-bcef-3885369e74e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should also report ZERO when the target key already exists",
              "fullTitle": "move-command test should also report ZERO when the target key already exists",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'database ZERO']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, '0']);\n        chai_1.expect(response).to.equal('ReplyError: ERR source and destination objects are the same');\n    })",
              "err": {},
              "uuid": "105b475a-d346-4811-8380-5217b06270e8",
              "parentUUID": "a241dabd-360b-4cd6-bcef-3885369e74e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should move a key from one database to another otherwise",
              "fullTitle": "move-command test should move a key from one database to another otherwise",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, '14']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['select', '14']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "87be260c-6ae1-42bc-ac5f-37b5f364cc8b",
              "parentUUID": "a241dabd-360b-4cd6-bcef-3885369e74e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report error when target database is invalid and key exists",
              "fullTitle": "move-command test should report error when target database is invalid and key exists",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Database 14 is already selected\n        response = yield common_test_1.sendCommand(client, ['move', uniqueKey, 'InvalidDb']);\n        chai_1.expect(response).to.equal('ReplyError: ERR index out of range');\n    })",
              "err": {},
              "uuid": "6a835d2a-9ab5-48b3-8e97-1aea5c0c976b",
              "parentUUID": "a241dabd-360b-4cd6-bcef-3885369e74e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the key does not exist in the current db",
              "fullTitle": "move-command test should return 0 when the key does not exist in the current db",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushdb']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['dbsize']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['move', 'nokey', '3']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "1c87e770-cfa8-4488-b549-63192be81208",
              "parentUUID": "a241dabd-360b-4cd6-bcef-3885369e74e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the key exists in both source and target db",
              "fullTitle": "move-command test should return 0 when the key exists in both source and target db",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['select', '0']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['set', 'nokey', 'db0']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'nokey']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['select', '1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'nokey']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['set', 'nokey', 'db1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['move', 'nokey', '0']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['get', 'nokey']);\n        chai_1.expect(response).to.equal('db1');\n        response = yield common_test_1.sendCommand(client, ['select', '0']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'nokey']);\n        chai_1.expect(response).to.equal('db0');\n    })",
              "err": {},
              "uuid": "6df80c7f-6dc7-4ffc-b15e-3d830255e318",
              "parentUUID": "a241dabd-360b-4cd6-bcef-3885369e74e4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5da20d85-70bb-431b-9e2f-958c79ae1bc3",
            "105b475a-d346-4811-8380-5217b06270e8",
            "87be260c-6ae1-42bc-ac5f-37b5f364cc8b",
            "6a835d2a-9ab5-48b3-8e97-1aea5c0c976b",
            "1c87e770-cfa8-4488-b549-63192be81208",
            "6df80c7f-6dc7-4ffc-b15e-3d830255e318"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "eeba1346-06f5-4531-b4cf-18c044ac37d7",
          "title": "pexpire-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/pexpire-command.test.ts",
          "file": "/test/resp/command/key/pexpire-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "pexpire-command test \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "44d3294d-9979-4dd6-9a47-4d7557d62ba2",
              "parentUUID": "eeba1346-06f5-4531-b4cf-18c044ac37d7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "pexpire-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "6a6b2184-a2e9-474e-bd70-4ff9c00c5806",
              "parentUUID": "eeba1346-06f5-4531-b4cf-18c044ac37d7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "pexpire-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "2b1e2f2d-d511-4e43-9c84-3066021ab66a",
              "parentUUID": "eeba1346-06f5-4531-b4cf-18c044ac37d7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "pexpire-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "8d6f534a-0e7e-43b5-a520-af36b1a90930",
              "parentUUID": "eeba1346-06f5-4531-b4cf-18c044ac37d7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ZERO when expire called on non-existent key",
              "fullTitle": "pexpire-command test should report ZERO when expire called on non-existent key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['pexpire', 'no-key', '1000']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "2b575197-ed8b-4fe7-bbed-b6eddb87186b",
              "parentUUID": "eeba1346-06f5-4531-b4cf-18c044ac37d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should require an integer value for the ttl parameter",
              "fullTitle": "pexpire-command test should require an integer value for the ttl parameter",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'mykey', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['pexpire', 'mykey', '10.2']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['pexpire', 'mykey', 'ten']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "8ed4ef50-e190-4cd5-87ac-ccb441bdb0a2",
              "parentUUID": "eeba1346-06f5-4531-b4cf-18c044ac37d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set the requested ttl on a key",
              "fullTitle": "pexpire-command test should set the requested ttl on a key",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['pexpire', 'mykey', '10000']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "a908c66e-6e00-428e-9b68-933c7c8c4c67",
              "parentUUID": "eeba1346-06f5-4531-b4cf-18c044ac37d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should expire a key when we set a negative ttl",
              "fullTitle": "pexpire-command test should expire a key when we set a negative ttl",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Note that this is not consistent with documentation\n        response = yield common_test_1.sendCommand(client, ['pexpire', 'mykey', '-1']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "d687c3d7-a9bb-4af3-84c3-eb842a108e1a",
              "parentUUID": "eeba1346-06f5-4531-b4cf-18c044ac37d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should work with ZKEYs (and other key types - as yet untested)",
              "fullTitle": "pexpire-command test should work with ZKEYs (and other key types - as yet untested)",
              "timedOut": false,
              "duration": 2005,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['zadd', 'zkey', '1', 'member'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n    common_test_1.sendCommand(client, ['exists', 'zkey'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(1);\n        common_test_1.sendCommand(client, ['pexpire', 'zkey', '1'])\n            .then((response) => {\n            chai_1.expect(response).to.equal(1);\n            setTimeout(() => {\n                common_test_1.sendCommand(client, ['exists', 'zkey'])\n                    .then((response) => {\n                    chai_1.expect(response).to.equal(0, `Unexpected response ${response} should be ZERO`);\n                    done();\n                });\n            }, 2000);\n        });\n    });\n});",
              "err": {},
              "uuid": "7dfb6c45-1c15-435a-9916-9650fea88f59",
              "parentUUID": "eeba1346-06f5-4531-b4cf-18c044ac37d7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should survive the RENAME operation",
              "fullTitle": "pexpire-command test should survive the RENAME operation",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'rename-test', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['pexpire', 'rename-test', '1000']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rename', 'rename-test', 'new-name']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'new-name']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'rename-test']);\n        chai_1.expect(response).to.equal(0);\n        yield setTimeout(() => __awaiter(void 0, void 0, void 0, function* () {\n            response = yield common_test_1.sendCommand(client, ['exists', 'new-name']);\n            chai_1.expect(response).to.equal(0);\n        }), 2000);\n    })",
              "err": {},
              "uuid": "87ab88ef-3035-454a-a3c2-777603f45ea1",
              "parentUUID": "eeba1346-06f5-4531-b4cf-18c044ac37d7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2b575197-ed8b-4fe7-bbed-b6eddb87186b",
            "8ed4ef50-e190-4cd5-87ac-ccb441bdb0a2",
            "a908c66e-6e00-428e-9b68-933c7c8c4c67",
            "d687c3d7-a9bb-4af3-84c3-eb842a108e1a",
            "7dfb6c45-1c15-435a-9916-9650fea88f59",
            "87ab88ef-3035-454a-a3c2-777603f45ea1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2021,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ddf587af-9dee-4d9b-ba66-73916d4ebbbf",
          "title": "randomkey-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/randomkey-command.test.ts",
          "file": "/test/resp/command/key/randomkey-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "randomkey-command test \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "b13ddf24-af4f-41f7-9462-6d318b744356",
              "parentUUID": "ddf587af-9dee-4d9b-ba66-73916d4ebbbf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "randomkey-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "042a440c-50f6-4f4e-b4a6-32f8715ed797",
              "parentUUID": "ddf587af-9dee-4d9b-ba66-73916d4ebbbf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "randomkey-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "38bb7d19-e27b-49e0-9359-aa377a56c0df",
              "parentUUID": "ddf587af-9dee-4d9b-ba66-73916d4ebbbf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "randomkey-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "bf4d02e3-1197-4918-b389-2d8b7ef25160",
              "parentUUID": "ddf587af-9dee-4d9b-ba66-73916d4ebbbf",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when the database is empty",
              "fullTitle": "randomkey-command test should return NIL when the database is empty",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushdb']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['randomkey']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "cbda6d0e-87d2-447d-8822-8296798e8ffd",
              "parentUUID": "ddf587af-9dee-4d9b-ba66-73916d4ebbbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return list, zkey, hash, and string keys without preference",
              "fullTitle": "randomkey-command test should return list, zkey, hash, and string keys without preference",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const results = [];\n        response = yield common_test_1.sendCommand(client, ['hset', 'hash', 'field', 'value']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lpush', 'list', 'element']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'member']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['set', 'string', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        for (let i = 0; i < 15; i++) {\n            response = yield common_test_1.sendCommand(client, ['randomkey']);\n            chai_1.expect(response).to.be.a('string');\n            response = yield common_test_1.sendCommand(client, ['type', response]);\n            chai_1.expect(response).to.be.a('string');\n            if (results.indexOf(response) === -1) {\n                results.push(response);\n            }\n            if (results.length === 4) {\n                break;\n            }\n        }\n        chai_1.expect(results.length).to.be.greaterThan(1);\n    })",
              "err": {},
              "uuid": "8355be75-5178-48cc-81a1-3973f96f4783",
              "parentUUID": "ddf587af-9dee-4d9b-ba66-73916d4ebbbf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cbda6d0e-87d2-447d-8822-8296798e8ffd",
            "8355be75-5178-48cc-81a1-3973f96f4783"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6eefde5c-ba41-4ba5-a0f8-fa21e1b27656",
          "title": "rename-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/rename-command.test.ts",
          "file": "/test/resp/command/key/rename-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rename-command test \"before all\" hook",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "010d1c1d-b18a-44d9-8346-8cd537dc404c",
              "parentUUID": "6eefde5c-ba41-4ba5-a0f8-fa21e1b27656",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rename-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "108105f0-139e-4910-950b-ba7f7008b1a1",
              "parentUUID": "6eefde5c-ba41-4ba5-a0f8-fa21e1b27656",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rename-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "6db6efd5-edef-4968-ac47-7e46c686b27b",
              "parentUUID": "6eefde5c-ba41-4ba5-a0f8-fa21e1b27656",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rename-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "6a4a31a5-b293-437d-bcea-12ed3ec17730",
              "parentUUID": "6eefde5c-ba41-4ba5-a0f8-fa21e1b27656",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report an error when the key does not exist",
              "fullTitle": "rename-command test should report an error when the key does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rename', 'mykey', 'my-otherkey']);\n        chai_1.expect(response).to.equal('ReplyError: ERR no such key');\n    })",
              "err": {},
              "uuid": "8b32589a-741f-47f7-95db-0b731a36a477",
              "parentUUID": "6eefde5c-ba41-4ba5-a0f8-fa21e1b27656",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should rename a key",
              "fullTitle": "rename-command test should rename a key",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'mykey', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['rename', 'mykey', 'my-otherkey']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'mykey']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'my-otherkey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "8ccb4650-0c89-4f1e-9d38-84258b3a7974",
              "parentUUID": "6eefde5c-ba41-4ba5-a0f8-fa21e1b27656",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should overwrite an existing key without notice",
              "fullTitle": "rename-command test should overwrite an existing key without notice",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'myoriginalkey', 'something']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['rename', 'my-otherkey', 'myoriginalkey']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'myoriginalkey']);\n        chai_1.expect(response).to.equal('value');\n    })",
              "err": {},
              "uuid": "d8d6bd16-409e-4a2d-bb7e-ef1b99b26297",
              "parentUUID": "6eefde5c-ba41-4ba5-a0f8-fa21e1b27656",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8b32589a-741f-47f7-95db-0b731a36a477",
            "8ccb4650-0c89-4f1e-9d38-84258b3a7974",
            "d8d6bd16-409e-4a2d-bb7e-ef1b99b26297"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9eb6f325-d401-405c-97dc-0c827717f6ab",
          "title": "renamenx-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/renamenx-command.test.ts",
          "file": "/test/resp/command/key/renamenx-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "renamenx-command test \"before all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "0e6943fb-9a61-41dc-b2b9-b5824a53c501",
              "parentUUID": "9eb6f325-d401-405c-97dc-0c827717f6ab",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "renamenx-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "b37c1425-c325-4076-aee7-d9315a0d82ca",
              "parentUUID": "9eb6f325-d401-405c-97dc-0c827717f6ab",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "renamenx-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "765aa9ab-34fb-467b-9e04-d8768cf3ac1b",
              "parentUUID": "9eb6f325-d401-405c-97dc-0c827717f6ab",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "renamenx-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "ed613991-b77d-4a5c-ab87-ba2317c1c102",
              "parentUUID": "9eb6f325-d401-405c-97dc-0c827717f6ab",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report an error when the key does not exist",
              "fullTitle": "renamenx-command test should report an error when the key does not exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['renamenx', 'mykey', 'my-otherkey']);\n        chai_1.expect(response).to.equal('ReplyError: ERR no such key');\n    })",
              "err": {},
              "uuid": "46d0f0d3-be4a-40bb-a7f8-1d85bd53ea79",
              "parentUUID": "9eb6f325-d401-405c-97dc-0c827717f6ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when attempting renamenx with source = destination",
              "fullTitle": "renamenx-command test should return 0 when attempting renamenx with source = destination",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'key', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['renamenx', 'key', 'key']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'key']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "0ccfe47e-5e80-4128-be72-68b08c36f884",
              "parentUUID": "9eb6f325-d401-405c-97dc-0c827717f6ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should rename a key when requested",
              "fullTitle": "renamenx-command test should rename a key when requested",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['renamenx', 'key', 'newkey']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'key']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'newkey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "bfc0adc6-3c29-4199-a5fe-81b918755d9a",
              "parentUUID": "9eb6f325-d401-405c-97dc-0c827717f6ab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "46d0f0d3-be4a-40bb-a7f8-1d85bd53ea79",
            "0ccfe47e-5e80-4128-be72-68b08c36f884",
            "bfc0adc6-3c29-4199-a5fe-81b918755d9a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "bbb3f05c-c81d-4901-929f-186f1bd164d8",
          "title": "ttl-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/ttl-command.test.ts",
          "file": "/test/resp/command/key/ttl-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "ttl-command test \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a couple - second TTL to validate exists respects TTL\n    common_test_1.sendCommand(new net.Socket(), ['set', 'ttlkey', 'value', 'EX', '30'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
              "uuid": "402d1f76-55d1-499f-99a2-2a17f76b3864",
              "parentUUID": "bbb3f05c-c81d-4901-929f-186f1bd164d8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "ttl-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "8c391ff2-d018-4a75-8938-6a21ce22807a",
              "parentUUID": "bbb3f05c-c81d-4901-929f-186f1bd164d8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "ttl-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "d01adb98-da48-4927-ba0d-ab9f887652f1",
              "parentUUID": "bbb3f05c-c81d-4901-929f-186f1bd164d8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "ttl-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "7bd3ac57-d097-4846-8bc3-5952adc057bf",
              "parentUUID": "bbb3f05c-c81d-4901-929f-186f1bd164d8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report -2 when the key does not exist",
              "fullTitle": "ttl-command test should report -2 when the key does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ttl', 'nokey']);\n        chai_1.expect(response).to.equal(-2);\n    })",
              "err": {},
              "uuid": "8a120f6e-09d7-4269-8121-33457f34685b",
              "parentUUID": "bbb3f05c-c81d-4901-929f-186f1bd164d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return -1 when the key exists but does not have a ttl",
              "fullTitle": "ttl-command test should return -1 when the key exists but does not have a ttl",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'newkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['ttl', 'newkey']);\n        chai_1.expect(response).to.equal(-1);\n    })",
              "err": {},
              "uuid": "8bc46930-5e1d-456b-a48e-fe610f4faa9a",
              "parentUUID": "bbb3f05c-c81d-4901-929f-186f1bd164d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the current ttl in seconds when available",
              "fullTitle": "ttl-command test should return the current ttl in seconds when available",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ttl', 'ttlkey']);\n        chai_1.expect(response).to.be.greaterThan(0);\n        chai_1.expect(response).to.be.lessThan(31);\n    })",
              "err": {},
              "uuid": "dcfeba92-b219-444b-9a0f-44e098329929",
              "parentUUID": "bbb3f05c-c81d-4901-929f-186f1bd164d8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8a120f6e-09d7-4269-8121-33457f34685b",
            "8bc46930-5e1d-456b-a48e-fe610f4faa9a",
            "dcfeba92-b219-444b-9a0f-44e098329929"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "688f66a4-7dbf-4812-8489-80b2fea52cc7",
          "title": "type-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/key/type-command.test.ts",
          "file": "/test/resp/command/key/type-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "type-command test \"before all\" hook",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "d1fc2227-3719-4a32-9ae4-e709b4b54b14",
              "parentUUID": "688f66a4-7dbf-4812-8489-80b2fea52cc7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "type-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "edaef0f9-bdc9-490f-939e-25085bd9daf8",
              "parentUUID": "688f66a4-7dbf-4812-8489-80b2fea52cc7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "type-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "566fa1ff-c8b8-4f1c-ae5e-64f406951488",
              "parentUUID": "688f66a4-7dbf-4812-8489-80b2fea52cc7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "type-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "327c107d-df0c-4263-9514-e7b7e8710660",
              "parentUUID": "688f66a4-7dbf-4812-8489-80b2fea52cc7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report the type of key",
              "fullTitle": "type-command test should report the type of key",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['set', 'string-key', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['type', 'string-key']);\n        chai_1.expect(response).to.equal('string');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'list-key', 'test']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['type', 'list-key']);\n        chai_1.expect(response).to.equal('list');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'set-key', 'test']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['type', 'set-key']);\n        chai_1.expect(response).to.equal('set');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['type', 'zkey']);\n        chai_1.expect(response).to.equal('zset');\n        response = yield common_test_1.sendCommand(client, ['type', 'never']);\n        chai_1.expect(response).to.equal('none');\n    })",
              "err": {},
              "uuid": "a571d9f0-0622-4b70-93e5-59296e6508e5",
              "parentUUID": "688f66a4-7dbf-4812-8489-80b2fea52cc7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a571d9f0-0622-4b70-93e5-59296e6508e5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "67b7aa85-3394-4270-8265-ec8a691c67d6",
          "title": "blpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/blpop-command.test.ts",
          "file": "/test/resp/command/list/blpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "blpop-command test \"before all\" hook",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "a67b2999-d0e2-4516-ae55-f486917a0f1c",
              "parentUUID": "67b7aa85-3394-4270-8265-ec8a691c67d6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "blpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "c70dd4ec-51b7-468b-8ab7-b8aa0e1cb7b4",
              "parentUUID": "67b7aa85-3394-4270-8265-ec8a691c67d6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "blpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "da4bd034-31df-49f9-aad9-64d419dd6b50",
              "parentUUID": "67b7aa85-3394-4270-8265-ec8a691c67d6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "blpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "32dcf0ac-967e-4d9b-8732-3371968d4d45",
              "parentUUID": "67b7aa85-3394-4270-8265-ec8a691c67d6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when timeout > 0 and list does not exist",
              "fullTitle": "blpop-command test should return NIL when timeout > 0 and list does not exist",
              "timedOut": false,
              "duration": 1005,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['blpop', 'no-key', '1']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "8dac6699-22a3-4a18-bbd3-43a2b1b1bef3",
              "parentUUID": "67b7aa85-3394-4270-8265-ec8a691c67d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should wait for a list to exist and return the list name and value",
              "fullTitle": "blpop-command test should wait for a list to exist and return the list name and value",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['blpop', 'no-key', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['no-key', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'no-key', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "f17169e0-d377-4140-b819-a266aedf21c0",
              "parentUUID": "67b7aa85-3394-4270-8265-ec8a691c67d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the list name and HEAD value",
              "fullTitle": "blpop-command test should return the list name and HEAD value",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['blpop', 'no-key2', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['no-key2', 'first']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'no-key2', 'third', 'second', 'first'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n});",
              "err": {},
              "uuid": "f86cb7a3-ef7b-4a17-9385-5408ef68a182",
              "parentUUID": "67b7aa85-3394-4270-8265-ec8a691c67d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support blocking lpop against multiple lists in one call",
              "fullTitle": "blpop-command test should support blocking lpop against multiple lists in one call",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['blpop', 'list1', 'list2', 'list3', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['list2', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'list2', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "ff4cd63f-2efe-44f9-94ab-8a2e2f1274c6",
              "parentUUID": "67b7aa85-3394-4270-8265-ec8a691c67d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the pushd value when it already exists even if a timeout is set",
              "fullTitle": "blpop-command test should return the pushd value when it already exists even if a timeout is set",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueKey = `poplpush${new Date().getTime()}`;\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', uniqueKey, 'third', 'second', 'first'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n    common_test_1.sendCommand(client, ['blpop', uniqueKey, '0'])\n        .then((response) => {\n        chai_1.expect(response).to.eql([uniqueKey, 'first']);\n        done();\n    });\n});",
              "err": {},
              "uuid": "0f258855-a1b8-4b40-89a1-d0917a96893f",
              "parentUUID": "67b7aa85-3394-4270-8265-ec8a691c67d6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8dac6699-22a3-4a18-bbd3-43a2b1b1bef3",
            "f17169e0-d377-4140-b819-a266aedf21c0",
            "f86cb7a3-ef7b-4a17-9385-5408ef68a182",
            "ff4cd63f-2efe-44f9-94ab-8a2e2f1274c6",
            "0f258855-a1b8-4b40-89a1-d0917a96893f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1026,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "14853a76-ee6f-4b5a-b109-7f702636062d",
          "title": "brpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/brpop-command.test.ts",
          "file": "/test/resp/command/list/brpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "brpop-command test \"before all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "2151ab62-9714-404d-ad75-28cac4d7fc41",
              "parentUUID": "14853a76-ee6f-4b5a-b109-7f702636062d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "brpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "b922b0bc-12e5-4758-82cb-d1dec2bff297",
              "parentUUID": "14853a76-ee6f-4b5a-b109-7f702636062d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "brpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "eb812612-7a5b-4c08-9814-e36104ee294d",
              "parentUUID": "14853a76-ee6f-4b5a-b109-7f702636062d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "brpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "174e1b2c-f585-4214-90e6-cba0a705215d",
              "parentUUID": "14853a76-ee6f-4b5a-b109-7f702636062d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when timeout > 0 and list does not exist",
              "fullTitle": "brpop-command test should return NIL when timeout > 0 and list does not exist",
              "timedOut": false,
              "duration": 1004,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['brpop', 'no-key', '1']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "bdfb4bba-2b3b-4035-82c8-7cd5a50560bf",
              "parentUUID": "14853a76-ee6f-4b5a-b109-7f702636062d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should wait for a list to exist and return the list name and value",
              "fullTitle": "brpop-command test should wait for a list to exist and return the list name and value",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['brpop', 'no-key', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['no-key', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'no-key', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "651ba4d0-1f69-4b0f-8fc5-93880e473129",
              "parentUUID": "14853a76-ee6f-4b5a-b109-7f702636062d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the list name and TAIL value",
              "fullTitle": "brpop-command test should return the list name and TAIL value",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['flushall'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    common_test_1.sendCommand(client, ['brpop', 'no-key2', '0'])\n        .then((response) => {\n        chai_1.expect(response).to.eql(['no-key2', 'first']);\n        done();\n    });\n    common_test_1.sendCommand(new net.Socket(), ['rpush', 'no-key2', 'third', 'second', 'first'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(3);\n    });\n});",
              "err": {},
              "uuid": "fdb1e847-0a30-4d7c-8013-1569df68677a",
              "parentUUID": "14853a76-ee6f-4b5a-b109-7f702636062d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support blocking rpop against multiple lists in one call",
              "fullTitle": "brpop-command test should support blocking rpop against multiple lists in one call",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['brpop', 'list1', 'list2', 'list3', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.eql(['list3', 'THE NEW VALUE']);\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'list3', 'THE NEW VALUE'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(1);\n});",
              "err": {},
              "uuid": "78b65706-99b7-4175-a53d-0fc8811275b4",
              "parentUUID": "14853a76-ee6f-4b5a-b109-7f702636062d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the pushd value when it already exists even if a timeout is set",
              "fullTitle": "brpop-command test should return the pushd value when it already exists even if a timeout is set",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueKey = `poprpush${new Date().getTime()}`;\ncommon_test_1.sendCommand(new net.Socket(), ['rpush', uniqueKey, 'third', 'second', 'first'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n    common_test_1.sendCommand(client, ['brpop', uniqueKey, '0'])\n        .then((response) => {\n        chai_1.expect(response).to.eql([uniqueKey, 'first']);\n        done();\n    });\n});",
              "err": {},
              "uuid": "b135a8b4-f0e4-4c66-9a91-93dfb0889bb6",
              "parentUUID": "14853a76-ee6f-4b5a-b109-7f702636062d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bdfb4bba-2b3b-4035-82c8-7cd5a50560bf",
            "651ba4d0-1f69-4b0f-8fc5-93880e473129",
            "fdb1e847-0a30-4d7c-8013-1569df68677a",
            "78b65706-99b7-4175-a53d-0fc8811275b4",
            "b135a8b4-f0e4-4c66-9a91-93dfb0889bb6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1016,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "59f7ca6d-0718-41d6-ac21-545ad4f9457e",
          "title": "brpoplpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/brpoplpush-command.test.ts",
          "file": "/test/resp/command/list/brpoplpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "brpoplpush-command test \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "8314cd6d-031b-44e8-8fbf-0869051af0c9",
              "parentUUID": "59f7ca6d-0718-41d6-ac21-545ad4f9457e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "brpoplpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        sinon.createSandbox();\n        yield common_test_1.sendCommand(client, ['flushall']);\n        yield common_test_1.sendCommand(client, ['select', '0']);\n    })",
              "err": {},
              "uuid": "739f558e-7172-45b1-9a83-57f5cf38dc61",
              "parentUUID": "59f7ca6d-0718-41d6-ac21-545ad4f9457e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "brpoplpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "5d75d26d-723e-477c-a332-69f1b9fb3b87",
              "parentUUID": "59f7ca6d-0718-41d6-ac21-545ad4f9457e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "brpoplpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "cfed10c9-6997-4169-b816-5b9393da91c5",
              "parentUUID": "59f7ca6d-0718-41d6-ac21-545ad4f9457e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when destination does not exist and timeout expires",
              "fullTitle": "brpoplpush-command test should return NIL when destination does not exist and timeout expires",
              "timedOut": false,
              "duration": 2004,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['brpoplpush', 'src', 'dst', '2']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "2530e90d-6cfb-4254-b7a0-3e69954400b8",
              "parentUUID": "59f7ca6d-0718-41d6-ac21-545ad4f9457e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the poplpushed value when lpush is called",
              "fullTitle": "brpoplpush-command test should return the poplpushed value when lpush is called",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "common_test_1.sendCommand(client, ['brpoplpush', 'poplpushkey', 'poplpopkey', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('value1');\n    done();\n});\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', 'poplpushkey', 'value1', 'value2', 'value3'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n});",
              "err": {},
              "uuid": "98bc783c-5c63-4dfb-b225-c33723066dd3",
              "parentUUID": "59f7ca6d-0718-41d6-ac21-545ad4f9457e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the pushd value when it already exists even if a timeout is set",
              "fullTitle": "brpoplpush-command test should return the pushd value when it already exists even if a timeout is set",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueKey = `poplpush${new Date().getTime()}`;\ncommon_test_1.sendCommand(new net.Socket(), ['lpush', uniqueKey, 'value1', 'value2', 'value3'])\n    .then((response) => {\n    chai_1.expect(response).to.equal(3);\n    common_test_1.sendCommand(client, ['brpoplpush', uniqueKey, 'poplpopkey', '0'])\n        .then((response) => {\n        chai_1.expect(response).to.equal('value1');\n        done();\n    });\n});",
              "err": {},
              "uuid": "ef7bd960-c88d-4f24-be83-9f703f80b7b8",
              "parentUUID": "59f7ca6d-0718-41d6-ac21-545ad4f9457e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should wait indefinitely (28 days) for a value to be available",
              "fullTitle": "brpoplpush-command test should wait indefinitely (28 days) for a value to be available",
              "timedOut": false,
              "duration": 4003,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const startTime = process.hrtime.bigint();\ncommon_test_1.sendCommand(client, ['brpoplpush', 'newpoplpushkey', 'newpoplpopkey', '0'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('newvalue1');\n    const endTime = process.hrtime.bigint();\n    console.log(`Duration is ${Number(endTime) - Number(startTime)}`);\n    chai_1.expect(Number(endTime - startTime)).to.be.greaterThan(4000000000);\n    done();\n});\nsetTimeout(() => {\n    common_test_1.sendCommand(new net.Socket(), ['lpush', 'newpoplpushkey', 'newvalue1', 'newvalue2', 'newvalue3'])\n        .then((response) => {\n        chai_1.expect(response).to.equal(3);\n    });\n}, 4000);",
              "err": {},
              "uuid": "4227148c-46cb-4550-9cff-a9df8c1e21d9",
              "parentUUID": "59f7ca6d-0718-41d6-ac21-545ad4f9457e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2530e90d-6cfb-4254-b7a0-3e69954400b8",
            "98bc783c-5c63-4dfb-b225-c33723066dd3",
            "ef7bd960-c88d-4f24-be83-9f703f80b7b8",
            "4227148c-46cb-4550-9cff-a9df8c1e21d9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6014,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b504ff2b-866f-4f88-969f-c5f390eecbad",
          "title": "lindex-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lindex-command.test.ts",
          "file": "/test/resp/command/list/lindex-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lindex-command test \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "c87889df-147b-4eda-bcf0-3410c5678508",
              "parentUUID": "b504ff2b-866f-4f88-969f-c5f390eecbad",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lindex-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "b17cf7a5-48be-468a-8fc0-37ae60569cdf",
              "parentUUID": "b504ff2b-866f-4f88-969f-c5f390eecbad",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lindex-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "1987b121-314a-4fc4-a824-19688d7a6c8a",
              "parentUUID": "b504ff2b-866f-4f88-969f-c5f390eecbad",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lindex-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "e230da74-8aad-4f5f-ac1b-d1ee86c9781e",
              "parentUUID": "b504ff2b-866f-4f88-969f-c5f390eecbad",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when lindex called with invalid index on non-existent key",
              "fullTitle": "lindex-command test should report NIL when lindex called with invalid index on non-existent key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lindex', 'no-key', 'negative one thousand']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "9bea0c13-b9c3-4a45-965b-c6b245ec3071",
              "parentUUID": "b504ff2b-866f-4f88-969f-c5f390eecbad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report ERR when attempting to get lindex of non-list key",
              "fullTitle": "lindex-command test should report ERR when attempting to get lindex of non-list key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lindex', 'lkey', '0']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "8ee633a2-ebef-4f68-ac8b-b3fc18eb5274",
              "parentUUID": "b504ff2b-866f-4f88-969f-c5f390eecbad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the correct key at an index",
              "fullTitle": "lindex-command test should return the correct key at an index",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `lkey-${new Date().getTime()}`;\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '0']);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '1']);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-1']);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-100']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, 'two']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, 'a1', 'b2', 'c3']);\n        chai_1.expect(response).to.equal(6);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-6']);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '-7']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['lindex', uniqueKey, '100']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "a79c8e16-2f9f-42eb-8860-8016ce3e5843",
              "parentUUID": "b504ff2b-866f-4f88-969f-c5f390eecbad",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9bea0c13-b9c3-4a45-965b-c6b245ec3071",
            "8ee633a2-ebef-4f68-ac8b-b3fc18eb5274",
            "a79c8e16-2f9f-42eb-8860-8016ce3e5843"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8b6abc7e-4d52-4351-a110-d0bfaae6a261",
          "title": "llen-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/llen-command.test.ts",
          "file": "/test/resp/command/list/llen-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "llen-command test \"before all\" hook",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "8be0ca6c-756b-4386-8c90-d27b5e92f867",
              "parentUUID": "8b6abc7e-4d52-4351-a110-d0bfaae6a261",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "llen-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "cbdc59eb-61cb-42b6-9e1a-86f0f1f8245e",
              "parentUUID": "8b6abc7e-4d52-4351-a110-d0bfaae6a261",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "llen-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "9622578d-605b-4ea9-b541-b08bff91d260",
              "parentUUID": "8b6abc7e-4d52-4351-a110-d0bfaae6a261",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "llen-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "d74d3e2b-dd5e-4c6c-9893-167e470adcc7",
              "parentUUID": "8b6abc7e-4d52-4351-a110-d0bfaae6a261",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report 0 when llen called on non-existent key",
              "fullTitle": "llen-command test should report 0 when llen called on non-existent key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['llen', 'no-key']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "1adc7e4c-5ef9-4315-8a36-722db7c47712",
              "parentUUID": "8b6abc7e-4d52-4351-a110-d0bfaae6a261",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report WRONGTYPE when attempting to get llen of non-list key",
              "fullTitle": "llen-command test should report WRONGTYPE when attempting to get llen of non-list key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'lkey']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "6753402c-c8cd-45ff-86d0-43820cfe2460",
              "parentUUID": "8b6abc7e-4d52-4351-a110-d0bfaae6a261",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the correct list length",
              "fullTitle": "llen-command test should return the correct list length",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `lkey-${new Date().getTime()}`;\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['rpop', uniqueKey]);\n        chai_1.expect(response).to.equal(null);\n        // The list goes away when the last element is popped\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueKey]);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['rpush', uniqueKey, '-6']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['llen', uniqueKey]);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "f4d5b3dc-7dac-4a46-91fe-e0a328a8fb0d",
              "parentUUID": "8b6abc7e-4d52-4351-a110-d0bfaae6a261",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1adc7e4c-5ef9-4315-8a36-722db7c47712",
            "6753402c-c8cd-45ff-86d0-43820cfe2460",
            "f4d5b3dc-7dac-4a46-91fe-e0a328a8fb0d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4d959890-629f-48a0-9368-1ce266adc516",
          "title": "lpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lpop-command.test.ts",
          "file": "/test/resp/command/list/lpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lpop-command test \"before all\" hook",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "b6df795a-a904-4e35-b67f-4060086b2729",
              "parentUUID": "4d959890-629f-48a0-9368-1ce266adc516",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "fe00e524-4ff7-4855-a568-acdb261965f7",
              "parentUUID": "4d959890-629f-48a0-9368-1ce266adc516",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "4368fb49-e88e-494a-8a2a-3c9d824bb5f6",
              "parentUUID": "4d959890-629f-48a0-9368-1ce266adc516",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "fd6982b9-7b97-4010-b268-dc826a33cfdd",
              "parentUUID": "4d959890-629f-48a0-9368-1ce266adc516",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when lpop called on non-existent key",
              "fullTitle": "lpop-command test should report NIL when lpop called on non-existent key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lpop', 'no-key']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['exists', 'no-key']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "016038f0-6e41-42f9-b5a7-2c36f835f198",
              "parentUUID": "4d959890-629f-48a0-9368-1ce266adc516",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return values from the left side of a list",
              "fullTitle": "lpop-command test should return values from the left side of a list",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', testKey, 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('a');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('d');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal(null);\n        // The list goes away when the last element is removed\n        response = yield common_test_1.sendCommand(client, ['exists', testKey]);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "afa88259-ad24-47d8-a4c7-21e96e6d106e",
              "parentUUID": "4d959890-629f-48a0-9368-1ce266adc516",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "016038f0-6e41-42f9-b5a7-2c36f835f198",
            "afa88259-ad24-47d8-a4c7-21e96e6d106e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5a91c77b-062e-447a-a4e4-b1d73e346e6a",
          "title": "lpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lpush-command.test.ts",
          "file": "/test/resp/command/list/lpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lpush-command test \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "f74e0acd-7f74-47fc-83a5-234dde5fdd71",
              "parentUUID": "5a91c77b-062e-447a-a4e4-b1d73e346e6a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "19260342-76c5-4194-80df-472101a8d9a9",
              "parentUUID": "5a91c77b-062e-447a-a4e4-b1d73e346e6a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "5c492688-96d1-4e02-b0a8-d9bdff28dacc",
              "parentUUID": "5a91c77b-062e-447a-a4e4-b1d73e346e6a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "605b546a-9a2d-4788-92b6-30dcdcbba763",
              "parentUUID": "5a91c77b-062e-447a-a4e4-b1d73e346e6a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ERR when attempting to lpush to a non-list key",
              "fullTitle": "lpush-command test should report ERR when attempting to lpush to a non-list key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'lkey', '0']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "5c1d594e-1df5-4c1d-983b-dfef68cea8e7",
              "parentUUID": "5a91c77b-062e-447a-a4e4-b1d73e346e6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a list if it doesn't already exist",
              "fullTitle": "lpush-command test should create a list if it doesn't already exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exists', testKey]);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['lpush', testKey, 'a', 'b', 'c']);\n        // The list is now 'c', 'b', 'a'\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['exists', testKey]);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "9b234202-7be1-42bc-a79f-65501a82ac93",
              "parentUUID": "5a91c77b-062e-447a-a4e4-b1d73e346e6a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have created the list in a predicatble order",
              "fullTitle": "lpush-command test should have created the list in a predicatble order",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lindex', testKey, '1']);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['lpop', testKey]);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['llen', testKey]);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpop', testKey]);\n        chai_1.expect(response).to.equal('a');\n    })",
              "err": {},
              "uuid": "762b0f7c-829d-4bb5-81e6-f9255d37973b",
              "parentUUID": "5a91c77b-062e-447a-a4e4-b1d73e346e6a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5c1d594e-1df5-4c1d-983b-dfef68cea8e7",
            "9b234202-7be1-42bc-a79f-65501a82ac93",
            "762b0f7c-829d-4bb5-81e6-f9255d37973b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b83784c6-a8a0-45d2-ab66-856b8b7da5e1",
          "title": "lrange-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lrange-command.test.ts",
          "file": "/test/resp/command/list/lrange-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lrange-command test \"before all\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "754b5212-4924-4712-89ac-e1ce28eb2b69",
              "parentUUID": "b83784c6-a8a0-45d2-ab66-856b8b7da5e1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lrange-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "11eeb151-bd41-4a95-81a1-a94167550347",
              "parentUUID": "b83784c6-a8a0-45d2-ab66-856b8b7da5e1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lrange-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "f236df65-2484-4b65-a2cf-a8a94badee10",
              "parentUUID": "b83784c6-a8a0-45d2-ab66-856b8b7da5e1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lrange-command test \"after each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "bc7f5a6a-f76e-4721-a7d4-a4070f7599c8",
              "parentUUID": "b83784c6-a8a0-45d2-ab66-856b8b7da5e1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "return an empty list when the key does not exist",
              "fullTitle": "lrange-command test return an empty list when the key does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', '0', '100']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "1e5b4447-bcc8-4f34-9e63-2984ee50bbd9",
              "parentUUID": "b83784c6-a8a0-45d2-ab66-856b8b7da5e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report an error when start or stop index are invalid",
              "fullTitle": "lrange-command test should report an error when start or stop index are invalid",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', 'negative one', '-2']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', '0', 'negative two']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'no-key', '-1', '-100']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "82e6c704-9003-470b-b01e-94e2da006674",
              "parentUUID": "b83784c6-a8a0-45d2-ab66-856b8b7da5e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return predictable results",
              "fullTitle": "lrange-command test should return predictable results",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', 'newlist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'newlist', 'world']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'newlist', '0', '-1']);\n        chai_1.expect(response).to.eql(['hello', 'world']);\n    })",
              "err": {},
              "uuid": "49b7e42d-42dc-460f-ab2d-672d33bf5eb6",
              "parentUUID": "b83784c6-a8a0-45d2-ab66-856b8b7da5e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reproduce the results from the redis documentation",
              "fullTitle": "lrange-command test should reproduce the results from the redis documentation",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', 'doclist', 'one']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'doclist', 'two']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'doclist', 'three']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '0', '0']);\n        chai_1.expect(response).to.eql(['one']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '-3', '2']);\n        chai_1.expect(response).to.eql(['one', 'two', 'three']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '-100', '100']);\n        chai_1.expect(response).to.eql(['one', 'two', 'three']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'doclist', '5', '10']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "d33fd330-0aa3-4bf7-a8a0-860f23e9cfad",
              "parentUUID": "b83784c6-a8a0-45d2-ab66-856b8b7da5e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1e5b4447-bcc8-4f34-9e63-2984ee50bbd9",
            "82e6c704-9003-470b-b01e-94e2da006674",
            "49b7e42d-42dc-460f-ab2d-672d33bf5eb6",
            "d33fd330-0aa3-4bf7-a8a0-860f23e9cfad"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "78cd934c-de92-4cbc-b3dd-8e73f9abde49",
          "title": "lrem-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lrem-command.test.ts",
          "file": "/test/resp/command/list/lrem-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lrem-command test \"before all\" hook",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "05c8c25d-bfa2-40ca-bff3-a916b8d23ce4",
              "parentUUID": "78cd934c-de92-4cbc-b3dd-8e73f9abde49",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lrem-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "4a3ee134-fc50-4e4e-8b1b-ff6db1dc9ad1",
              "parentUUID": "78cd934c-de92-4cbc-b3dd-8e73f9abde49",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lrem-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "d05c5402-8d14-4bf8-b612-d9692a51245b",
              "parentUUID": "78cd934c-de92-4cbc-b3dd-8e73f9abde49",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lrem-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "7d6c9ee0-ff74-4989-8475-0e2add12e3af",
              "parentUUID": "78cd934c-de92-4cbc-b3dd-8e73f9abde49",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should NOT report 0 when lrem called with invalid non-existent key",
              "fullTitle": "lrem-command test should NOT report 0 when lrem called with invalid non-existent key",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'no-key', 'negative one thousand', 'test']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "1b06904e-1a91-47fe-86c4-9e6753ffa525",
              "parentUUID": "78cd934c-de92-4cbc-b3dd-8e73f9abde49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report ERR when lrem called against existing key with invalid count argument",
              "fullTitle": "lrem-command test should report ERR when lrem called against existing key with invalid count argument",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lpush', 'lrem', 'akey']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'lrem', 'negative one thousand', 'test']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "871a8d2b-4022-49ee-8b19-507265b09431",
              "parentUUID": "78cd934c-de92-4cbc-b3dd-8e73f9abde49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should report 0 when lrem called with valid arguments and non-existing element",
              "fullTitle": "lrem-command test should report 0 when lrem called with valid arguments and non-existing element",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'lrem', '0', 'does not exist']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "c8a75f6b-82ad-4e6e-ba8c-d69ae2f1f2ec",
              "parentUUID": "78cd934c-de92-4cbc-b3dd-8e73f9abde49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should use negative index counters",
              "fullTitle": "lrem-command test should use negative index counters",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'foo']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '-2', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '-1']);\n        chai_1.expect(response).to.eql(['hello', 'foo']);\n    })",
              "err": {},
              "uuid": "57c6198c-863c-4654-b04f-581c1b0970a8",
              "parentUUID": "78cd934c-de92-4cbc-b3dd-8e73f9abde49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a ZERO result when the key does not exist",
              "fullTitle": "lrem-command test should return a ZERO result when the key does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'otherlist', '1', 'test']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "c97d1883-4ec2-4d1d-a722-3445760750cd",
              "parentUUID": "78cd934c-de92-4cbc-b3dd-8e73f9abde49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove every matchin element when count is 0",
              "fullTitle": "lrem-command test should remove every matchin element when count is 0",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushdb']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'foo']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '0', 'hello']);\n        chai_1.expect(response).to.equal(3);\n    })",
              "err": {},
              "uuid": "1ca23b47-81e4-4f7f-99b4-7e3d1ed77e05",
              "parentUUID": "78cd934c-de92-4cbc-b3dd-8e73f9abde49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove the list when all elements are gone",
              "fullTitle": "lrem-command test should remove the list when all elements are gone",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '0', 'foo']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'mylist']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "79518b4b-e1ce-4c8b-b3cc-43b1561fba16",
              "parentUUID": "78cd934c-de92-4cbc-b3dd-8e73f9abde49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove only the number of requested elements when count > 0",
              "fullTitle": "lrem-command test should remove only the number of requested elements when count > 0",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'calibrate']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrem', 'mylist', '1', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '2']);\n        chai_1.expect(response).to.eql(['hello', 'calibrate', 'hello']);\n    })",
              "err": {},
              "uuid": "1c9ae487-6d76-45b1-a726-50be837401fd",
              "parentUUID": "78cd934c-de92-4cbc-b3dd-8e73f9abde49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should default to startIndex ZERO when it is less than ZERO",
              "fullTitle": "lrem-command test should default to startIndex ZERO when it is less than ZERO",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let i = 0; i < 10; i++) {\n            response = yield common_test_1.sendCommand(client, ['RPUSH', 'newlist', `${i}`]);\n            chai_1.expect(response).to.equal(i + 1);\n        }\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'newlist', '-100', '2']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'newlist']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'newlist', '0', '3']);\n        chai_1.expect(response).to.eql(['0', '1', '2']);\n    })",
              "err": {},
              "uuid": "41bbded4-40f0-4e01-aebe-152eb25f0281",
              "parentUUID": "78cd934c-de92-4cbc-b3dd-8e73f9abde49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove the list when start > end or start > llen",
              "fullTitle": "lrem-command test should remove the list when start > end or start > llen",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exists', 'newlist']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'newlist', '10', '2']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'newlist']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "12c1217e-9396-4fa0-b12c-2ea97c6e9988",
              "parentUUID": "78cd934c-de92-4cbc-b3dd-8e73f9abde49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should properly handle a negative endIndex",
              "fullTitle": "lrem-command test should properly handle a negative endIndex",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        for (let i = 0; i < 7; i++) {\n            response = yield common_test_1.sendCommand(client, ['RPUSH', 'neglist', `${i}`]);\n            chai_1.expect(response).to.equal(i + 1);\n        }\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'neglist', '-100', '-3']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'neglist', '0', '100']);\n        chai_1.expect(response).to.eql(['0', '1', '2', '3', '4']);\n    })",
              "err": {},
              "uuid": "bdd61d8d-897f-4aa4-982e-cdc78b550e45",
              "parentUUID": "78cd934c-de92-4cbc-b3dd-8e73f9abde49",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove the key when abs(endIndex) is > llen",
              "fullTitle": "lrem-command test should remove the key when abs(endIndex) is > llen",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'neglist', '-100', '-6']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['exists', 'neglist']);\n        chai_1.expect(response).to.eql(0);\n    })",
              "err": {},
              "uuid": "99435f1f-b096-4892-ac78-b2824c6483f5",
              "parentUUID": "78cd934c-de92-4cbc-b3dd-8e73f9abde49",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1b06904e-1a91-47fe-86c4-9e6753ffa525",
            "871a8d2b-4022-49ee-8b19-507265b09431",
            "c8a75f6b-82ad-4e6e-ba8c-d69ae2f1f2ec",
            "57c6198c-863c-4654-b04f-581c1b0970a8",
            "c97d1883-4ec2-4d1d-a722-3445760750cd",
            "1ca23b47-81e4-4f7f-99b4-7e3d1ed77e05",
            "79518b4b-e1ce-4c8b-b3cc-43b1561fba16",
            "1c9ae487-6d76-45b1-a726-50be837401fd",
            "41bbded4-40f0-4e01-aebe-152eb25f0281",
            "12c1217e-9396-4fa0-b12c-2ea97c6e9988",
            "bdd61d8d-897f-4aa4-982e-cdc78b550e45",
            "99435f1f-b096-4892-ac78-b2824c6483f5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 63,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "035c686f-0a15-44fe-88e8-d3dfcb1a9b15",
          "title": "lset-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/lset-command.test.ts",
          "file": "/test/resp/command/list/lset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "lset-command test \"before all\" hook",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "5f0ab906-c94b-4817-8b10-bc79891ec9da",
              "parentUUID": "035c686f-0a15-44fe-88e8-d3dfcb1a9b15",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "lset-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "633030ec-2a81-4265-a338-e5f966eefdaa",
              "parentUUID": "035c686f-0a15-44fe-88e8-d3dfcb1a9b15",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "lset-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "5a0b4e72-75e5-4b8d-88d9-e9177a0af0d4",
              "parentUUID": "035c686f-0a15-44fe-88e8-d3dfcb1a9b15",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "lset-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "dcc587d3-a152-4ced-8ce8-62706468f255",
              "parentUUID": "035c686f-0a15-44fe-88e8-d3dfcb1a9b15",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should fail when a key does not exist",
              "fullTitle": "lset-command test should fail when a key does not exist",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lset', 'no-key', 'negative one thousand', 'test']);\n        chai_1.expect(response).to.equal('ReplyError: ERR no such key');\n    })",
              "err": {},
              "uuid": "8b86892e-fc15-4c09-b82b-3d49dd8d8bc5",
              "parentUUID": "035c686f-0a15-44fe-88e8-d3dfcb1a9b15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should replace a valid index",
              "fullTitle": "lset-command test should replace a valid index",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', testkey, 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lset', testkey, '-1', 'z']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lrange', testkey, '0', '3']);\n        chai_1.expect(response).to.eql(['a', 'b', 'z']);\n    })",
              "err": {},
              "uuid": "b9c61c92-3298-4ece-8b34-15c52ced1660",
              "parentUUID": "035c686f-0a15-44fe-88e8-d3dfcb1a9b15",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should recognize invalid indexes",
              "fullTitle": "lset-command test should recognize invalid indexes",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['lset', testkey, 'invalid', '3']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "5d283f9d-e07a-4bec-a4c3-a19a0347c649",
              "parentUUID": "035c686f-0a15-44fe-88e8-d3dfcb1a9b15",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8b86892e-fc15-4c09-b82b-3d49dd8d8bc5",
            "b9c61c92-3298-4ece-8b34-15c52ced1660",
            "5d283f9d-e07a-4bec-a4c3-a19a0347c649"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "91715a63-0112-4d69-93ad-1819e8804059",
          "title": "ltrim-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/ltrim-command.test.ts",
          "file": "/test/resp/command/list/ltrim-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "ltrim-command test \"before all\" hook",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "98032c62-4382-48cf-9765-e82c2680bcb5",
              "parentUUID": "91715a63-0112-4d69-93ad-1819e8804059",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "ltrim-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "3a66f32f-7153-4303-a87a-31e0f80eb9e7",
              "parentUUID": "91715a63-0112-4d69-93ad-1819e8804059",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "ltrim-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "0367507d-a699-4233-86e7-196d0173d831",
              "parentUUID": "91715a63-0112-4d69-93ad-1819e8804059",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "ltrim-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "524cd3f6-2da6-4bd2-94dc-1606c6f749e5",
              "parentUUID": "91715a63-0112-4d69-93ad-1819e8804059",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report OK when the key does not exist",
              "fullTitle": "ltrim-command test should report OK when the key does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'no-key', '0', '100']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "ccb251dc-8a85-4e9a-945a-6e783d636e74",
              "parentUUID": "91715a63-0112-4d69-93ad-1819e8804059",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should trim a list to the requested size or less",
              "fullTitle": "ltrim-command test should trim a list to the requested size or less",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'calibrate']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['RPUSH', 'mylist', 'hello']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '3']);\n        chai_1.expect(response).to.eql(['hello', 'hello', 'calibrate', 'hello']);\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'mylist', '0', '100']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '3']);\n        chai_1.expect(response).to.eql(['hello', 'hello', 'calibrate', 'hello']);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'mylist', '1', '4']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '3']);\n        chai_1.expect(response).to.eql(['hello', 'calibrate', 'hello']);\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'mylist', '-2', '1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['llen', 'mylist']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'mylist', '0', '1']);\n        chai_1.expect(response).to.eql(['calibrate']);\n    })",
              "err": {},
              "uuid": "3868f444-f414-4a61-a6fe-48a2ea58b18a",
              "parentUUID": "91715a63-0112-4d69-93ad-1819e8804059",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reject an invalid start index",
              "fullTitle": "ltrim-command test should reject an invalid start index",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['ltrim', 'testlist', 'wrong', '10']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "b023e7ce-ef8d-47e7-b08f-9102dd88c860",
              "parentUUID": "91715a63-0112-4d69-93ad-1819e8804059",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ccb251dc-8a85-4e9a-945a-6e783d636e74",
            "3868f444-f414-4a61-a6fe-48a2ea58b18a",
            "b023e7ce-ef8d-47e7-b08f-9102dd88c860"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5c5fea62-ae86-4a90-87c8-95081f4d62bf",
          "title": "rpop-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/rpop-command.test.ts",
          "file": "/test/resp/command/list/rpop-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rpop-command test \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "0b337bd5-663a-4161-bdec-86a33910701f",
              "parentUUID": "5c5fea62-ae86-4a90-87c8-95081f4d62bf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rpop-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "3539ee98-e450-43e4-b592-4365c00e2fef",
              "parentUUID": "5c5fea62-ae86-4a90-87c8-95081f4d62bf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rpop-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "eb5f9b6a-d9df-47e9-860f-cc7573ec7d69",
              "parentUUID": "5c5fea62-ae86-4a90-87c8-95081f4d62bf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rpop-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "bacd95b4-4e1a-4971-bc0a-a01ded3de00e",
              "parentUUID": "5c5fea62-ae86-4a90-87c8-95081f4d62bf",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when rpop called on non-existent key",
              "fullTitle": "rpop-command test should report NIL when rpop called on non-existent key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpop', 'no-key']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['exists', 'no-key']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "97e67056-52e8-49be-a108-9424ac0b577e",
              "parentUUID": "5c5fea62-ae86-4a90-87c8-95081f4d62bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "97e67056-52e8-49be-a108-9424ac0b577e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ded064a5-7bbc-4079-b17d-b3ca43389fb2",
          "title": "rpoplpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/rpoplpush-command.test.ts",
          "file": "/test/resp/command/list/rpoplpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rpoplpush-command test \"before all\" hook",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "d31037e6-8943-4571-985c-d62fea1cd3eb",
              "parentUUID": "ded064a5-7bbc-4079-b17d-b3ca43389fb2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rpoplpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "0c5926d2-33fd-4e26-bf31-e9fd291e817c",
              "parentUUID": "ded064a5-7bbc-4079-b17d-b3ca43389fb2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rpoplpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "154f6927-eefa-464d-a409-034b7ac8d923",
              "parentUUID": "ded064a5-7bbc-4079-b17d-b3ca43389fb2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rpoplpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a7e77ab4-4044-48ce-acd9-54855b2b5f74",
              "parentUUID": "ded064a5-7bbc-4079-b17d-b3ca43389fb2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when destination does not exist",
              "fullTitle": "rpoplpush-command test should return NIL when destination does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpoplpush', 'src', 'dst']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "81e5435d-1975-4bb6-8bd7-e885bffae924",
              "parentUUID": "ded064a5-7bbc-4079-b17d-b3ca43389fb2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should rotate a list when src and dst are the same",
              "fullTitle": "rpoplpush-command test should rotate a list when src and dst are the same",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['rpush', 'src', 'a']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'src', 'b']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'src', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'src', '0', '3']);\n        chai_1.expect(response).to.eql(['a', 'b', 'c']);\n        response = yield common_test_1.sendCommand(client, ['rpoplpush', 'src', 'src']);\n        chai_1.expect(response).to.equal('c');\n        response = yield common_test_1.sendCommand(client, ['lrange', 'src', '0', '3']);\n        chai_1.expect(response).to.eql(['c', 'a', 'b']);\n    })",
              "err": {},
              "uuid": "2b6a325a-73eb-4064-9861-fb9fe5ec9724",
              "parentUUID": "ded064a5-7bbc-4079-b17d-b3ca43389fb2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create the target list if it does not exist",
              "fullTitle": "rpoplpush-command test should create the target list if it does not exist",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exists', 'dst']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['rpoplpush', 'src', 'dst']);\n        chai_1.expect(response).to.equal('b');\n        response = yield common_test_1.sendCommand(client, ['exists', 'dst']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'src', '0', '3']);\n        chai_1.expect(response).to.eql(['c', 'a']);\n        response = yield common_test_1.sendCommand(client, ['lrange', 'dst', '0', '3']);\n        chai_1.expect(response).to.eql(['b']);\n    })",
              "err": {},
              "uuid": "c2e77db6-4ec8-4c74-97ff-a5902b9caa9f",
              "parentUUID": "ded064a5-7bbc-4079-b17d-b3ca43389fb2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "81e5435d-1975-4bb6-8bd7-e885bffae924",
            "2b6a325a-73eb-4064-9861-fb9fe5ec9724",
            "c2e77db6-4ec8-4c74-97ff-a5902b9caa9f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "76535a22-414a-4bcb-8ae8-1b31ca08abbb",
          "title": "rpush-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/list/rpush-command.test.ts",
          "file": "/test/resp/command/list/rpush-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "rpush-command test \"before all\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "e8dc53bf-a58f-4de8-ab3f-644bf8746c18",
              "parentUUID": "76535a22-414a-4bcb-8ae8-1b31ca08abbb",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "rpush-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "9cea1a43-a7fa-47dd-bb71-d0efd6d1d3bc",
              "parentUUID": "76535a22-414a-4bcb-8ae8-1b31ca08abbb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "rpush-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "0fabfd29-f664-4b41-8db9-0f2d617cd099",
              "parentUUID": "76535a22-414a-4bcb-8ae8-1b31ca08abbb",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "rpush-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "cae1ee55-5c1b-4abd-8310-3815df673304",
              "parentUUID": "76535a22-414a-4bcb-8ae8-1b31ca08abbb",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ERR when attempting to rpush to a non-list key",
              "fullTitle": "rpush-command test should report ERR when attempting to rpush to a non-list key",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'lkey', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['rpush', 'lkey', '0']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "910e48a1-05f9-42fd-b9a2-10c920dcaa45",
              "parentUUID": "76535a22-414a-4bcb-8ae8-1b31ca08abbb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "910e48a1-05f9-42fd-b9a2-10c920dcaa45"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6919c442-62c0-46cc-8954-eece251ddc3c",
          "title": "multi command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/multi-command.test.ts",
          "file": "/test/resp/command/multi-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "multi command test \"before all\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "11209d56-5b5f-4422-8d88-5b38795dbbdb",
              "parentUUID": "6919c442-62c0-46cc-8954-eece251ddc3c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "multi command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "8a6c06a5-6d17-4921-be7b-715fa9de481e",
              "parentUUID": "6919c442-62c0-46cc-8954-eece251ddc3c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "multi command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "cb107a3b-0ee7-442c-92d8-d65e010d8937",
              "parentUUID": "6919c442-62c0-46cc-8954-eece251ddc3c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "multi command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "d33b6424-4083-44b5-b7c6-25e31c6ee79c",
              "parentUUID": "6919c442-62c0-46cc-8954-eece251ddc3c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should not allow nested MULTI invocations",
              "fullTitle": "multi command test should not allow nested MULTI invocations",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('ReplyError: ERR MULTI calls can not be nested');\n    })",
              "err": {},
              "uuid": "958a133b-d934-46dd-803d-daaf8ab00a5f",
              "parentUUID": "6919c442-62c0-46cc-8954-eece251ddc3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should respect the DISCARD command",
              "fullTitle": "multi command test should respect the DISCARD command",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['discard']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "9f5c6142-4ddf-475d-964b-70bf9c6da53b",
              "parentUUID": "6919c442-62c0-46cc-8954-eece251ddc3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow DISCARD without MULTI",
              "fullTitle": "multi command test should not allow DISCARD without MULTI",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['discard']);\n        chai_1.expect(response).to.equal('ReplyError: ERR DISCARD without MULTI');\n    })",
              "err": {},
              "uuid": "d5009a1b-6d0d-42f1-80f4-22d0ac4728de",
              "parentUUID": "6919c442-62c0-46cc-8954-eece251ddc3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should continue to validate commands after MULTI",
              "fullTitle": "multi command test should continue to validate commands after MULTI",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['unknown', 'command']);\n        chai_1.expect(response).to.equal('ReplyError: ERR unknown command `unknown`, with args beginning with: `command`, ', `${response}`);\n        response = yield common_test_1.sendCommand(client, ['lpush', 'test', 'one', 'two', 'three']);\n        chai_1.expect(response).to.equal('QUEUED');\n    })",
              "err": {},
              "uuid": "2cbaa48d-11cb-4c75-b881-d5280ce62503",
              "parentUUID": "6919c442-62c0-46cc-8954-eece251ddc3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should EXECABORT from a previous error",
              "fullTitle": "multi command test should EXECABORT from a previous error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exec']);\n        chai_1.expect(response).to.equal('ReplyError: EXECABORT Transaction discarded because of previous errors.');\n    })",
              "err": {},
              "uuid": "04879d92-8d23-47ed-9fd1-cb8afbc2456f",
              "parentUUID": "6919c442-62c0-46cc-8954-eece251ddc3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should queue a set of commands when there is no intervening error",
              "fullTitle": "multi command test should queue a set of commands when there is no intervening error",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'test', 'one', 'two', 'three']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['exec']);\n        chai_1.expect(response).to.eql([3]);\n    })",
              "err": {},
              "uuid": "4de976ca-09cb-4d23-8c4c-f99ed63a9ae4",
              "parentUUID": "6919c442-62c0-46cc-8954-eece251ddc3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should reset transaction state after executing commands",
              "fullTitle": "multi command test should reset transaction state after executing commands",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['discard']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "f4669bc8-741c-47a0-96b2-0562484bbb98",
              "parentUUID": "6919c442-62c0-46cc-8954-eece251ddc3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the results of multiple commands in the order provided",
              "fullTitle": "multi command test should return the results of multiple commands in the order provided",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['multi']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['brpoplpush', 'test', 'dest', '0']);\n        chai_1.expect(response).to.equal('QUEUED');\n        response = yield common_test_1.sendCommand(client, ['exec']);\n        chai_1.expect(response).to.eql(['three', 'two', 'one']);\n        response = yield common_test_1.sendCommand(client, ['exists', 'test']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['exists', 'dest']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "0bf72495-42bf-4d64-a0f7-edbe2801bd78",
              "parentUUID": "6919c442-62c0-46cc-8954-eece251ddc3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate the behavior of brpoplpush",
              "fullTitle": "multi command test should validate the behavior of brpoplpush",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['lpush', 'test', 'one', 'two', 'three']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('three');\n        response = yield common_test_1.sendCommand(client, ['lpop', 'test']);\n        chai_1.expect(response).to.equal('two');\n        response = yield common_test_1.sendCommand(client, ['brpoplpush', 'test', 'dest', '0']);\n        chai_1.expect(response).to.equal('one');\n    })",
              "err": {},
              "uuid": "6659b2dd-c0ca-4d6a-95ec-260be24066ca",
              "parentUUID": "6919c442-62c0-46cc-8954-eece251ddc3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when EXEC issued without MULTI",
              "fullTitle": "multi command test should fail when EXEC issued without MULTI",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['exec']);\n        chai_1.expect(response).to.equal('ReplyError: ERR EXEC without MULTI');\n    })",
              "err": {},
              "uuid": "8151c087-64b0-48e6-89ae-959dd726b566",
              "parentUUID": "6919c442-62c0-46cc-8954-eece251ddc3c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "958a133b-d934-46dd-803d-daaf8ab00a5f",
            "9f5c6142-4ddf-475d-964b-70bf9c6da53b",
            "d5009a1b-6d0d-42f1-80f4-22d0ac4728de",
            "2cbaa48d-11cb-4c75-b881-d5280ce62503",
            "04879d92-8d23-47ed-9fd1-cb8afbc2456f",
            "4de976ca-09cb-4d23-8c4c-f99ed63a9ae4",
            "f4669bc8-741c-47a0-96b2-0562484bbb98",
            "0bf72495-42bf-4d64-a0f7-edbe2801bd78",
            "6659b2dd-c0ca-4d6a-95ec-260be24066ca",
            "8151c087-64b0-48e6-89ae-959dd726b566"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 32,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
          "title": "script-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/script-command.test.ts",
          "file": "/test/resp/command/script-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "script-command test \"before all\" hook",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "5a26b274-f727-41a2-b603-75710e017d2e",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "script-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "8e51487e-ef7b-4efd-89ed-3efb7c357c52",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "script-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "6b79a16b-6b77-4d56-95d2-74138b712e02",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "script-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "5e07eeb2-0e4e-450f-bdc9-6e50075f2d5a",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should calcuclate the correct sha1 of a script and store the script",
              "fullTitle": "script-command test should calcuclate the correct sha1 of a script and store the script",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['script', 'exists', sha1]);\n        chai_1.expect(response).to.eql([0]);\n        // validate failure on unparseable script\n        response = yield common_test_1.sendCommand(client, ['script', 'load', code]);\n        chai_1.expect(response).to.match(/ReplyError: ERR .*/);\n        // validate success on parseable script\n        response = yield common_test_1.sendCommand(client, ['script', 'load', `${code}}`]);\n        chai_1.expect(response).to.equal(sha1);\n        // validate a script is persisted\n        response = yield common_test_1.sendCommand(client, ['script', 'exists', sha1]);\n        chai_1.expect(response).to.eql([1]);\n        // validate response to unknown sub command\n        response = yield common_test_1.sendCommand(client, ['script', 'test', sha1]);\n        chai_1.expect(response).to.equal('ReplyError: ERR Unknown subcommand or wrong number of arguments for \\'test\\'. Try SCRIPT HELP.');\n    })",
              "err": {},
              "uuid": "c9dabafe-1e2c-4b83-a9a6-1cadf69877ae",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should evaluate a loaded lua script using evalsha",
              "fullTitle": "script-command test should evaluate a loaded lua script using evalsha",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Validate that NOSCRIPT is triggered\n        response = yield common_test_1.sendCommand(client, ['evalsha', `${sha1}xx`, '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('ReplyError: NOSCRIPT No matching script. Please use EVAL.');\n        // Validate that param 1 cannot be negative\n        response = yield common_test_1.sendCommand(client, ['evalsha', sha1, '-2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('ReplyError: ERR Number of keys can\\'t be negative');\n        // Validate that param 1 cannot be text\n        response = yield common_test_1.sendCommand(client, ['evalsha', sha1, 'two', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "3894f806-b1db-4456-ae64-9ad7e6dcc31d",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should execute a simple script",
              "fullTitle": "script-command test should execute a simple script",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Validate that a simple script can be processed\n        response = yield common_test_1.sendCommand(client, ['EVAL', 'local val=\"Hello Compose\" return val', '0']);\n        chai_1.expect(response).to.equal('Hello Compose');\n    })",
              "err": {},
              "uuid": "298aebac-e0d0-445b-b34e-b379291b3556",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create and process the ARGV table",
              "fullTitle": "script-command test should create and process the ARGV table",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return ARGV[2]', '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.eql('second');\n    })",
              "err": {},
              "uuid": "d6c20e44-42dd-4883-bcf5-ca71fe0c0f1b",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create and process the KEYS table",
              "fullTitle": "script-command test should create and process the KEYS table",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return KEYS[1]', '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal('key1');\n    })",
              "err": {},
              "uuid": "1e45ce1b-d4a3-40a5-8dce-f34cab5a7edb",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a NUMBER when required",
              "fullTitle": "script-command test should return a NUMBER when required",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return 123', '2', 'key1', 'key2', 'first', 'second']);\n        chai_1.expect(response).to.equal(123);\n    })",
              "err": {},
              "uuid": "f743a944-7382-40d4-b9bd-5160e41b0914",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return NIL when there is no return value",
              "fullTitle": "script-command test should return NIL when there is no return value",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'print \"Hello World\"', '0']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "2ba8de64-b917-44ff-a82b-46d62873f84d",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a TABLE when required",
              "fullTitle": "script-command test should return a TABLE when required",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, [`eval`, `return ARGV`, '2', 'key1', 'key2', 'first', 'second', 'third']);\n        chai_1.expect(response).to.eql(['first', 'second', 'third']);\n    })",
              "err": {},
              "uuid": "34369a27-1e9f-4b5e-8f41-7af7e1b2a276",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return items in order",
              "fullTitle": "script-command test should return items in order",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return {true, \"test\", false, 10, 10.2}', '0']);\n        chai_1.expect(response).to.eql([1, 'test', null, 10, 10]);\n    })",
              "err": {},
              "uuid": "96d31902-3d0f-404d-9d7e-f1aef74b5edd",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return integer and nil for true and false, respectively",
              "fullTitle": "script-command test should return integer and nil for true and false, respectively",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'return { true, false, false}', '0']);\n        chai_1.expect(response).to.eql([1, null, null]);\n    })",
              "err": {},
              "uuid": "394ae50f-aad8-45dd-b670-e56e9cce324a",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to execute a representative BULL script",
              "fullTitle": "script-command test should be able to execute a representative BULL script",
              "timedOut": false,
              "duration": 86,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        const luaScriptPath = path.join(__dirname, '../../resources/bull.lua');\n        console.log(`trying to load ${luaScriptPath}`);\n        const luaScript = fs.readFileSync(luaScriptPath, 'utf8');\n        const args = ['6', 'bull:some_queue:wait', 'bull:some_queue:paused', 'bull:some_queue:meta-paused', 'bull:some_queue:id', 'bull:some_queue:delayed', 'bull:some_queue:priority', 'bull:some_queue:', '', 'S1234_last_first', '{\"trackid\":\"9405503699300066833313\",\"filingKey\":\"S1234_last_first\",\"name\":\"S1234_last_first\",\"message\":\"Waiting to start\"}', '{\"delay\":15,\"attempts\":1,\"timestamp\":1579142712160}', '1579142712160', '15', '1579142712175', '0', 'LPUSH', '9f187ecc-d502-4287-9f23-9978e6c2d67e'];\n        response = yield common_test_1.sendCommand(client, ['eval', luaScript, ...args]);\n        chai_1.expect(response).to.equal('1');\n        response = yield common_test_1.sendCommand(client, ['keys', '*']);\n        chai_1.expect(response.sort()).to.eql(['bull:some_queue:1', 'bull:some_queue:delayed', 'bull:some_queue:id']);\n        response = yield common_test_1.sendCommand(client, ['type', 'bull:some_queue:delayed']);\n        chai_1.expect(response).to.equal('zset');\n        response = yield common_test_1.sendCommand(client, ['type', 'bull:some_queue:id']);\n        chai_1.expect(response).to.equal('string');\n        response = yield common_test_1.sendCommand(client, ['type', 'bull:some_queue:1']);\n        chai_1.expect(response).to.equal('hash');\n        response = yield common_test_1.sendCommand(client, ['get', 'bull:some_queue:id']);\n        chai_1.expect(response).to.equal('1');\n    })",
              "err": {},
              "uuid": "2ce6ec8c-1ec6-4eb8-85dd-af481279e9de",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail when we attampt to EVAL an invalid script",
              "fullTitle": "script-command test should fail when we attampt to EVAL an invalid script",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', '-- Invalid\\r\\nscript']);\n        chai_1.expect(response).to.equal('ReplyError: ERR Parsing script');\n    })",
              "err": {},
              "uuid": "74e29a2c-e0bd-4fcf-89ad-700faa82e9e6",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to return a NULL value from a lua script",
              "fullTitle": "script-command test should be able to return a NULL value from a lua script",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', 'local val = nil return val', '0']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "f18f0d82-b968-41c5-a5ff-5a2f4cdde094",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return table values after the first NIL is encountered and return integers not floats",
              "fullTitle": "script-command test should not return table values after the first NIL is encountered and return integers not floats",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "82e36b92-0e0c-4247-8055-a2c4b5782336",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support the unpack lua command",
              "fullTitle": "script-command test should support the unpack lua command",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "f14479da-a64e-46a7-8efc-379022998759",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a table with embedded calls to redis",
              "fullTitle": "script-command test should return a table with embedded calls to redis",
              "timedOut": false,
              "duration": 25,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const key = `key-${new Date().getTime()}`;\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['hset', key, 'one', '1', 'two', '2', 'three', '3']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['hgetall', key]);\n        chai_1.expect(response).to.eql(['one', '1', 'two', '2', 'three', '3']);\n        const script = `local rcall = redis.call\\r\\nlocal jobkey = \"${key}\"\\r\\nlocal jobId = \"123\"\\r\\nreturn {\"test\", rcall(\"HGETALL\", jobkey), jobId}`;\n        response = yield common_test_1.sendCommand(client, ['eval', script, '0']);\n        console.log(`Response is `, response);\n        chai_1.expect(response).to.eql([['one', '1', 'two', '2', 'three', '3'], '123']);\n        //    return {rcall(\"HGETALL\", jobKey), jobId}\n    })",
              "err": {
                "message": "AssertionError: expected [ 'test', '6', '123' ] to deeply equal [ Array(2) ]",
                "estack": "AssertionError: expected [ 'test', '6', '123' ] to deeply equal [ Array(2) ]\n    at /home/lane/git/redis/test/resp/command/script-command.test.ts:158:25\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/lane/git/redis/test/resp/command/script-command.test.ts:5:58)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                "diff": " [\n-   \"test\"\n-   \"6\"\n+   [\n+     \"one\"\n+     \"1\"\n+     \"two\"\n+     \"2\"\n+     \"three\"\n+     \"3\"\n+   ]\n   \"123\"\n ]\n"
              },
              "uuid": "5e1e0a48-29dd-4826-a36e-ecb00d122c87",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should convert values properly",
              "fullTitle": "script-command test should convert values properly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', \"return {1,2,{3,'Hello World!'}}\", '0']);\n        chai_1.expect(response).to.eql([1, 2, [3, 'Hello World!']]);\n    })",
              "err": {},
              "uuid": "f0d7f312-aaa4-4343-8627-0a686e17c562",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return embedded tables from embedded calls",
              "fullTitle": "script-command test should return embedded tables from embedded calls",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['eval', \"return {1,2,{3,bit.bxor(5,3)}}\", '0']);\n        chai_1.expect(response).to.eql([1, 2, [3, 6]]);\n    })",
              "err": {},
              "uuid": "8ed73abb-67f8-4ae6-a58e-88145ac8b4fa",
              "parentUUID": "6611afa2-bf34-41af-86b9-15a63f3f5c3c",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [
            "c9dabafe-1e2c-4b83-a9a6-1cadf69877ae",
            "3894f806-b1db-4456-ae64-9ad7e6dcc31d",
            "298aebac-e0d0-445b-b34e-b379291b3556",
            "d6c20e44-42dd-4883-bcf5-ca71fe0c0f1b",
            "1e45ce1b-d4a3-40a5-8dce-f34cab5a7edb",
            "f743a944-7382-40d4-b9bd-5160e41b0914",
            "2ba8de64-b917-44ff-a82b-46d62873f84d",
            "34369a27-1e9f-4b5e-8f41-7af7e1b2a276",
            "96d31902-3d0f-404d-9d7e-f1aef74b5edd",
            "394ae50f-aad8-45dd-b670-e56e9cce324a",
            "2ce6ec8c-1ec6-4eb8-85dd-af481279e9de",
            "74e29a2c-e0bd-4fcf-89ad-700faa82e9e6",
            "f18f0d82-b968-41c5-a5ff-5a2f4cdde094"
          ],
          "failures": [
            "5e1e0a48-29dd-4826-a36e-ecb00d122c87"
          ],
          "pending": [
            "82e36b92-0e0c-4247-8055-a2c4b5782336",
            "f14479da-a64e-46a7-8efc-379022998759"
          ],
          "skipped": [
            "f0d7f312-aaa4-4343-8627-0a686e17c562",
            "8ed73abb-67f8-4ae6-a58e-88145ac8b4fa"
          ],
          "duration": 248,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "85b46c54-636c-4fd9-aa5d-c981c24ba997",
          "title": "publish/subscribe test",
          "fullFile": "/home/lane/git/redis/test/resp/command/server/pubsub-server.test.ts",
          "file": "/test/resp/command/server/pubsub-server.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "publish/subscribe test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "2f2f1c03-e0b1-43fe-9627-891bfa66a631",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "publish/subscribe test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "21e2a8c7-65bc-4b87-a154-93b3eb9db2da",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "publish/subscribe test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "e93251e1-37c6-4084-b07f-5e74c8b91857",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "publish/subscribe test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "4dc63026-3a0c-4f34-b98a-c3f5efa707af",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return ZERO when a message is published to a channel without subscribers",
              "fullTitle": "publish/subscribe test should return ZERO when a message is published to a channel without subscribers",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['publish', 'channel', 'Hollow world!']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "13bfc688-a90d-4356-88c1-c2d6f645dc94",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should unsubscribe from a channel that it is not subscribed to",
              "fullTitle": "publish/subscribe test should unsubscribe from a channel that it is not subscribed to",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Sound's weird, but this is observed behavior\n        response = yield common_test_1.sendCommand(client, ['unsubscribe', 'some channel']);\n        chai_1.expect(response).to.eql(['unsubscribe', 'some channel', 0]);\n    })",
              "err": {},
              "uuid": "cad05281-5ff0-4180-a05b-acb8f5767a30",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should subscribe to an arbitrary channel",
              "fullTitle": "publish/subscribe test should subscribe to an arbitrary channel",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['subscribe', 'arbitrary channel']);\n        chai_1.expect(response).to.eql(['subscribe', 'arbitrary channel', 1]);\n    })",
              "err": {},
              "uuid": "24a16ccb-0c58-4c65-9eef-df92a2597375",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should report the number of currently subscribed channels",
              "fullTitle": "publish/subscribe test should report the number of currently subscribed channels",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['subscribe', 'another channel']);\n        chai_1.expect(response).to.eql(['subscribe', 'another channel', 2]);\n        response = yield common_test_1.sendCommand(client, ['unsubscribe', 'another channel']);\n        chai_1.expect(response).to.eql(['unsubscribe', 'another channel', 1]);\n        response = yield common_test_1.sendCommand(client, ['unsubscribe', 'arbitrary channel']);\n        chai_1.expect(response).to.eql(['unsubscribe', 'arbitrary channel', 0]);\n    })",
              "err": {},
              "uuid": "2cc78dff-9f0f-44fe-82ff-ddfecdb82abf",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should receive separate subscribe responses and then notifications on subscribed channels",
              "fullTitle": "publish/subscribe test should receive separate subscribe responses and then notifications on subscribed channels",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let counter = 0;\nconst newClient1 = new net.Socket();\nnewClient1.on('data', (data) => {\n    // console.log(`Counter is ${counter}`);\n    // console.log(`\\n***Listener ${counter} received ${data.toString('utf8')}\\n`);\n    switch (counter) {\n        case 0:\n            chai_1.expect(data.toString('utf8')).to.equal(`*3\\r\\n$9\\r\\nsubscribe\\r\\n$3\\r\\none\\r\\n:1\\r\\n*3\\r\\n$9\\r\\nsubscribe\\r\\n$3\\r\\ntwo\\r\\n:2\\r\\n*3\\r\\n$9\\r\\nsubscribe\\r\\n$5\\r\\nthree\\r\\n:3\\r\\n`);\n            break;\n        case 1:\n            chai_1.expect(data.toString('utf8')).to.equal(`*3\\r\\n$7\\r\\nmessage\\r\\n$3\\r\\ntwo\\r\\n$12\\r\\nmessage to 2\\r\\n`);\n            done();\n            break;\n    }\n    counter++;\n});\ncommon_test_1.sendCommand(newClient1, ['subscribe', 'one', 'two', 'three'])\n    .then((rsp) => {\n    //        console.log(`RESPONSE ${JSON.stringify(rsp)}`);\n    // Responses are sent in separate messages\n    chai_1.expect(rsp).to.eql(['subscribe', 'one', 1]);\n    const anotherClient = new net.Socket();\n    // wait a tick so that the published message is received separately\n    setTimeout(() => {\n        common_test_1.sendCommand(anotherClient, ['publish', 'two', 'message to 2'])\n            .then((rsp) => {\n            chai_1.expect(rsp).to.equal(1);\n        });\n    }, 1500);\n});",
              "err": {},
              "uuid": "0d009058-feb0-46f2-95ad-1fc2de4f4937",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "13bfc688-a90d-4356-88c1-c2d6f645dc94",
            "cad05281-5ff0-4180-a05b-acb8f5767a30",
            "24a16ccb-0c58-4c65-9eef-df92a2597375",
            "2cc78dff-9f0f-44fe-82ff-ddfecdb82abf",
            "0d009058-feb0-46f2-95ad-1fc2de4f4937"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3a67e696-c948-4afc-a748-be3aaaa0d020",
          "title": "resp-server test",
          "fullFile": "/home/lane/git/redis/test/resp/command/server/resp-server.test.ts",
          "file": "/test/resp/command/server/resp-server.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "resp-server test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "653b792e-72a4-4a75-8ed9-dce95fcc9103",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "resp-server test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "74d7a6bf-ec3b-48ef-882d-4fb7fa2a89bb",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "9e9cb6e5-f636-4872-a5d2-332de8ef69bb",
              "title": "server start and stop tests",
              "fullFile": "/home/lane/git/redis/test/resp/command/server/resp-server.test.ts",
              "file": "/test/resp/command/server/resp-server.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should instantiate",
                  "fullTitle": "resp-server test server start and stop tests should instantiate",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            respServer = new resp_server_1.RespServer();\n            chai_1.expect(respServer.constructor.name).to.equal('RespServer');\n        })",
                  "err": {},
                  "uuid": "0e97f5c0-241e-4811-a615-9e32cb25d839",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should emit \"ready\" on startup",
                  "fullTitle": "resp-server test server start and stop tests should emit \"ready\" on startup",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
                  "err": {},
                  "uuid": "3be8efcf-c799-4163-83d9-d6ada8db7ebd",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should emit \"closed\" on shutdown",
                  "fullTitle": "resp-server test server start and stop tests should emit \"closed\" on shutdown",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer.on('closed', () => {\n    done();\n});\nrespServer.stop();",
                  "err": {},
                  "uuid": "8547a583-0ecb-4db7-a049-b655a360c33a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should accept connections on default ${env.REDIS_HOST}:${env.REDIS_PORT}",
                  "fullTitle": "resp-server test server start and stop tests should accept connections on default ${env.REDIS_HOST}:${env.REDIS_PORT}",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    const client = new net.Socket();\n    client.on('ready', (data) => {\n        respServer.on('closed', () => {\n            done();\n        });\n        respServer.stop();\n    });\n    client.on('connect', (data) => {\n    });\n    client.on('error', (err) => {\n        assert_1.fail(`Unexpected error during connection`, err.stack);\n    });\n    client.connect(Number(process.env.REDIS_PORT || 6379), process.env.REDIS_HOST || 'localhost', () => {\n    });\n});\nrespServer.start();",
                  "err": {},
                  "uuid": "6ab8851a-03d2-476a-9b6e-520c282e87d2",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "0e97f5c0-241e-4811-a615-9e32cb25d839",
                "3be8efcf-c799-4163-83d9-d6ada8db7ebd",
                "8547a583-0ecb-4db7-a049-b655a360c33a",
                "6ab8851a-03d2-476a-9b6e-520c282e87d2"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "0bddd933-0881-49cb-8dfe-0c53c7113ebb",
              "title": "other server tests",
              "fullFile": "/home/lane/git/redis/test/resp/command/server/resp-server.test.ts",
              "file": "/test/resp/command/server/resp-server.test.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "resp-server test other server tests \"before all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    client = new net.Socket();\n    done();\n});\nrespServer.start();",
                  "err": {},
                  "uuid": "55c2f02f-aa0c-4830-8dc5-e1248df17410",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook",
                  "fullTitle": "resp-server test other server tests \"after all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            yield respServer.stop();\n        })",
                  "err": {},
                  "uuid": "34075c85-6c03-4bf3-a3b6-2884e557a27b",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should respond properly to the \"ping\" command",
                  "fullTitle": "resp-server test other server tests should respond properly to the \"ping\" command",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['ping'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('PONG');\n    done();\n});",
                  "err": {},
                  "uuid": "c50a3a66-c7ce-4b93-8a5a-810f7ff81f44",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should respond properly to the \"echo\" command",
                  "fullTitle": "resp-server test other server tests should respond properly to the \"echo\" command",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['echo', 'test'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('test');\n    done();\n});",
                  "err": {},
                  "uuid": "ebfb0b32-6ad6-4fec-a630-96fcb6da01dc",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should respond with \"ERR\" when echo command has no parameters",
                  "fullTitle": "resp-server test other server tests should respond with \"ERR\" when echo command has no parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            // Note that 'ReplyError:' is supplied by the redis parser, NOT by the code under test\n            const response = yield common_test_1.sendCommand(client, ['echo']);\n            chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'echo\\' command');\n        })",
                  "err": {},
                  "uuid": "c91b51da-59ce-431e-99f1-8c1a02c9bac4",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should respond with \"ERR\" when echo command has two or more parameters",
                  "fullTitle": "resp-server test other server tests should respond with \"ERR\" when echo command has two or more parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['echo', 'one', 'two'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'echo\\' command');\n    done();\n});",
                  "err": {},
                  "uuid": "462eb65c-aa12-4bc8-8529-151e4763fa9a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should respond to the \"time\" command with an array of two strings",
                  "fullTitle": "resp-server test other server tests should respond to the \"time\" command with an array of two strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Note: we use hrtime which should already do what we need so we don't validate\ncommon_test_1.sendCommand(client, ['time'])\n    .then((response) => {\n    chai_1.expect(response).to.be.an('array');\n    chai_1.expect(response.length).to.equal(2);\n    chai_1.expect(parseInt(response[0], 10)).to.be.greaterThan(0);\n    chai_1.expect(parseInt(response[1], 10)).to.be.greaterThan(0);\n    done();\n});",
                  "err": {},
                  "uuid": "9c507ac2-c38e-443b-853b-e54c80e8fde3",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should respond with nulCommand when the command is not known",
                  "fullTitle": "resp-server test other server tests should respond with nulCommand when the command is not known",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['felix', 'the', 'cat'])\n    .then((response) => {\n    chai_1.expect(response).to.match(/^ReplyError: ERR unknown command.*/);\n    done();\n});",
                  "err": {},
                  "uuid": "ca850e65-63ac-48ea-8088-35d7cd054e7c",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should implement the info command",
                  "fullTitle": "resp-server test other server tests should implement the info command",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield common_test_1.sendCommand(client, ['info']);\n            chai_1.expect(response).to.match(/^# server\\r\\nredis_version:.*/im);\n        })",
                  "err": {},
                  "uuid": "07dea983-d9ff-4e4a-986a-ca0f1232c860",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should implement the SET command",
                  "fullTitle": "resp-server test other server tests should implement the SET command",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['SET', 'this', 'that'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    common_test_1.sendCommand(client, ['GET', 'this'])\n        .then((getresponse) => {\n        chai_1.expect(getresponse).to.equal('that');\n        done();\n    });\n});",
                  "err": {},
                  "uuid": "f70f6682-1fd4-4d17-8763-9c8991cf1be7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return nil string when GET is invoked with unknown parameters",
                  "fullTitle": "resp-server test other server tests should return nil string when GET is invoked with unknown parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['GET', ' '])\n    .then((getresponse) => {\n    chai_1.expect(getresponse).to.equal(null);\n    done();\n});",
                  "err": {},
                  "uuid": "a29c894a-8166-4848-a2c6-2d62b224ceed",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should implement the info command with a known parameter",
                  "fullTitle": "resp-server test other server tests should implement the info command with a known parameter",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "common_test_1.sendCommand(client, ['info', 'memory'])\n    .then((response) => {\n    chai_1.expect(response).to.match(/^# memory.*/mi);\n    done();\n});",
                  "err": {},
                  "uuid": "7ae0fc84-0eff-4ff6-a2f2-a7cab65b6acd",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should not respond when info is called with an unknown paramter",
                  "fullTitle": "resp-server test other server tests should not respond when info is called with an unknown paramter",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield common_test_1.sendCommand(client, ['info', 'juicy']);\n            // Don't know how to send an empty - non-null string response yet\n            chai_1.expect(String(response).trim()).to.equal('');\n        })",
                  "err": {},
                  "uuid": "36740ecf-9f32-4067-83cb-76ce549321f7",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should report the number of keys in the current database",
                  "fullTitle": "resp-server test other server tests should report the number of keys in the current database",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.be.a('number');\n            chai_1.expect(response).to.be.greaterThan(0);\n        })",
                  "err": {},
                  "uuid": "f569b9b0-d8ad-408f-adc1-e2229f8f42f6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should support the \"select\" command",
                  "fullTitle": "resp-server test other server tests should support the \"select\" command",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['select', '12']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['dbsize']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
                  "uuid": "b2167c9e-98e6-4c89-80d1-0a09691761a0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should not allow us to select an invalid database",
                  "fullTitle": "resp-server test other server tests should not allow us to select an invalid database",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['select', 'one']);\n            chai_1.expect(response).to.equal('ReplyError: ERR invalid DB index');\n            response = yield common_test_1.sendCommand(client, ['select', '-12']);\n            chai_1.expect(response).to.equal('ReplyError: ERR DB index is out of range');\n            response = yield common_test_1.sendCommand(client, ['select', '22']);\n            chai_1.expect(response).to.equal('ReplyError: ERR DB index is out of range');\n        })",
                  "err": {},
                  "uuid": "e69d9b7c-55d5-40ff-83da-a384c126fcba",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should respond properly to the \"quit\" command",
                  "fullTitle": "resp-server test other server tests should respond properly to the \"quit\" command",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Note however that the server does not disconnect us.  That is the client's job\ncommon_test_1.sendCommand(client, ['quit'])\n    .then((response) => {\n    chai_1.expect(response).to.equal('OK');\n    done();\n});",
                  "err": {},
                  "uuid": "b7fe10f2-5543-4135-a9bc-6095848b01cf",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "c50a3a66-c7ce-4b93-8a5a-810f7ff81f44",
                "ebfb0b32-6ad6-4fec-a630-96fcb6da01dc",
                "c91b51da-59ce-431e-99f1-8c1a02c9bac4",
                "462eb65c-aa12-4bc8-8529-151e4763fa9a",
                "9c507ac2-c38e-443b-853b-e54c80e8fde3",
                "ca850e65-63ac-48ea-8088-35d7cd054e7c",
                "07dea983-d9ff-4e4a-986a-ca0f1232c860",
                "f70f6682-1fd4-4d17-8763-9c8991cf1be7",
                "a29c894a-8166-4848-a2c6-2d62b224ceed",
                "7ae0fc84-0eff-4ff6-a2f2-a7cab65b6acd",
                "36740ecf-9f32-4067-83cb-76ce549321f7",
                "f569b9b0-d8ad-408f-adc1-e2229f8f42f6",
                "b2167c9e-98e6-4c89-80d1-0a09691761a0",
                "e69d9b7c-55d5-40ff-83da-a384c126fcba",
                "b7fe10f2-5543-4135-a9bc-6095848b01cf"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "18e1c779-29ac-4a0e-85d7-f74792efde9e",
          "title": "sdiff-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sdiff-command.test.ts",
          "file": "/test/resp/command/set/sdiff-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sdiff-command test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "3c117e79-5552-476f-aa5b-e40eb6738120",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sdiff-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "f73f9661-b9ed-45d8-afa7-d08ce03b5ed1",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sdiff-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "2cb7c645-25e8-4e65-b89e-d65900eba00b",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sdiff-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "0e10057a-e143-4976-affa-6343b0305dca",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return EMPTY ARRAY when the source set does not exist",
              "fullTitle": "sdiff-command test should return EMPTY ARRAY when the source set does not exist",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'ary']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "9d9b875f-153b-40e7-ac99-c2f5291fa5d6",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return all members of source set when the destination set does not exist",
              "fullTitle": "sdiff-command test should return all members of source set when the destination set does not exist",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'key1', 'empty']);\n        // REDIS does not guarantee order of the set\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd']);\n    })",
              "err": {},
              "uuid": "290b036a-b462-49a7-8e10-be0b21bcbde2",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return a proper DIFF of one or more sets",
              "fullTitle": "sdiff-command test should return a proper DIFF of one or more sets",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key3', 'a', 'c', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'key1', 'key2', 'key3']);\n        chai_1.expect(response).to.eql(['b', 'd']);\n    })",
              "err": {},
              "uuid": "d6c75ad2-02e0-4bef-89ce-943c0f75f944",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should ignore non-list keys",
              "fullTitle": "sdiff-command test should ignore non-list keys",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'list', '1']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '2', 'three']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sdiff', 'key1', 'key2', 'key3']);\n        chai_1.expect(response).to.eql(['b', 'd']);\n    })",
              "err": {},
              "uuid": "2f0f745b-f76d-4672-832f-4a43fb80c40b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "9d9b875f-153b-40e7-ac99-c2f5291fa5d6",
            "290b036a-b462-49a7-8e10-be0b21bcbde2",
            "d6c75ad2-02e0-4bef-89ce-943c0f75f944",
            "2f0f745b-f76d-4672-832f-4a43fb80c40b"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "955017dc-046b-4f66-b6f7-f758b2d7c27a",
          "title": "set commands test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/set-commands.test.ts",
          "file": "/test/resp/command/set/set-commands.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "set commands test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "82440f75-3f61-47b3-9682-fe97914a7f17",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "set commands test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "958b5b98-5c8b-436a-9d77-c3af8ea04361",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "set commands test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "c0734b62-fe38-4f2c-ad61-8949fccf2a03",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "set commands test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "70aac619-d164-4b81-bdb0-0447684eef38",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return ZERO when certain commands are applied against key that doesn't exist",
              "fullTitle": "set commands test should return ZERO when certain commands are applied against key that doesn't exist",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['scard', 'doesnotexist']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['sismember', 'doesnotexist', 'test']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "ff4f0c3d-1d71-49c1-bdea-d57d4b39d9a2",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should throw an appropriate error when a \"set\" command is applied to a non-set key",
              "fullTitle": "set commands test should throw an appropriate error when a \"set\" command is applied to a non-set key",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['set', 'wrongtype', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sismember', 'wrongtype', 'set']);\n        chai_1.expect(response).to.equal(WRONG_TYPE);\n    })",
              "err": {},
              "uuid": "6d41a024-c13c-492a-b66b-737cb02d93d5",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should create a new key when sadd is called correctly",
              "fullTitle": "set commands test should create a new key when sadd is called correctly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['sadd', 'skey', 'untest']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['exists', 'skey']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "b6757356-6ed3-4af9-8bef-7c533f09c99c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should only report the number of added keys",
              "fullTitle": "set commands test should only report the number of added keys",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['sadd', 'skey', 'untest', 'test2']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'skey']);\n        chai_1.expect(response).to.be.an('array');\n        // Keys are returned in reverse order? - No.\n        // smembers can return a list in any order\n        chai_1.expect(response.length).to.equal(2);\n        chai_1.expect(response.indexOf('test2')).to.be.greaterThan(-1);\n        chai_1.expect(response.indexOf('untest')).to.be.greaterThan(-1);\n    })",
              "err": {},
              "uuid": "015f7366-424b-432d-91e3-ee5438f7a7e1",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [
            {
              "uuid": "36602220-3e44-4406-9651-4b07ee4f4fe6",
              "title": "smove, sismember, and scard tests",
              "fullFile": "/home/lane/git/redis/test/resp/command/set/set-commands.test.ts",
              "file": "/test/resp/command/set/set-commands.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should do nothing when smove is called with a source key that does not exist",
                  "fullTitle": "set commands test smove, sismember, and scard tests should do nothing when smove is called with a source key that does not exist",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['smove', 'fromskey', 'toskey', 'nothing']);\n            chai_1.expect(response).to.equal(0);\n            response = yield common_test_1.sendCommand(client, ['exists', 'fromskey', 'toskey']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
                  "uuid": "6934bb81-da4b-4d87-ae80-642ed2696a48",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should move a key from one set to another (and create the target if necessary)",
                  "fullTitle": "set commands test smove, sismember, and scard tests should move a key from one set to another (and create the target if necessary)",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['exists', 'tonewskey']);\n            chai_1.expect(response).to.equal(0);\n            response = yield common_test_1.sendCommand(client, ['smembers', 'tonewskey']);\n            chai_1.expect(response).to.eql([]);\n            response = yield common_test_1.sendCommand(client, ['sadd', uniqueKey, 'key1', 'key2', 'key3']);\n            chai_1.expect(response).to.equal(3);\n            response = yield common_test_1.sendCommand(client, ['smembers', uniqueKey]);\n            // key order is undefined in redis\n            chai_1.expect(response.length).to.equal(3);\n            chai_1.expect(response.indexOf('key3')).to.be.greaterThan(-1);\n            chai_1.expect(response.indexOf('key2')).to.be.greaterThan(-1);\n            chai_1.expect(response.indexOf('key1')).to.be.greaterThan(-1);\n            response = yield common_test_1.sendCommand(client, ['smove', uniqueKey, 'tonewskey', 'key2']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', 'tonewskey', 'key2']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['smembers', uniqueKey]);\n            // key order, again\n            chai_1.expect(response.length).to.equal(2);\n            chai_1.expect(response.indexOf('key3')).to.be.greaterThan(-1);\n            chai_1.expect(response.indexOf('key1')).to.be.greaterThan(-1);\n            response = yield common_test_1.sendCommand(client, ['smembers', 'tonewskey']);\n            chai_1.expect(response).to.eql(['key2']);\n        })",
                  "err": {},
                  "uuid": "e91be5be-8568-4c07-8ce2-2e8a7b8e5883",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should report cardinality of a set",
                  "fullTitle": "set commands test smove, sismember, and scard tests should report cardinality of a set",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['scard', uniqueKey]);\n            chai_1.expect(response).to.equal(2);\n            response = yield common_test_1.sendCommand(client, ['scard', 'tonewskey']);\n            chai_1.expect(response).to.equal(1);\n        })",
                  "err": {},
                  "uuid": "a0d38a17-9c9b-4466-8dcf-cdde02fbee52",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should report ismember true/false",
                  "fullTitle": "set commands test smove, sismember, and scard tests should report ismember true/false",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let response = yield common_test_1.sendCommand(client, ['sismember', 'tonewskey', 'key2']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', 'tonewskey', 'key1']);\n            chai_1.expect(response).to.equal(0);\n            response = yield common_test_1.sendCommand(client, ['sismember', uniqueKey, 'key1']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', uniqueKey, 'key3']);\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', uniqueKey, 'key2']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
                  "uuid": "75a61c5f-2c09-4242-ba01-5b163822a845",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should only remove the source element if the destination element already exists",
                  "fullTitle": "set commands test smove, sismember, and scard tests should only remove the source element if the destination element already exists",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const newkey = `move-unique-${new Date().getTime()}`;\n            const newToKey = `move-new-to-key`;\n            let response = yield common_test_1.sendCommand(client, ['sadd', newkey, 'key1', 'key2', 'key3']);\n            chai_1.expect(response).to.equal(3);\n            response = yield common_test_1.sendCommand(client, ['sadd', newToKey, 'key1', 'key2', 'key3']);\n            chai_1.expect(response).to.equal(3);\n            response = yield common_test_1.sendCommand(client, ['smove', newkey, newToKey, 'key2']);\n            // Inconsistent with redis documentation?\n            chai_1.expect(response).to.equal(1);\n            response = yield common_test_1.sendCommand(client, ['sismember', newkey, 'key2']);\n            chai_1.expect(response).to.equal(0);\n        })",
                  "err": {},
                  "uuid": "188dd2a2-af7c-4341-990d-12a709324e85",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "6934bb81-da4b-4d87-ae80-642ed2696a48",
                "e91be5be-8568-4c07-8ce2-2e8a7b8e5883",
                "a0d38a17-9c9b-4466-8dcf-cdde02fbee52",
                "75a61c5f-2c09-4242-ba01-5b163822a845",
                "188dd2a2-af7c-4341-990d-12a709324e85"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "ff4f0c3d-1d71-49c1-bdea-d57d4b39d9a2",
            "6d41a024-c13c-492a-b66b-737cb02d93d5",
            "b6757356-6ed3-4af9-8bef-7c533f09c99c",
            "015f7366-424b-432d-91e3-ee5438f7a7e1"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "bd4e6af5-3f8b-46ef-a0e9-5c9cfec95214",
          "title": "sinter-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sinter-command.test.ts",
          "file": "/test/resp/command/set/sinter-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sinter-command test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "4c489077-70c1-494d-a422-15cfc94fdfeb",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sinter-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "27ea51f9-0ef6-4a34-8c24-1a600bdd6920",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sinter-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "0a033b2c-700f-4623-8527-a53b888c5296",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sinter-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "b4adeb56-473e-410e-95d1-67f23b0bd753",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return EMPTY SET when the source set does not exist",
              "fullTitle": "sinter-command test should return EMPTY SET when the source set does not exist",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sinter', 'ary']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "e39646ff-d55b-4a85-9998-f277a0353514",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return EMPTY SET when any other set does not exist",
              "fullTitle": "sinter-command test should return EMPTY SET when any other set does not exist",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'empty']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "038bf303-cfcf-47ba-bb5f-f77a7973747b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should fail when one of the keys is not a set",
              "fullTitle": "sinter-command test should fail when one of the keys is not a set",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '1', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'zkey']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n        response = yield common_test_1.sendCommand(client, ['set', 'skey1', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'skey1']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "6409a503-4e29-4556-b086-87ab17921984",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return the intersection of one or more sets",
              "fullTitle": "sinter-command test should return the intersection of one or more sets",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key3', 'a', 'c', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key1', 'key2', 'key3']);\n        chai_1.expect(response).to.eql(['c']);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'a']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sinter', 'key2', 'key1', 'key3']);\n        chai_1.expect(response.length).to.equal(2);\n        // Redis does not guarantee the order of a set\n        chai_1.expect(response.sort()).to.eql(['a', 'c']);\n    })",
              "err": {},
              "uuid": "faabec73-b218-41d3-90a2-cd16347c155a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "e39646ff-d55b-4a85-9998-f277a0353514",
            "038bf303-cfcf-47ba-bb5f-f77a7973747b",
            "6409a503-4e29-4556-b086-87ab17921984",
            "faabec73-b218-41d3-90a2-cd16347c155a"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d28d79b7-f41a-4e66-996a-9fb6b11e8fa3",
          "title": "sinterstore-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sinterstore-command.test.ts",
          "file": "/test/resp/command/set/sinterstore-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sinterstore-command test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "8d9872c4-b5c6-40bd-85e4-a5afba3e8f73",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sinterstore-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "c2335744-45c0-42d4-81fa-d64bbe88f1ad",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sinterstore-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "579e0eab-5caf-4d6e-8623-9bcffbf37e14",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sinterstore-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "b6ec8642-4946-4a50-a851-990b697256d5",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require a minimum of two parameters",
              "fullTitle": "sinterstore-command test should require a minimum of two parameters",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'ary']);\n        chai_1.expect(response).to.match(/ERR wrong number of arguments for \\'sinterstore\\' command/i);\n    })",
              "err": {},
              "uuid": "e3d91f59-bb8b-4d72-9dab-6e457779cdb5",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return ZERO when the source set does not exist",
              "fullTitle": "sinterstore-command test should return ZERO when the source set does not exist",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'dest', 'src']);\n        chai_1.expect(response).to.eql(0);\n    })",
              "err": {},
              "uuid": "9fb4163d-d578-4f73-9a42-73286b43b9ce",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should overwrite the destination and return the number of keys copied",
              "fullTitle": "sinterstore-command test should overwrite the destination and return the number of keys copied",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c', 'd', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['set', 'key3', 'some text value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'key3', 'key1', 'key2']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'key3']);\n        chai_1.expect(response).to.eql(['c']);\n    })",
              "err": {},
              "uuid": "cd5c2deb-f872-4798-80a3-52baeec535ee",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should fail when one of the keys is not a set",
              "fullTitle": "sinterstore-command test should fail when one of the keys is not a set",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '1', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'key1', 'zkey']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n        response = yield common_test_1.sendCommand(client, ['set', 'skey1', 'test']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sinterstore', 'key1', 'skey1']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "12c390da-39af-4b37-ae74-00ab1b35b7c2",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "e3d91f59-bb8b-4d72-9dab-6e457779cdb5",
            "9fb4163d-d578-4f73-9a42-73286b43b9ce",
            "cd5c2deb-f872-4798-80a3-52baeec535ee",
            "12c390da-39af-4b37-ae74-00ab1b35b7c2"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0e46e8c7-2bbc-4d9b-a8de-ca27845a9b5e",
          "title": "srem-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/srem-command.test.ts",
          "file": "/test/resp/command/set/srem-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "srem-command test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "a81c9823-070c-499e-81a5-35c09e45719c",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "srem-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "dafbb3e3-88ee-4c57-a1e7-7511a6d183cd",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "srem-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "4f859476-4596-4db7-926c-3fff47fd3ad1",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "srem-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "50674d14-da60-428e-8986-8f5198755a07",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 0 when the set does not exist",
              "fullTitle": "srem-command test should return 0 when the set does not exist",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['srem', 'set', 'member']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "0a33b8da-0d4d-4309-87bd-effab4623ae8",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return only the number of existing keys that are removed",
              "fullTitle": "srem-command test should return only the number of existing keys that are removed",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'set', 'key1', 'key2', 'key3', 'key4']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['srem', 'set', 'key2', 'not', 'here', 'today', 'key4']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'set']);\n        chai_1.expect(response.sort()).to.eql(['key1', 'key3']);\n    })",
              "err": {},
              "uuid": "7a2fc79d-ce72-45e6-bbd8-63adbed3e657",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should remove an empty set when all members are removed",
              "fullTitle": "srem-command test should remove an empty set when all members are removed",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['srem', 'set', 'key1', 'key3']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['exists', 'set']);\n        chai_1.expect(response).to.equal(0);\n    })",
              "err": {},
              "uuid": "afc85447-9ec9-405d-abae-7087c61a0f12",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "0a33b8da-0d4d-4309-87bd-effab4623ae8",
            "7a2fc79d-ce72-45e6-bbd8-63adbed3e657",
            "afc85447-9ec9-405d-abae-7087c61a0f12"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7ede9a82-6c46-4887-8eac-314490ecd6b4",
          "title": "sunion-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sunion-command.test.ts",
          "file": "/test/resp/command/set/sunion-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sunion-command test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "701405c2-a5a4-4eab-8bd4-abd495d0c5b2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sunion-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "809bdf44-50ac-4aca-b7d4-a406b78c5cc6",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sunion-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "6088f988-4d99-4b73-9c97-abb5d86bf701",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sunion-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "0cf73d12-5058-4469-89ba-5bc0e796713f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return EMPTY SET when the source set does not exist",
              "fullTitle": "sunion-command test should return EMPTY SET when the source set does not exist",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sunion', 'ary']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "0527462f-d5fd-4686-8136-0dbcd8a228eb",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return the union of a single set",
              "fullTitle": "sunion-command test should return the union of a single set",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c', 'd']);\n        chai_1.expect(response).to.equal(4);\n        response = yield common_test_1.sendCommand(client, ['sunion', 'key1']);\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd']);\n    })",
              "err": {},
              "uuid": "2be2b93e-ffd9-4220-88e5-8849aea8599c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should fail when sunion requested againt non-set keys",
              "fullTitle": "sunion-command test should fail when sunion requested againt non-set keys",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'string-key', 'value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sunion', 'key1', 'string-key']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "a96a4d8f-9f2e-4145-9bb4-d1b041531ee6",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return the union of multiple sets",
              "fullTitle": "sunion-command test should return the union of multiple sets",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key3', 'a', 'c', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sunion', 'key1', 'key2', 'key3']);\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd', 'e']);\n    })",
              "err": {},
              "uuid": "029dcdea-d605-43f6-b8a1-a8bbfba41a03",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "0527462f-d5fd-4686-8136-0dbcd8a228eb",
            "2be2b93e-ffd9-4220-88e5-8849aea8599c",
            "a96a4d8f-9f2e-4145-9bb4-d1b041531ee6",
            "029dcdea-d605-43f6-b8a1-a8bbfba41a03"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "960d0b6a-2169-4adf-a06f-ecdcdb514486",
          "title": "sunionstore-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/set/sunionstore-command.test.ts",
          "file": "/test/resp/command/set/sunionstore-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "sunionstore-command test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "885597d2-b1a9-4a9d-b3b8-c6f00437645a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "sunionstore-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "c09553fb-fea2-444e-8b55-b3f73448b28c",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sunionstore-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "818ccebc-e373-4ed2-a569-8d790df7af29",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sunionstore-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "b4066747-44ed-46fb-aa63-f8fc64484fb8",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require a minimum of two parameters",
              "fullTitle": "sunionstore-command test should require a minimum of two parameters",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sunionstore', 'ary']);\n        chai_1.expect(response).to.match(/ERR wrong number of arguments for \\'sunionstore\\' command/i);\n    })",
              "err": {},
              "uuid": "6b739ed2-1c42-4c2a-88bd-66acf10726d8",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return ZERO when the source set does not exist",
              "fullTitle": "sunionstore-command test should return ZERO when the source set does not exist",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['sunionstore', 'dest', 'src']);\n        chai_1.expect(response).to.eql(0);\n    })",
              "err": {},
              "uuid": "3f0dd5e9-bab8-44a0-8d97-1702669e0f98",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should overwrite the destination and return the number of keys copied",
              "fullTitle": "sunionstore-command test should overwrite the destination and return the number of keys copied",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key1', 'a', 'b', 'c']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['sadd', 'key2', 'c', 'd', 'e']);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['set', 'key3', 'some text value']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['sunionstore', 'key3', 'key1', 'key2']);\n        chai_1.expect(response).to.equal(5);\n        response = yield common_test_1.sendCommand(client, ['smembers', 'key3']);\n        chai_1.expect(response.sort()).to.eql(['a', 'b', 'c', 'd', 'e']);\n    })",
              "err": {},
              "uuid": "298920fa-859f-4323-be7c-cbc79df8536a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "6b739ed2-1c42-4c2a-88bd-66acf10726d8",
            "3f0dd5e9-bab8-44a0-8d97-1702669e0f98",
            "298920fa-859f-4323-be7c-cbc79df8536a"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6e56dd6f-00cc-4486-bd6d-b7c9878a30fc",
          "title": "z-command tests",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/z-commands.test.ts",
          "file": "/test/resp/command/sset/z-commands.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "z-command tests \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "3153eb63-e331-4987-9dd4-ce113630f39d",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "z-command tests \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "b2708f6c-e2cb-407c-860d-94447a59eabe",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "z-command tests \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "efaa1f2e-5627-4108-a629-803770cd4cf5",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "z-command tests \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "f47f5387-7c0b-45c4-8cfb-4ba8f5926e03",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should support basic operations",
              "fullTitle": "z-command tests should support basic operations",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueZkey = `key${new Date().getTime()}`;\n        let response = yield common_test_1.sendCommand(client, ['zrange', 'testkey', String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER)]);\n        chai_1.expect(response).to.eql([]);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'testkey', '14', '__proto__']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '8', '5a600e16']);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '9', '5a600e17']);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '10', '5a600e18']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zcard', uniqueZkey]);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql(['5a600e16', '8',\n            '5a600e17', '9',\n            '5a600e18', '10']);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '12', '5a600e17']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['zcount', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER)]);\n        chai_1.expect(response).to.equal(3);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER)]);\n        chai_1.expect(response.length).to.equal(3);\n        chai_1.expect(response).to.eql(['5a600e16', '5a600e18', '5a600e17']);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql(['5a600e16', '8', '5a600e18', '10', '5a600e17', '12']);\n        response = yield common_test_1.sendCommand(client, ['type', uniqueZkey]);\n        chai_1.expect(response).to.equal('zset');\n        response = yield common_test_1.sendCommand(client, ['zcount', uniqueZkey, '-Infinity', '10']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['zcount', uniqueZkey, 'Negative One', '10']);\n        chai_1.expect(response).to.equal('ReplyError: ERR min or max is not a float');\n        // report syntax error\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'with Scores']);\n        chai_1.expect(response).to.eql('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String('Number.MIN_SAFE_INTEGER'), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql('ReplyError: ERR value is not an integer or out of range');\n        // Remove members without removing keys\n        response = yield common_test_1.sendCommand(client, ['zrem', uniqueZkey, 'does not exist', '5a600e16', '5a600e18', '5a600e17']);\n        chai_1.expect(response).to.equal(3);\n        // Unexpectedly, redis removes the key when the last element is removed\n        response = yield common_test_1.sendCommand(client, ['exists', uniqueZkey]);\n        console.log(`searched for ${uniqueZkey}`);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "fdf4c8c5-4d7d-4e4b-a39a-5d2cdb968e84",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should increase rank",
              "fullTitle": "z-command tests should increase rank",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueZkey = `incrkey${new Date().getTime()}`;\n        let response;\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '1', 'first']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '2', 'second']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '3', 'third']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', uniqueZkey, '4', 'fourth']);\n        chai_1.expect(response).to.eql(1);\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, '2', 'first']);\n        chai_1.expect(response).to.equal('3');\n        // Validate zscore\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'first']);\n        // expect(response).to.equal('3');\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'second']);\n        // expect(response).to.equal('2');\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'third']);\n        // expect(response).to.equal('3');\n        // response = await sendCommand(client, ['zscore', uniqueZkey, 'fourth']);\n        // expect(response).to.equal('4');\n        //\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'first']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'second']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'third']);\n        chai_1.expect(response).to.equal(2);\n        response = yield common_test_1.sendCommand(client, ['zrank', uniqueZkey, 'fourth']);\n        chai_1.expect(response).to.equal(3);\n        // expect(response).to.match(/^ReplyError: ERR unknown command.*/);\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, '-20', 'fourth']);\n        chai_1.expect(response).to.equal('-16');\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, `-${Number.MIN_SAFE_INTEGER + 1}.${Number.MAX_SAFE_INTEGER}`, 'fourth']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not a valid float');\n        // Should create a key if it doesn't exist\n        response = yield common_test_1.sendCommand(client, ['zincrby', uniqueZkey, '-20', 'fifth']);\n        chai_1.expect(response).to.equal('-20');\n        response = yield common_test_1.sendCommand(client, ['zrange', uniqueZkey, String(Number.MIN_SAFE_INTEGER), String(Number.MAX_SAFE_INTEGER), 'withScores']);\n        chai_1.expect(response).to.eql(['fifth', '-20', 'fourth', '-16', 'second', '2', 'first', '3', 'third', '3']);\n    })",
              "err": {},
              "uuid": "8f598da6-f793-405f-a40b-c8d8477b7f66",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "fdf4c8c5-4d7d-4e4b-a39a-5d2cdb968e84",
            "8f598da6-f793-405f-a40b-c8d8477b7f66"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f51c9efd-5daf-4503-a9aa-d959cf760020",
          "title": "zadd command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zadd-command.test.ts",
          "file": "/test/resp/command/sset/zadd-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zadd command test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "41b1db2b-e1c7-4d52-890d-30048a40a2d8",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zadd command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "944c5581-0f5a-4ede-957f-c494dfa3937a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zadd command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "6eafbbd7-967b-45e8-8e56-3baa5b4d45a1",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zadd command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a1c88308-d761-483e-a1ff-c49fdedc16c9",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should require at least 3 parameters",
              "fullTitle": "zadd command test should require at least 3 parameters",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['zadd']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123']);\n        chai_1.expect(response).to.equal('ReplyError: ERR wrong number of arguments for \\'zadd\\' command');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "b0eca079-f1c1-4146-883a-57aea9f0f417",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should reject even parameter counts",
              "fullTitle": "zadd command test should reject even parameter counts",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something', '456']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something', '456', 'another', '765']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '123', 'something', '456', 'another', '765', 'test']);\n        // The \"something\" key should already exist so we only count 2 new fields\n        chai_1.expect(response).to.equal(2);\n    })",
              "err": {},
              "uuid": "43b3ded0-b8a5-47a9-b739-a6fd345e2225",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should reject an attempt to store non-floatish rankings",
              "fullTitle": "zadd command test should reject an attempt to store non-floatish rankings",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['zadd', 'zkey', '__data__', 'something']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not a valid float');\n    })",
              "err": {},
              "uuid": "9527b2e1-9a5f-4653-896a-28459f90aa14",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "b0eca079-f1c1-4146-883a-57aea9f0f417",
            "43b3ded0-b8a5-47a9-b739-a6fd345e2225",
            "9527b2e1-9a5f-4653-896a-28459f90aa14"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2fdf2095-e41a-4b1b-a9d6-7e925c192a35",
          "title": "zrange-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zrange-command.test.ts",
          "file": "/test/resp/command/sset/zrange-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zrange-command test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "d102666a-b826-4507-9db2-04c69731c159",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zrange-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "7bc5d29b-3412-4cc7-95d1-7aacf35b3e94",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zrange-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "89ac952b-8b1a-4ab7-a580-7a3e3cf0c296",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zrange-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "107e9124-6558-4f37-abfb-0fe86414fa89",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should reproduce the redis documentation examples",
              "fullTitle": "zrange-command test should reproduce the redis documentation examples",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'one']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '2', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '3', 'three']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '0', '-1']);\n        chai_1.expect(response).to.eql(['one', 'two', 'three']);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '2', '3']);\n        chai_1.expect(response).to.eql(['three']);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '-2', '-1']);\n        chai_1.expect(response).to.eql(['two', 'three']);\n    })",
              "err": {},
              "uuid": "c0a135b5-23c8-4b31-868f-1868f41259e6",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should also reproduce the second documented example",
              "fullTitle": "zrange-command test should also reproduce the second documented example",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '0', '1', 'withscores']);\n        chai_1.expect(response).to.eql(['one', '1', 'two', '2']);\n    })",
              "err": {},
              "uuid": "ed03d2c7-0af2-41a8-9239-79ba41658315",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "c0a135b5-23c8-4b31-868f-1868f41259e6",
            "ed03d2c7-0af2-41a8-9239-79ba41658315"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1853b033-8408-411c-a263-11187f310e5a",
          "title": "zrange-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zrangebyscore-command.test.ts",
          "file": "/test/resp/command/sset/zrangebyscore-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zrange-command test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "223feff5-9e18-4af3-a458-aa10138d68e6",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zrange-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "22953f02-f536-4374-b307-45267d481469",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zrange-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "55a133cb-08a2-46e7-bff9-52470587f063",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zrange-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "55efa554-a601-49af-9f5b-9cc3dc9a7b47",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should reproduce the redis documentation examples",
              "fullTitle": "zrange-command test should reproduce the redis documentation examples",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'myzset', '1', 'one']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'myzset', '2', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'myzset', '3', 'three']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', '-inf', '+inf']);\n        chai_1.expect(response).to.eql(['one', 'two', 'three']);\n        response = yield common_test_1.sendCommand(client, ['ZRANGEBYSCORE', 'myzset', '1', '2']);\n        chai_1.expect(response).to.eql(['one', 'two']);\n        response = yield common_test_1.sendCommand(client, ['ZRANGEBYSCORE', 'myzset', '(1', '2']);\n        chai_1.expect(response).to.eql(['two']);\n        response = yield common_test_1.sendCommand(client, ['ZRANGEBYSCORE', 'myzset', '(1', '(2']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "f97aab5d-e585-42ed-a7c2-a2799accd65e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should supply +Infinity for +inf as min parameter",
              "fullTitle": "zrange-command test should supply +Infinity for +inf as min parameter",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', '+inf', '+inf']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "3db88b73-5608-46c3-8b73-0dc7a74f9063",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should supply -Infinity for -inf as max parameter",
              "fullTitle": "zrange-command test should supply -Infinity for -inf as max parameter",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', '-inf', '-inf']);\n        chai_1.expect(response).to.eql([]);\n    })",
              "err": {},
              "uuid": "bcf5bdb7-768b-45cc-8ec2-4eb30c4e02b7",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should recognize invalid min parameter",
              "fullTitle": "zrange-command test should recognize invalid min parameter",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', 'inf', '+inf']);\n        chai_1.expect(response).to.equal('ReplyError: ERR min or max is not a float');\n    })",
              "err": {},
              "uuid": "9f1d4414-555e-4901-921f-ad3b6428f12d",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should recognize invalid max parameter",
              "fullTitle": "zrange-command test should recognize invalid max parameter",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', '-inf', 'inf']);\n        chai_1.expect(response).to.equal('ReplyError: ERR min or max is not a float');\n    })",
              "err": {},
              "uuid": "eb104c9a-fd3e-4549-aa00-3cd696d22289",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should recognize the WITHSCORES option",
              "fullTitle": "zrange-command test should recognize the WITHSCORES option",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', '-inf', '+inf', 'withScores']);\n        chai_1.expect(response).to.eql(['one', '1', 'two', '2', 'three', '3']);\n    })",
              "err": {},
              "uuid": "ca995a3e-0fe6-450d-a21f-42c0f891aa8e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should error when an invalid limit option is specified",
              "fullTitle": "zrange-command test should error when an invalid limit option is specified",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', '-inf', '+inf', 'limit']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', '-inf', '+inf', 'lizmit']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', '-inf', '+inf', 'limit', 'x']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n        response = yield common_test_1.sendCommand(client, ['zrangebyscore', 'myzset', '-inf', '+inf', 'limit', '0', 'x']);\n        chai_1.expect(response).to.equal('ReplyError: ERR value is not an integer or out of range');\n    })",
              "err": {},
              "uuid": "1e9d6c3a-1399-41df-b790-618dbfe4a20a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "f97aab5d-e585-42ed-a7c2-a2799accd65e",
            "3db88b73-5608-46c3-8b73-0dc7a74f9063",
            "bcf5bdb7-768b-45cc-8ec2-4eb30c4e02b7",
            "9f1d4414-555e-4901-921f-ad3b6428f12d",
            "eb104c9a-fd3e-4549-aa00-3cd696d22289",
            "ca995a3e-0fe6-450d-a21f-42c0f891aa8e",
            "1e9d6c3a-1399-41df-b790-618dbfe4a20a"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c0e938f3-c419-485e-8789-5cb8e7368abd",
          "title": "zrank-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zrank-command.test.ts",
          "file": "/test/resp/command/sset/zrank-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zrank-command test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "8cc6dbe3-86f4-4982-a0b7-0c8a5049913c",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zrank-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "600565eb-34d4-4ea5-901a-bc8d9cee3d83",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zrank-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "69c149f4-4a5c-4582-837e-d87d284873bc",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zrank-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "64642f32-46f1-4df4-93c0-f233096dc787",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when the ZSET does not exist",
              "fullTitle": "zrank-command test should return NIL when the ZSET does not exist",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zrank', 'zset', 'member']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "49977822-1e01-4ae1-84d2-6ca70d97369e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return NIL when the ZSET exists but the key does not",
              "fullTitle": "zrank-command test should return NIL when the ZSET exists but the key does not",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '23.3', 'member']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrank', 'zset', 'membre']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['exists', 'zset']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "89ce9747-0171-4fec-a3b7-8f094a3a1acd",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "49977822-1e01-4ae1-84d2-6ca70d97369e",
            "89ce9747-0171-4fec-a3b7-8f094a3a1acd"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "719db8ac-3131-4f64-a4ed-f56da8181682",
          "title": "zrem-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zrem-command.test.ts",
          "file": "/test/resp/command/sset/zrem-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zrem-command test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "2a68a83e-248d-4de7-b0e5-d52f43741617",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zrem-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "7c66d65a-773a-4da0-a850-a87ad94a0be4",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zrem-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "becc3a96-3f66-4ea8-a8cd-cd24257c1339",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zrem-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "bd3395dd-eb30-4920-942f-39885c2f3fe3",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should remove a key from a sorted set",
              "fullTitle": "zrem-command test should remove a key from a sorted set",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'one']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '2', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '3', 'three']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrem', 'zset', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zrange', 'zset', '0', '-1', 'withscores']);\n        chai_1.expect(response).to.eql(['one', '1', 'three', '3']);\n    })",
              "err": {},
              "uuid": "85dc0a93-f37f-4582-b354-9e773dc05e7f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "85dc0a93-f37f-4582-b354-9e773dc05e7f"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f753f9ba-ea36-42d1-9416-030ab6a33803",
          "title": "zscore-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/sset/zscore-command.test.ts",
          "file": "/test/resp/command/sset/zscore-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "zscore-command test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "0a30202b-1c10-4663-acda-5ef47dcc13d7",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "zscore-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "db90d392-60c0-48fe-8edc-bc97e8f6bf1e",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "zscore-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "1fcee3ab-f696-4cc6-839b-784749711c5e",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "zscore-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "719b473b-adbe-4e53-b0ee-ca3eb2517ef2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return the score of a zset member",
              "fullTitle": "zscore-command test should return the score of a zset member",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '10', 'one']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['zscore', 'zset', 'one']);\n        chai_1.expect(response).to.equal('10');\n    })",
              "err": {},
              "uuid": "1d03e052-fe52-4572-bfca-f756bbc2d340",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return null when the key or member does not exist",
              "fullTitle": "zscore-command test should return null when the key or member does not exist",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zscore', 'dontexist', 'two']);\n        chai_1.expect(response).to.equal(null);\n        response = yield common_test_1.sendCommand(client, ['zscore', 'zset', 'two']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "0ee07fa5-1a10-4fd2-88e5-835c4865d5e3",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "1d03e052-fe52-4572-bfca-f756bbc2d340",
            "0ee07fa5-1a10-4fd2-88e5-835c4865d5e3"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "63ce538c-c701-4a85-a73c-a97f8b5f51d1",
          "title": "getset-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/getset-command.test.ts",
          "file": "/test/resp/command/string/getset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "getset-command test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "f9417795-e16f-41a2-a5a2-ece14c141b20",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "getset-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "45aab1bf-f78c-4563-a74f-a462ac0a2cfd",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "getset-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "06025849-044e-4d47-9e99-6d6f15bc179e",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "getset-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "51ec9923-87cb-46ac-843d-ac0190bbacdd",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report NIL when the original key does not exist",
              "fullTitle": "getset-command test should report NIL when the original key does not exist",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['getset', uniqueKey, '0']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "90c0bdd2-2083-4266-bf77-2846bd75cab2",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should report the previous value of the key",
              "fullTitle": "getset-command test should report the previous value of the key",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['getset', uniqueKey, 'ninety nine']);\n        chai_1.expect(response).to.equal('0');\n        response = yield common_test_1.sendCommand(client, ['getset', uniqueKey, 'nothing']);\n        chai_1.expect(response).to.equal('ninety nine');\n    })",
              "err": {},
              "uuid": "cf4c96d8-5c77-44cc-81cb-a1d6c34e7578",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "90c0bdd2-2083-4266-bf77-2846bd75cab2",
            "cf4c96d8-5c77-44cc-81cb-a1d6c34e7578"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2be951d0-b98c-468a-98fe-e564db4f1346",
          "title": "incr/decr command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/incr-command.test.ts",
          "file": "/test/resp/command/string/incr-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "incr/decr command test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a millisecond TTL to validate incr respects TTL\n    common_test_1.sendCommand(new net.Socket(), ['set', 'ttlkey', '100', 'PX', '3'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
              "uuid": "1df17cbe-c04c-47d1-a7bb-1017f8270335",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "incr/decr command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "a8423062-9f54-4b7d-a7f1-35053a343ff2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "incr/decr command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "72ede5b7-17c4-4475-b9cb-d36b20012107",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "incr/decr command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "cdb55e9f-1410-4256-bb56-870cafd84de8",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report ONE when incr called against unknown key",
              "fullTitle": "incr/decr command test should report ONE when incr called against unknown key",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['incr', 'incr-key']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "cb736b2b-eea2-4eae-a307-bb81cbee748a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incr/decr command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['get', 'incr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('1');\n    })",
              "err": {},
              "uuid": "f8658314-c71b-4c10-894e-6eba498b526b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incr/decr command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            response = yield common_test_1.sendCommand(new net.Socket(), ['set', 'incr-key', '9007199254740990']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(new net.Socket(), ['incr', 'incr-key']);\n            chai_1.expect(response).to.equal(Number.MAX_SAFE_INTEGER);\n            response = yield common_test_1.sendCommand(new net.Socket(), ['incr', 'incr-key']);\n            chai_1.expect(response).to.equal('ReplyError: ERR increment or decrement would overflow');\n        }\n    })",
              "err": {},
              "uuid": "e8402662-dca7-4d21-be6b-6508e8d7f2c9",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should report -1 when decr called against unknown key",
              "fullTitle": "incr/decr command test should report -1 when decr called against unknown key",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['decr', 'decr-key']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(-1);\n    })",
              "err": {},
              "uuid": "63849373-d6d9-4824-b99c-47db5868b94b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incr/decr command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['get', 'decr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('-1');\n    })",
              "err": {},
              "uuid": "42b9bbe6-3c26-4f32-9fbf-025f6ab8a47f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incr/decr command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            let response = yield common_test_1.sendCommand(new net.Socket(), ['set', 'decr-key', '-9007199254740990']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(new net.Socket(), ['decr', 'decr-key']);\n            chai_1.expect(response).to.equal(Number.MIN_SAFE_INTEGER);\n            response = yield common_test_1.sendCommand(new net.Socket(), ['decr', 'decr-key']);\n            chai_1.expect(response).to.equal('ReplyError: ERR increment or decrement would overflow');\n        }\n    })",
              "err": {},
              "uuid": "53ce02a8-373e-45be-94cb-55b6b39e64bc",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should respect TTL",
              "fullTitle": "incr/decr command test should respect TTL",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(new net.Socket(), ['get', 'ttlkey']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "a917394c-413d-4784-b993-ee1e5c4c74ab",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should fail to increment a HASH value",
              "fullTitle": "incr/decr command test should fail to increment a HASH value",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `test-incr-${new Date().getTime()}`;\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['hset', uniqueKey, 'one', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(new net.Socket(), ['incr', uniqueKey]);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "53a51b62-fa45-49d9-8b7e-a87c964b765b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "cb736b2b-eea2-4eae-a307-bb81cbee748a",
            "f8658314-c71b-4c10-894e-6eba498b526b",
            "e8402662-dca7-4d21-be6b-6508e8d7f2c9",
            "63849373-d6d9-4824-b99c-47db5868b94b",
            "42b9bbe6-3c26-4f32-9fbf-025f6ab8a47f",
            "53ce02a8-373e-45be-94cb-55b6b39e64bc",
            "a917394c-413d-4784-b993-ee1e5c4c74ab",
            "53a51b62-fa45-49d9-8b7e-a87c964b765b"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2987ef77-ce51-41a7-a666-02325094216e",
          "title": "incrby/decrby command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/incrby-command.test.ts",
          "file": "/test/resp/command/string/incrby-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "incrby/decrby command test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    // Set a key with a millisecond TTL to validate incrby respects TTL\n    common_test_1.sendCommand(client, ['set', 'ttlkey', '100', 'PX', '3'])\n        .then(() => {\n        done();\n    });\n});\nrespServer.start();",
              "err": {},
              "uuid": "9c10bf1b-5bcd-4d75-8df0-fd9c0d91be67",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "incrby/decrby command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "fff7c109-bdff-4720-958f-24ed7a6a5e8b",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "incrby/decrby command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "f23b9ded-5073-44d2-a9e1-337ad1f3d43f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "incrby/decrby command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "c050e3f4-fd0b-4a86-b64a-9c5f8617136c",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should report the INCREMENT when incrby called against non-existing key",
              "fullTitle": "incrby/decrby command test should report the INCREMENT when incrby called against non-existing key",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['flushall']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['incrby', 'incr-key', '10']);\n        chai_1.expect(response).to.be.a('number');\n        // This is how redis behaves\n        chai_1.expect(response).to.equal(10);\n    })",
              "err": {},
              "uuid": "6cd88aa0-748d-4992-9f75-79b0fcfb0151",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incrby/decrby command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['get', 'incr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('10');\n    })",
              "err": {},
              "uuid": "dc3b1026-17cb-4e83-b2c5-316f040ab1e8",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incrby/decrby command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            response = yield common_test_1.sendCommand(client, ['set', 'incr-key', '9007199254740981']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['incrby', 'incr-key', '10']);\n            chai_1.expect(response).to.equal(Number.MAX_SAFE_INTEGER);\n            response = yield common_test_1.sendCommand(client, ['incrby', 'incr-key', '110']);\n            chai_1.expect(response).to.equal('ReplyError: ERR increment or decrement would overflow');\n        }\n    })",
              "err": {},
              "uuid": "00e1beb1-57ff-4530-ba39-49ef30079b9d",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should report the NEGATIVE increment when decrby called against unknown key",
              "fullTitle": "incrby/decrby command test should report the NEGATIVE increment when decrby called against unknown key",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['decrby', 'decr-key', '12']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(-12);\n    })",
              "err": {},
              "uuid": "cd063ae9-1848-490a-b7e8-c7a0fbcffd41",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should support negative increment and positive decrement",
              "fullTitle": "incrby/decrby command test should support negative increment and positive decrement",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(client, ['incrby', 'negincr', '-12']);\n        chai_1.expect(response).to.be.a('number');\n        chai_1.expect(response).to.equal(-12);\n        response = yield common_test_1.sendCommand(client, ['decrby', 'negincr', '-24']);\n        chai_1.expect(response).to.equal(12);\n    })",
              "err": {},
              "uuid": "e3fa7d5f-aa5e-40e7-838c-dc88812dc878",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should have created the key from the previous test",
              "fullTitle": "incrby/decrby command test should have created the key from the previous test",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['get', 'decr-key']);\n        chai_1.expect(response).to.be.a('string');\n        chai_1.expect(response).to.equal('-12');\n    })",
              "err": {},
              "uuid": "3f9ebc3a-48e5-4c12-a20c-34e1d34261bb",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should overflow after 53 bits",
              "fullTitle": "incrby/decrby command test should overflow after 53 bits",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        let response = yield common_test_1.sendCommand(new net.Socket(), ['info', 'server']);\n        // Only run the remaining tests if this is NOT unit-redis-ness\n        if (!/redis_version:5/gim.test(response)) {\n            response = yield common_test_1.sendCommand(client, ['set', 'decr-key', '-9007199254740981']);\n            chai_1.expect(response).to.equal('OK');\n            response = yield common_test_1.sendCommand(client, ['decrby', 'decr-key', '10']);\n            chai_1.expect(response).to.equal(Number.MIN_SAFE_INTEGER);\n            // This does not seem to be exact\n            // response = await sendCommand(client, ['decrby', 'decr-key', String(Number.MAX_SAFE_INTEGER)]);\n            // expect(response).to.equal('ReplyError: Error: increment or decrement would overflow');\n        }\n    })",
              "err": {},
              "uuid": "7901f1c3-55ab-486c-a7a9-cdf08c71db9e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should respect TTL",
              "fullTitle": "incrby/decrby command test should respect TTL",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const response = yield common_test_1.sendCommand(client, ['get', 'ttlkey']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "6ffe82ba-e2f4-4985-8d7f-caada3653894",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should fail to increment a HASH value",
              "fullTitle": "incrby/decrby command test should fail to increment a HASH value",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `test-incr-${new Date().getTime()}`;\n        let response = yield common_test_1.sendCommand(client, ['hset', uniqueKey, 'one', 'two']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['incrby', uniqueKey, '12']);\n        chai_1.expect(response).to.equal('ReplyError: WRONGTYPE Operation against a key holding the wrong kind of value');\n    })",
              "err": {},
              "uuid": "278f2e5e-bdc6-4bb3-921d-e0914cf5343f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "6cd88aa0-748d-4992-9f75-79b0fcfb0151",
            "dc3b1026-17cb-4e83-b2c5-316f040ab1e8",
            "00e1beb1-57ff-4530-ba39-49ef30079b9d",
            "cd063ae9-1848-490a-b7e8-c7a0fbcffd41",
            "e3fa7d5f-aa5e-40e7-838c-dc88812dc878",
            "3f9ebc3a-48e5-4c12-a20c-34e1d34261bb",
            "7901f1c3-55ab-486c-a7a9-cdf08c71db9e",
            "6ffe82ba-e2f4-4985-8d7f-caada3653894",
            "278f2e5e-bdc6-4bb3-921d-e0914cf5343f"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4db14978-36cd-488f-8306-d5a42157d9c5",
          "title": "mget-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/mget-command.test.ts",
          "file": "/test/resp/command/string/mget-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "mget-command test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "ce388e63-2bd9-41ca-b56b-2a26727448d3",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "mget-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "127a79ac-8412-4944-92b3-e9e354137ae9",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "mget-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "262477ce-c075-49a1-85ea-27581dc76f0f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "mget-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "cdb0d997-e9c1-44d7-8840-7823380d03a6",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return NIL when the key does not exist",
              "fullTitle": "mget-command test should return NIL when the key does not exist",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mget', 'zset', 'member']);\n        chai_1.expect(response).to.eql([null, null]);\n    })",
              "err": {},
              "uuid": "b020abd3-d27c-4969-8356-76d6099b4980",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return multiple values for string keys as requested",
              "fullTitle": "mget-command test should return multiple values for string keys as requested",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mset', 'key1', '1', 'key2', '2', 'key3', '3']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['mget', 'key2', 'key1', 'noneya', 'key3']);\n        chai_1.expect(response).to.eql(['2', '1', null, '3']);\n    })",
              "err": {},
              "uuid": "6f2e700a-d204-4a0b-83b3-511812dcaf2a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return NIL for ZSET, LIST, and HASH types as well",
              "fullTitle": "mget-command test should return NIL for ZSET, LIST, and HASH types as well",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['zadd', 'zset', '1', 'member']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['rpush', 'list', 'value']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['hset', 'hash', 'field', 'value']);\n        chai_1.expect(response).to.equal(1);\n        response = yield common_test_1.sendCommand(client, ['mget', 'key2', 'key1', 'list', 'key3', 'hash', 'zset']);\n        chai_1.expect(response).to.eql(['2', '1', null, '3', null, null]);\n    })",
              "err": {},
              "uuid": "dacd1514-6c3f-4dc4-a23c-df4c11a272a4",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "b020abd3-d27c-4969-8356-76d6099b4980",
            "6f2e700a-d204-4a0b-83b3-511812dcaf2a",
            "dacd1514-6c3f-4dc4-a23c-df4c11a272a4"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "522f4523-8617-470b-ad87-6b66c1c23605",
          "title": "mset-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/mset-command.test.ts",
          "file": "/test/resp/command/string/mset-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "mset-command test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => {\n    done();\n});\nrespServer.start();",
              "err": {},
              "uuid": "225ab032-b6c1-495e-9197-64e9e838ba39",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "mset-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "397ac994-e1fe-4353-93aa-0a89de7fb709",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "mset-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "cc47945e-9ad4-4b47-bc30-7667d866f8fb",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "mset-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "daaab7a1-4f00-45f6-ae3a-201e2a5a851f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create multiple keys at once",
              "fullTitle": "mset-command test should create multiple keys at once",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['mset', 'key1', 'Hello', 'key2', 'world']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['get', 'key1']);\n        chai_1.expect(response).to.equal('Hello');\n        response = yield common_test_1.sendCommand(client, ['get', 'key2']);\n        chai_1.expect(response).to.equal('world');\n    })",
              "err": {},
              "uuid": "3b067d64-9729-4289-b93e-b428ab4e709f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should only accept an even number of parameters",
              "fullTitle": "mset-command test should only accept an even number of parameters",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['msEt', 'wrong', 'number', 'of']);\n        chai_1.expect(response).to.match(/ReplyError: ERR wrong number of arguments for MSET/i);\n    })",
              "err": {},
              "uuid": "ed10f2f3-a100-4790-a7a7-c9d7777f9746",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "3b067d64-9729-4289-b93e-b428ab4e709f",
            "ed10f2f3-a100-4790-a7a7-c9d7777f9746"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "40abf3c3-b216-4136-bf94-9c26220afda9",
          "title": "set-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/set-command.test.ts",
          "file": "/test/resp/command/string/set-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "set-command test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "88b6a4b7-2db6-4a75-9857-316208aa47de",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "set-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "ffa1f4e1-05fe-46c7-a4c5-c8546c796fde",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "set-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "545bc6f7-f0cf-4b7c-abd8-de8b7432b25b",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "set-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "83cac458-fdd7-427f-a582-b6cb707e12aa",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should allow us to set a several second ttl",
              "fullTitle": "set-command test should allow us to set a several second ttl",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // During local testing there are 8 milliseconds from put to get\n        response = yield common_test_1.sendCommand(client, ['set', 'TTLtest', 'key', 'EX', '1']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "c1617a9a-2632-4a15-aaf5-8b9e3ac7889d",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should NOT allow SET to invoke NX after XX",
              "fullTitle": "set-command test should NOT allow SET to invoke NX after XX",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'XX', 'NX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "7c0cbf74-558c-4a2e-8c2f-c7fd75d49597",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should NOT allow SET to invoke XX after NX",
              "fullTitle": "set-command test should NOT allow SET to invoke XX after NX",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'NX', 'XX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "b2decb55-9344-4b0c-a129-02ed9dc4ebc5",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return nil when SET invoked with XX on a key that doesn't exist",
              "fullTitle": "set-command test should return nil when SET invoked with XX on a key that doesn't exist",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `TEST${new Date().getTime()}`;\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'key', 'XX']);\n        chai_1.expect(response).to.equal(null);\n    })",
              "err": {},
              "uuid": "d86890e9-dddb-4ade-84d2-f0d0955b1efc",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return OK when SET invoked with XX on a key that DOES exist",
              "fullTitle": "set-command test should return OK when SET invoked with XX on a key that DOES exist",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        const uniqueKey = `TEST${new Date().getTime()}`;\n        // set the key with NX first to validate that functionality\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'key', 'NX']);\n        chai_1.expect(response).to.equal('OK');\n        response = yield common_test_1.sendCommand(client, ['set', uniqueKey, 'new value', 'XX']);\n        chai_1.expect(response).to.equal('OK');\n        // Now validate that the key is what we said last\n        response = yield common_test_1.sendCommand(client, ['get', uniqueKey]);\n        chai_1.expect(response).to.equal('new value');\n    })",
              "err": {},
              "uuid": "c79b87d3-c2d3-44e3-bf65-7bbcd03aaa3c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should NOT allow SET to invoke EX and PX simultaneously",
              "fullTitle": "set-command test should NOT allow SET to invoke EX and PX simultaneously",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // Note: Our behavior is different from redis.  This error is 'wrong number of args'\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'EX', '100', 'PX', '100']);\n        chai_1.expect(response).to.match(/^ReplyError: ERR syntax error/);\n    })",
              "err": {},
              "uuid": "8dc38230-2040-494a-bf9b-e5e95527a40d",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should allow us to set a millisecond ttl",
              "fullTitle": "set-command test should allow us to set a millisecond ttl",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        // During local teseting there are 8 milliseconds from put to get\n        response = yield common_test_1.sendCommand(client, ['set', 'MILLItest', 'key', 'PX', '1']);\n        chai_1.expect(response).to.equal('OK');\n    })",
              "err": {},
              "uuid": "456e3d08-5cc8-4a54-a16d-4666bbb43d23",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should prove that the one second TTL has expired",
              "fullTitle": "set-command test should prove that the one second TTL has expired",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "setTimeout(() => {\n    common_test_1.sendCommand(client, ['get', 'TTLtest'])\n        .then((responseGet) => {\n        chai_1.expect(responseGet).to.equal(null);\n        done();\n    });\n}, 1000);",
              "err": {},
              "uuid": "2036cacf-f3da-4962-8307-cc8adc7cbc64",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should not accept unknown parameters",
              "fullTitle": "set-command test should not accept unknown parameters",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'Q']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "a92f9e6e-16c9-4cd0-8dd0-e0cb51537b71",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should NOT allow SET to invoke PX after EX",
              "fullTitle": "set-command test should NOT allow SET to invoke PX after EX",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'EX', '100', 'PX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "ad9c7a3c-752d-4a40-8326-b720105c170f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should NOT allow SET to invoke EX after PX",
              "fullTitle": "set-command test should NOT allow SET to invoke EX after PX",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'test', 'key', 'PX', '100', 'EX']);\n        chai_1.expect(response).to.equal('ReplyError: ERR syntax error');\n    })",
              "err": {},
              "uuid": "9dac317f-594c-41a0-96c2-615fdcc895c2",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should not allow a TTL less than 1ms",
              "fullTitle": "set-command test should not allow a TTL less than 1ms",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['set', 'MILLItest', 'key', 'PX', '0']);\n        chai_1.expect(response).to.equal('ReplyError: ERR invalid expire time in set');\n    })",
              "err": {},
              "uuid": "70dc3a16-680e-440c-9475-01b70699ddac",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should prove that the millisecond TTL has expired",
              "fullTitle": "set-command test should prove that the millisecond TTL has expired",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "setTimeout(() => {\n    common_test_1.sendCommand(client, ['get', 'MILLItest'])\n        .then((responseGet) => {\n        chai_1.expect(responseGet).to.equal(null);\n        done();\n    });\n}, 10);",
              "err": {},
              "uuid": "5d63f7f6-e3d8-44ab-a15b-dadabcd5a77f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "c1617a9a-2632-4a15-aaf5-8b9e3ac7889d",
            "7c0cbf74-558c-4a2e-8c2f-c7fd75d49597",
            "b2decb55-9344-4b0c-a129-02ed9dc4ebc5",
            "d86890e9-dddb-4ade-84d2-f0d0955b1efc",
            "c79b87d3-c2d3-44e3-bf65-7bbcd03aaa3c",
            "8dc38230-2040-494a-bf9b-e5e95527a40d",
            "456e3d08-5cc8-4a54-a16d-4666bbb43d23",
            "2036cacf-f3da-4962-8307-cc8adc7cbc64",
            "a92f9e6e-16c9-4cd0-8dd0-e0cb51537b71",
            "ad9c7a3c-752d-4a40-8326-b720105c170f",
            "9dac317f-594c-41a0-96c2-615fdcc895c2",
            "70dc3a16-680e-440c-9475-01b70699ddac",
            "5d63f7f6-e3d8-44ab-a15b-dadabcd5a77f"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e733b349-520e-4e34-82f1-3e58e8d46754",
          "title": "setnx-command test",
          "fullFile": "/home/lane/git/redis/test/resp/command/string/setnx-command.test.ts",
          "file": "/test/resp/command/string/setnx-command.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "setnx-command test \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "respServer = new resp_server_1.RespServer();\nrespServer.on('ready', () => __awaiter(void 0, void 0, void 0, function* () {\n    yield common_test_1.sendCommand(client, ['flushall']);\n    yield common_test_1.sendCommand(client, ['select', '0']);\n    yield common_test_1.sendCommand(client, ['script', 'flush']);\n    done();\n}));\nrespServer.start();",
              "err": {},
              "uuid": "286f58ae-7111-4d48-abbf-a3824a01f0ba",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "setnx-command test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "7481013a-5ee0-4c91-999b-f91bdb470798",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "setnx-command test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        yield respServer.stop();\n    })",
              "err": {},
              "uuid": "06597c9b-09ac-4c25-ab01-c569ff7feb36",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "setnx-command test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "243fbf3c-e5ba-48ea-8716-1ff0170b9692",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 1 when the key does not exist",
              "fullTitle": "setnx-command test should return 1 when the key does not exist",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['setnx', 'test', 'key']);\n        chai_1.expect(response).to.equal(1);\n    })",
              "err": {},
              "uuid": "d2d32aef-1cdc-444b-ba25-591d5e59833e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return 0 when the key already exists",
              "fullTitle": "setnx-command test should return 0 when the key already exists",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        response = yield common_test_1.sendCommand(client, ['setnx', 'test', 'other']);\n        chai_1.expect(response).to.equal(0);\n        response = yield common_test_1.sendCommand(client, ['get', 'test']);\n        chai_1.expect(response).to.equal('key');\n    })",
              "err": {},
              "uuid": "58ff8aaf-28fe-40a2-9387-f07be7adc3ff",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "d2d32aef-1cdc-444b-ba25-591d5e59833e",
            "58ff8aaf-28fe-40a2-9387-f07be7adc3ff"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "da0f0b12-140f-47cb-9cf3-53ae262b6541",
          "title": "data-type test",
          "fullFile": "/home/lane/git/redis/test/resp/data/data-type.test.ts",
          "file": "/test/resp/data/data-type.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "data-type test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();",
              "err": {},
              "uuid": "4a66f4c7-7544-4a15-990a-0d44cb9f654a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "data-type test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "e53a2d65-7f0d-46e7-840d-812b42b26224",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "data-type test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "951e8836-feb9-4938-a436-62c378d7a9eb",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should enumerate data-types",
              "fullTitle": "data-type test should enumerate data-types",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        chai_1.expect(data_type_1.DataType.NONE).to.equal('none');\n        chai_1.expect(data_type_1.DataType.STRING).to.equal('string');\n        chai_1.expect(data_type_1.DataType.LIST).to.equal('list');\n        chai_1.expect(data_type_1.DataType.SET).to.equal('set');\n        chai_1.expect(data_type_1.DataType.ZSET).to.equal('zset');\n        chai_1.expect(data_type_1.DataType.HASH).to.equal('hash');\n        chai_1.expect(Object.keys(data_type_1.DataType).length).to.equal(6);\n    })",
              "err": {},
              "uuid": "eec9625c-be27-4b88-a3b9-5e5e5c5e0ea9",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "eec9625c-be27-4b88-a3b9-5e5e5c5e0ea9"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "18aea98a-e7aa-4d6b-ba9b-1beae8242562",
          "title": "sorted-set test",
          "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
          "file": "/test/resp/data/sorted-set.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "sorted-set test \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.createSandbox();\nss = new sorted_set_1.SortedSet();\nz = new Z();",
              "err": {},
              "uuid": "d3d49f81-f7b4-4b9f-9a9f-4a105514edc1",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "sorted-set test \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n    })",
              "err": {},
              "uuid": "4a993322-60b1-41a6-9992-7ca971ce5cd2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "sorted-set test \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "0168b152-8637-4c89-b5f2-a70c061cf3b3",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should instantiate",
              "fullTitle": "sorted-set test should instantiate",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        chai_1.expect(z.constructor.name).to.equal('Z');\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(ss.constructor.name).to.equal('SortedSet');\n    })",
              "err": {},
              "uuid": "341c3480-ed34-42a7-bfae-53cdf8b56da5",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should add, get, and delete an entry",
              "fullTitle": "sorted-set test should add, get, and delete an entry",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', 1);\n        chai_1.expect(added).to.equal(null);\n        added = ss.add('test', 1);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(z.keys().length).to.equal(1);\n        chai_1.expect(ss.keys().length).to.equal(1);\n        let item = z.get('test');\n        chai_1.expect(item.constructor.name).to.equal('Number');\n        item = ss.get('test');\n        chai_1.expect(item.constructor.name).to.equal('Number');\n        z.del('test');\n        chai_1.expect(z.keys().length).to.equal(0);\n        ss.del('test');\n        chai_1.expect(ss.keys().length).to.equal(0);\n    })",
              "err": {},
              "uuid": "c2c41dd9-11c4-4d4e-af02-219e4cc8764e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should throw when attempting to add __proto__ key",
              "fullTitle": "sorted-set test should throw when attempting to add __proto__ key",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(() => {\n            z.add('__proto__', 0);\n        }).to.throw();\n        // expect(() => {\n        //   ss.add('__proto__', 0)\n        // }).to.throw();\n    })",
              "err": {},
              "uuid": "4b522de5-39de-405d-bab6-dfedf1241b4c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should not add an undefined or null score",
              "fullTitle": "sorted-set test should not add an undefined or null score",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', null);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(z.keys().length).to.equal(0);\n        added = z.add('test', undefined);\n        chai_1.expect(z.keys().length).to.equal(0);\n        // Typescript prevents adding null\n        // added = ss.add('test', null);\n        // expect(added).to.equal(null);\n        // expect(ss.keys().length).to.equal(0);\n        // added = ss.add('test', undefined);\n        // expect(z.keys().length).to.equal(0);\n    })",
              "err": {},
              "uuid": "dd2060f0-1aff-46c8-9ac6-4b5eb40e3782",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should not duplicate key/value pairs",
              "fullTitle": "sorted-set test should not duplicate key/value pairs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', 123);\n        chai_1.expect(added).to.equal(null); // This is weird\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = z.add('test', 123);\n        chai_1.expect(added).to.equal(123); // and weirder\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = ss.add('test', 123);\n        chai_1.expect(added).to.equal(null); // This is weird\n        chai_1.expect(ss.keys().length).to.equal(1);\n        added = ss.add('test', 123);\n        chai_1.expect(added).to.equal(123); // and weirder\n        chai_1.expect(ss.keys().length).to.equal(1);\n    })",
              "err": {},
              "uuid": "6c87fe53-1458-4341-b60a-b7b65d58aa7f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return the old rank when replacing a key",
              "fullTitle": "sorted-set test should return the old rank when replacing a key",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        let added = z.add('test', 123);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = z.add('test', 321);\n        chai_1.expect(added).to.equal(123);\n        chai_1.expect(z.keys().length).to.equal(1);\n        added = z.get('test');\n        chai_1.expect(added).to.equal(321);\n        added = ss.add('test', 123);\n        chai_1.expect(added).to.equal(null);\n        chai_1.expect(ss.keys().length).to.equal(1);\n        added = ss.add('test', 321);\n        chai_1.expect(added).to.equal(123);\n        chai_1.expect(ss.keys().length).to.equal(1);\n        added = ss.get('test');\n        chai_1.expect(added).to.equal(321);\n    })",
              "err": {},
              "uuid": "d89c6f07-a896-4b0d-85b9-8b60d2cba035",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return a value when adding at least 32 values (I think - it is difficult to tell)",
              "fullTitle": "sorted-set test should return a value when adding at least 32 values (I think - it is difficult to tell)",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "f5eb1516-cffb-4bfa-9397-eaffcff22fbe",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "fullTitle": "sorted-set test should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(z.add('Terminator', 8.0)).to.equal(null); // => null\n        chai_1.expect(z.add('District 9', 8.0)).to.equal(null); // => null\n        chai_1.expect(z.add('Ex Machina', 0.7)).to.equal(null); // => null\n        chai_1.expect(z.add('Ex Machina', 7.7)).to.equal(0.7); // => 0.7\n        // alias\n        chai_1.expect(z.set('The Matrix', 8.7)).to.equal(null); // => null\n        // average O(1)\n        chai_1.expect(z.has('Terminator')).to.equal(true); // => true\n        chai_1.expect(z.has('Blade Runner')).to.equal(false); // => false\n        // average O(1)\n        chai_1.expect(z.score('Ex Machina')).to.equal(7.7); // => 7.7\n        chai_1.expect(z.score('Blade Runner')).to.equal(null); // => null\n        // alias\n        chai_1.expect(z.get('The Matrix')).to.equal(8.7); // => 8.7\n        // average O(log(N))\n        chai_1.expect(z.rem('Ex Machina')).to.equal(7.7); // => 7.7\n        // average O(1)\n        chai_1.expect(z.rem('Ex Machina')).to.equal(null); // => null\n        // alias\n        chai_1.expect(z.del('Ex Machina')).to.equal(null); // => null\n        // average O(log(N)+M) where M is the number of elements between min and max\n        // This is not working as expected\n        chai_1.expect(z.rangeByScore(7, 8)).to.eql(['District 9', 'Terminator']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        chai_1.expect(z.rangeByScore(8)).to.eql(['District 9', 'Terminator', 'The Matrix']); // [8.0-∞)\n        // => ['District 9', 'Terminator', 'The Matrix']\n        chai_1.expect(z.rangeByScore(8, null, { withScores: true })).to.eql([['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]);\n        // => [['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]\n        // average O(log(N)+log(M)) where M as in rangeByScore\n        // Again - not as expected\n        chai_1.expect(z.count(7, 8)).to.equal(2); // => 3\n        // average O(log(N))\n        // Not working as expected\n        chai_1.expect(z.rank('Ex Machina')).to.equal(null); // => 0\n        // Not working as expected\n        chai_1.expect(z.rank('Terminator')).to.equal(1); // => 2\n        chai_1.expect(z.rank('Blade Runner')).to.equal(null); // => null\n        // average O(log(N)+M) where M as in range\n        // Not working as expected\n        chai_1.expect(z.range(0, 2)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Not working as expected\n        chai_1.expect(z.range(0, 2, { withScores: true })).to.eql([['District 9', 8], ['Terminator', 8], ['The Matrix', 8.7]]);\n        // => [['Ex Machina', 7.7],\n        //     ['District 9', 8],\n        //     ['Terminator', 8]]\n        chai_1.expect(z.range(-1)).to.eql(['The Matrix']); // => ['The Matrix']\n        // almost alias\n        // Not working as expected\n        chai_1.expect(z.slice(0, 3)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Set cardinality (number of elements)\n        // average O(1)\n        // Not working as expected\n        chai_1.expect(z.card()).to.equal(3); // => 4\n        // alias\n        // Not working as expected\n        chai_1.expect(z.length).to.equal(3); // => 4\n    })",
              "err": {},
              "uuid": "9e0fe102-f687-47e4-9234-2d00d8922e77",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "the rewrite should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "fullTitle": "sorted-set test the rewrite should do what the documentation says here: https://www.npmjs.com/package/redis-sorted-set",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "__awaiter(void 0, void 0, void 0, function* () {\n        z = new Z();\n        ss = new sorted_set_1.SortedSet();\n        chai_1.expect(ss.add('Terminator', 8.0)).to.equal(null); // => null\n        chai_1.expect(ss.add('District 9', 8.0)).to.equal(null); // => null\n        chai_1.expect(ss.add('Ex Machina', 0.7)).to.equal(null); // => null\n        chai_1.expect(ss.add('Ex Machina', 7.7)).to.equal(0.7); // => 0.7\n        // alias\n        chai_1.expect(ss.set('The Matrix', 8.7)).to.equal(null); // => null\n        // average O(1)\n        chai_1.expect(ss.has('Terminator')).to.equal(true); // => true\n        chai_1.expect(ss.has('Blade Runner')).to.equal(false); // => false\n        // average O(1)\n        chai_1.expect(ss.score('Ex Machina')).to.equal(7.7); // => 7.7\n        chai_1.expect(ss.score('Blade Runner')).to.equal(null); // => null\n        // alias\n        chai_1.expect(ss.get('The Matrix')).to.equal(8.7); // => 8.7\n        // average O(log(N))\n        chai_1.expect(ss.rem('Ex Machina')).to.equal(7.7); // => 7.7\n        // average O(1)\n        chai_1.expect(ss.rem('Ex Machina')).to.equal(null); // => null\n        // alias\n        chai_1.expect(ss.del('Ex Machina')).to.equal(null); // => null\n        // average O(log(N)+M) where M is the number of elements between min and max\n        // This is not working as expected\n        chai_1.expect(ss.rangeByScore(7, 8)).to.eql(['District 9', 'Terminator']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        chai_1.expect(ss.rangeByScore(8)).to.eql(['District 9', 'Terminator', 'The Matrix']); // [8.0-∞)\n        // => ['District 9', 'Terminator', 'The Matrix']\n        chai_1.expect(ss.rangeByScore(8, null, { withScores: true })).to.eql([['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]);\n        // => [['District 9', 8.0], ['Terminator', 8.0], ['The Matrix', 8.7]]\n        // average O(log(N)+log(M)) where M as in rangeByScore\n        // Again - not as expected\n        chai_1.expect(ss.count(7, 8)).to.equal(2); // => 3\n        // average O(log(N))\n        // Not working as expected\n        chai_1.expect(ss.rank('Ex Machina')).to.equal(null); // => 0\n        // Not working as expected\n        chai_1.expect(ss.rank('Terminator')).to.equal(1); // => 2\n        chai_1.expect(ss.rank('Blade Runner')).to.equal(null); // => null\n        // average O(log(N)+M) where M as in range\n        // Not working as expected\n        chai_1.expect(ss.range(0, 2)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Not working as expected\n        chai_1.expect(ss.range(0, 2, { withScores: true })).to.eql([['District 9', 8], ['Terminator', 8], ['The Matrix', 8.7]]);\n        // => [['Ex Machina', 7.7],\n        //     ['District 9', 8],\n        //     ['Terminator', 8]]\n        chai_1.expect(ss.range(-1)).to.eql(['The Matrix']); // => ['The Matrix']\n        // almost alias\n        // Not working as expected\n        chai_1.expect(ss.slice(0, 3)).to.eql(['District 9', 'Terminator', 'The Matrix']);\n        // => ['Ex Machina', 'District 9', 'Terminator']\n        // Set cardinality (number of elements)\n        // average O(1)\n        // Not working as expected\n        chai_1.expect(ss.card()).to.equal(3); // => 4\n        // alias\n        // Not working as expected\n        chai_1.expect(ss.length).to.equal(3); // => 4\n    })",
              "err": {},
              "uuid": "6d5cface-123c-4537-8eeb-7d7b6b2702a1",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [
            {
              "uuid": "0cb8dcca-2e9f-4545-88b6-c41ef328522f",
              "title": "skip map",
              "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
              "file": "/test/resp/data/sorted-set.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should support basic operations",
                  "fullTitle": "sorted-set test skip map should support basic operations",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var z = new Z();\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);\nchai_1.expect(z.range()).to.eql([]);\nchai_1.expect(z.rangeByScore()).to.eql([]);\nchai_1.expect(() => {\n    z.add('__proto__', 14);\n}).to.throw();\nz.add('5a600e16', 8);\nz.add('5a600e17', 9);\nchai_1.expect(z.add('5a600e18', 10)).to.equal(null);\nchai_1.expect(z.add('5a600e17', 12)).to.equal(9);\nchai_1.expect(z).to.have.length(3);\nchai_1.expect(z.toArray()).to.eql(['5a600e16', '5a600e18', '5a600e17']);\nchai_1.expect(z.toArray()).to.eql(z.range(0, -1));\nchai_1.expect(z.toArray()).to.eql(z.rangeByScore());\nchai_1.expect(z.has('5a600e16')).to.be.ok;\nchai_1.expect(z.has('5a600e17')).to.be.ok;\nchai_1.expect(z.has('5a600e18')).to.be.ok;\nchai_1.expect(z.has('5a600e19')).to.not.be.ok;\nchai_1.expect(z.score('5a600e16')).to.equal(8);\nchai_1.expect(z.score('5a600e17')).to.equal(12);\nchai_1.expect(z.score('5a600e18')).to.equal(10);\nchai_1.expect(z.score('5a600e19')).to.equal(null);\nchai_1.expect(z.rem('5a600e16')).to.equal(8);\nchai_1.expect(z).to.have.length(2);\nchai_1.expect(z.rem('5a600e16')).to.equal(null);\nchai_1.expect(z).to.have.length(2);\nchai_1.expect(z.has('5a600e16')).to.not.be.ok;\nchai_1.expect(z.toArray()).to.eql(['5a600e18', '5a600e17']);\nchai_1.expect(z.toArray({ withScores: true }))\n    .to.eql(z.range(0, -1, { withScores: true }));\nchai_1.expect(z.toArray()).to.eql(z.rangeByScore());\nz.add('5a600e16', 10);\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nchai_1.expect(z).to.have.length(9);\n// no change, so should be O(1)\nz.add('5a600e17', 12);\nchai_1.expect(z.rank('5a600e17')).to.equal(4);\nchai_1.expect(z).to.have.length(9);\nchai_1.expect(z.toArray()).to.eql([\n    '5a600e16',\n    '5a600e11',\n    '5a600e18',\n    '5a600e13',\n    '5a600e17',\n    '5a600e14',\n    '5a600e10',\n    '5a600e12',\n    '5a600e15',\n]);\nchai_1.expect(z.toArray()).to.eql(z.range(0, -1));\nchai_1.expect(z.toArray()).to.eql(z.rangeByScore());\nchai_1.expect(z.rangeByScore(14, 16, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n]);",
                  "err": {},
                  "uuid": "5db8d43b-5562-417f-808b-51f82440d15b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [
                {
                  "uuid": "0c931059-4ba6-416c-87cd-3db948cc2c16",
                  "title": "#add",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should implicitly delete",
                      "fullTitle": "sorted-set test skip map #add should implicitly delete",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.add('5a600e14', null)).to.equal(14);\nchai_1.expect(z.add('5a600e19', null)).to.equal(null);\nchai_1.expect(z).to.have.length(8);",
                      "err": {},
                      "uuid": "2895098e-876f-44d7-80e5-b206a563baf9",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "2895098e-876f-44d7-80e5-b206a563baf9"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "207564b3-624a-4e76-baf5-856766997fb5",
                  "title": "#empty",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should remove all elements",
                      "fullTitle": "sorted-set test skip map #empty should remove all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nz.empty();\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "a6a8d6a1-a673-49ff-ae05-6eb679123533",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "a6a8d6a1-a673-49ff-ae05-6eb679123533"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "948ce843-654b-4bdf-a026-7f6b8b992398",
                  "title": "#incrBy(increment, key)",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should increase rank",
                      "fullTitle": "sorted-set test skip map #incrBy(increment, key) should increase rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.add('second', 2);\nz.add('third', 3);\nz.add('fourth', 4);\nchai_1.expect(z.incrBy(2, 'first')).to.equal(3);\nchai_1.expect(z.rank('first')).to.equal(1);",
                      "err": {},
                      "uuid": "3658f5dc-28d2-489a-bb7e-8d32fb842862",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should create if not found",
                      "fullTitle": "sorted-set test skip map #incrBy(increment, key) should create if not found",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.incrBy(2, 'second');\nchai_1.expect(z.card()).to.equal(2);\nchai_1.expect(z.rank('second')).to.equal(1);",
                      "err": {},
                      "uuid": "867107d0-3950-4098-8f8f-8accb38c9306",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "3658f5dc-28d2-489a-bb7e-8d32fb842862",
                    "867107d0-3950-4098-8f8f-8accb38c9306"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "58a456de-4fad-42d7-9982-730fb2b90752",
                  "title": "#keys",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the keys",
                      "fullTitle": "sorted-set test skip map #keys should return the keys",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.keys()).to.eql(['5a600e16', '5a600e11', '5a600e18', '5a600e13',\n    '5a600e17', '5a600e14', '5a600e10', '5a600e12', '5a600e15']);",
                      "err": {},
                      "uuid": "12fead2b-d408-49e2-8bfe-00f6465dcd0a",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "12fead2b-d408-49e2-8bfe-00f6465dcd0a"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "98b9c17b-87b9-4b3b-8692-b6a4745136c1",
                  "title": "#rangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map #rangeByScore should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rangeByScore(14, null, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);\nchai_1.expect(z.rangeByScore(null, 10, { withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n]);\nchai_1.expect(z.rangeByScore(-Infinity, Infinity)).to.eql(z.toArray());\nchai_1.expect(z.rangeByScore(null, null)).to.eql(z.toArray());",
                      "err": {},
                      "uuid": "a042030d-04bf-46ca-a302-aa1ac9b09dba",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "a042030d-04bf-46ca-a302-aa1ac9b09dba"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "1284c2ab-b10b-473a-b151-8b4c53675c0f",
                  "title": "#count",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should count elements",
                      "fullTitle": "sorted-set test skip map #count should count elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nchai_1.expect(z.count()).to.equal(0);\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nz.add('5a600e19', 14);\nz.add('5a600f00', 30.0);\nz.add('5a600f01', 30.5);\nz.add('5a600f02', 31.0);\nz.add('5a600f03', 31.5);\nz.add('5a600f04', 32.0);\nz.add('5a600f05', 32.0);\nz.add('5a600f06', 32.0);\nchai_1.expect(z.count()).to.eql(z.rangeByScore().length);\nchai_1.expect(z.count(8)).to.eql(z.rangeByScore(8).length);\nchai_1.expect(z.count(3, 7)).to.eql(z.rangeByScore(3, 7).length);\nchai_1.expect(z.count(5, 14)).to.eql(z.rangeByScore(5, 14).length);\nchai_1.expect(z.count(5, 5)).to.eql(z.rangeByScore(5, 5).length);\nchai_1.expect(z.count(5, 0)).to.eql(z.rangeByScore(5, 0).length);\nchai_1.expect(z.count(30, 32)).to.eql(z.rangeByScore(30, 32).length);\nchai_1.expect(z.count(40)).to.eql(z.rangeByScore(40).length);",
                      "err": {},
                      "uuid": "be836537-8943-4961-8e9d-6f0956224b75",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "be836537-8943-4961-8e9d-6f0956224b75"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "647ff65a-2121-45f4-8400-bd421ad3a53e",
                  "title": "#range",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map #range should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.add('second', 2);\nz.add('third', 3);\nz.add('fourth', 4);\nvar array = ['first', 'second', 'third', 'fourth'];\nchai_1.expect(z.range()).to.eql(array);\nchai_1.expect(z.range(2)).to.eql(array.slice(2));\nchai_1.expect(z.range(8)).to.eql(array.slice(8));\nchai_1.expect(z.range(0, 2)).to.eql(array.slice(0, 3));\nchai_1.expect(z.range(-1)).to.eql(['fourth']);\nchai_1.expect(z.range(-4)).to.eql(array);\nchai_1.expect(z.range(-4, -2)).to.eql(array.slice(0, 3));\nchai_1.expect(z.range(-4, z.length + 1000))\n    .to.eql(array.slice(-4, z.length + 1000));",
                      "err": {},
                      "uuid": "c2058dcd-b0eb-40f5-8dc8-81111b905108",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should support withScores",
                      "fullTitle": "sorted-set test skip map #range should support withScores",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', 1);\nz.add('second', 2);\nchai_1.expect(z.range(0, 0, { withScores: true }))\n    .to.eql([['first', 1]]);",
                      "err": {},
                      "uuid": "7c43cf3b-1eaa-4a91-a090-5b6bf4d361c6",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "c2058dcd-b0eb-40f5-8dc8-81111b905108",
                    "7c43cf3b-1eaa-4a91-a090-5b6bf4d361c6"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "07ec07a5-a97f-4424-8e56-a82d201c572a",
                  "title": "#intersect",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should intersect two sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect two sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = new Z(), b = new Z();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nchai_1.expect(Z.intersect(a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e19', '5a600e1c', '5a600e15', '5a600e1b']);\nchai_1.expect(Z.intersect(b, a)).to.eql(['5a600e1b', '5a600e14',\n    '5a600e1c', '5a600e15', '5a600e19', '5a600e10', '5a600e17']);",
                      "err": {},
                      "uuid": "f7f6aa56-30a2-44d9-ac5e-77947b46cdbc",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should intersect three sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect three sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = new Z(), b = new Z(), c = new Z();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nchai_1.expect(Z.intersect(c, a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e1c']);\nchai_1.expect(Z.intersect(c, a, b)).to.eql(c.intersect(a, b));",
                      "err": {},
                      "uuid": "e455e688-185f-42c0-9917-c76ec925a485",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should intersect four sets",
                      "fullTitle": "sorted-set test skip map #intersect should intersect four sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var a = new Z();\nvar b = new Z();\nvar c = new Z();\nvar d = new Z();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nd.add('5a600e1c', 400);\nd.add('5a600e17', 500);\nd.add('5a600e1f', 600);\nd.add('5a600e20', 700);\nchai_1.expect(Z.intersect(d, c, a, b)).to.eql(['5a600e17', '5a600e1c']);\nchai_1.expect(Z.intersect(d, c, a, b)).to.eql(d.intersect(c, a, b));",
                      "err": {},
                      "uuid": "66597abd-629d-46d7-b31d-5b2a704f26c3",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "f7f6aa56-30a2-44d9-ac5e-77947b46cdbc",
                    "e455e688-185f-42c0-9917-c76ec925a485",
                    "66597abd-629d-46d7-b31d-5b2a704f26c3"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "6438b379-8cc5-43ab-8d0f-0b573e2ece95",
                  "title": "#rank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should get the correct rank",
                      "fullTitle": "sorted-set test skip map #rank should get the correct rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rank('5a600e12')).to.equal(7);\nchai_1.expect(z.rank('5a600e13')).to.equal(3);\nchai_1.expect(z.rank('5a600e16')).to.equal(0);\nchai_1.expect(z.rank('5a600e15')).to.equal(8);\nchai_1.expect(z.rank('not in set')).to.equal(null);",
                      "err": {},
                      "uuid": "24e04cef-6c85-4e0a-9d52-847f420de66f",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "24e04cef-6c85-4e0a-9d52-847f420de66f"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "8b059988-ab89-4f99-8fea-1ec47f222578",
                  "title": "#rem",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should delete special elements",
                      "fullTitle": "sorted-set test skip map #rem should delete special elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rem('5a600e15')).to.equal(19);\nchai_1.expect(z).to.have.length(8);\nchai_1.expect(z.rem('5a600e16')).to.equal(3);\nchai_1.expect(z).to.have.length(7);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "7fef2804-f435-431e-87d1-48e59ca7312b",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should delete many elements",
                      "fullTitle": "sorted-set test skip map #rem should delete many elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.rem('5a600e11')).to.equal(6);\nchai_1.expect(z.rem('5a600e13')).to.equal(11);\nchai_1.expect(z.rem('5a600e14')).to.equal(14);\nchai_1.expect(z.rem('5a600e15')).to.equal(19);\nchai_1.expect(z.rem('5a600e16')).to.equal(3);\nchai_1.expect(z.rem('5a600e17')).to.equal(12);\nchai_1.expect(z.length).to.equal(3);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e18', 10],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "cd3d6372-73b2-40c7-81dd-ea2507272c88",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "7fef2804-f435-431e-87d1-48e59ca7312b",
                    "cd3d6372-73b2-40c7-81dd-ea2507272c88"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "2d96c5db-c8d9-4756-9f88-9dbd076cda18",
                  "title": "#remRangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a range of elements",
                      "fullTitle": "sorted-set test skip map #remRangeByScore should strip out a range of elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByScore(4, 14)).to.equal(5);\nchai_1.expect(z).to.have.length(4);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "aa6a3edf-42d9-46b2-9587-e88bfdf7079b",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should strip out all the elements",
                      "fullTitle": "sorted-set test skip map #remRangeByScore should strip out all the elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByScore(3, 19)).to.equal(9);\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "fdca04b9-23af-4a1f-b7c7-71a07d931468",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "aa6a3edf-42d9-46b2-9587-e88bfdf7079b",
                    "fdca04b9-23af-4a1f-b7c7-71a07d931468"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "a425ee59-c863-435f-91c7-46bcd9ea57c2",
                  "title": "#remRangeByRank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a slice of elements",
                      "fullTitle": "sorted-set test skip map #remRangeByRank should strip out a slice of elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByRank(1, 6)).to.equal(5);\nchai_1.expect(z).to.have.length(4);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "47df7b68-123c-4ea5-922d-3f5f86f90056",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should strip out all elements",
                      "fullTitle": "sorted-set test skip map #remRangeByRank should strip out all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(z.remRangeByRank(0, 9)).to.equal(9);\nchai_1.expect(z).to.have.length(0);\nchai_1.expect(z.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "b43cdb4d-42de-4b7d-859f-3a7489ce664d",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "47df7b68-123c-4ea5-922d-3f5f86f90056",
                    "b43cdb4d-42de-4b7d-859f-3a7489ce664d"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "11854830-ad05-4f46-b3ec-7cd6dd9269e9",
                  "title": "#values",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the values",
                      "fullTitle": "sorted-set test skip map #values should return the values",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z();\nz.add('first', -1);\nz.add('third', 5);\nz.add('second', 3);\nchai_1.expect(z.values()).to.eql([-1, 3, 5]);",
                      "err": {},
                      "uuid": "6ca9ee32-48dc-432e-b091-278d7a5038fa",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "6ca9ee32-48dc-432e-b091-278d7a5038fa"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "a3debe13-220f-4475-865d-8132322d7cdb",
                  "title": "unique",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should ensure values are unique",
                      "fullTitle": "sorted-set test skip map unique should ensure values are unique",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z({ unique: true });\nassert.equal(z.keys().length, 0, 'Expected an empty SortedSet');\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(() => {\n    z.add('5a600e19', 11);\n}).to.throw(/unique/);\n// quick exit test\nchai_1.expect(() => {\n    z.add('5a600dff', z._head.next[z._level - 1].next.value);\n}).to.throw(/unique/);\n// this test ensures the key < key check doesn't come into play\nchai_1.expect(() => {\n    z.add('5a600dff', 11);\n}).to.throw(/unique/);\nchai_1.expect(() => {\n    z.add('5a600e18', 10);\n}).to.not.throw();\nchai_1.expect(z).to.have.length(9);\nchai_1.expect(z.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "24be7832-7424-42e0-bea8-b7cb6bb9dcc2",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should revert keys if constraint broken during update",
                      "fullTitle": "sorted-set test skip map unique should revert keys if constraint broken during update",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "var z = new Z({ unique: true });\nz.add('5a600e10', 16);\nz.add('5a600e11', 6);\nz.add('5a600e12', 17);\nz.add('5a600e13', 11);\nz.add('5a600e14', 14);\nz.add('5a600e15', 19);\nz.add('5a600e16', 3);\nz.add('5a600e17', 12);\nz.add('5a600e18', 10);\nchai_1.expect(() => {\n    z.add('5a600e13', 14);\n}).to.throw(/unique/);\nchai_1.expect(z).to.have.length(9);\nchai_1.expect(z.score('5a600e13')).to.equal(11);",
                      "err": {},
                      "uuid": "bdc617e3-3ce5-4cab-ab11-2a6765e31277",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "24be7832-7424-42e0-bea8-b7cb6bb9dcc2",
                    "bdc617e3-3ce5-4cab-ab11-2a6765e31277"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "5db8d43b-5562-417f-808b-51f82440d15b"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "f888d955-fe37-4bc6-bc8b-2a0d635e1d1e",
              "title": "skip map rewrite",
              "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
              "file": "/test/resp/data/sorted-set.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should support basic operations",
                  "fullTitle": "sorted-set test skip map rewrite should support basic operations",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let ss = new sorted_set_1.SortedSet();\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);\nchai_1.expect(ss.range()).to.eql([]);\nchai_1.expect(ss.rangeByScore()).to.eql([]);\n// expect(() => {\n//   ss.add('__proto__', 14);\n// }).to.throw();\nss.add('5a600e16', 8);\nss.add('5a600e17', 9);\nchai_1.expect(ss.add('5a600e18', 10)).to.equal(null);\nchai_1.expect(ss.add('5a600e17', 12)).to.equal(9);\nchai_1.expect(ss).to.have.length(3);\nchai_1.expect(ss.toArray()).to.eql(['5a600e16', '5a600e18', '5a600e17']);\nchai_1.expect(ss.toArray()).to.eql(ss.range(0, -1));\nchai_1.expect(ss.toArray()).to.eql(ss.rangeByScore());\nchai_1.expect(ss.has('5a600e16')).to.be.ok;\nchai_1.expect(ss.has('5a600e17')).to.be.ok;\nchai_1.expect(ss.has('5a600e18')).to.be.ok;\nchai_1.expect(ss.has('5a600e19')).to.not.be.ok;\nchai_1.expect(ss.score('5a600e16')).to.equal(8);\nchai_1.expect(ss.score('5a600e17')).to.equal(12);\nchai_1.expect(ss.score('5a600e18')).to.equal(10);\nchai_1.expect(ss.score('5a600e19')).to.equal(null);\nchai_1.expect(ss.rem('5a600e16')).to.equal(8);\nchai_1.expect(ss).to.have.length(2);\nchai_1.expect(ss.rem('5a600e16')).to.equal(null);\nchai_1.expect(ss).to.have.length(2);\nchai_1.expect(ss.has('5a600e16')).to.not.be.ok;\nchai_1.expect(ss.toArray()).to.eql(['5a600e18', '5a600e17']);\nchai_1.expect(ss.toArray({ withScores: true }))\n    .to.eql(ss.range(0, -1, { withScores: true }));\nchai_1.expect(ss.toArray()).to.eql(ss.rangeByScore());\nss.add('5a600e16', 10);\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nchai_1.expect(ss).to.have.length(9);\n// no change, so should be O(1)\nss.add('5a600e17', 12);\nchai_1.expect(ss.rank('5a600e17')).to.equal(4);\nchai_1.expect(ss).to.have.length(9);\nchai_1.expect(ss.toArray()).to.eql([\n    '5a600e16',\n    '5a600e11',\n    '5a600e18',\n    '5a600e13',\n    '5a600e17',\n    '5a600e14',\n    '5a600e10',\n    '5a600e12',\n    '5a600e15',\n]);\nchai_1.expect(ss.toArray()).to.eql(ss.range(0, -1));\nchai_1.expect(ss.toArray()).to.eql(ss.rangeByScore());\nchai_1.expect(ss.rangeByScore(14, 16, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n]);",
                  "err": {},
                  "uuid": "2840457f-f45e-4301-9157-c3f8966756bf",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [
                {
                  "uuid": "ece6dc03-bf79-4523-81ed-aaeb916b3bbd",
                  "title": "#add",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should implicitly delete",
                      "fullTitle": "sorted-set test skip map rewrite #add should implicitly delete",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.add('5a600e14', null)).to.equal(14);\nchai_1.expect(ss.add('5a600e19', null)).to.equal(null);\nchai_1.expect(ss).to.have.length(8);",
                      "err": {},
                      "uuid": "03cf025c-ef17-4c06-85f3-7818dd1dfe0a",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "03cf025c-ef17-4c06-85f3-7818dd1dfe0a"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "f75c71bf-5b18-4f4d-a338-a8ffb67ec0f9",
                  "title": "#empty",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should remove all elements",
                      "fullTitle": "sorted-set test skip map rewrite #empty should remove all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nss.empty();\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "7d823130-c17c-4699-8f63-658f12194842",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "7d823130-c17c-4699-8f63-658f12194842"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "f84b4f71-c29a-4cc6-99ac-9989c475a44b",
                  "title": "#incrBy(increment, key)",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should increase rank",
                      "fullTitle": "sorted-set test skip map rewrite #incrBy(increment, key) should increase rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.add('second', 2);\nss.add('third', 3);\nss.add('fourth', 4);\nchai_1.expect(ss.incrBy(2, 'first')).to.equal(3);\nchai_1.expect(ss.rank('first')).to.equal(1);",
                      "err": {},
                      "uuid": "fa59e5ff-fc31-4892-bd79-8d004d0ca022",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should create if not found",
                      "fullTitle": "sorted-set test skip map rewrite #incrBy(increment, key) should create if not found",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.incrBy(2, 'second');\nchai_1.expect(ss.card()).to.equal(2);\nchai_1.expect(ss.rank('second')).to.equal(1);",
                      "err": {},
                      "uuid": "366b98d7-0b90-4c17-931f-db6b2981c422",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "fa59e5ff-fc31-4892-bd79-8d004d0ca022",
                    "366b98d7-0b90-4c17-931f-db6b2981c422"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "24cdd2a9-8b52-469c-9e85-7970dc1918c5",
                  "title": "#keys",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the keys",
                      "fullTitle": "sorted-set test skip map rewrite #keys should return the keys",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.keys()).to.eql(['5a600e16', '5a600e11', '5a600e18', '5a600e13',\n    '5a600e17', '5a600e14', '5a600e10', '5a600e12', '5a600e15']);",
                      "err": {},
                      "uuid": "e1eebee1-fca0-47d3-91c4-9e8bccb809f6",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "e1eebee1-fca0-47d3-91c4-9e8bccb809f6"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "784d3329-8c09-481e-87f9-c4ad07b5366e",
                  "title": "#rangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map rewrite #rangeByScore should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rangeByScore(14, null, { withScores: true })).to.eql([\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);\nchai_1.expect(ss.rangeByScore(null, 10, { withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n]);\nchai_1.expect(ss.rangeByScore(-Infinity, Infinity)).to.eql(ss.toArray());\nchai_1.expect(ss.rangeByScore(null, null)).to.eql(ss.toArray());",
                      "err": {},
                      "uuid": "ef3d52fa-1fd5-485f-bc92-1a53d5a7545d",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "ef3d52fa-1fd5-485f-bc92-1a53d5a7545d"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "4834bac3-42de-44fa-86f6-dc835df51a19",
                  "title": "#count",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should count elements",
                      "fullTitle": "sorted-set test skip map rewrite #count should count elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nchai_1.expect(ss.count()).to.equal(0);\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nss.add('5a600e19', 14);\nss.add('5a600f00', 30.0);\nss.add('5a600f01', 30.5);\nss.add('5a600f02', 31.0);\nss.add('5a600f03', 31.5);\nss.add('5a600f04', 32.0);\nss.add('5a600f05', 32.0);\nss.add('5a600f06', 32.0);\nchai_1.expect(ss.count()).to.eql(ss.rangeByScore().length);\nchai_1.expect(ss.count(8)).to.eql(ss.rangeByScore(8).length);\nchai_1.expect(ss.count(3, 7)).to.eql(ss.rangeByScore(3, 7).length);\nchai_1.expect(ss.count(5, 14)).to.eql(ss.rangeByScore(5, 14).length);\nchai_1.expect(ss.count(5, 5)).to.eql(ss.rangeByScore(5, 5).length);\nchai_1.expect(ss.count(5, 0)).to.eql(ss.rangeByScore(5, 0).length);\nchai_1.expect(ss.count(30, 32)).to.eql(ss.rangeByScore(30, 32).length);\nchai_1.expect(ss.count(40)).to.eql(ss.rangeByScore(40).length);",
                      "err": {},
                      "uuid": "84e437e0-9361-4aa9-9df6-cf82bcf2bb46",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "84e437e0-9361-4aa9-9df6-cf82bcf2bb46"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "3d53c5bd-b9e2-4b84-9eb6-957cf87b1815",
                  "title": "#range",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should support special ranges",
                      "fullTitle": "sorted-set test skip map rewrite #range should support special ranges",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.add('second', 2);\nss.add('third', 3);\nss.add('fourth', 4);\nlet array = ['first', 'second', 'third', 'fourth'];\nchai_1.expect(ss.range()).to.eql(array);\nchai_1.expect(ss.range(2)).to.eql(array.slice(2));\nchai_1.expect(ss.range(8)).to.eql(array.slice(8));\nchai_1.expect(ss.range(0, 2)).to.eql(array.slice(0, 3));\nchai_1.expect(ss.range(-1)).to.eql(['fourth']);\nchai_1.expect(ss.range(-4)).to.eql(array);\nchai_1.expect(ss.range(-4, -2)).to.eql(array.slice(0, 3));\nchai_1.expect(ss.range(-4, ss.length + 1000))\n    .to.eql(array.slice(-4, ss.length + 1000));",
                      "err": {},
                      "uuid": "cb60e2fb-3c9f-49cb-b390-06e60beb907e",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should support withScores",
                      "fullTitle": "sorted-set test skip map rewrite #range should support withScores",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', 1);\nss.add('second', 2);\nchai_1.expect(ss.range(0, 0, { withScores: true }))\n    .to.eql([['first', 1]]);",
                      "err": {},
                      "uuid": "f4649f59-afd7-44d3-8e9a-044605d1f99e",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "cb60e2fb-3c9f-49cb-b390-06e60beb907e",
                    "f4649f59-afd7-44d3-8e9a-044605d1f99e"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "c44bdc2b-7d65-4161-99c7-5720ab840352",
                  "title": "#intersect",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should intersect two sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect two sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nchai_1.expect(sorted_set_1.SortedSet.intersect(a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e19', '5a600e1c', '5a600e15', '5a600e1b']);\nchai_1.expect(sorted_set_1.SortedSet.intersect(b, a)).to.eql(['5a600e1b', '5a600e14',\n    '5a600e1c', '5a600e15', '5a600e19', '5a600e10', '5a600e17']);",
                      "err": {},
                      "uuid": "435389c5-a050-4f1d-bae0-7006b17bb868",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should intersect three sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect three sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let a = new sorted_set_1.SortedSet(), b = new sorted_set_1.SortedSet(), c = new sorted_set_1.SortedSet();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nchai_1.expect(sorted_set_1.SortedSet.intersect(c, a, b)).to.eql(['5a600e10', '5a600e14',\n    '5a600e17', '5a600e1c']);\n// expect(SortedSet.intersect(c, a, b)).to.eql(c.intersect(a, b));",
                      "err": {},
                      "uuid": "eb94c124-8e8a-4b26-ad5e-dc7782da7082",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should intersect four sets",
                      "fullTitle": "sorted-set test skip map rewrite #intersect should intersect four sets",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let a = new sorted_set_1.SortedSet();\nlet b = new sorted_set_1.SortedSet();\nlet c = new sorted_set_1.SortedSet();\nlet d = new sorted_set_1.SortedSet();\na.add('5a600e10', 16);\na.add('5a600e12', 10);\na.add('5a600e14', 9);\na.add('5a600e15', 14);\na.add('5a600e17', 20);\na.add('5a600e18', 13);\na.add('5a600e19', 15);\na.add('5a600e1a', 19);\na.add('5a600e1b', 7);\na.add('5a600e1c', 13);\na.add('5a600e1e', 10);\nb.add('5a600e10', 0);\nb.add('5a600e11', 15);\nb.add('5a600e13', 5);\nb.add('5a600e14', 3);\nb.add('5a600e15', 14);\nb.add('5a600e17', 12);\nb.add('5a600e19', 12);\nb.add('5a600e1b', 16);\nb.add('5a600e1c', 12);\nb.add('5a600e1d', 17);\nb.add('5a600e1f', 3);\nc.add('5a600e10', 7);\nc.add('5a600e12', 20);\nc.add('5a600e13', 9);\nc.add('5a600e14', 19);\nc.add('5a600e16', 19);\nc.add('5a600e17', 1);\nc.add('5a600e18', 18);\nc.add('5a600e1a', 6);\nc.add('5a600e1c', 15);\nc.add('5a600e1f', 4);\nd.add('5a600e1c', 400);\nd.add('5a600e17', 500);\nd.add('5a600e1f', 600);\nd.add('5a600e20', 700);\nchai_1.expect(sorted_set_1.SortedSet.intersect(d, c, a, b)).to.eql(['5a600e17', '5a600e1c']);\n// expect(SortedSet.intersect(d, c, a, b)).to.eql(d.intersect(c, a, b));",
                      "err": {},
                      "uuid": "2d460f50-2fb4-49d9-a778-c9e2b0f106e8",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "435389c5-a050-4f1d-bae0-7006b17bb868",
                    "eb94c124-8e8a-4b26-ad5e-dc7782da7082",
                    "2d460f50-2fb4-49d9-a778-c9e2b0f106e8"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "596470cb-9f2b-49cb-b007-207bbcfc614e",
                  "title": "#rank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should get the correct rank",
                      "fullTitle": "sorted-set test skip map rewrite #rank should get the correct rank",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rank('5a600e12')).to.equal(7);\nchai_1.expect(ss.rank('5a600e13')).to.equal(3);\nchai_1.expect(ss.rank('5a600e16')).to.equal(0);\nchai_1.expect(ss.rank('5a600e15')).to.equal(8);\nchai_1.expect(ss.rank('not in set')).to.equal(null);",
                      "err": {},
                      "uuid": "128a5649-cdba-42e4-afa2-7639d27d9e22",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "128a5649-cdba-42e4-afa2-7639d27d9e22"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "a36cfdc6-200c-4b85-893a-b94f342c7cb0",
                  "title": "#rem",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should delete special elements",
                      "fullTitle": "sorted-set test skip map rewrite #rem should delete special elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rem('5a600e15')).to.equal(19);\nchai_1.expect(ss).to.have.length(8);\nchai_1.expect(ss.rem('5a600e16')).to.equal(3);\nchai_1.expect(ss).to.have.length(7);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "c67129cb-2e6b-4146-8c21-a509abdb247e",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should delete many elements",
                      "fullTitle": "sorted-set test skip map rewrite #rem should delete many elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.rem('5a600e11')).to.equal(6);\nchai_1.expect(ss.rem('5a600e13')).to.equal(11);\nchai_1.expect(ss.rem('5a600e14')).to.equal(14);\nchai_1.expect(ss.rem('5a600e15')).to.equal(19);\nchai_1.expect(ss.rem('5a600e16')).to.equal(3);\nchai_1.expect(ss.rem('5a600e17')).to.equal(12);\nchai_1.expect(ss.length).to.equal(3);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e18', 10],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n]);",
                      "err": {},
                      "uuid": "23d8ee65-6fb1-4efd-b0ca-b0f34ee63554",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "c67129cb-2e6b-4146-8c21-a509abdb247e",
                    "23d8ee65-6fb1-4efd-b0ca-b0f34ee63554"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "1242042c-a3b6-471e-b80b-4e3100478a5f",
                  "title": "#remRangeByScore",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a range of elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByScore should strip out a range of elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByScore(4, 14)).to.equal(5);\nchai_1.expect(ss).to.have.length(4);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "3ca01aa6-0a76-4151-a8ce-5e07a682104a",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should strip out all the elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByScore should strip out all the elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByScore(3, 19)).to.equal(9);\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "6dd22dfe-932a-448c-8c48-b85fce1d1992",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "3ca01aa6-0a76-4151-a8ce-5e07a682104a",
                    "6dd22dfe-932a-448c-8c48-b85fce1d1992"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "a4c85012-3ecd-4749-bb08-f198f0f2dfa4",
                  "title": "#remRangeByRank",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should strip out a slice of elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByRank should strip out a slice of elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByRank(1, 6)).to.equal(5);\nchai_1.expect(ss).to.have.length(4);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "e0ab9fd2-8dd7-4b0c-a136-69ef3c94e67c",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should strip out all elements",
                      "fullTitle": "sorted-set test skip map rewrite #remRangeByRank should strip out all elements",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(ss.remRangeByRank(0, 9)).to.equal(9);\nchai_1.expect(ss).to.have.length(0);\nchai_1.expect(ss.toArray()).to.eql([]);",
                      "err": {},
                      "uuid": "a4bc04bc-a1fd-4e1e-81a1-68df93b58dec",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "e0ab9fd2-8dd7-4b0c-a136-69ef3c94e67c",
                    "a4bc04bc-a1fd-4e1e-81a1-68df93b58dec"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "17ce7770-90ed-417b-a1f7-e6b3c9b2a741",
                  "title": "#values",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should return the values",
                      "fullTitle": "sorted-set test skip map rewrite #values should return the values",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet();\nss.add('first', -1);\nss.add('third', 5);\nss.add('second', 3);\nchai_1.expect(ss.values()).to.eql([-1, 3, 5]);",
                      "err": {},
                      "uuid": "fcd0966b-923a-4129-b258-2754e37a3c71",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "fcd0966b-923a-4129-b258-2754e37a3c71"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                },
                {
                  "uuid": "f0e91149-78ae-4b81-822d-d1bd16f1b486",
                  "title": "unique rewrite",
                  "fullFile": "/home/lane/git/redis/test/resp/data/sorted-set.test.ts",
                  "file": "/test/resp/data/sorted-set.test.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should ensure values are unique",
                      "fullTitle": "sorted-set test skip map rewrite unique rewrite should ensure values are unique",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const options = { unique: true };\nlet ss = new sorted_set_1.SortedSet(options);\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(() => {\n    ss.add('5a600e19', 11);\n}).to.throw(/unique/);\n// quick exit test\nchai_1.expect(() => {\n    ss.add('5a600dff', ss._head.next[ss._level - 1].next.value);\n}).to.throw(/unique/);\n// this test ensures the key < key check doesn't come into play\nchai_1.expect(() => {\n    ss.add('5a600dff', 11);\n}).to.throw(/unique/);\nchai_1.expect(() => {\n    ss.add('5a600e18', 10);\n}).to.not.throw();\nchai_1.expect(ss).to.have.length(9);\nchai_1.expect(ss.toArray({ withScores: true })).to.eql([\n    ['5a600e16', 3],\n    ['5a600e11', 6],\n    ['5a600e18', 10],\n    ['5a600e13', 11],\n    ['5a600e17', 12],\n    ['5a600e14', 14],\n    ['5a600e10', 16],\n    ['5a600e12', 17],\n    ['5a600e15', 19],\n]);",
                      "err": {},
                      "uuid": "62456bbd-51bc-4142-9576-522f23532123",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    },
                    {
                      "title": "should revert keys if constraint broken during update",
                      "fullTitle": "sorted-set test skip map rewrite unique rewrite should revert keys if constraint broken during update",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let ss = new sorted_set_1.SortedSet({ unique: true });\nss.add('5a600e10', 16);\nss.add('5a600e11', 6);\nss.add('5a600e12', 17);\nss.add('5a600e13', 11);\nss.add('5a600e14', 14);\nss.add('5a600e15', 19);\nss.add('5a600e16', 3);\nss.add('5a600e17', 12);\nss.add('5a600e18', 10);\nchai_1.expect(() => {\n    ss.add('5a600e13', 14);\n}).to.throw(/unique/);\nchai_1.expect(ss).to.have.length(9);\nchai_1.expect(ss.score('5a600e13')).to.equal(11);",
                      "err": {},
                      "uuid": "ad97181d-fa5a-4ea8-a933-82e94aff362e",
                      "parentUUID": null,
                      "isHook": false,
                      "skipped": true
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [
                    "62456bbd-51bc-4142-9576-522f23532123",
                    "ad97181d-fa5a-4ea8-a933-82e94aff362e"
                  ],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 5000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "2840457f-f45e-4301-9157-c3f8966756bf"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [
            "f5eb1516-cffb-4bfa-9397-eaffcff22fbe"
          ],
          "skipped": [
            "341c3480-ed34-42a7-bfae-53cdf8b56da5",
            "c2c41dd9-11c4-4d4e-af02-219e4cc8764e",
            "4b522de5-39de-405d-bab6-dfedf1241b4c",
            "dd2060f0-1aff-46c8-9ac6-4b5eb40e3782",
            "6c87fe53-1458-4341-b60a-b7b65d58aa7f",
            "d89c6f07-a896-4b0d-85b9-8b60d2cba035",
            "9e0fe102-f687-47e4-9234-2d00d8922e77",
            "6d5cface-123c-4537-8eeb-7d7b6b2702a1"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "reportDir": "docs/mochawesome"
      },
      "version": "4.1.0"
    }
  }
}